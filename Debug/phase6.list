
phase6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000179f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003810  08017c90  08017c90  00027c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801b4a0  0801b4a0  0002b4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801b4a4  0801b4a4  0002b4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000098  24000000  0801b4a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00007f30  24000098  0801b540  00030098  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24007fc8  0801b540  00037fc8  2**0
                  ALLOC
  8 .lwip_sec     000419d0  30000000  0801b540  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 10 .debug_info   00058025  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009193  00000000  00000000  000880eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000024f0  00000000  00000000  00091280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002370  00000000  00000000  00093770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00013665  00000000  00000000  00095ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000389b7  00000000  00000000  000a9145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018029b  00000000  00000000  000e1afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00261d97  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a128  00000000  00000000  00261dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017c78 	.word	0x08017c78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08017c78 	.word	0x08017c78

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000386:	f000 f9f3 	bl	8000770 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800038a:	4b3b      	ldr	r3, [pc, #236]	; (8000478 <main+0xf8>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d11b      	bne.n	80003ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a2:	4b35      	ldr	r3, [pc, #212]	; (8000478 <main+0xf8>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b6:	4b30      	ldr	r3, [pc, #192]	; (8000478 <main+0xf8>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a2f      	ldr	r2, [pc, #188]	; (8000478 <main+0xf8>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	e000      	b.n	80003d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d0:	4b29      	ldr	r3, [pc, #164]	; (8000478 <main+0xf8>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d138      	bne.n	800044e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003dc:	4b26      	ldr	r3, [pc, #152]	; (8000478 <main+0xf8>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ea:	4b23      	ldr	r3, [pc, #140]	; (8000478 <main+0xf8>)
 80003ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	0b5b      	lsrs	r3, r3, #13
 80003f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003fa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000404:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800040e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000414:	4918      	ldr	r1, [pc, #96]	; (8000478 <main+0xf8>)
 8000416:	4313      	orrs	r3, r2
 8000418:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <main+0x86>
    } while(sets-- != 0U);
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60ba      	str	r2, [r7, #8]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e5      	bne.n	80003fc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
}
 8000434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000436:	4b10      	ldr	r3, [pc, #64]	; (8000478 <main+0xf8>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a0f      	ldr	r2, [pc, #60]	; (8000478 <main+0xf8>)
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000450:	f000 fd80 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000454:	f000 f818 	bl	8000488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000458:	f000 f892 	bl	8000580 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800045c:	f005 f8ce 	bl	80055fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TCPechoserverTa */
  TCPechoserverTaHandle = osThreadNew(StartTCPechoserverTask, NULL, &TCPechoserverTa_attributes);
 8000460:	4a06      	ldr	r2, [pc, #24]	; (800047c <main+0xfc>)
 8000462:	2100      	movs	r1, #0
 8000464:	4806      	ldr	r0, [pc, #24]	; (8000480 <main+0x100>)
 8000466:	f005 f928 	bl	80056ba <osThreadNew>
 800046a:	4603      	mov	r3, r0
 800046c:	4a05      	ldr	r2, [pc, #20]	; (8000484 <main+0x104>)
 800046e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000470:	f005 f8e8 	bl	8005644 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000474:	e7fe      	b.n	8000474 <main+0xf4>
 8000476:	bf00      	nop
 8000478:	e000ed00 	.word	0xe000ed00
 800047c:	0801b1ec 	.word	0x0801b1ec
 8000480:	08000691 	.word	0x08000691
 8000484:	24004c28 	.word	0x24004c28

08000488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b09c      	sub	sp, #112	; 0x70
 800048c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000492:	224c      	movs	r2, #76	; 0x4c
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f016 fc59 	bl	8016d4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2220      	movs	r2, #32
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f016 fc53 	bl	8016d4e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004a8:	2002      	movs	r0, #2
 80004aa:	f002 ffa1 	bl	80033f0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004ae:	2300      	movs	r3, #0
 80004b0:	603b      	str	r3, [r7, #0]
 80004b2:	4b31      	ldr	r3, [pc, #196]	; (8000578 <SystemClock_Config+0xf0>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a30      	ldr	r2, [pc, #192]	; (8000578 <SystemClock_Config+0xf0>)
 80004b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004bc:	6193      	str	r3, [r2, #24]
 80004be:	4b2e      	ldr	r3, [pc, #184]	; (8000578 <SystemClock_Config+0xf0>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	4b2c      	ldr	r3, [pc, #176]	; (800057c <SystemClock_Config+0xf4>)
 80004ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004cc:	4a2b      	ldr	r2, [pc, #172]	; (800057c <SystemClock_Config+0xf4>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004d4:	4b29      	ldr	r3, [pc, #164]	; (800057c <SystemClock_Config+0xf4>)
 80004d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d8:	f003 0301 	and.w	r3, r3, #1
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004e0:	bf00      	nop
 80004e2:	4b25      	ldr	r3, [pc, #148]	; (8000578 <SystemClock_Config+0xf0>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004ee:	d1f8      	bne.n	80004e2 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f0:	2302      	movs	r3, #2
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004f4:	2301      	movs	r3, #1
 80004f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f8:	2340      	movs	r3, #64	; 0x40
 80004fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fc:	2302      	movs	r3, #2
 80004fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000500:	2300      	movs	r3, #0
 8000502:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000504:	2304      	movs	r3, #4
 8000506:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000508:	233c      	movs	r3, #60	; 0x3c
 800050a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800050c:	2302      	movs	r3, #2
 800050e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000510:	2302      	movs	r3, #2
 8000512:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000514:	2302      	movs	r3, #2
 8000516:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000518:	230c      	movs	r3, #12
 800051a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800051c:	2300      	movs	r3, #0
 800051e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000528:	4618      	mov	r0, r3
 800052a:	f002 ff9b 	bl	8003464 <HAL_RCC_OscConfig>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000534:	f000 f96e 	bl	8000814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000538:	233f      	movs	r3, #63	; 0x3f
 800053a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053c:	2303      	movs	r3, #3
 800053e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000544:	2308      	movs	r3, #8
 8000546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000548:	2340      	movs	r3, #64	; 0x40
 800054a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800054c:	2340      	movs	r3, #64	; 0x40
 800054e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000554:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000556:	2340      	movs	r3, #64	; 0x40
 8000558:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2104      	movs	r1, #4
 800055e:	4618      	mov	r0, r3
 8000560:	f003 fb90 	bl	8003c84 <HAL_RCC_ClockConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800056a:	f000 f953 	bl	8000814 <Error_Handler>
  }
}
 800056e:	bf00      	nop
 8000570:	3770      	adds	r7, #112	; 0x70
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	58024800 	.word	0x58024800
 800057c:	58000400 	.word	0x58000400

08000580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	4b3b      	ldr	r3, [pc, #236]	; (8000684 <MX_GPIO_Init+0x104>)
 8000598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800059c:	4a39      	ldr	r2, [pc, #228]	; (8000684 <MX_GPIO_Init+0x104>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005a6:	4b37      	ldr	r3, [pc, #220]	; (8000684 <MX_GPIO_Init+0x104>)
 80005a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b33      	ldr	r3, [pc, #204]	; (8000684 <MX_GPIO_Init+0x104>)
 80005b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ba:	4a32      	ldr	r2, [pc, #200]	; (8000684 <MX_GPIO_Init+0x104>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005c4:	4b2f      	ldr	r3, [pc, #188]	; (8000684 <MX_GPIO_Init+0x104>)
 80005c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <MX_GPIO_Init+0x104>)
 80005d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d8:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <MX_GPIO_Init+0x104>)
 80005da:	f043 0302 	orr.w	r3, r3, #2
 80005de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005e2:	4b28      	ldr	r3, [pc, #160]	; (8000684 <MX_GPIO_Init+0x104>)
 80005e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e8:	f003 0302 	and.w	r3, r3, #2
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <MX_GPIO_Init+0x104>)
 80005f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f6:	4a23      	ldr	r2, [pc, #140]	; (8000684 <MX_GPIO_Init+0x104>)
 80005f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <MX_GPIO_Init+0x104>)
 8000602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_GPIO_Init+0x104>)
 8000610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <MX_GPIO_Init+0x104>)
 8000616:	f043 0310 	orr.w	r3, r3, #16
 800061a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_GPIO_Init+0x104>)
 8000620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000624:	f003 0310 	and.w	r3, r3, #16
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000632:	4815      	ldr	r0, [pc, #84]	; (8000688 <MX_GPIO_Init+0x108>)
 8000634:	f002 fec2 	bl	80033bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2102      	movs	r1, #2
 800063c:	4813      	ldr	r0, [pc, #76]	; (800068c <MX_GPIO_Init+0x10c>)
 800063e:	f002 febd 	bl	80033bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8000642:	f244 0301 	movw	r3, #16385	; 0x4001
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	480b      	ldr	r0, [pc, #44]	; (8000688 <MX_GPIO_Init+0x108>)
 800065c:	f002 fcfe 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000660:	2302      	movs	r3, #2
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_GPIO_Init+0x10c>)
 8000678:	f002 fcf0 	bl	800305c <HAL_GPIO_Init>

}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	58024400 	.word	0x58024400
 8000688:	58020400 	.word	0x58020400
 800068c:	58021000 	.word	0x58021000

08000690 <StartTCPechoserverTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTCPechoserverTask */
void StartTCPechoserverTask(void *argument)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000698:	f004 f97e 	bl	8004998 <MX_LWIP_Init>
  struct netbuf *Netbuf;
  void *Data;
	uint16_t Len;
  err_t  Err,accept_Err;

	conn1 = netconn_new(NETCONN_TCP);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2010      	movs	r0, #16
 80006a2:	f008 fe51 	bl	8009348 <netconn_new_with_proto_and_callback>
 80006a6:	61f8      	str	r0, [r7, #28]
	// struct netconn * netconn_new ( enum netconn_type t );

	if (conn1 != NULL)
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d058      	beq.n	8000760 <StartTCPechoserverTask+0xd0>
	{
		Err = netconn_bind(conn1, NULL, 8080);
 80006ae:	f641 7290 	movw	r2, #8080	; 0x1f90
 80006b2:	2100      	movs	r1, #0
 80006b4:	69f8      	ldr	r0, [r7, #28]
 80006b6:	f008 ff01 	bl	80094bc <netconn_bind>
 80006ba:	4603      	mov	r3, r0
 80006bc:	76fb      	strb	r3, [r7, #27]
		// err_t netconn_bind ( struct netconn * aNetConn, ip_addr_t * aAddr, u16_t aPort );

		if (Err == ERR_OK)
 80006be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d149      	bne.n	800075a <StartTCPechoserverTask+0xca>
		{
			netconn_listen(conn1);
 80006c6:	21ff      	movs	r1, #255	; 0xff
 80006c8:	69f8      	ldr	r0, [r7, #28]
 80006ca:	f008 ff2f 	bl	800952c <netconn_listen_with_backlog>
			//err_t netconn_listen ( struct netconn * aNetconn );

			while (1)
			{
				accept_Err = netconn_accept(conn1, &conn2);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	69f8      	ldr	r0, [r7, #28]
 80006d6:	f008 ff55 	bl	8009584 <netconn_accept>
 80006da:	4603      	mov	r3, r0
 80006dc:	76bb      	strb	r3, [r7, #26]
				// err_t netconn_accept ( struct netconn * aNetConn, struct netconn ** aNewConn );

				if (accept_Err == ERR_OK)
 80006de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1f3      	bne.n	80006ce <StartTCPechoserverTask+0x3e>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2101      	movs	r1, #1
 80006ea:	4820      	ldr	r0, [pc, #128]	; (800076c <StartTCPechoserverTask+0xdc>)
 80006ec:	f002 fe66 	bl	80033bc <HAL_GPIO_WritePin>

					while (netconn_recv(conn2, &Netbuf) == ERR_OK)
 80006f0:	e01b      	b.n	800072a <StartTCPechoserverTask+0x9a>
					{
						//err_t netconn_recv ( struct netconn * aNetConn, struct netbuf ** aNetBuf );

						do
						{
							netbuf_data(Netbuf, &Data, &Len);
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	f107 020a 	add.w	r2, r7, #10
 80006f8:	f107 010c 	add.w	r1, r7, #12
 80006fc:	4618      	mov	r0, r3
 80006fe:	f00a fedf 	bl	800b4c0 <netbuf_data>
							//err_t netbuf_data ( struct netbuf * aNetBuf, void ** aData, u16_t * aLen );

							netconn_write(conn2, Data, Len, NETCONN_COPY);
 8000702:	6978      	ldr	r0, [r7, #20]
 8000704:	68f9      	ldr	r1, [r7, #12]
 8000706:	897b      	ldrh	r3, [r7, #10]
 8000708:	461a      	mov	r2, r3
 800070a:	2300      	movs	r3, #0
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2301      	movs	r3, #1
 8000710:	f009 f9ba 	bl	8009a88 <netconn_write_partly>
							//	err_t netconn_write ( struct netconn * aNetConn, const void * aData, size_t aSize, u8_t aApiFlags );

						} while (netbuf_next(Netbuf) >= 0);
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	4618      	mov	r0, r3
 8000718:	f00a ff1c 	bl	800b554 <netbuf_next>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	dae7      	bge.n	80006f2 <StartTCPechoserverTask+0x62>

						netbuf_delete(Netbuf);
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	4618      	mov	r0, r3
 8000726:	f00a feab 	bl	800b480 <netbuf_delete>
					while (netconn_recv(conn2, &Netbuf) == ERR_OK)
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	f107 0210 	add.w	r2, r7, #16
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f009 f92e 	bl	8009994 <netconn_recv>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d0d9      	beq.n	80006f2 <StartTCPechoserverTask+0x62>
						// void netbuf_delete ( struct netbuf * aNetBuf );
					}

					netconn_close(conn2);
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	4618      	mov	r0, r3
 8000742:	f009 faa3 	bl	8009c8c <netconn_close>
					netconn_delete(conn2);
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	4618      	mov	r0, r3
 800074a:	f008 fe9b 	bl	8009484 <netconn_delete>
					// err_t netconn_delete ( struct netconn * aNetConn );

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2101      	movs	r1, #1
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <StartTCPechoserverTask+0xdc>)
 8000754:	f002 fe32 	bl	80033bc <HAL_GPIO_WritePin>
				accept_Err = netconn_accept(conn1, &conn2);
 8000758:	e7b9      	b.n	80006ce <StartTCPechoserverTask+0x3e>
			}
		}

		else
		{
			netconn_delete(conn1);
 800075a:	69f8      	ldr	r0, [r7, #28]
 800075c:	f008 fe92 	bl	8009484 <netconn_delete>
	}

  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000764:	f005 f83b 	bl	80057de <osDelay>
 8000768:	e7fa      	b.n	8000760 <StartTCPechoserverTask+0xd0>
 800076a:	bf00      	nop
 800076c:	58020400 	.word	0x58020400

08000770 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000782:	f000 fd43 	bl	800120c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000786:	2301      	movs	r3, #1
 8000788:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800078a:	2300      	movs	r3, #0
 800078c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MPU_Config+0x78>)
 8000790:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000792:	2307      	movs	r3, #7
 8000794:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000796:	2300      	movs	r3, #0
 8000798:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800079a:	2300      	movs	r3, #0
 800079c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800079e:	2303      	movs	r3, #3
 80007a0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80007ae:	2301      	movs	r3, #1
 80007b0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007b2:	463b      	mov	r3, r7
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fd61 	bl	800127c <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MPU_Config+0x7c>)
 80007c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80007c2:	230d      	movs	r3, #13
 80007c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007ca:	2301      	movs	r3, #1
 80007cc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007d2:	463b      	mov	r3, r7
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fd51 	bl	800127c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007da:	2004      	movs	r0, #4
 80007dc:	f000 fd2e 	bl	800123c <HAL_MPU_Enable>

}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	30040000 	.word	0x30040000
 80007ec:	30044000 	.word	0x30044000

080007f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d101      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000802:	f000 fbe3 	bl	8000fcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010000 	.word	0x40010000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <HAL_MspInit+0x48>)
 8000828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800082c:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_MspInit+0x48>)
 800082e:	f043 0302 	orr.w	r3, r3, #2
 8000832:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_MspInit+0x48>)
 8000838:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800083c:	f003 0302 	and.w	r3, r3, #2
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	210f      	movs	r1, #15
 8000848:	f06f 0001 	mvn.w	r0, #1
 800084c:	f000 fcb6 	bl	80011bc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2105      	movs	r1, #5
 8000854:	2005      	movs	r0, #5
 8000856:	f000 fcb1 	bl	80011bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800085a:	2005      	movs	r0, #5
 800085c:	f000 fcc8 	bl	80011f0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	58024400 	.word	0x58024400

0800086c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08e      	sub	sp, #56	; 0x38
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b0f      	cmp	r3, #15
 8000878:	d844      	bhi.n	8000904 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800087a:	2200      	movs	r2, #0
 800087c:	6879      	ldr	r1, [r7, #4]
 800087e:	2019      	movs	r0, #25
 8000880:	f000 fc9c 	bl	80011bc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000884:	2019      	movs	r0, #25
 8000886:	f000 fcb3 	bl	80011f0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800088a:	4a24      	ldr	r2, [pc, #144]	; (800091c <HAL_InitTick+0xb0>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000890:	4b23      	ldr	r3, [pc, #140]	; (8000920 <HAL_InitTick+0xb4>)
 8000892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000896:	4a22      	ldr	r2, [pc, #136]	; (8000920 <HAL_InitTick+0xb4>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <HAL_InitTick+0xb4>)
 80008a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ae:	f107 020c 	add.w	r2, r7, #12
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f003 fd59 	bl	8004370 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80008be:	f003 fd41 	bl	8004344 <HAL_RCC_GetPCLK2Freq>
 80008c2:	4603      	mov	r3, r0
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ca:	4a16      	ldr	r2, [pc, #88]	; (8000924 <HAL_InitTick+0xb8>)
 80008cc:	fba2 2303 	umull	r2, r3, r2, r3
 80008d0:	0c9b      	lsrs	r3, r3, #18
 80008d2:	3b01      	subs	r3, #1
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <HAL_InitTick+0xbc>)
 80008d8:	4a14      	ldr	r2, [pc, #80]	; (800092c <HAL_InitTick+0xc0>)
 80008da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0xbc>)
 80008de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008e4:	4a10      	ldr	r2, [pc, #64]	; (8000928 <HAL_InitTick+0xbc>)
 80008e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_InitTick+0xbc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <HAL_InitTick+0xbc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008f6:	480c      	ldr	r0, [pc, #48]	; (8000928 <HAL_InitTick+0xbc>)
 80008f8:	f003 fd7c 	bl	80043f4 <HAL_TIM_Base_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d107      	bne.n	8000912 <HAL_InitTick+0xa6>
 8000902:	e001      	b.n	8000908 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000904:	2301      	movs	r3, #1
 8000906:	e005      	b.n	8000914 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000908:	4807      	ldr	r0, [pc, #28]	; (8000928 <HAL_InitTick+0xbc>)
 800090a:	f003 fdd5 	bl	80044b8 <HAL_TIM_Base_Start_IT>
 800090e:	4603      	mov	r3, r0
 8000910:	e000      	b.n	8000914 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	3738      	adds	r7, #56	; 0x38
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	24000008 	.word	0x24000008
 8000920:	58024400 	.word	0x58024400
 8000924:	431bde83 	.word	0x431bde83
 8000928:	24004c2c 	.word	0x24004c2c
 800092c:	40010000 	.word	0x40010000

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <TIM1_UP_IRQHandler+0x10>)
 8000972:	f003 fe11 	bl	8004598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	24004c2c 	.word	0x24004c2c

08000980 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <ETH_IRQHandler+0x10>)
 8000986:	f001 f997 	bl	8001cb8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	24004dd8 	.word	0x24004dd8

08000994 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	return 1;
 8000998:	2301      	movs	r3, #1
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <_kill>:

int _kill(int pid, int sig)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <_kill+0x20>)
 80009b0:	2216      	movs	r2, #22
 80009b2:	601a      	str	r2, [r3, #0]
	return -1;
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	24007fb4 	.word	0x24007fb4

080009c8 <_exit>:

void _exit (int status)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ffe5 	bl	80009a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80009da:	e7fe      	b.n	80009da <_exit+0x12>

080009dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	e00a      	b.n	8000a04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ee:	f3af 8000 	nop.w
 80009f2:	4601      	mov	r1, r0
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	60ba      	str	r2, [r7, #8]
 80009fa:	b2ca      	uxtb	r2, r1
 80009fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3301      	adds	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dbf0      	blt.n	80009ee <_read+0x12>
	}

return len;
 8000a0c:	687b      	ldr	r3, [r7, #4]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	e009      	b.n	8000a3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dbf1      	blt.n	8000a28 <_write+0x12>
	}
	return len;
 8000a44:	687b      	ldr	r3, [r7, #4]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <_close>:

int _close(int file)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
	return -1;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a76:	605a      	str	r2, [r3, #4]
	return 0;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <_isatty>:

int _isatty(int file)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
	return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b087      	sub	sp, #28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <_sbrk+0x5c>)
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <_sbrk+0x60>)
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <_sbrk+0x64>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <_sbrk+0x68>)
 8000ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d205      	bcs.n	8000af4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <_sbrk+0x6c>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	e009      	b.n	8000b08 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <_sbrk+0x64>)
 8000b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	371c      	adds	r7, #28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	24080000 	.word	0x24080000
 8000b18:	00000400 	.word	0x00000400
 8000b1c:	240000b4 	.word	0x240000b4
 8000b20:	24007fc8 	.word	0x24007fc8
 8000b24:	24007fb4 	.word	0x24007fb4

08000b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b39      	ldr	r3, [pc, #228]	; (8000c14 <SystemInit+0xec>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b32:	4a38      	ldr	r2, [pc, #224]	; (8000c14 <SystemInit+0xec>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b3c:	4b36      	ldr	r3, [pc, #216]	; (8000c18 <SystemInit+0xf0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 030f 	and.w	r3, r3, #15
 8000b44:	2b06      	cmp	r3, #6
 8000b46:	d807      	bhi.n	8000b58 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b48:	4b33      	ldr	r3, [pc, #204]	; (8000c18 <SystemInit+0xf0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f023 030f 	bic.w	r3, r3, #15
 8000b50:	4a31      	ldr	r2, [pc, #196]	; (8000c18 <SystemInit+0xf0>)
 8000b52:	f043 0307 	orr.w	r3, r3, #7
 8000b56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b58:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <SystemInit+0xf4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a2f      	ldr	r2, [pc, #188]	; (8000c1c <SystemInit+0xf4>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b64:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <SystemInit+0xf4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <SystemInit+0xf4>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	492b      	ldr	r1, [pc, #172]	; (8000c1c <SystemInit+0xf4>)
 8000b70:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <SystemInit+0xf8>)
 8000b72:	4013      	ands	r3, r2
 8000b74:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <SystemInit+0xf0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f003 0308 	and.w	r3, r3, #8
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d007      	beq.n	8000b92 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b82:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <SystemInit+0xf0>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f023 030f 	bic.w	r3, r3, #15
 8000b8a:	4a23      	ldr	r2, [pc, #140]	; (8000c18 <SystemInit+0xf0>)
 8000b8c:	f043 0307 	orr.w	r3, r3, #7
 8000b90:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b92:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <SystemInit+0xf4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b98:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <SystemInit+0xf4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <SystemInit+0xf4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <SystemInit+0xf4>)
 8000ba6:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <SystemInit+0xfc>)
 8000ba8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <SystemInit+0xf4>)
 8000bac:	4a1e      	ldr	r2, [pc, #120]	; (8000c28 <SystemInit+0x100>)
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <SystemInit+0xf4>)
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <SystemInit+0x104>)
 8000bb4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <SystemInit+0xf4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <SystemInit+0xf4>)
 8000bbe:	4a1b      	ldr	r2, [pc, #108]	; (8000c2c <SystemInit+0x104>)
 8000bc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <SystemInit+0xf4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <SystemInit+0xf4>)
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <SystemInit+0x104>)
 8000bcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <SystemInit+0xf4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <SystemInit+0xf4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <SystemInit+0xf4>)
 8000bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <SystemInit+0xf4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <SystemInit+0x108>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <SystemInit+0x10c>)
 8000bec:	4013      	ands	r3, r2
 8000bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000bf2:	d202      	bcs.n	8000bfa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <SystemInit+0x110>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <SystemInit+0x114>)
 8000bfc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c00:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SystemInit+0xec>)
 8000c04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c08:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00
 8000c18:	52002000 	.word	0x52002000
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c24:	02020200 	.word	0x02020200
 8000c28:	01ff0000 	.word	0x01ff0000
 8000c2c:	01010280 	.word	0x01010280
 8000c30:	5c001000 	.word	0x5c001000
 8000c34:	ffff0000 	.word	0xffff0000
 8000c38:	51008108 	.word	0x51008108
 8000c3c:	52004000 	.word	0x52004000

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c44:	f7ff ff70 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	; (8000c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	; (8000c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f016 f82b 	bl	8016cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fb85 	bl	8000380 <main>
  bx  lr
 8000c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c78:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c80:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8000c84:	0801b4a8 	.word	0x0801b4a8
  ldr r2, =_sbss
 8000c88:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8000c8c:	24007fc8 	.word	0x24007fc8

08000c90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC3_IRQHandler>

08000c92 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00b      	beq.n	8000cba <LAN8742_RegisterBusIO+0x28>
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d007      	beq.n	8000cba <LAN8742_RegisterBusIO+0x28>
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <LAN8742_RegisterBusIO+0x28>
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d102      	bne.n	8000cc0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	e014      	b.n	8000cea <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d17c      	bne.n	8000e10 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d002      	beq.n	8000d24 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2220      	movs	r2, #32
 8000d28:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	e01c      	b.n	8000d6a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	f107 0208 	add.w	r2, r7, #8
 8000d38:	2112      	movs	r1, #18
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	4798      	blx	r3
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	da03      	bge.n	8000d4c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000d44:	f06f 0304 	mvn.w	r3, #4
 8000d48:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000d4a:	e00b      	b.n	8000d64 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	f003 031f 	and.w	r3, r3, #31
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d105      	bne.n	8000d64 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
         break;
 8000d62:	e005      	b.n	8000d70 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	3301      	adds	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	2b1f      	cmp	r3, #31
 8000d6e:	d9df      	bls.n	8000d30 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b1f      	cmp	r3, #31
 8000d76:	d902      	bls.n	8000d7e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d78:	f06f 0302 	mvn.w	r3, #2
 8000d7c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d145      	bne.n	8000e10 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	6810      	ldr	r0, [r2, #0]
 8000d8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d90:	2100      	movs	r1, #0
 8000d92:	4798      	blx	r3
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db37      	blt.n	8000e0a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	6810      	ldr	r0, [r2, #0]
 8000da2:	f107 0208 	add.w	r2, r7, #8
 8000da6:	2100      	movs	r1, #0
 8000da8:	4798      	blx	r3
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db28      	blt.n	8000e02 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4798      	blx	r3
 8000db6:	4603      	mov	r3, r0
 8000db8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000dba:	e01c      	b.n	8000df6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4798      	blx	r3
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000dce:	d80e      	bhi.n	8000dee <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6810      	ldr	r0, [r2, #0]
 8000dd8:	f107 0208 	add.w	r2, r7, #8
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4798      	blx	r3
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	da07      	bge.n	8000df6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000de6:	f06f 0304 	mvn.w	r3, #4
 8000dea:	613b      	str	r3, [r7, #16]
                 break;
 8000dec:	e010      	b.n	8000e10 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000dee:	f06f 0301 	mvn.w	r3, #1
 8000df2:	613b      	str	r3, [r7, #16]
               break;
 8000df4:	e00c      	b.n	8000e10 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1dd      	bne.n	8000dbc <LAN8742_Init+0xc6>
 8000e00:	e006      	b.n	8000e10 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000e02:	f06f 0304 	mvn.w	r3, #4
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	e002      	b.n	8000e10 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000e0a:	f06f 0303 	mvn.w	r3, #3
 8000e0e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d112      	bne.n	8000e3c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	4798      	blx	r3
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e20:	bf00      	nop
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	4798      	blx	r3
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e34:	d9f5      	bls.n	8000e22 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000e3c:	693b      	ldr	r3, [r7, #16]
 }
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b084      	sub	sp, #16
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6810      	ldr	r0, [r2, #0]
 8000e5a:	f107 020c 	add.w	r2, r7, #12
 8000e5e:	2101      	movs	r1, #1
 8000e60:	4798      	blx	r3
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	da02      	bge.n	8000e6e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e68:	f06f 0304 	mvn.w	r3, #4
 8000e6c:	e06e      	b.n	8000f4c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6810      	ldr	r0, [r2, #0]
 8000e76:	f107 020c 	add.w	r2, r7, #12
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4798      	blx	r3
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	da02      	bge.n	8000e8a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e84:	f06f 0304 	mvn.w	r3, #4
 8000e88:	e060      	b.n	8000f4c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000e94:	2301      	movs	r3, #1
 8000e96:	e059      	b.n	8000f4c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	6810      	ldr	r0, [r2, #0]
 8000ea0:	f107 020c 	add.w	r2, r7, #12
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4798      	blx	r3
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	da02      	bge.n	8000eb4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000eae:	f06f 0304 	mvn.w	r3, #4
 8000eb2:	e04b      	b.n	8000f4c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d11b      	bne.n	8000ef6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d006      	beq.n	8000ed6 <LAN8742_GetLinkState+0x90>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e03a      	b.n	8000f4c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e033      	b.n	8000f4c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	e02c      	b.n	8000f4c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	e02a      	b.n	8000f4c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	6810      	ldr	r0, [r2, #0]
 8000efe:	f107 020c 	add.w	r2, r7, #12
 8000f02:	211f      	movs	r1, #31
 8000f04:	4798      	blx	r3
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	da02      	bge.n	8000f12 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f0c:	f06f 0304 	mvn.w	r3, #4
 8000f10:	e01c      	b.n	8000f4c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f1c:	2306      	movs	r3, #6
 8000f1e:	e015      	b.n	8000f4c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 031c 	and.w	r3, r3, #28
 8000f26:	2b18      	cmp	r3, #24
 8000f28:	d101      	bne.n	8000f2e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e00e      	b.n	8000f4c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f003 031c 	and.w	r3, r3, #28
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d101      	bne.n	8000f3c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e007      	b.n	8000f4c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 031c 	and.w	r3, r3, #28
 8000f42:	2b14      	cmp	r3, #20
 8000f44:	d101      	bne.n	8000f4a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f46:	2304      	movs	r3, #4
 8000f48:	e000      	b.n	8000f4c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f4a:	2305      	movs	r3, #5
    }				
  }
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5a:	2003      	movs	r0, #3
 8000f5c:	f000 f923 	bl	80011a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f60:	f003 f846 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8000f64:	4602      	mov	r2, r0
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_Init+0x68>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	0a1b      	lsrs	r3, r3, #8
 8000f6c:	f003 030f 	and.w	r3, r3, #15
 8000f70:	4913      	ldr	r1, [pc, #76]	; (8000fc0 <HAL_Init+0x6c>)
 8000f72:	5ccb      	ldrb	r3, [r1, r3]
 8000f74:	f003 031f 	and.w	r3, r3, #31
 8000f78:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <HAL_Init+0x68>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <HAL_Init+0x6c>)
 8000f88:	5cd3      	ldrb	r3, [r2, r3]
 8000f8a:	f003 031f 	and.w	r3, r3, #31
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_Init+0x70>)
 8000f96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <HAL_Init+0x74>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f9e:	200f      	movs	r0, #15
 8000fa0:	f7ff fc64 	bl	800086c <HAL_InitTick>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e002      	b.n	8000fb4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fae:	f7ff fc37 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	58024400 	.word	0x58024400
 8000fc0:	0801b210 	.word	0x0801b210
 8000fc4:	24000004 	.word	0x24000004
 8000fc8:	24000000 	.word	0x24000000

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	2400000c 	.word	0x2400000c
 8000ff0:	24004c78 	.word	0x24004c78

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	24004c78 	.word	0x24004c78

0800100c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_GetREVID+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	0c1b      	lsrs	r3, r3, #16
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	5c001000 	.word	0x5c001000

08001024 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001034:	4904      	ldr	r1, [pc, #16]	; (8001048 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4313      	orrs	r3, r2
 800103a:	604b      	str	r3, [r1, #4]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	58000400 	.word	0x58000400

0800104c <__NVIC_SetPriorityGrouping>:
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__NVIC_SetPriorityGrouping+0x40>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	4313      	orrs	r3, r2
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x40>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00
 8001090:	05fa0000 	.word	0x05fa0000

08001094 <__NVIC_GetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4907      	ldr	r1, [pc, #28]	; (80010e8 <__NVIC_EnableIRQ+0x38>)
 80010ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ff4c 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011ca:	f7ff ff63 	bl	8001094 <__NVIC_GetPriorityGrouping>
 80011ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	68b9      	ldr	r1, [r7, #8]
 80011d4:	6978      	ldr	r0, [r7, #20]
 80011d6:	f7ff ffb3 	bl	8001140 <NVIC_EncodePriority>
 80011da:	4602      	mov	r2, r0
 80011dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff82 	bl	80010ec <__NVIC_SetPriority>
}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff56 	bl	80010b0 <__NVIC_EnableIRQ>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001210:	f3bf 8f5f 	dmb	sy
}
 8001214:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <HAL_MPU_Disable+0x28>)
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HAL_MPU_Disable+0x28>)
 800121c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001220:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_MPU_Disable+0x2c>)
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	e000ed90 	.word	0xe000ed90

0800123c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_MPU_Enable+0x38>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_MPU_Enable+0x3c>)
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_MPU_Enable+0x3c>)
 8001254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001258:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800125a:	f3bf 8f4f 	dsb	sy
}
 800125e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001260:	f3bf 8f6f 	isb	sy
}
 8001264:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed90 	.word	0xe000ed90
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	785a      	ldrb	r2, [r3, #1]
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_MPU_ConfigRegion+0x84>)
 800128a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d029      	beq.n	80012e8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001294:	4a1a      	ldr	r2, [pc, #104]	; (8001300 <HAL_MPU_ConfigRegion+0x84>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7b1b      	ldrb	r3, [r3, #12]
 80012a0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7adb      	ldrb	r3, [r3, #11]
 80012a6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7a9b      	ldrb	r3, [r3, #10]
 80012ae:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7b5b      	ldrb	r3, [r3, #13]
 80012b6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7b9b      	ldrb	r3, [r3, #14]
 80012be:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7bdb      	ldrb	r3, [r3, #15]
 80012c6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7a5b      	ldrb	r3, [r3, #9]
 80012ce:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7a1b      	ldrb	r3, [r3, #8]
 80012d6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012d8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	7812      	ldrb	r2, [r2, #0]
 80012de:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012e2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012e4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80012e6:	e005      	b.n	80012f4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_MPU_ConfigRegion+0x84>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <HAL_MPU_ConfigRegion+0x84>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed90 	.word	0xe000ed90

08001304 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e0c6      	b.n	80014a4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f003 fcb8 	bl	8004c94 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2223      	movs	r2, #35	; 0x23
 8001328:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b60      	ldr	r3, [pc, #384]	; (80014ac <HAL_ETH_Init+0x1a8>)
 800132c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001330:	4a5e      	ldr	r2, [pc, #376]	; (80014ac <HAL_ETH_Init+0x1a8>)
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800133a:	4b5c      	ldr	r3, [pc, #368]	; (80014ac <HAL_ETH_Init+0x1a8>)
 800133c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7a1b      	ldrb	r3, [r3, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d103      	bne.n	8001358 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff fe67 	bl	8001024 <HAL_SYSCFG_ETHInterfaceSelect>
 8001356:	e003      	b.n	8001360 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001358:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800135c:	f7ff fe62 	bl	8001024 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001376:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001378:	f7ff fe3c 	bl	8000ff4 <HAL_GetTick>
 800137c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800137e:	e00f      	b.n	80013a0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001380:	f7ff fe38 	bl	8000ff4 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800138e:	d907      	bls.n	80013a0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2204      	movs	r2, #4
 8001394:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	22e0      	movs	r2, #224	; 0xe0
 800139a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e081      	b.n	80014a4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1e6      	bne.n	8001380 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f001 fad8 	bl	8002968 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013b8:	f002 ff94 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a3c      	ldr	r2, [pc, #240]	; (80014b0 <HAL_ETH_Init+0x1ac>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	0c9a      	lsrs	r2, r3, #18
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3a01      	subs	r2, #1
 80013cc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f001 fa2b 	bl	800282c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80013ec:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80013f0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	22e0      	movs	r2, #224	; 0xe0
 8001408:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e04a      	b.n	80014a4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	f241 1308 	movw	r3, #4360	; 0x1108
 8001416:	4413      	add	r3, r2
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <HAL_ETH_Init+0x1b0>)
 800141c:	4013      	ands	r3, r2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6952      	ldr	r2, [r2, #20]
 8001422:	0052      	lsls	r2, r2, #1
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	6809      	ldr	r1, [r1, #0]
 8001428:	431a      	orrs	r2, r3
 800142a:	f241 1308 	movw	r3, #4360	; 0x1108
 800142e:	440b      	add	r3, r1
 8001430:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f001 faf0 	bl	8002a18 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f001 fb34 	bl	8002aa6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	3305      	adds	r3, #5
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	021a      	lsls	r2, r3, #8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	3304      	adds	r3, #4
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	3303      	adds	r3, #3
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	061a      	lsls	r2, r3, #24
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	3302      	adds	r3, #2
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	041b      	lsls	r3, r3, #16
 8001470:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	3301      	adds	r3, #1
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800147c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800148a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800148c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2210      	movs	r2, #16
 800149a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2210      	movs	r2, #16
 80014a0:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	58024400 	.word	0x58024400
 80014b0:	431bde83 	.word	0x431bde83
 80014b4:	ffff8001 	.word	0xffff8001

080014b8 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	3310      	adds	r3, #16
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <HAL_ETH_DescAssignMemory+0x28>
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d904      	bls.n	80014ea <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2201      	movs	r2, #1
 80014e4:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e021      	b.n	800152e <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00b      	beq.n	8001520 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001546:	2b10      	cmp	r3, #16
 8001548:	d174      	bne.n	8001634 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2223      	movs	r2, #35	; 0x23
 800154e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	e00f      	b.n	8001576 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3310      	adds	r3, #16
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3301      	adds	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2b03      	cmp	r3, #3
 800157a:	d9ec      	bls.n	8001556 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0202 	orr.w	r2, r2, #2
 8001590:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0201 	orr.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	f241 1304 	movw	r3, #4356	; 0x1104
 80015be:	4413      	add	r3, r2
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6811      	ldr	r1, [r2, #0]
 80015c6:	f043 0201 	orr.w	r2, r3, #1
 80015ca:	f241 1304 	movw	r3, #4356	; 0x1104
 80015ce:	440b      	add	r3, r1
 80015d0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	f241 1308 	movw	r3, #4360	; 0x1108
 80015da:	4413      	add	r3, r2
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6811      	ldr	r1, [r2, #0]
 80015e2:	f043 0201 	orr.w	r2, r3, #1
 80015e6:	f241 1308 	movw	r3, #4360	; 0x1108
 80015ea:	440b      	add	r3, r1
 80015ec:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001600:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001604:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	f241 1334 	movw	r3, #4404	; 0x1134
 800160e:	4413      	add	r3, r2
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6811      	ldr	r1, [r2, #0]
 8001616:	f24d 0241 	movw	r2, #53313	; 0xd041
 800161a:	431a      	orrs	r2, r3
 800161c:	f241 1334 	movw	r3, #4404	; 0x1134
 8001620:	440b      	add	r3, r1
 8001622:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2210      	movs	r2, #16
 8001628:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2222      	movs	r2, #34	; 0x22
 800162e:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	e000      	b.n	8001636 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
  }
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001650:	2b00      	cmp	r3, #0
 8001652:	d067      	beq.n	8001724 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2223      	movs	r2, #35	; 0x23
 8001658:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	f241 1334 	movw	r3, #4404	; 0x1134
 8001662:	4413      	add	r3, r2
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6811      	ldr	r1, [r2, #0]
 800166a:	4a32      	ldr	r2, [pc, #200]	; (8001734 <HAL_ETH_Stop_IT+0xf0>)
 800166c:	401a      	ands	r2, r3
 800166e:	f241 1334 	movw	r3, #4404	; 0x1134
 8001672:	440b      	add	r3, r1
 8001674:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	f241 1304 	movw	r3, #4356	; 0x1104
 800167e:	4413      	add	r3, r2
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6811      	ldr	r1, [r2, #0]
 8001686:	f023 0201 	bic.w	r2, r3, #1
 800168a:	f241 1304 	movw	r3, #4356	; 0x1104
 800168e:	440b      	add	r3, r1
 8001690:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	f241 1308 	movw	r3, #4360	; 0x1108
 800169a:	4413      	add	r3, r2
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6811      	ldr	r1, [r2, #0]
 80016a2:	f023 0201 	bic.w	r2, r3, #1
 80016a6:	f241 1308 	movw	r3, #4360	; 0x1108
 80016aa:	440b      	add	r3, r1
 80016ac:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0201 	bic.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0201 	orr.w	r2, r2, #1
 80016ce:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0202 	bic.w	r2, r2, #2
 80016e0:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	e00f      	b.n	8001708 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3310      	adds	r3, #16
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3301      	adds	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b03      	cmp	r3, #3
 800170c:	d9ec      	bls.n	80016e8 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2210      	movs	r2, #16
 8001718:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2210      	movs	r2, #16
 800171e:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	e000      	b.n	8001726 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
  }
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	ffff2fbe 	.word	0xffff2fbe

08001738 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d107      	bne.n	800175a <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800174e:	f043 0201 	orr.w	r2, r3, #1
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e073      	b.n	8001842 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800175e:	2b10      	cmp	r3, #16
 8001760:	d16e      	bne.n	8001840 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001762:	2200      	movs	r2, #0
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f001 f9fa 	bl	8002b60 <ETH_Prepare_Tx_Descriptors>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001776:	f043 0202 	orr.w	r2, r3, #2
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e05f      	b.n	8001842 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3206      	adds	r2, #6
 800178a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	629a      	str	r2, [r3, #40]	; 0x28
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d904      	bls.n	80017ac <HAL_ETH_Transmit+0x74>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	1f1a      	subs	r2, r3, #4
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	3106      	adds	r1, #6
 80017b8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80017bc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80017c0:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 80017c2:	f7ff fc17 	bl	8000ff4 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80017c8:	e034      	b.n	8001834 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d011      	beq.n	8001800 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e0:	f043 0208 	orr.w	r2, r3, #8
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	22e0      	movs	r2, #224	; 0xe0
 80017fa:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e020      	b.n	8001842 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001806:	d015      	beq.n	8001834 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001808:	f7ff fbf4 	bl	8000ff4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	d302      	bcc.n	800181e <HAL_ETH_Transmit+0xe6>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10a      	bne.n	8001834 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001822:	f043 0204 	orr.w	r2, r3, #4
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	22e0      	movs	r2, #224	; 0xe0
 800182e:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e006      	b.n	8001842 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	dbc6      	blt.n	80017ca <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	e000      	b.n	8001842 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
  }
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800184a:	b480      	push	{r7}
 800184c:	b089      	sub	sp, #36	; 0x24
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3344      	adds	r3, #68	; 0x44
 8001856:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001866:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d06b      	beq.n	8001954 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 800187c:	2300      	movs	r3, #0
 800187e:	e0ce      	b.n	8001a1e <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d036      	beq.n	8001900 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	3301      	adds	r3, #1
 8001896:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3301      	adds	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d902      	bls.n	80018b4 <HAL_ETH_IsRxDataAvailable+0x6a>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b04      	subs	r3, #4
 80018b2:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018bc:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db11      	blt.n	80018ea <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00b      	beq.n	80018ea <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2201      	movs	r2, #1
 80018d6:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	3301      	adds	r3, #1
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d902      	bls.n	80018ea <HAL_ETH_IsRxDataAvailable+0xa0>
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	3b04      	subs	r3, #4
 80018e8:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e08e      	b.n	8001a1e <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d012      	beq.n	8001932 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001910:	2301      	movs	r3, #1
 8001912:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	3301      	adds	r3, #1
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	2b03      	cmp	r3, #3
 800191e:	d902      	bls.n	8001926 <HAL_ETH_IsRxDataAvailable+0xdc>
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3b04      	subs	r3, #4
 8001924:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	e010      	b.n	8001954 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	3301      	adds	r3, #1
 8001936:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	3301      	adds	r3, #1
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d902      	bls.n	800194a <HAL_ETH_IsRxDataAvailable+0x100>
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	3b04      	subs	r3, #4
 8001948:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001952:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db02      	blt.n	8001962 <HAL_ETH_IsRxDataAvailable+0x118>
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d98e      	bls.n	8001880 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d056      	beq.n	8001a16 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001980:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e03b      	b.n	8001a00 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001996:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d009      	beq.n	80019b4 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	695a      	ldr	r2, [r3, #20]
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d20d      	bcs.n	80019fa <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3301      	adds	r3, #1
 80019e2:	61fb      	str	r3, [r7, #28]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d902      	bls.n	80019f0 <HAL_ETH_IsRxDataAvailable+0x1a6>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b04      	subs	r3, #4
 80019ee:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f8:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d3bf      	bcc.n	8001988 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6819      	ldr	r1, [r3, #0]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	f241 1328 	movw	r3, #4392	; 0x1128
 8001a12:	440b      	add	r3, r1
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]

  return 0;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b08a      	sub	sp, #40	; 0x28
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3344      	adds	r3, #68	; 0x44
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4c:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d104      	bne.n	8001a62 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e07d      	b.n	8001b5e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10f      	bne.n	8001a8a <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff feed 	bl	800184a <HAL_ETH_IsRxDataAvailable>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e071      	b.n	8001b5e <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a88:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
 8001a8e:	e031      	b.n	8001af4 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	461a      	mov	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001aca:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	3301      	adds	r3, #1
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d902      	bls.n	8001ade <HAL_ETH_GetRxDataBuffer+0xb4>
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	3b04      	subs	r3, #4
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae6:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	3301      	adds	r3, #1
 8001af2:	623b      	str	r3, [r7, #32]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	6a3a      	ldr	r2, [r7, #32]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d3c7      	bcc.n	8001a90 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	461a      	mov	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d803      	bhi.n	8001b2a <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	e018      	b.n	8001b5c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d012      	beq.n	8001b58 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	461a      	mov	r2, r3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	1ad2      	subs	r2, r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	e001      	b.n	8001b5c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3728      	adds	r7, #40	; 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3344      	adds	r3, #68	; 0x44
 8001b74:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d107      	bne.n	8001b94 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff fe60 	bl	800184a <HAL_ETH_IsRxDataAvailable>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e017      	b.n	8001bc4 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	699a      	ldr	r2, [r3, #24]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d902      	bls.n	8001bac <HAL_ETH_GetRxDataLength+0x46>
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3b04      	subs	r3, #4
 8001baa:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb4:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3344      	adds	r3, #68	; 0x44
 8001bd8:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be8:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e057      	b.n	8001cac <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	e03b      	b.n	8001c88 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c1e:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d009      	beq.n	8001c3c <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d20d      	bcs.n	8001c82 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d902      	bls.n	8001c78 <HAL_ETH_BuildRxDescriptors+0xac>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3b04      	subs	r3, #4
 8001c76:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c80:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	3301      	adds	r3, #1
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d3bf      	bcc.n	8001c10 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6819      	ldr	r1, [r3, #0]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	f241 1328 	movw	r3, #4392	; 0x1128
 8001c9a:	440b      	add	r3, r1
 8001c9c:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3724      	adds	r7, #36	; 0x24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cce:	2b40      	cmp	r3, #64	; 0x40
 8001cd0:	d113      	bne.n	8001cfa <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f241 1334 	movw	r3, #4404	; 0x1134
 8001cda:	4413      	add	r3, r2
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce2:	2b40      	cmp	r3, #64	; 0x40
 8001ce4:	d109      	bne.n	8001cfa <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f003 f8aa 	bl	8004e40 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001cf4:	f248 0240 	movw	r2, #32832	; 0x8040
 8001cf8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d113      	bne.n	8001d34 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	f241 1334 	movw	r3, #4404	; 0x1134
 8001d14:	4413      	add	r3, r2
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d109      	bne.n	8001d34 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f8b7 	bl	8001e94 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d2e:	f248 0201 	movw	r2, #32769	; 0x8001
 8001d32:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d46:	d149      	bne.n	8001ddc <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	f241 1334 	movw	r3, #4404	; 0x1134
 8001d50:	4413      	add	r3, r2
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d5c:	d13e      	bne.n	8001ddc <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d62:	f043 0208 	orr.w	r2, r3, #8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d7c:	d11b      	bne.n	8001db6 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	f241 1302 	movw	r3, #4354	; 0x1102
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	f241 1334 	movw	r3, #4404	; 0x1134
 8001d9a:	4413      	add	r3, r2
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6811      	ldr	r1, [r2, #0]
 8001da2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001da6:	f241 1334 	movw	r3, #4404	; 0x1134
 8001daa:	440b      	add	r3, r1
 8001dac:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	22e0      	movs	r2, #224	; 0xe0
 8001db2:	66da      	str	r2, [r3, #108]	; 0x6c
 8001db4:	e00f      	b.n	8001dd6 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001dd0:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8001dd4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f866 	bl	8001ea8 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001de4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8001de8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001dec:	d10e      	bne.n	8001e0c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	22e0      	movs	r2, #224	; 0xe0
 8001dfe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f85b 	bl	8001ebc <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b10      	cmp	r3, #16
 8001e1a:	d10f      	bne.n	8001e3c <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e24:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f84e 	bl	8001ed0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d10f      	bne.n	8001e6c <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e54:	f003 020f 	and.w	r2, r3, #15
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f840 	bl	8001ee4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <HAL_ETH_IRQHandler+0x1d8>)
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d006      	beq.n	8001e86 <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_ETH_IRQHandler+0x1d8>)
 8001e7a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f839 	bl	8001ef8 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	58000080 	.word	0x58000080

08001e94 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e03e      	b.n	8001fac <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f36:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	055b      	lsls	r3, r3, #21
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	041b      	lsls	r3, r3, #16
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f043 030c 	orr.w	r3, r3, #12
 8001f5a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001f6e:	f7ff f841 	bl	8000ff4 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f74:	e009      	b.n	8001f8a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001f76:	f7ff f83d 	bl	8000ff4 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f84:	d901      	bls.n	8001f8a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e010      	b.n	8001fac <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1ed      	bne.n	8001f76 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e03c      	b.n	8002050 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fde:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	055b      	lsls	r3, r3, #21
 8001fea:	4313      	orrs	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	041b      	lsls	r3, r3, #16
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f023 030c 	bic.w	r3, r3, #12
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b29a      	uxth	r2, r3
 8002014:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_ETH_WritePHYRegister+0xa4>)
 8002016:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_ETH_WritePHYRegister+0xa4>)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002022:	f7fe ffe7 	bl	8000ff4 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002028:	e009      	b.n	800203e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800202a:	f7fe ffe3 	bl	8000ff4 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002038:	d901      	bls.n	800203e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e008      	b.n	8002050 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1ed      	bne.n	800202a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40028000 	.word	0x40028000

0800205c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e1c3      	b.n	80023f8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 020c 	and.w	r2, r3, #12
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf14      	ite	ne
 800208c:	2301      	movne	r3, #1
 800208e:	2300      	moveq	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bf0c      	ite	eq
 80020b6:	2301      	moveq	r3, #1
 80020b8:	2300      	movne	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf14      	ite	ne
 80020d2:	2301      	movne	r3, #1
 80020d4:	2300      	moveq	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf14      	ite	ne
 8002106:	2301      	movne	r3, #1
 8002108:	2300      	moveq	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf14      	ite	ne
 8002120:	2301      	movne	r3, #1
 8002122:	2300      	moveq	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002152:	2b00      	cmp	r3, #0
 8002154:	bf14      	ite	ne
 8002156:	2301      	movne	r3, #1
 8002158:	2300      	moveq	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002186:	2b00      	cmp	r3, #0
 8002188:	bf0c      	ite	eq
 800218a:	2301      	moveq	r3, #1
 800218c:	2300      	movne	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf14      	ite	ne
 80021a4:	2301      	movne	r3, #1
 80021a6:	2300      	moveq	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	bf14      	ite	ne
 80021be:	2301      	movne	r3, #1
 80021c0:	2300      	moveq	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf14      	ite	ne
 80021d8:	2301      	movne	r3, #1
 80021da:	2300      	moveq	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	bf14      	ite	ne
 80021f2:	2301      	movne	r3, #1
 80021f4:	2300      	moveq	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	bf14      	ite	ne
 800221a:	2301      	movne	r3, #1
 800221c:	2300      	moveq	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf0c      	ite	eq
 8002250:	2301      	moveq	r3, #1
 8002252:	2300      	movne	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf14      	ite	ne
 800226c:	2301      	movne	r3, #1
 800226e:	2300      	moveq	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf14      	ite	ne
 8002288:	2301      	movne	r3, #1
 800228a:	2300      	moveq	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	bf14      	ite	ne
 80022a4:	2301      	movne	r3, #1
 80022a6:	2300      	moveq	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	0e5b      	lsrs	r3, r3, #25
 80022ba:	f003 021f 	and.w	r2, r3, #31
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 020f 	and.w	r2, r3, #15
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bf14      	ite	ne
 80022fa:	2301      	movne	r3, #1
 80022fc:	2300      	moveq	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002312:	2b00      	cmp	r3, #0
 8002314:	bf0c      	ite	eq
 8002316:	2301      	moveq	r3, #1
 8002318:	2300      	movne	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	b29a      	uxth	r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf14      	ite	ne
 8002350:	2301      	movne	r3, #1
 8002352:	2300      	moveq	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	bf14      	ite	ne
 800236e:	2301      	movne	r3, #1
 8002370:	2300      	moveq	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002384:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002394:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf14      	ite	ne
 80023ac:	2301      	movne	r3, #1
 80023ae:	2300      	moveq	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bf14      	ite	ne
 80023ca:	2301      	movne	r3, #1
 80023cc:	2300      	moveq	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80023e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e00a      	b.n	800242e <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	2b10      	cmp	r3, #16
 800241e:	d105      	bne.n	800242c <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002420:	6839      	ldr	r1, [r7, #0]
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f860 	bl	80024e8 <ETH_SetMACConfig>

    return HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	e000      	b.n	800242e <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
  }
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002448:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002450:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002452:	f001 ff47 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8002456:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4a1e      	ldr	r2, [pc, #120]	; (80024d4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d908      	bls.n	8002472 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d804      	bhi.n	8002472 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	e027      	b.n	80024c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	4a18      	ldr	r2, [pc, #96]	; (80024d8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d908      	bls.n	800248c <HAL_ETH_SetMDIOClockRange+0x54>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	4a17      	ldr	r2, [pc, #92]	; (80024dc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d204      	bcs.n	800248c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	e01a      	b.n	80024c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4a13      	ldr	r2, [pc, #76]	; (80024dc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d303      	bcc.n	800249c <HAL_ETH_SetMDIOClockRange+0x64>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d911      	bls.n	80024c0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4a10      	ldr	r2, [pc, #64]	; (80024e0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d908      	bls.n	80024b6 <HAL_ETH_SetMDIOClockRange+0x7e>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4a0f      	ldr	r2, [pc, #60]	; (80024e4 <HAL_ETH_SetMDIOClockRange+0xac>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d804      	bhi.n	80024b6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	e005      	b.n	80024c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	e000      	b.n	80024c2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80024c0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	01312cff 	.word	0x01312cff
 80024d8:	02160ebf 	.word	0x02160ebf
 80024dc:	03938700 	.word	0x03938700
 80024e0:	05f5e0ff 	.word	0x05f5e0ff
 80024e4:	08f0d17f 	.word	0x08f0d17f

080024e8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80024fa:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	791b      	ldrb	r3, [r3, #4]
 8002500:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002502:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	7b1b      	ldrb	r3, [r3, #12]
 8002508:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800250a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	7b5b      	ldrb	r3, [r3, #13]
 8002510:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002512:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	7b9b      	ldrb	r3, [r3, #14]
 8002518:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800251a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	7bdb      	ldrb	r3, [r3, #15]
 8002520:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002522:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	7c12      	ldrb	r2, [r2, #16]
 8002528:	2a00      	cmp	r2, #0
 800252a:	d102      	bne.n	8002532 <ETH_SetMACConfig+0x4a>
 800252c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002530:	e000      	b.n	8002534 <ETH_SetMACConfig+0x4c>
 8002532:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002534:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	7c52      	ldrb	r2, [r2, #17]
 800253a:	2a00      	cmp	r2, #0
 800253c:	d102      	bne.n	8002544 <ETH_SetMACConfig+0x5c>
 800253e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002542:	e000      	b.n	8002546 <ETH_SetMACConfig+0x5e>
 8002544:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002546:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	7c9b      	ldrb	r3, [r3, #18]
 800254c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800254e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002554:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800255a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	7f1b      	ldrb	r3, [r3, #28]
 8002560:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002562:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	7f5b      	ldrb	r3, [r3, #29]
 8002568:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800256a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	7f92      	ldrb	r2, [r2, #30]
 8002570:	2a00      	cmp	r2, #0
 8002572:	d102      	bne.n	800257a <ETH_SetMACConfig+0x92>
 8002574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002578:	e000      	b.n	800257c <ETH_SetMACConfig+0x94>
 800257a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800257c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	7fdb      	ldrb	r3, [r3, #31]
 8002582:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002584:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	f892 2020 	ldrb.w	r2, [r2, #32]
 800258c:	2a00      	cmp	r2, #0
 800258e:	d102      	bne.n	8002596 <ETH_SetMACConfig+0xae>
 8002590:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002594:	e000      	b.n	8002598 <ETH_SetMACConfig+0xb0>
 8002596:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002598:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800259e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025a6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80025a8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b56      	ldr	r3, [pc, #344]	; (8002714 <ETH_SetMACConfig+0x22c>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	68f9      	ldr	r1, [r7, #12]
 80025c2:	430b      	orrs	r3, r1
 80025c4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025d2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80025d4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025dc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80025de:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80025e6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80025e8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80025f0:	2a00      	cmp	r2, #0
 80025f2:	d102      	bne.n	80025fa <ETH_SetMACConfig+0x112>
 80025f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025f8:	e000      	b.n	80025fc <ETH_SetMACConfig+0x114>
 80025fa:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80025fc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	4b42      	ldr	r3, [pc, #264]	; (8002718 <ETH_SetMACConfig+0x230>)
 800260e:	4013      	ands	r3, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	68f9      	ldr	r1, [r7, #12]
 8002616:	430b      	orrs	r3, r1
 8002618:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002620:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	4b3a      	ldr	r3, [pc, #232]	; (800271c <ETH_SetMACConfig+0x234>)
 8002632:	4013      	ands	r3, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	68f9      	ldr	r1, [r7, #12]
 800263a:	430b      	orrs	r3, r1
 800263c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002644:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800264a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002652:	2a00      	cmp	r2, #0
 8002654:	d101      	bne.n	800265a <ETH_SetMACConfig+0x172>
 8002656:	2280      	movs	r2, #128	; 0x80
 8002658:	e000      	b.n	800265c <ETH_SetMACConfig+0x174>
 800265a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800265c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002662:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800266e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002672:	4013      	ands	r3, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	68f9      	ldr	r1, [r7, #12]
 800267a:	430b      	orrs	r3, r1
 800267c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002684:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800268c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269a:	f023 0103 	bic.w	r1, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80026b2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80026ce:	2a00      	cmp	r2, #0
 80026d0:	d101      	bne.n	80026d6 <ETH_SetMACConfig+0x1ee>
 80026d2:	2240      	movs	r2, #64	; 0x40
 80026d4:	e000      	b.n	80026d8 <ETH_SetMACConfig+0x1f0>
 80026d6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80026d8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80026e0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80026e2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80026ea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80026f8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	430a      	orrs	r2, r1
 8002704:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	00048083 	.word	0x00048083
 8002718:	c0f88000 	.word	0xc0f88000
 800271c:	fffffef0 	.word	0xfffffef0

08002720 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b38      	ldr	r3, [pc, #224]	; (8002818 <ETH_SetDMAConfig+0xf8>)
 8002736:	4013      	ands	r3, r2
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	6809      	ldr	r1, [r1, #0]
 8002740:	431a      	orrs	r2, r3
 8002742:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002746:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	791b      	ldrb	r3, [r3, #4]
 800274c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002752:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	7b1b      	ldrb	r3, [r3, #12]
 8002758:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	f241 0304 	movw	r3, #4100	; 0x1004
 8002766:	4413      	add	r3, r2
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4b2c      	ldr	r3, [pc, #176]	; (800281c <ETH_SetDMAConfig+0xfc>)
 800276c:	4013      	ands	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6811      	ldr	r1, [r2, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	431a      	orrs	r2, r3
 8002776:	f241 0304 	movw	r3, #4100	; 0x1004
 800277a:	440b      	add	r3, r1
 800277c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	7b5b      	ldrb	r3, [r3, #13]
 8002782:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4b22      	ldr	r3, [pc, #136]	; (8002820 <ETH_SetDMAConfig+0x100>)
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6811      	ldr	r1, [r2, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80027a6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	7d1b      	ldrb	r3, [r3, #20]
 80027b0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80027b2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	7f5b      	ldrb	r3, [r3, #29]
 80027b8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	f241 1304 	movw	r3, #4356	; 0x1104
 80027c6:	4413      	add	r3, r2
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <ETH_SetDMAConfig+0x104>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6811      	ldr	r1, [r2, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	f241 1304 	movw	r3, #4356	; 0x1104
 80027da:	440b      	add	r3, r1
 80027dc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	7f1b      	ldrb	r3, [r3, #28]
 80027e2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	f241 1308 	movw	r3, #4360	; 0x1108
 80027f4:	4413      	add	r3, r2
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <ETH_SetDMAConfig+0x108>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6811      	ldr	r1, [r2, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	431a      	orrs	r2, r3
 8002804:	f241 1308 	movw	r3, #4360	; 0x1108
 8002808:	440b      	add	r3, r1
 800280a:	601a      	str	r2, [r3, #0]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	ffff87fd 	.word	0xffff87fd
 800281c:	ffff2ffe 	.word	0xffff2ffe
 8002820:	fffec000 	.word	0xfffec000
 8002824:	ffc0efef 	.word	0xffc0efef
 8002828:	7fc0ffff 	.word	0x7fc0ffff

0800282c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b0a4      	sub	sp, #144	; 0x90
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002834:	2301      	movs	r3, #1
 8002836:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800283a:	2300      	movs	r3, #0
 800283c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800284a:	2301      	movs	r3, #1
 800284c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002850:	2301      	movs	r3, #1
 8002852:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002856:	2301      	movs	r3, #1
 8002858:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800285c:	2300      	movs	r3, #0
 800285e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002862:	2301      	movs	r3, #1
 8002864:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800286c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800286e:	2300      	movs	r3, #0
 8002870:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002874:	2300      	movs	r3, #0
 8002876:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002878:	2300      	movs	r3, #0
 800287a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002884:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002888:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002890:	2300      	movs	r3, #0
 8002892:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002894:	2301      	movs	r3, #1
 8002896:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80028a6:	2300      	movs	r3, #0
 80028a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80028ae:	2300      	movs	r3, #0
 80028b0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80028c4:	2320      	movs	r3, #32
 80028c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80028d6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028e0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80028e8:	2302      	movs	r3, #2
 80028ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002900:	2301      	movs	r3, #1
 8002902:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002906:	2300      	movs	r3, #0
 8002908:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800290a:	2301      	movs	r3, #1
 800290c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff fde6 	bl	80024e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800291c:	2301      	movs	r3, #1
 800291e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002920:	2301      	movs	r3, #1
 8002922:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002936:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800293a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002940:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002944:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800294c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	4619      	mov	r1, r3
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff fee1 	bl	8002720 <ETH_SetDMAConfig>
}
 800295e:	bf00      	nop
 8002960:	3790      	adds	r7, #144	; 0x90
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002978:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002980:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002982:	f001 fcaf 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8002986:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4a1e      	ldr	r2, [pc, #120]	; (8002a04 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d908      	bls.n	80029a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d804      	bhi.n	80029a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e027      	b.n	80029f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d908      	bls.n	80029bc <ETH_MAC_MDIO_ClkConfig+0x54>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4a17      	ldr	r2, [pc, #92]	; (8002a0c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d204      	bcs.n	80029bc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	e01a      	b.n	80029f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4a13      	ldr	r2, [pc, #76]	; (8002a0c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d303      	bcc.n	80029cc <ETH_MAC_MDIO_ClkConfig+0x64>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d911      	bls.n	80029f0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d908      	bls.n	80029e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4a0f      	ldr	r2, [pc, #60]	; (8002a14 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d804      	bhi.n	80029e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e005      	b.n	80029f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	e000      	b.n	80029f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80029f0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	01312cff 	.word	0x01312cff
 8002a08:	02160ebf 	.word	0x02160ebf
 8002a0c:	03938700 	.word	0x03938700
 8002a10:	05f5e0ff 	.word	0x05f5e0ff
 8002a14:	08f0d17f 	.word	0x08f0d17f

08002a18 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e01d      	b.n	8002a62 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68d9      	ldr	r1, [r3, #12]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	440b      	add	r3, r1
 8002a36:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2200      	movs	r2, #0
 8002a42:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	3206      	adds	r2, #6
 8002a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d9de      	bls.n	8002a26 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	f241 132c 	movw	r3, #4396	; 0x112c
 8002a76:	4413      	add	r3, r2
 8002a78:	2203      	movs	r2, #3
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68d9      	ldr	r1, [r3, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f241 1314 	movw	r3, #4372	; 0x1114
 8002a88:	4413      	add	r3, r2
 8002a8a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002a98:	601a      	str	r2, [r3, #0]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	e024      	b.n	8002afe <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6919      	ldr	r1, [r3, #16]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2200      	movs	r2, #0
 8002adc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3310      	adds	r3, #16
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	3301      	adds	r3, #1
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d9d7      	bls.n	8002ab4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	f241 1330 	movw	r3, #4400	; 0x1130
 8002b2a:	4413      	add	r3, r2
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6919      	ldr	r1, [r3, #16]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	f241 131c 	movw	r3, #4380	; 0x111c
 8002b3c:	4413      	add	r3, r2
 8002b3e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	f241 1328 	movw	r3, #4392	; 0x1128
 8002b50:	4413      	add	r3, r2
 8002b52:	6019      	str	r1, [r3, #0]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b08d      	sub	sp, #52	; 0x34
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3318      	adds	r3, #24
 8002b70:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ba2:	d007      	beq.n	8002bb4 <ETH_Prepare_Tx_Descriptors+0x54>
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	3304      	adds	r3, #4
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e24a      	b.n	800304e <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d044      	beq.n	8002c4e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	4b72      	ldr	r3, [pc, #456]	; (8002d94 <ETH_Prepare_Tx_Descriptors+0x234>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bf0:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d027      	beq.n	8002c4e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	041b      	lsls	r3, r3, #16
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c3c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c4c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00e      	beq.n	8002c78 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <ETH_Prepare_Tx_Descriptors+0x238>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	6992      	ldr	r2, [r2, #24]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <ETH_Prepare_Tx_Descriptors+0x130>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d030      	beq.n	8002cf2 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	3301      	adds	r3, #1
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d902      	bls.n	8002cba <ETH_Prepare_Tx_Descriptors+0x15a>
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb6:	3b04      	subs	r3, #4
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc2:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cd6:	d10c      	bne.n	8002cf2 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce0:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e1ad      	b.n	800304e <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <ETH_Prepare_Tx_Descriptors+0x238>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	6852      	ldr	r2, [r2, #4]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d012      	beq.n	8002d42 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <ETH_Prepare_Tx_Descriptors+0x23c>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	6852      	ldr	r2, [r2, #4]
 8002d38:	0412      	lsls	r2, r2, #16
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	e008      	b.n	8002d54 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	2200      	movs	r2, #0
 8002d46:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <ETH_Prepare_Tx_Descriptors+0x23c>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	6a3a      	ldr	r2, [r7, #32]
 8002d52:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d021      	beq.n	8002da4 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	04db      	lsls	r3, r3, #19
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	69d2      	ldr	r2, [r2, #28]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	e02e      	b.n	8002df2 <ETH_Prepare_Tx_Descriptors+0x292>
 8002d94:	ffff0000 	.word	0xffff0000
 8002d98:	ffffc000 	.word	0xffffc000
 8002d9c:	c000ffff 	.word	0xc000ffff
 8002da0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	4b93      	ldr	r3, [pc, #588]	; (8002ff8 <ETH_Prepare_Tx_Descriptors+0x498>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	6852      	ldr	r2, [r2, #4]
 8002db0:	431a      	orrs	r2, r3
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80cb 	beq.w	8002fd8 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e54:	e0c0      	b.n	8002fd8 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	3301      	adds	r3, #1
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d902      	bls.n	8002e74 <ETH_Prepare_Tx_Descriptors+0x314>
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	3b04      	subs	r3, #4
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e96:	d007      	beq.n	8002ea8 <ETH_Prepare_Tx_Descriptors+0x348>
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d026      	beq.n	8002ef6 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eba:	e016      	b.n	8002eea <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eca:	3301      	adds	r3, #1
 8002ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d902      	bls.n	8002eda <ETH_Prepare_Tx_Descriptors+0x37a>
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	3b04      	subs	r3, #4
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee2:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d3e4      	bcc.n	8002ebc <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e0ab      	b.n	800304e <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	3301      	adds	r3, #1
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	4b3a      	ldr	r3, [pc, #232]	; (8002ffc <ETH_Prepare_Tx_Descriptors+0x49c>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	6852      	ldr	r2, [r2, #4]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d012      	beq.n	8002f4c <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	4b31      	ldr	r3, [pc, #196]	; (8003000 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	6852      	ldr	r2, [r2, #4]
 8002f42:	0412      	lsls	r2, r2, #16
 8002f44:	431a      	orrs	r2, r3
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	609a      	str	r2, [r3, #8]
 8002f4a:	e008      	b.n	8002f5e <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	6a3a      	ldr	r2, [r7, #32]
 8002f5c:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00f      	beq.n	8002f8a <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	4b25      	ldr	r3, [pc, #148]	; (8003004 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	69d2      	ldr	r2, [r2, #28]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	60da      	str	r2, [r3, #12]
 8002f88:	e017      	b.n	8002fba <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ff8 <ETH_Prepare_Tx_Descriptors+0x498>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	6852      	ldr	r2, [r2, #4]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f47f af3a 	bne.w	8002e56 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00f      	beq.n	8003008 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	e00e      	b.n	8003014 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8002ff6:	bf00      	nop
 8002ff8:	ffff8000 	.word	0xffff8000
 8002ffc:	ffffc000 	.word	0xffffc000
 8003000:	c000ffff 	.word	0xc000ffff
 8003004:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003024:	6979      	ldr	r1, [r7, #20]
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	3304      	adds	r3, #4
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003034:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003036:	b672      	cpsid	i
}
 8003038:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	4413      	add	r3, r2
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003048:	b662      	cpsie	i
}
 800304a:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3734      	adds	r7, #52	; 0x34
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop

0800305c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800305c:	b480      	push	{r7}
 800305e:	b089      	sub	sp, #36	; 0x24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800306a:	4b89      	ldr	r3, [pc, #548]	; (8003290 <HAL_GPIO_Init+0x234>)
 800306c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800306e:	e194      	b.n	800339a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2101      	movs	r1, #1
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8186 	beq.w	8003394 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d00b      	beq.n	80030a8 <HAL_GPIO_Init+0x4c>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d007      	beq.n	80030a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800309c:	2b11      	cmp	r3, #17
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b12      	cmp	r3, #18
 80030a6:	d130      	bne.n	800310a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	2203      	movs	r2, #3
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030de:	2201      	movs	r2, #1
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4013      	ands	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	f003 0201 	and.w	r2, r3, #1
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	2203      	movs	r2, #3
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d003      	beq.n	800314a <HAL_GPIO_Init+0xee>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b12      	cmp	r3, #18
 8003148:	d123      	bne.n	8003192 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	08da      	lsrs	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3208      	adds	r2, #8
 8003152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	220f      	movs	r2, #15
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	08da      	lsrs	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3208      	adds	r2, #8
 800318c:	69b9      	ldr	r1, [r7, #24]
 800318e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2203      	movs	r2, #3
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0203 	and.w	r2, r3, #3
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80e0 	beq.w	8003394 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d4:	4b2f      	ldr	r3, [pc, #188]	; (8003294 <HAL_GPIO_Init+0x238>)
 80031d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031da:	4a2e      	ldr	r2, [pc, #184]	; (8003294 <HAL_GPIO_Init+0x238>)
 80031dc:	f043 0302 	orr.w	r3, r3, #2
 80031e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80031e4:	4b2b      	ldr	r3, [pc, #172]	; (8003294 <HAL_GPIO_Init+0x238>)
 80031e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031f2:	4a29      	ldr	r2, [pc, #164]	; (8003298 <HAL_GPIO_Init+0x23c>)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	089b      	lsrs	r3, r3, #2
 80031f8:	3302      	adds	r3, #2
 80031fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	220f      	movs	r2, #15
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a20      	ldr	r2, [pc, #128]	; (800329c <HAL_GPIO_Init+0x240>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d052      	beq.n	80032c4 <HAL_GPIO_Init+0x268>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a1f      	ldr	r2, [pc, #124]	; (80032a0 <HAL_GPIO_Init+0x244>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d031      	beq.n	800328a <HAL_GPIO_Init+0x22e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a1e      	ldr	r2, [pc, #120]	; (80032a4 <HAL_GPIO_Init+0x248>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d02b      	beq.n	8003286 <HAL_GPIO_Init+0x22a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a1d      	ldr	r2, [pc, #116]	; (80032a8 <HAL_GPIO_Init+0x24c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d025      	beq.n	8003282 <HAL_GPIO_Init+0x226>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a1c      	ldr	r2, [pc, #112]	; (80032ac <HAL_GPIO_Init+0x250>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01f      	beq.n	800327e <HAL_GPIO_Init+0x222>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <HAL_GPIO_Init+0x254>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d019      	beq.n	800327a <HAL_GPIO_Init+0x21e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a1a      	ldr	r2, [pc, #104]	; (80032b4 <HAL_GPIO_Init+0x258>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <HAL_GPIO_Init+0x21a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a19      	ldr	r2, [pc, #100]	; (80032b8 <HAL_GPIO_Init+0x25c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00d      	beq.n	8003272 <HAL_GPIO_Init+0x216>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a18      	ldr	r2, [pc, #96]	; (80032bc <HAL_GPIO_Init+0x260>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d007      	beq.n	800326e <HAL_GPIO_Init+0x212>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <HAL_GPIO_Init+0x264>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d101      	bne.n	800326a <HAL_GPIO_Init+0x20e>
 8003266:	2309      	movs	r3, #9
 8003268:	e02d      	b.n	80032c6 <HAL_GPIO_Init+0x26a>
 800326a:	230a      	movs	r3, #10
 800326c:	e02b      	b.n	80032c6 <HAL_GPIO_Init+0x26a>
 800326e:	2308      	movs	r3, #8
 8003270:	e029      	b.n	80032c6 <HAL_GPIO_Init+0x26a>
 8003272:	2307      	movs	r3, #7
 8003274:	e027      	b.n	80032c6 <HAL_GPIO_Init+0x26a>
 8003276:	2306      	movs	r3, #6
 8003278:	e025      	b.n	80032c6 <HAL_GPIO_Init+0x26a>
 800327a:	2305      	movs	r3, #5
 800327c:	e023      	b.n	80032c6 <HAL_GPIO_Init+0x26a>
 800327e:	2304      	movs	r3, #4
 8003280:	e021      	b.n	80032c6 <HAL_GPIO_Init+0x26a>
 8003282:	2303      	movs	r3, #3
 8003284:	e01f      	b.n	80032c6 <HAL_GPIO_Init+0x26a>
 8003286:	2302      	movs	r3, #2
 8003288:	e01d      	b.n	80032c6 <HAL_GPIO_Init+0x26a>
 800328a:	2301      	movs	r3, #1
 800328c:	e01b      	b.n	80032c6 <HAL_GPIO_Init+0x26a>
 800328e:	bf00      	nop
 8003290:	58000080 	.word	0x58000080
 8003294:	58024400 	.word	0x58024400
 8003298:	58000400 	.word	0x58000400
 800329c:	58020000 	.word	0x58020000
 80032a0:	58020400 	.word	0x58020400
 80032a4:	58020800 	.word	0x58020800
 80032a8:	58020c00 	.word	0x58020c00
 80032ac:	58021000 	.word	0x58021000
 80032b0:	58021400 	.word	0x58021400
 80032b4:	58021800 	.word	0x58021800
 80032b8:	58021c00 	.word	0x58021c00
 80032bc:	58022000 	.word	0x58022000
 80032c0:	58022400 	.word	0x58022400
 80032c4:	2300      	movs	r3, #0
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	f002 0203 	and.w	r2, r2, #3
 80032cc:	0092      	lsls	r2, r2, #2
 80032ce:	4093      	lsls	r3, r2
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032d6:	4938      	ldr	r1, [pc, #224]	; (80033b8 <HAL_GPIO_Init+0x35c>)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	3302      	adds	r3, #2
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800335e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800338c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	3301      	adds	r3, #1
 8003398:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f47f ae63 	bne.w	8003070 <HAL_GPIO_Init+0x14>
  }
}
 80033aa:	bf00      	nop
 80033ac:	bf00      	nop
 80033ae:	3724      	adds	r7, #36	; 0x24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	58000400 	.word	0x58000400

080033bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]
 80033c8:	4613      	mov	r3, r2
 80033ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033cc:	787b      	ldrb	r3, [r7, #1]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033d2:	887a      	ldrh	r2, [r7, #2]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80033d8:	e003      	b.n	80033e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033da:	887b      	ldrh	r3, [r7, #2]
 80033dc:	041a      	lsls	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	619a      	str	r2, [r3, #24]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_PWREx_ConfigSupply+0x70>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b04      	cmp	r3, #4
 8003402:	d00a      	beq.n	800341a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003404:	4b16      	ldr	r3, [pc, #88]	; (8003460 <HAL_PWREx_ConfigSupply+0x70>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	429a      	cmp	r2, r3
 8003410:	d001      	beq.n	8003416 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e01f      	b.n	8003456 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e01d      	b.n	8003456 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800341a:	4b11      	ldr	r3, [pc, #68]	; (8003460 <HAL_PWREx_ConfigSupply+0x70>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f023 0207 	bic.w	r2, r3, #7
 8003422:	490f      	ldr	r1, [pc, #60]	; (8003460 <HAL_PWREx_ConfigSupply+0x70>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4313      	orrs	r3, r2
 8003428:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800342a:	f7fd fde3 	bl	8000ff4 <HAL_GetTick>
 800342e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003430:	e009      	b.n	8003446 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003432:	f7fd fddf 	bl	8000ff4 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003440:	d901      	bls.n	8003446 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e007      	b.n	8003456 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_PWREx_ConfigSupply+0x70>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800344e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003452:	d1ee      	bne.n	8003432 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	58024800 	.word	0x58024800

08003464 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08c      	sub	sp, #48	; 0x30
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e3ff      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8087 	beq.w	8003592 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003484:	4b99      	ldr	r3, [pc, #612]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800348c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800348e:	4b97      	ldr	r3, [pc, #604]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003496:	2b10      	cmp	r3, #16
 8003498:	d007      	beq.n	80034aa <HAL_RCC_OscConfig+0x46>
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	2b18      	cmp	r3, #24
 800349e:	d110      	bne.n	80034c2 <HAL_RCC_OscConfig+0x5e>
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d10b      	bne.n	80034c2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034aa:	4b90      	ldr	r3, [pc, #576]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d06c      	beq.n	8003590 <HAL_RCC_OscConfig+0x12c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d168      	bne.n	8003590 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e3d9      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ca:	d106      	bne.n	80034da <HAL_RCC_OscConfig+0x76>
 80034cc:	4b87      	ldr	r3, [pc, #540]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a86      	ldr	r2, [pc, #536]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80034d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	e02e      	b.n	8003538 <HAL_RCC_OscConfig+0xd4>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10c      	bne.n	80034fc <HAL_RCC_OscConfig+0x98>
 80034e2:	4b82      	ldr	r3, [pc, #520]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a81      	ldr	r2, [pc, #516]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80034e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	4b7f      	ldr	r3, [pc, #508]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a7e      	ldr	r2, [pc, #504]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80034f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e01d      	b.n	8003538 <HAL_RCC_OscConfig+0xd4>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0xbc>
 8003506:	4b79      	ldr	r3, [pc, #484]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a78      	ldr	r2, [pc, #480]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 800350c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	4b76      	ldr	r3, [pc, #472]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a75      	ldr	r2, [pc, #468]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e00b      	b.n	8003538 <HAL_RCC_OscConfig+0xd4>
 8003520:	4b72      	ldr	r3, [pc, #456]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a71      	ldr	r2, [pc, #452]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 8003526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	4b6f      	ldr	r3, [pc, #444]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a6e      	ldr	r2, [pc, #440]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 8003532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d013      	beq.n	8003568 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fd fd58 	bl	8000ff4 <HAL_GetTick>
 8003544:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003548:	f7fd fd54 	bl	8000ff4 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	; 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e38d      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800355a:	4b64      	ldr	r3, [pc, #400]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0xe4>
 8003566:	e014      	b.n	8003592 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fd fd44 	bl	8000ff4 <HAL_GetTick>
 800356c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003570:	f7fd fd40 	bl	8000ff4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	; 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e379      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003582:	4b5a      	ldr	r3, [pc, #360]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x10c>
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80ae 	beq.w	80036fc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a0:	4b52      	ldr	r3, [pc, #328]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035aa:	4b50      	ldr	r3, [pc, #320]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d007      	beq.n	80035c6 <HAL_RCC_OscConfig+0x162>
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	2b18      	cmp	r3, #24
 80035ba:	d13a      	bne.n	8003632 <HAL_RCC_OscConfig+0x1ce>
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d135      	bne.n	8003632 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035c6:	4b49      	ldr	r3, [pc, #292]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <HAL_RCC_OscConfig+0x17a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e34b      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035de:	f7fd fd15 	bl	800100c <HAL_GetREVID>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d817      	bhi.n	800361c <HAL_RCC_OscConfig+0x1b8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d108      	bne.n	8003606 <HAL_RCC_OscConfig+0x1a2>
 80035f4:	4b3d      	ldr	r3, [pc, #244]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80035fc:	4a3b      	ldr	r2, [pc, #236]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80035fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003602:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003604:	e07a      	b.n	80036fc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003606:	4b39      	ldr	r3, [pc, #228]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	031b      	lsls	r3, r3, #12
 8003614:	4935      	ldr	r1, [pc, #212]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 8003616:	4313      	orrs	r3, r2
 8003618:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800361a:	e06f      	b.n	80036fc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361c:	4b33      	ldr	r3, [pc, #204]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	061b      	lsls	r3, r3, #24
 800362a:	4930      	ldr	r1, [pc, #192]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003630:	e064      	b.n	80036fc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d045      	beq.n	80036c6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800363a:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 0219 	bic.w	r2, r3, #25
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4929      	ldr	r1, [pc, #164]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fd fcd2 	bl	8000ff4 <HAL_GetTick>
 8003650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003654:	f7fd fcce 	bl	8000ff4 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e307      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003666:	4b21      	ldr	r3, [pc, #132]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003672:	f7fd fccb 	bl	800100c <HAL_GetREVID>
 8003676:	4603      	mov	r3, r0
 8003678:	f241 0203 	movw	r2, #4099	; 0x1003
 800367c:	4293      	cmp	r3, r2
 800367e:	d817      	bhi.n	80036b0 <HAL_RCC_OscConfig+0x24c>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	d108      	bne.n	800369a <HAL_RCC_OscConfig+0x236>
 8003688:	4b18      	ldr	r3, [pc, #96]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003690:	4a16      	ldr	r2, [pc, #88]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 8003692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003696:	6053      	str	r3, [r2, #4]
 8003698:	e030      	b.n	80036fc <HAL_RCC_OscConfig+0x298>
 800369a:	4b14      	ldr	r3, [pc, #80]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	031b      	lsls	r3, r3, #12
 80036a8:	4910      	ldr	r1, [pc, #64]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]
 80036ae:	e025      	b.n	80036fc <HAL_RCC_OscConfig+0x298>
 80036b0:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	490b      	ldr	r1, [pc, #44]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
 80036c4:	e01a      	b.n	80036fc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a08      	ldr	r2, [pc, #32]	; (80036ec <HAL_RCC_OscConfig+0x288>)
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7fd fc8f 	bl	8000ff4 <HAL_GetTick>
 80036d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036da:	f7fd fc8b 	bl	8000ff4 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d903      	bls.n	80036f0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e2c4      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
 80036ec:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036f0:	4ba4      	ldr	r3, [pc, #656]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ee      	bne.n	80036da <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80a9 	beq.w	800385c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800370a:	4b9e      	ldr	r3, [pc, #632]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003712:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003714:	4b9b      	ldr	r3, [pc, #620]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d007      	beq.n	8003730 <HAL_RCC_OscConfig+0x2cc>
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	2b18      	cmp	r3, #24
 8003724:	d13a      	bne.n	800379c <HAL_RCC_OscConfig+0x338>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	2b01      	cmp	r3, #1
 800372e:	d135      	bne.n	800379c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003730:	4b94      	ldr	r3, [pc, #592]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_OscConfig+0x2e4>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	2b80      	cmp	r3, #128	; 0x80
 8003742:	d001      	beq.n	8003748 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e296      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003748:	f7fd fc60 	bl	800100c <HAL_GetREVID>
 800374c:	4603      	mov	r3, r0
 800374e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003752:	4293      	cmp	r3, r2
 8003754:	d817      	bhi.n	8003786 <HAL_RCC_OscConfig+0x322>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	2b20      	cmp	r3, #32
 800375c:	d108      	bne.n	8003770 <HAL_RCC_OscConfig+0x30c>
 800375e:	4b89      	ldr	r3, [pc, #548]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003766:	4a87      	ldr	r2, [pc, #540]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800376c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800376e:	e075      	b.n	800385c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003770:	4b84      	ldr	r3, [pc, #528]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	069b      	lsls	r3, r3, #26
 800377e:	4981      	ldr	r1, [pc, #516]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003784:	e06a      	b.n	800385c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003786:	4b7f      	ldr	r3, [pc, #508]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	061b      	lsls	r3, r3, #24
 8003794:	497b      	ldr	r1, [pc, #492]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003796:	4313      	orrs	r3, r2
 8003798:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800379a:	e05f      	b.n	800385c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d042      	beq.n	800382a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80037a4:	4b77      	ldr	r3, [pc, #476]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a76      	ldr	r2, [pc, #472]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 80037aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7fd fc20 	bl	8000ff4 <HAL_GetTick>
 80037b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80037b8:	f7fd fc1c 	bl	8000ff4 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e255      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037ca:	4b6e      	ldr	r3, [pc, #440]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037d6:	f7fd fc19 	bl	800100c <HAL_GetREVID>
 80037da:	4603      	mov	r3, r0
 80037dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d817      	bhi.n	8003814 <HAL_RCC_OscConfig+0x3b0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d108      	bne.n	80037fe <HAL_RCC_OscConfig+0x39a>
 80037ec:	4b65      	ldr	r3, [pc, #404]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80037f4:	4a63      	ldr	r2, [pc, #396]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 80037f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037fa:	6053      	str	r3, [r2, #4]
 80037fc:	e02e      	b.n	800385c <HAL_RCC_OscConfig+0x3f8>
 80037fe:	4b61      	ldr	r3, [pc, #388]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	069b      	lsls	r3, r3, #26
 800380c:	495d      	ldr	r1, [pc, #372]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 800380e:	4313      	orrs	r3, r2
 8003810:	604b      	str	r3, [r1, #4]
 8003812:	e023      	b.n	800385c <HAL_RCC_OscConfig+0x3f8>
 8003814:	4b5b      	ldr	r3, [pc, #364]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	061b      	lsls	r3, r3, #24
 8003822:	4958      	ldr	r1, [pc, #352]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003824:	4313      	orrs	r3, r2
 8003826:	60cb      	str	r3, [r1, #12]
 8003828:	e018      	b.n	800385c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800382a:	4b56      	ldr	r3, [pc, #344]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a55      	ldr	r2, [pc, #340]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003836:	f7fd fbdd 	bl	8000ff4 <HAL_GetTick>
 800383a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800383e:	f7fd fbd9 	bl	8000ff4 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e212      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003850:	4b4c      	ldr	r3, [pc, #304]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f0      	bne.n	800383e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d036      	beq.n	80038d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d019      	beq.n	80038a4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003870:	4b44      	ldr	r3, [pc, #272]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003874:	4a43      	ldr	r2, [pc, #268]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387c:	f7fd fbba 	bl	8000ff4 <HAL_GetTick>
 8003880:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003884:	f7fd fbb6 	bl	8000ff4 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e1ef      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003896:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0x420>
 80038a2:	e018      	b.n	80038d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a4:	4b37      	ldr	r3, [pc, #220]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 80038a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a8:	4a36      	ldr	r2, [pc, #216]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fd fba0 	bl	8000ff4 <HAL_GetTick>
 80038b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b8:	f7fd fb9c 	bl	8000ff4 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e1d5      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038ca:	4b2e      	ldr	r3, [pc, #184]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 80038cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d036      	beq.n	8003950 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d019      	beq.n	800391e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038ea:	4b26      	ldr	r3, [pc, #152]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a25      	ldr	r2, [pc, #148]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 80038f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80038f6:	f7fd fb7d 	bl	8000ff4 <HAL_GetTick>
 80038fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80038fe:	f7fd fb79 	bl	8000ff4 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e1b2      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003910:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x49a>
 800391c:	e018      	b.n	8003950 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800391e:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a18      	ldr	r2, [pc, #96]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003928:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800392a:	f7fd fb63 	bl	8000ff4 <HAL_GetTick>
 800392e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003932:	f7fd fb5f 	bl	8000ff4 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e198      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003944:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <HAL_RCC_OscConfig+0x520>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f0      	bne.n	8003932 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8085 	beq.w	8003a68 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800395e:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <HAL_RCC_OscConfig+0x524>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a09      	ldr	r2, [pc, #36]	; (8003988 <HAL_RCC_OscConfig+0x524>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003968:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800396a:	f7fd fb43 	bl	8000ff4 <HAL_GetTick>
 800396e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003970:	e00c      	b.n	800398c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003972:	f7fd fb3f 	bl	8000ff4 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b64      	cmp	r3, #100	; 0x64
 800397e:	d905      	bls.n	800398c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e178      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
 8003984:	58024400 	.word	0x58024400
 8003988:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800398c:	4b96      	ldr	r3, [pc, #600]	; (8003be8 <HAL_RCC_OscConfig+0x784>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0ec      	beq.n	8003972 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d106      	bne.n	80039ae <HAL_RCC_OscConfig+0x54a>
 80039a0:	4b92      	ldr	r3, [pc, #584]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a4:	4a91      	ldr	r2, [pc, #580]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	6713      	str	r3, [r2, #112]	; 0x70
 80039ac:	e02d      	b.n	8003a0a <HAL_RCC_OscConfig+0x5a6>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x56c>
 80039b6:	4b8d      	ldr	r3, [pc, #564]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	4a8c      	ldr	r2, [pc, #560]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 80039bc:	f023 0301 	bic.w	r3, r3, #1
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70
 80039c2:	4b8a      	ldr	r3, [pc, #552]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	4a89      	ldr	r2, [pc, #548]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 80039c8:	f023 0304 	bic.w	r3, r3, #4
 80039cc:	6713      	str	r3, [r2, #112]	; 0x70
 80039ce:	e01c      	b.n	8003a0a <HAL_RCC_OscConfig+0x5a6>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b05      	cmp	r3, #5
 80039d6:	d10c      	bne.n	80039f2 <HAL_RCC_OscConfig+0x58e>
 80039d8:	4b84      	ldr	r3, [pc, #528]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	4a83      	ldr	r2, [pc, #524]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 80039de:	f043 0304 	orr.w	r3, r3, #4
 80039e2:	6713      	str	r3, [r2, #112]	; 0x70
 80039e4:	4b81      	ldr	r3, [pc, #516]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	4a80      	ldr	r2, [pc, #512]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	6713      	str	r3, [r2, #112]	; 0x70
 80039f0:	e00b      	b.n	8003a0a <HAL_RCC_OscConfig+0x5a6>
 80039f2:	4b7e      	ldr	r3, [pc, #504]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	4a7d      	ldr	r2, [pc, #500]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	6713      	str	r3, [r2, #112]	; 0x70
 80039fe:	4b7b      	ldr	r3, [pc, #492]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	4a7a      	ldr	r2, [pc, #488]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003a04:	f023 0304 	bic.w	r3, r3, #4
 8003a08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d015      	beq.n	8003a3e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a12:	f7fd faef 	bl	8000ff4 <HAL_GetTick>
 8003a16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a18:	e00a      	b.n	8003a30 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1a:	f7fd faeb 	bl	8000ff4 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e122      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a30:	4b6e      	ldr	r3, [pc, #440]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ee      	beq.n	8003a1a <HAL_RCC_OscConfig+0x5b6>
 8003a3c:	e014      	b.n	8003a68 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3e:	f7fd fad9 	bl	8000ff4 <HAL_GetTick>
 8003a42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a44:	e00a      	b.n	8003a5c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a46:	f7fd fad5 	bl	8000ff4 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e10c      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a5c:	4b63      	ldr	r3, [pc, #396]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1ee      	bne.n	8003a46 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8101 	beq.w	8003c74 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003a72:	4b5e      	ldr	r3, [pc, #376]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a7a:	2b18      	cmp	r3, #24
 8003a7c:	f000 80bc 	beq.w	8003bf8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	f040 8095 	bne.w	8003bb4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	4b58      	ldr	r3, [pc, #352]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a57      	ldr	r2, [pc, #348]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003a90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a96:	f7fd faad 	bl	8000ff4 <HAL_GetTick>
 8003a9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a9e:	f7fd faa9 	bl	8000ff4 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e0e2      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ab0:	4b4e      	ldr	r3, [pc, #312]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1f0      	bne.n	8003a9e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003abc:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003abe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ac0:	4b4b      	ldr	r3, [pc, #300]	; (8003bf0 <HAL_RCC_OscConfig+0x78c>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003acc:	0112      	lsls	r2, r2, #4
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	4946      	ldr	r1, [pc, #280]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	628b      	str	r3, [r1, #40]	; 0x28
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	3b01      	subs	r3, #1
 8003adc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	025b      	lsls	r3, r3, #9
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	3b01      	subs	r3, #1
 8003af2:	041b      	lsls	r3, r3, #16
 8003af4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afe:	3b01      	subs	r3, #1
 8003b00:	061b      	lsls	r3, r3, #24
 8003b02:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b06:	4939      	ldr	r1, [pc, #228]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003b0c:	4b37      	ldr	r3, [pc, #220]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	4a36      	ldr	r2, [pc, #216]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b18:	4b34      	ldr	r3, [pc, #208]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b1c:	4b35      	ldr	r3, [pc, #212]	; (8003bf4 <HAL_RCC_OscConfig+0x790>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b24:	00d2      	lsls	r2, r2, #3
 8003b26:	4931      	ldr	r1, [pc, #196]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b2c:	4b2f      	ldr	r3, [pc, #188]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	f023 020c 	bic.w	r2, r3, #12
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	492c      	ldr	r1, [pc, #176]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003b3e:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	f023 0202 	bic.w	r2, r3, #2
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	4928      	ldr	r1, [pc, #160]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b50:	4b26      	ldr	r3, [pc, #152]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	4a25      	ldr	r2, [pc, #148]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b5c:	4b23      	ldr	r3, [pc, #140]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	4a22      	ldr	r2, [pc, #136]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003b68:	4b20      	ldr	r3, [pc, #128]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	4a1c      	ldr	r2, [pc, #112]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b80:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a19      	ldr	r2, [pc, #100]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fd fa32 	bl	8000ff4 <HAL_GetTick>
 8003b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fd fa2e 	bl	8000ff4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e067      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x730>
 8003bb2:	e05f      	b.n	8003c74 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb4:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a0c      	ldr	r2, [pc, #48]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fd fa18 	bl	8000ff4 <HAL_GetTick>
 8003bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fd fa14 	bl	8000ff4 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e04d      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bda:	4b04      	ldr	r3, [pc, #16]	; (8003bec <HAL_RCC_OscConfig+0x788>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x764>
 8003be6:	e045      	b.n	8003c74 <HAL_RCC_OscConfig+0x810>
 8003be8:	58024800 	.word	0x58024800
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	fffffc0c 	.word	0xfffffc0c
 8003bf4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003bf8:	4b21      	ldr	r3, [pc, #132]	; (8003c80 <HAL_RCC_OscConfig+0x81c>)
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <HAL_RCC_OscConfig+0x81c>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d031      	beq.n	8003c70 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f003 0203 	and.w	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d12a      	bne.n	8003c70 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d122      	bne.n	8003c70 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d11a      	bne.n	8003c70 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	0a5b      	lsrs	r3, r3, #9
 8003c3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c46:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d111      	bne.n	8003c70 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	0c1b      	lsrs	r3, r3, #16
 8003c50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d108      	bne.n	8003c70 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	0e1b      	lsrs	r3, r3, #24
 8003c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3730      	adds	r7, #48	; 0x30
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	58024400 	.word	0x58024400

08003c84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e19c      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c98:	4b8a      	ldr	r3, [pc, #552]	; (8003ec4 <HAL_RCC_ClockConfig+0x240>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d910      	bls.n	8003cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b87      	ldr	r3, [pc, #540]	; (8003ec4 <HAL_RCC_ClockConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 020f 	bic.w	r2, r3, #15
 8003cae:	4985      	ldr	r1, [pc, #532]	; (8003ec4 <HAL_RCC_ClockConfig+0x240>)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb6:	4b83      	ldr	r3, [pc, #524]	; (8003ec4 <HAL_RCC_ClockConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e184      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d010      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	4b7b      	ldr	r3, [pc, #492]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d908      	bls.n	8003cf6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ce4:	4b78      	ldr	r3, [pc, #480]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	4975      	ldr	r1, [pc, #468]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d010      	beq.n	8003d24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	4b70      	ldr	r3, [pc, #448]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d908      	bls.n	8003d24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d12:	4b6d      	ldr	r3, [pc, #436]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	496a      	ldr	r1, [pc, #424]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d010      	beq.n	8003d52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699a      	ldr	r2, [r3, #24]
 8003d34:	4b64      	ldr	r3, [pc, #400]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d908      	bls.n	8003d52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d40:	4b61      	ldr	r3, [pc, #388]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	495e      	ldr	r1, [pc, #376]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d010      	beq.n	8003d80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69da      	ldr	r2, [r3, #28]
 8003d62:	4b59      	ldr	r3, [pc, #356]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d908      	bls.n	8003d80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d6e:	4b56      	ldr	r3, [pc, #344]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	4953      	ldr	r1, [pc, #332]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d010      	beq.n	8003dae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	4b4d      	ldr	r3, [pc, #308]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d908      	bls.n	8003dae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d9c:	4b4a      	ldr	r3, [pc, #296]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f023 020f 	bic.w	r2, r3, #15
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4947      	ldr	r1, [pc, #284]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d055      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003dba:	4b43      	ldr	r3, [pc, #268]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	4940      	ldr	r1, [pc, #256]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d107      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003dd4:	4b3c      	ldr	r3, [pc, #240]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d121      	bne.n	8003e24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0f6      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d107      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dec:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d115      	bne.n	8003e24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0ea      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d107      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e04:	4b30      	ldr	r3, [pc, #192]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0de      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e14:	4b2c      	ldr	r3, [pc, #176]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0d6      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e24:	4b28      	ldr	r3, [pc, #160]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f023 0207 	bic.w	r2, r3, #7
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4925      	ldr	r1, [pc, #148]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e36:	f7fd f8dd 	bl	8000ff4 <HAL_GetTick>
 8003e3a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3e:	f7fd f8d9 	bl	8000ff4 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e0be      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e54:	4b1c      	ldr	r3, [pc, #112]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d1eb      	bne.n	8003e3e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d010      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	4b14      	ldr	r3, [pc, #80]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d208      	bcs.n	8003e94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e82:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f023 020f 	bic.w	r2, r3, #15
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	490e      	ldr	r1, [pc, #56]	; (8003ec8 <HAL_RCC_ClockConfig+0x244>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <HAL_RCC_ClockConfig+0x240>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d214      	bcs.n	8003ecc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <HAL_RCC_ClockConfig+0x240>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 020f 	bic.w	r2, r3, #15
 8003eaa:	4906      	ldr	r1, [pc, #24]	; (8003ec4 <HAL_RCC_ClockConfig+0x240>)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb2:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <HAL_RCC_ClockConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d005      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e086      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x34e>
 8003ec4:	52002000 	.word	0x52002000
 8003ec8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d010      	beq.n	8003efa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	4b3f      	ldr	r3, [pc, #252]	; (8003fdc <HAL_RCC_ClockConfig+0x358>)
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d208      	bcs.n	8003efa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ee8:	4b3c      	ldr	r3, [pc, #240]	; (8003fdc <HAL_RCC_ClockConfig+0x358>)
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	4939      	ldr	r1, [pc, #228]	; (8003fdc <HAL_RCC_ClockConfig+0x358>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d010      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695a      	ldr	r2, [r3, #20]
 8003f0a:	4b34      	ldr	r3, [pc, #208]	; (8003fdc <HAL_RCC_ClockConfig+0x358>)
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d208      	bcs.n	8003f28 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f16:	4b31      	ldr	r3, [pc, #196]	; (8003fdc <HAL_RCC_ClockConfig+0x358>)
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	492e      	ldr	r1, [pc, #184]	; (8003fdc <HAL_RCC_ClockConfig+0x358>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d010      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	4b28      	ldr	r3, [pc, #160]	; (8003fdc <HAL_RCC_ClockConfig+0x358>)
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d208      	bcs.n	8003f56 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f44:	4b25      	ldr	r3, [pc, #148]	; (8003fdc <HAL_RCC_ClockConfig+0x358>)
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	4922      	ldr	r1, [pc, #136]	; (8003fdc <HAL_RCC_ClockConfig+0x358>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d010      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69da      	ldr	r2, [r3, #28]
 8003f66:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <HAL_RCC_ClockConfig+0x358>)
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d208      	bcs.n	8003f84 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f72:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <HAL_RCC_ClockConfig+0x358>)
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	4917      	ldr	r1, [pc, #92]	; (8003fdc <HAL_RCC_ClockConfig+0x358>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f84:	f000 f834 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4b14      	ldr	r3, [pc, #80]	; (8003fdc <HAL_RCC_ClockConfig+0x358>)
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	4912      	ldr	r1, [pc, #72]	; (8003fe0 <HAL_RCC_ClockConfig+0x35c>)
 8003f96:	5ccb      	ldrb	r3, [r1, r3]
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <HAL_RCC_ClockConfig+0x358>)
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	4a0d      	ldr	r2, [pc, #52]	; (8003fe0 <HAL_RCC_ClockConfig+0x35c>)
 8003fac:	5cd3      	ldrb	r3, [r2, r3]
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb8:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <HAL_RCC_ClockConfig+0x360>)
 8003fba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fbc:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <HAL_RCC_ClockConfig+0x364>)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <HAL_RCC_ClockConfig+0x368>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fc fc50 	bl	800086c <HAL_InitTick>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	58024400 	.word	0x58024400
 8003fe0:	0801b210 	.word	0x0801b210
 8003fe4:	24000004 	.word	0x24000004
 8003fe8:	24000000 	.word	0x24000000
 8003fec:	24000008 	.word	0x24000008

08003ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b089      	sub	sp, #36	; 0x24
 8003ff4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ff6:	4bb3      	ldr	r3, [pc, #716]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ffe:	2b18      	cmp	r3, #24
 8004000:	f200 8155 	bhi.w	80042ae <HAL_RCC_GetSysClockFreq+0x2be>
 8004004:	a201      	add	r2, pc, #4	; (adr r2, 800400c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400a:	bf00      	nop
 800400c:	08004071 	.word	0x08004071
 8004010:	080042af 	.word	0x080042af
 8004014:	080042af 	.word	0x080042af
 8004018:	080042af 	.word	0x080042af
 800401c:	080042af 	.word	0x080042af
 8004020:	080042af 	.word	0x080042af
 8004024:	080042af 	.word	0x080042af
 8004028:	080042af 	.word	0x080042af
 800402c:	08004097 	.word	0x08004097
 8004030:	080042af 	.word	0x080042af
 8004034:	080042af 	.word	0x080042af
 8004038:	080042af 	.word	0x080042af
 800403c:	080042af 	.word	0x080042af
 8004040:	080042af 	.word	0x080042af
 8004044:	080042af 	.word	0x080042af
 8004048:	080042af 	.word	0x080042af
 800404c:	0800409d 	.word	0x0800409d
 8004050:	080042af 	.word	0x080042af
 8004054:	080042af 	.word	0x080042af
 8004058:	080042af 	.word	0x080042af
 800405c:	080042af 	.word	0x080042af
 8004060:	080042af 	.word	0x080042af
 8004064:	080042af 	.word	0x080042af
 8004068:	080042af 	.word	0x080042af
 800406c:	080040a3 	.word	0x080040a3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004070:	4b94      	ldr	r3, [pc, #592]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800407c:	4b91      	ldr	r3, [pc, #580]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	08db      	lsrs	r3, r3, #3
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	4a90      	ldr	r2, [pc, #576]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004088:	fa22 f303 	lsr.w	r3, r2, r3
 800408c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800408e:	e111      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004090:	4b8d      	ldr	r3, [pc, #564]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004092:	61bb      	str	r3, [r7, #24]
    break;
 8004094:	e10e      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004096:	4b8d      	ldr	r3, [pc, #564]	; (80042cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004098:	61bb      	str	r3, [r7, #24]
    break;
 800409a:	e10b      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800409c:	4b8c      	ldr	r3, [pc, #560]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800409e:	61bb      	str	r3, [r7, #24]
    break;
 80040a0:	e108      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040a2:	4b88      	ldr	r3, [pc, #544]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80040ac:	4b85      	ldr	r3, [pc, #532]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80040b8:	4b82      	ldr	r3, [pc, #520]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80040c2:	4b80      	ldr	r3, [pc, #512]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c6:	08db      	lsrs	r3, r3, #3
 80040c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	ee07 3a90 	vmov	s15, r3
 80040d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040da:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80e1 	beq.w	80042a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	f000 8083 	beq.w	80041f4 <HAL_RCC_GetSysClockFreq+0x204>
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	f200 80a1 	bhi.w	8004238 <HAL_RCC_GetSysClockFreq+0x248>
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x114>
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d056      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004102:	e099      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004104:	4b6f      	ldr	r3, [pc, #444]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d02d      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004110:	4b6c      	ldr	r3, [pc, #432]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	08db      	lsrs	r3, r3, #3
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	4a6b      	ldr	r2, [pc, #428]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
 8004120:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	ee07 3a90 	vmov	s15, r3
 8004128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800413a:	4b62      	ldr	r3, [pc, #392]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800414a:	ed97 6a02 	vldr	s12, [r7, #8]
 800414e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80042d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800415a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800415e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004166:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800416a:	e087      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004176:	eddf 6a58 	vldr	s13, [pc, #352]	; 80042d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800417a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800417e:	4b51      	ldr	r3, [pc, #324]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800418e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004192:	eddf 5a50 	vldr	s11, [pc, #320]	; 80042d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800419a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800419e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ae:	e065      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 80042dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80041be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041c2:	4b40      	ldr	r3, [pc, #256]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80041d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80042d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041f2:	e043      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80042e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004206:	4b2f      	ldr	r3, [pc, #188]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420e:	ee07 3a90 	vmov	s15, r3
 8004212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004216:	ed97 6a02 	vldr	s12, [r7, #8]
 800421a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80042d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800421e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800422a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800422e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004236:	e021      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004242:	eddf 6a26 	vldr	s13, [pc, #152]	; 80042dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800424a:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800425a:	ed97 6a02 	vldr	s12, [r7, #8]
 800425e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80042d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800426a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800426e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800427a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	0a5b      	lsrs	r3, r3, #9
 8004282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004286:	3301      	adds	r3, #1
 8004288:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	ee07 3a90 	vmov	s15, r3
 8004290:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004294:	edd7 6a07 	vldr	s13, [r7, #28]
 8004298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800429c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042a0:	ee17 3a90 	vmov	r3, s15
 80042a4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80042a6:	e005      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]
    break;
 80042ac:	e002      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80042ae:	4b07      	ldr	r3, [pc, #28]	; (80042cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042b0:	61bb      	str	r3, [r7, #24]
    break;
 80042b2:	bf00      	nop
  }

  return sysclockfreq;
 80042b4:	69bb      	ldr	r3, [r7, #24]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3724      	adds	r7, #36	; 0x24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	58024400 	.word	0x58024400
 80042c8:	03d09000 	.word	0x03d09000
 80042cc:	003d0900 	.word	0x003d0900
 80042d0:	017d7840 	.word	0x017d7840
 80042d4:	46000000 	.word	0x46000000
 80042d8:	4c742400 	.word	0x4c742400
 80042dc:	4a742400 	.word	0x4a742400
 80042e0:	4bbebc20 	.word	0x4bbebc20

080042e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80042ea:	f7ff fe81 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 80042ee:	4602      	mov	r2, r0
 80042f0:	4b10      	ldr	r3, [pc, #64]	; (8004334 <HAL_RCC_GetHCLKFreq+0x50>)
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	0a1b      	lsrs	r3, r3, #8
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	490f      	ldr	r1, [pc, #60]	; (8004338 <HAL_RCC_GetHCLKFreq+0x54>)
 80042fc:	5ccb      	ldrb	r3, [r1, r3]
 80042fe:	f003 031f 	and.w	r3, r3, #31
 8004302:	fa22 f303 	lsr.w	r3, r2, r3
 8004306:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <HAL_RCC_GetHCLKFreq+0x50>)
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	4a09      	ldr	r2, [pc, #36]	; (8004338 <HAL_RCC_GetHCLKFreq+0x54>)
 8004312:	5cd3      	ldrb	r3, [r2, r3]
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	fa22 f303 	lsr.w	r3, r2, r3
 800431e:	4a07      	ldr	r2, [pc, #28]	; (800433c <HAL_RCC_GetHCLKFreq+0x58>)
 8004320:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004322:	4a07      	ldr	r2, [pc, #28]	; (8004340 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <HAL_RCC_GetHCLKFreq+0x58>)
 800432a:	681b      	ldr	r3, [r3, #0]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	58024400 	.word	0x58024400
 8004338:	0801b210 	.word	0x0801b210
 800433c:	24000004 	.word	0x24000004
 8004340:	24000000 	.word	0x24000000

08004344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004348:	f7ff ffcc 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 800434c:	4602      	mov	r2, r0
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	0a1b      	lsrs	r3, r3, #8
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	4904      	ldr	r1, [pc, #16]	; (800436c <HAL_RCC_GetPCLK2Freq+0x28>)
 800435a:	5ccb      	ldrb	r3, [r1, r3]
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004364:	4618      	mov	r0, r3
 8004366:	bd80      	pop	{r7, pc}
 8004368:	58024400 	.word	0x58024400
 800436c:	0801b210 	.word	0x0801b210

08004370 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	223f      	movs	r2, #63	; 0x3f
 800437e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004380:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <HAL_RCC_GetClockConfig+0x7c>)
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f003 0207 	and.w	r2, r3, #7
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800438c:	4b17      	ldr	r3, [pc, #92]	; (80043ec <HAL_RCC_GetClockConfig+0x7c>)
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004398:	4b14      	ldr	r3, [pc, #80]	; (80043ec <HAL_RCC_GetClockConfig+0x7c>)
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f003 020f 	and.w	r2, r3, #15
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <HAL_RCC_GetClockConfig+0x7c>)
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80043b0:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <HAL_RCC_GetClockConfig+0x7c>)
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <HAL_RCC_GetClockConfig+0x7c>)
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80043c8:	4b08      	ldr	r3, [pc, #32]	; (80043ec <HAL_RCC_GetClockConfig+0x7c>)
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <HAL_RCC_GetClockConfig+0x80>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 020f 	and.w	r2, r3, #15
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	601a      	str	r2, [r3, #0]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	58024400 	.word	0x58024400
 80043f0:	52002000 	.word	0x52002000

080043f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e049      	b.n	800449a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f841 	bl	80044a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f000 f9f8 	bl	8004828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
	...

080044b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d001      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e04f      	b.n	8004570 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a23      	ldr	r2, [pc, #140]	; (800457c <HAL_TIM_Base_Start_IT+0xc4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01d      	beq.n	800452e <HAL_TIM_Base_Start_IT+0x76>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fa:	d018      	beq.n	800452e <HAL_TIM_Base_Start_IT+0x76>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <HAL_TIM_Base_Start_IT+0xc8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <HAL_TIM_Base_Start_IT+0x76>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a1e      	ldr	r2, [pc, #120]	; (8004584 <HAL_TIM_Base_Start_IT+0xcc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00e      	beq.n	800452e <HAL_TIM_Base_Start_IT+0x76>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1c      	ldr	r2, [pc, #112]	; (8004588 <HAL_TIM_Base_Start_IT+0xd0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_TIM_Base_Start_IT+0x76>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1b      	ldr	r2, [pc, #108]	; (800458c <HAL_TIM_Base_Start_IT+0xd4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_TIM_Base_Start_IT+0x76>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a19      	ldr	r2, [pc, #100]	; (8004590 <HAL_TIM_Base_Start_IT+0xd8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d115      	bne.n	800455a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	4b17      	ldr	r3, [pc, #92]	; (8004594 <HAL_TIM_Base_Start_IT+0xdc>)
 8004536:	4013      	ands	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b06      	cmp	r3, #6
 800453e:	d015      	beq.n	800456c <HAL_TIM_Base_Start_IT+0xb4>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004546:	d011      	beq.n	800456c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004558:	e008      	b.n	800456c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e000      	b.n	800456e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	40010000 	.word	0x40010000
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40000c00 	.word	0x40000c00
 800458c:	40010400 	.word	0x40010400
 8004590:	40001800 	.word	0x40001800
 8004594:	00010007 	.word	0x00010007

08004598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d122      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d11b      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0202 	mvn.w	r2, #2
 80045c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f905 	bl	80047ea <HAL_TIM_IC_CaptureCallback>
 80045e0:	e005      	b.n	80045ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f8f7 	bl	80047d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f908 	bl	80047fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d122      	bne.n	8004648 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b04      	cmp	r3, #4
 800460e:	d11b      	bne.n	8004648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0204 	mvn.w	r2, #4
 8004618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f8db 	bl	80047ea <HAL_TIM_IC_CaptureCallback>
 8004634:	e005      	b.n	8004642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f8cd 	bl	80047d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8de 	bl	80047fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b08      	cmp	r3, #8
 8004654:	d122      	bne.n	800469c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b08      	cmp	r3, #8
 8004662:	d11b      	bne.n	800469c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0208 	mvn.w	r2, #8
 800466c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2204      	movs	r2, #4
 8004672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f8b1 	bl	80047ea <HAL_TIM_IC_CaptureCallback>
 8004688:	e005      	b.n	8004696 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f8a3 	bl	80047d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f8b4 	bl	80047fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d122      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d11b      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0210 	mvn.w	r2, #16
 80046c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2208      	movs	r2, #8
 80046c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f887 	bl	80047ea <HAL_TIM_IC_CaptureCallback>
 80046dc:	e005      	b.n	80046ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f879 	bl	80047d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f88a 	bl	80047fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d10e      	bne.n	800471c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b01      	cmp	r3, #1
 800470a:	d107      	bne.n	800471c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0201 	mvn.w	r2, #1
 8004714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fc f86a 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	2b80      	cmp	r3, #128	; 0x80
 8004728:	d10e      	bne.n	8004748 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004734:	2b80      	cmp	r3, #128	; 0x80
 8004736:	d107      	bne.n	8004748 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f914 	bl	8004970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004756:	d10e      	bne.n	8004776 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b80      	cmp	r3, #128	; 0x80
 8004764:	d107      	bne.n	8004776 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800476e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f907 	bl	8004984 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d10e      	bne.n	80047a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b40      	cmp	r3, #64	; 0x40
 8004790:	d107      	bne.n	80047a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800479a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f838 	bl	8004812 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d10e      	bne.n	80047ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d107      	bne.n	80047ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f06f 0220 	mvn.w	r2, #32
 80047c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f8c7 	bl	800495c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
	...

08004828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a40      	ldr	r2, [pc, #256]	; (800493c <TIM_Base_SetConfig+0x114>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d013      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004846:	d00f      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a3d      	ldr	r2, [pc, #244]	; (8004940 <TIM_Base_SetConfig+0x118>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00b      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a3c      	ldr	r2, [pc, #240]	; (8004944 <TIM_Base_SetConfig+0x11c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d007      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a3b      	ldr	r2, [pc, #236]	; (8004948 <TIM_Base_SetConfig+0x120>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d003      	beq.n	8004868 <TIM_Base_SetConfig+0x40>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a3a      	ldr	r2, [pc, #232]	; (800494c <TIM_Base_SetConfig+0x124>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d108      	bne.n	800487a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2f      	ldr	r2, [pc, #188]	; (800493c <TIM_Base_SetConfig+0x114>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01f      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004888:	d01b      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a2c      	ldr	r2, [pc, #176]	; (8004940 <TIM_Base_SetConfig+0x118>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d017      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a2b      	ldr	r2, [pc, #172]	; (8004944 <TIM_Base_SetConfig+0x11c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a2a      	ldr	r2, [pc, #168]	; (8004948 <TIM_Base_SetConfig+0x120>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00f      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a29      	ldr	r2, [pc, #164]	; (800494c <TIM_Base_SetConfig+0x124>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00b      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a28      	ldr	r2, [pc, #160]	; (8004950 <TIM_Base_SetConfig+0x128>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d007      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a27      	ldr	r2, [pc, #156]	; (8004954 <TIM_Base_SetConfig+0x12c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_Base_SetConfig+0x9a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a26      	ldr	r2, [pc, #152]	; (8004958 <TIM_Base_SetConfig+0x130>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d108      	bne.n	80048d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a10      	ldr	r2, [pc, #64]	; (800493c <TIM_Base_SetConfig+0x114>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00f      	beq.n	8004920 <TIM_Base_SetConfig+0xf8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a12      	ldr	r2, [pc, #72]	; (800494c <TIM_Base_SetConfig+0x124>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00b      	beq.n	8004920 <TIM_Base_SetConfig+0xf8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a11      	ldr	r2, [pc, #68]	; (8004950 <TIM_Base_SetConfig+0x128>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d007      	beq.n	8004920 <TIM_Base_SetConfig+0xf8>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a10      	ldr	r2, [pc, #64]	; (8004954 <TIM_Base_SetConfig+0x12c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_Base_SetConfig+0xf8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a0f      	ldr	r2, [pc, #60]	; (8004958 <TIM_Base_SetConfig+0x130>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d103      	bne.n	8004928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	615a      	str	r2, [r3, #20]
}
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40010000 	.word	0x40010000
 8004940:	40000400 	.word	0x40000400
 8004944:	40000800 	.word	0x40000800
 8004948:	40000c00 	.word	0x40000c00
 800494c:	40010400 	.word	0x40010400
 8004950:	40014000 	.word	0x40014000
 8004954:	40014400 	.word	0x40014400
 8004958:	40014800 	.word	0x40014800

0800495c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800499e:	4b9a      	ldr	r3, [pc, #616]	; (8004c08 <MX_LWIP_Init+0x270>)
 80049a0:	22c0      	movs	r2, #192	; 0xc0
 80049a2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80049a4:	4b98      	ldr	r3, [pc, #608]	; (8004c08 <MX_LWIP_Init+0x270>)
 80049a6:	22a8      	movs	r2, #168	; 0xa8
 80049a8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 33;
 80049aa:	4b97      	ldr	r3, [pc, #604]	; (8004c08 <MX_LWIP_Init+0x270>)
 80049ac:	2221      	movs	r2, #33	; 0x21
 80049ae:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 7;
 80049b0:	4b95      	ldr	r3, [pc, #596]	; (8004c08 <MX_LWIP_Init+0x270>)
 80049b2:	2207      	movs	r2, #7
 80049b4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80049b6:	4b95      	ldr	r3, [pc, #596]	; (8004c0c <MX_LWIP_Init+0x274>)
 80049b8:	22ff      	movs	r2, #255	; 0xff
 80049ba:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80049bc:	4b93      	ldr	r3, [pc, #588]	; (8004c0c <MX_LWIP_Init+0x274>)
 80049be:	22ff      	movs	r2, #255	; 0xff
 80049c0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80049c2:	4b92      	ldr	r3, [pc, #584]	; (8004c0c <MX_LWIP_Init+0x274>)
 80049c4:	22ff      	movs	r2, #255	; 0xff
 80049c6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80049c8:	4b90      	ldr	r3, [pc, #576]	; (8004c0c <MX_LWIP_Init+0x274>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80049ce:	4b90      	ldr	r3, [pc, #576]	; (8004c10 <MX_LWIP_Init+0x278>)
 80049d0:	22c0      	movs	r2, #192	; 0xc0
 80049d2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80049d4:	4b8e      	ldr	r3, [pc, #568]	; (8004c10 <MX_LWIP_Init+0x278>)
 80049d6:	22a8      	movs	r2, #168	; 0xa8
 80049d8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80049da:	4b8d      	ldr	r3, [pc, #564]	; (8004c10 <MX_LWIP_Init+0x278>)
 80049dc:	2201      	movs	r2, #1
 80049de:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80049e0:	4b8b      	ldr	r3, [pc, #556]	; (8004c10 <MX_LWIP_Init+0x278>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80049e6:	2100      	movs	r1, #0
 80049e8:	2000      	movs	r0, #0
 80049ea:	f006 ff51 	bl	800b890 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80049ee:	4b86      	ldr	r3, [pc, #536]	; (8004c08 <MX_LWIP_Init+0x270>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	061a      	lsls	r2, r3, #24
 80049f4:	4b84      	ldr	r3, [pc, #528]	; (8004c08 <MX_LWIP_Init+0x270>)
 80049f6:	785b      	ldrb	r3, [r3, #1]
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	431a      	orrs	r2, r3
 80049fc:	4b82      	ldr	r3, [pc, #520]	; (8004c08 <MX_LWIP_Init+0x270>)
 80049fe:	789b      	ldrb	r3, [r3, #2]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	4313      	orrs	r3, r2
 8004a04:	4a80      	ldr	r2, [pc, #512]	; (8004c08 <MX_LWIP_Init+0x270>)
 8004a06:	78d2      	ldrb	r2, [r2, #3]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	061a      	lsls	r2, r3, #24
 8004a0c:	4b7e      	ldr	r3, [pc, #504]	; (8004c08 <MX_LWIP_Init+0x270>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	0619      	lsls	r1, r3, #24
 8004a12:	4b7d      	ldr	r3, [pc, #500]	; (8004c08 <MX_LWIP_Init+0x270>)
 8004a14:	785b      	ldrb	r3, [r3, #1]
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	4319      	orrs	r1, r3
 8004a1a:	4b7b      	ldr	r3, [pc, #492]	; (8004c08 <MX_LWIP_Init+0x270>)
 8004a1c:	789b      	ldrb	r3, [r3, #2]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	430b      	orrs	r3, r1
 8004a22:	4979      	ldr	r1, [pc, #484]	; (8004c08 <MX_LWIP_Init+0x270>)
 8004a24:	78c9      	ldrb	r1, [r1, #3]
 8004a26:	430b      	orrs	r3, r1
 8004a28:	021b      	lsls	r3, r3, #8
 8004a2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	4b75      	ldr	r3, [pc, #468]	; (8004c08 <MX_LWIP_Init+0x270>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	0619      	lsls	r1, r3, #24
 8004a36:	4b74      	ldr	r3, [pc, #464]	; (8004c08 <MX_LWIP_Init+0x270>)
 8004a38:	785b      	ldrb	r3, [r3, #1]
 8004a3a:	041b      	lsls	r3, r3, #16
 8004a3c:	4319      	orrs	r1, r3
 8004a3e:	4b72      	ldr	r3, [pc, #456]	; (8004c08 <MX_LWIP_Init+0x270>)
 8004a40:	789b      	ldrb	r3, [r3, #2]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	430b      	orrs	r3, r1
 8004a46:	4970      	ldr	r1, [pc, #448]	; (8004c08 <MX_LWIP_Init+0x270>)
 8004a48:	78c9      	ldrb	r1, [r1, #3]
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	0a1b      	lsrs	r3, r3, #8
 8004a4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a52:	431a      	orrs	r2, r3
 8004a54:	4b6c      	ldr	r3, [pc, #432]	; (8004c08 <MX_LWIP_Init+0x270>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	0619      	lsls	r1, r3, #24
 8004a5a:	4b6b      	ldr	r3, [pc, #428]	; (8004c08 <MX_LWIP_Init+0x270>)
 8004a5c:	785b      	ldrb	r3, [r3, #1]
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	4319      	orrs	r1, r3
 8004a62:	4b69      	ldr	r3, [pc, #420]	; (8004c08 <MX_LWIP_Init+0x270>)
 8004a64:	789b      	ldrb	r3, [r3, #2]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	4967      	ldr	r1, [pc, #412]	; (8004c08 <MX_LWIP_Init+0x270>)
 8004a6c:	78c9      	ldrb	r1, [r1, #3]
 8004a6e:	430b      	orrs	r3, r1
 8004a70:	0e1b      	lsrs	r3, r3, #24
 8004a72:	4313      	orrs	r3, r2
 8004a74:	4a67      	ldr	r2, [pc, #412]	; (8004c14 <MX_LWIP_Init+0x27c>)
 8004a76:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004a78:	4b64      	ldr	r3, [pc, #400]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	061a      	lsls	r2, r3, #24
 8004a7e:	4b63      	ldr	r3, [pc, #396]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004a80:	785b      	ldrb	r3, [r3, #1]
 8004a82:	041b      	lsls	r3, r3, #16
 8004a84:	431a      	orrs	r2, r3
 8004a86:	4b61      	ldr	r3, [pc, #388]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004a88:	789b      	ldrb	r3, [r3, #2]
 8004a8a:	021b      	lsls	r3, r3, #8
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	4a5f      	ldr	r2, [pc, #380]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004a90:	78d2      	ldrb	r2, [r2, #3]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	061a      	lsls	r2, r3, #24
 8004a96:	4b5d      	ldr	r3, [pc, #372]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	0619      	lsls	r1, r3, #24
 8004a9c:	4b5b      	ldr	r3, [pc, #364]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	4319      	orrs	r1, r3
 8004aa4:	4b59      	ldr	r3, [pc, #356]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004aa6:	789b      	ldrb	r3, [r3, #2]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	4957      	ldr	r1, [pc, #348]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004aae:	78c9      	ldrb	r1, [r1, #3]
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	021b      	lsls	r3, r3, #8
 8004ab4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	4b54      	ldr	r3, [pc, #336]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	0619      	lsls	r1, r3, #24
 8004ac0:	4b52      	ldr	r3, [pc, #328]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004ac2:	785b      	ldrb	r3, [r3, #1]
 8004ac4:	041b      	lsls	r3, r3, #16
 8004ac6:	4319      	orrs	r1, r3
 8004ac8:	4b50      	ldr	r3, [pc, #320]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004aca:	789b      	ldrb	r3, [r3, #2]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	494e      	ldr	r1, [pc, #312]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004ad2:	78c9      	ldrb	r1, [r1, #3]
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	0a1b      	lsrs	r3, r3, #8
 8004ad8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004adc:	431a      	orrs	r2, r3
 8004ade:	4b4b      	ldr	r3, [pc, #300]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	0619      	lsls	r1, r3, #24
 8004ae4:	4b49      	ldr	r3, [pc, #292]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004ae6:	785b      	ldrb	r3, [r3, #1]
 8004ae8:	041b      	lsls	r3, r3, #16
 8004aea:	4319      	orrs	r1, r3
 8004aec:	4b47      	ldr	r3, [pc, #284]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004aee:	789b      	ldrb	r3, [r3, #2]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	430b      	orrs	r3, r1
 8004af4:	4945      	ldr	r1, [pc, #276]	; (8004c0c <MX_LWIP_Init+0x274>)
 8004af6:	78c9      	ldrb	r1, [r1, #3]
 8004af8:	430b      	orrs	r3, r1
 8004afa:	0e1b      	lsrs	r3, r3, #24
 8004afc:	4313      	orrs	r3, r2
 8004afe:	4a46      	ldr	r2, [pc, #280]	; (8004c18 <MX_LWIP_Init+0x280>)
 8004b00:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004b02:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	061a      	lsls	r2, r3, #24
 8004b08:	4b41      	ldr	r3, [pc, #260]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b0a:	785b      	ldrb	r3, [r3, #1]
 8004b0c:	041b      	lsls	r3, r3, #16
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	4b3f      	ldr	r3, [pc, #252]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b12:	789b      	ldrb	r3, [r3, #2]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	4313      	orrs	r3, r2
 8004b18:	4a3d      	ldr	r2, [pc, #244]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b1a:	78d2      	ldrb	r2, [r2, #3]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	061a      	lsls	r2, r3, #24
 8004b20:	4b3b      	ldr	r3, [pc, #236]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	0619      	lsls	r1, r3, #24
 8004b26:	4b3a      	ldr	r3, [pc, #232]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b28:	785b      	ldrb	r3, [r3, #1]
 8004b2a:	041b      	lsls	r3, r3, #16
 8004b2c:	4319      	orrs	r1, r3
 8004b2e:	4b38      	ldr	r3, [pc, #224]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b30:	789b      	ldrb	r3, [r3, #2]
 8004b32:	021b      	lsls	r3, r3, #8
 8004b34:	430b      	orrs	r3, r1
 8004b36:	4936      	ldr	r1, [pc, #216]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b38:	78c9      	ldrb	r1, [r1, #3]
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b42:	431a      	orrs	r2, r3
 8004b44:	4b32      	ldr	r3, [pc, #200]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	0619      	lsls	r1, r3, #24
 8004b4a:	4b31      	ldr	r3, [pc, #196]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b4c:	785b      	ldrb	r3, [r3, #1]
 8004b4e:	041b      	lsls	r3, r3, #16
 8004b50:	4319      	orrs	r1, r3
 8004b52:	4b2f      	ldr	r3, [pc, #188]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b54:	789b      	ldrb	r3, [r3, #2]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	492d      	ldr	r1, [pc, #180]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b5c:	78c9      	ldrb	r1, [r1, #3]
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	0a1b      	lsrs	r3, r3, #8
 8004b62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b66:	431a      	orrs	r2, r3
 8004b68:	4b29      	ldr	r3, [pc, #164]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	0619      	lsls	r1, r3, #24
 8004b6e:	4b28      	ldr	r3, [pc, #160]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b70:	785b      	ldrb	r3, [r3, #1]
 8004b72:	041b      	lsls	r3, r3, #16
 8004b74:	4319      	orrs	r1, r3
 8004b76:	4b26      	ldr	r3, [pc, #152]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b78:	789b      	ldrb	r3, [r3, #2]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	4924      	ldr	r1, [pc, #144]	; (8004c10 <MX_LWIP_Init+0x278>)
 8004b80:	78c9      	ldrb	r1, [r1, #3]
 8004b82:	430b      	orrs	r3, r1
 8004b84:	0e1b      	lsrs	r3, r3, #24
 8004b86:	4313      	orrs	r3, r2
 8004b88:	4a24      	ldr	r2, [pc, #144]	; (8004c1c <MX_LWIP_Init+0x284>)
 8004b8a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004b8c:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <MX_LWIP_Init+0x288>)
 8004b8e:	9302      	str	r3, [sp, #8]
 8004b90:	4b24      	ldr	r3, [pc, #144]	; (8004c24 <MX_LWIP_Init+0x28c>)
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	2300      	movs	r3, #0
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <MX_LWIP_Init+0x284>)
 8004b9a:	4a1f      	ldr	r2, [pc, #124]	; (8004c18 <MX_LWIP_Init+0x280>)
 8004b9c:	491d      	ldr	r1, [pc, #116]	; (8004c14 <MX_LWIP_Init+0x27c>)
 8004b9e:	4822      	ldr	r0, [pc, #136]	; (8004c28 <MX_LWIP_Init+0x290>)
 8004ba0:	f007 fcf8 	bl	800c594 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004ba4:	4820      	ldr	r0, [pc, #128]	; (8004c28 <MX_LWIP_Init+0x290>)
 8004ba6:	f007 fea7 	bl	800c8f8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004baa:	4b1f      	ldr	r3, [pc, #124]	; (8004c28 <MX_LWIP_Init+0x290>)
 8004bac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004bb0:	089b      	lsrs	r3, r3, #2
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004bbc:	481a      	ldr	r0, [pc, #104]	; (8004c28 <MX_LWIP_Init+0x290>)
 8004bbe:	f007 feab 	bl	800c918 <netif_set_up>
 8004bc2:	e002      	b.n	8004bca <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004bc4:	4818      	ldr	r0, [pc, #96]	; (8004c28 <MX_LWIP_Init+0x290>)
 8004bc6:	f007 ff13 	bl	800c9f0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004bca:	4918      	ldr	r1, [pc, #96]	; (8004c2c <MX_LWIP_Init+0x294>)
 8004bcc:	4816      	ldr	r0, [pc, #88]	; (8004c28 <MX_LWIP_Init+0x290>)
 8004bce:	f007 ffa5 	bl	800cb1c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004bd2:	2224      	movs	r2, #36	; 0x24
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4816      	ldr	r0, [pc, #88]	; (8004c30 <MX_LWIP_Init+0x298>)
 8004bd8:	f012 f8b9 	bl	8016d4e <memset>
  attributes.name = "EthLink";
 8004bdc:	4b14      	ldr	r3, [pc, #80]	; (8004c30 <MX_LWIP_Init+0x298>)
 8004bde:	4a15      	ldr	r2, [pc, #84]	; (8004c34 <MX_LWIP_Init+0x29c>)
 8004be0:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004be2:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <MX_LWIP_Init+0x298>)
 8004be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004be8:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004bea:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <MX_LWIP_Init+0x298>)
 8004bec:	2210      	movs	r2, #16
 8004bee:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004bf0:	4a0f      	ldr	r2, [pc, #60]	; (8004c30 <MX_LWIP_Init+0x298>)
 8004bf2:	490d      	ldr	r1, [pc, #52]	; (8004c28 <MX_LWIP_Init+0x290>)
 8004bf4:	4810      	ldr	r0, [pc, #64]	; (8004c38 <MX_LWIP_Init+0x2a0>)
 8004bf6:	f000 fd60 	bl	80056ba <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  ethernet_link_status_updated(&gnetif);
 8004bfa:	480b      	ldr	r0, [pc, #44]	; (8004c28 <MX_LWIP_Init+0x290>)
 8004bfc:	f000 f81e 	bl	8004c3c <ethernet_link_status_updated>
/* USER CODE END 3 */
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	24004ce0 	.word	0x24004ce0
 8004c0c:	24004cdc 	.word	0x24004cdc
 8004c10:	24004c7c 	.word	0x24004c7c
 8004c14:	24004cd8 	.word	0x24004cd8
 8004c18:	24004ce4 	.word	0x24004ce4
 8004c1c:	24004ce8 	.word	0x24004ce8
 8004c20:	0800b7a1 	.word	0x0800b7a1
 8004c24:	08005341 	.word	0x08005341
 8004c28:	24004ca4 	.word	0x24004ca4
 8004c2c:	08004c3d 	.word	0x08004c3d
 8004c30:	24004c80 	.word	0x24004c80
 8004c34:	08017ca0 	.word	0x08017ca0
 8004c38:	08005469 	.word	0x08005469

08004c3c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00b      	beq.n	8004c6c <ethernet_link_status_updated+0x30>
  {
/* USER CODE BEGIN 5 */
  	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_SET);
 8004c54:	2201      	movs	r2, #1
 8004c56:	2102      	movs	r1, #2
 8004c58:	480c      	ldr	r0, [pc, #48]	; (8004c8c <ethernet_link_status_updated+0x50>)
 8004c5a:	f7fe fbaf 	bl	80033bc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c64:	480a      	ldr	r0, [pc, #40]	; (8004c90 <ethernet_link_status_updated+0x54>)
 8004c66:	f7fe fba9 	bl	80033bc <HAL_GPIO_WritePin>
/* USER CODE BEGIN 6 */
  	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_RESET);
/* USER CODE END 6 */
  }
}
 8004c6a:	e00a      	b.n	8004c82 <ethernet_link_status_updated+0x46>
  	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c72:	4807      	ldr	r0, [pc, #28]	; (8004c90 <ethernet_link_status_updated+0x54>)
 8004c74:	f7fe fba2 	bl	80033bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_RESET);
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2102      	movs	r1, #2
 8004c7c:	4803      	ldr	r0, [pc, #12]	; (8004c8c <ethernet_link_status_updated+0x50>)
 8004c7e:	f7fe fb9d 	bl	80033bc <HAL_GPIO_WritePin>
}
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	58021000 	.word	0x58021000
 8004c90:	58020400 	.word	0x58020400

08004c94 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08e      	sub	sp, #56	; 0x38
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
 8004ca6:	609a      	str	r2, [r3, #8]
 8004ca8:	60da      	str	r2, [r3, #12]
 8004caa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a5d      	ldr	r2, [pc, #372]	; (8004e28 <HAL_ETH_MspInit+0x194>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	f040 80b3 	bne.w	8004e1e <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004cb8:	4b5c      	ldr	r3, [pc, #368]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004cba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004cbe:	4a5b      	ldr	r2, [pc, #364]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004cc8:	4b58      	ldr	r3, [pc, #352]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004cca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cd2:	623b      	str	r3, [r7, #32]
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004cd6:	4b55      	ldr	r3, [pc, #340]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004cd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004cdc:	4a53      	ldr	r2, [pc, #332]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004ce6:	4b51      	ldr	r3, [pc, #324]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004ce8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004cf4:	4b4d      	ldr	r3, [pc, #308]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004cf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004cfa:	4a4c      	ldr	r2, [pc, #304]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d00:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004d04:	4b49      	ldr	r3, [pc, #292]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004d06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d12:	4b46      	ldr	r3, [pc, #280]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d18:	4a44      	ldr	r2, [pc, #272]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004d1a:	f043 0304 	orr.w	r3, r3, #4
 8004d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d22:	4b42      	ldr	r3, [pc, #264]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d30:	4b3e      	ldr	r3, [pc, #248]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d36:	4a3d      	ldr	r2, [pc, #244]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d40:	4b3a      	ldr	r3, [pc, #232]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d4e:	4b37      	ldr	r3, [pc, #220]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d54:	4a35      	ldr	r2, [pc, #212]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004d56:	f043 0302 	orr.w	r3, r3, #2
 8004d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d5e:	4b33      	ldr	r3, [pc, #204]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d6c:	4b2f      	ldr	r3, [pc, #188]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d72:	4a2e      	ldr	r2, [pc, #184]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d7c:	4b2b      	ldr	r3, [pc, #172]	; (8004e2c <HAL_ETH_MspInit+0x198>)
 8004d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004d8a:	2332      	movs	r3, #50	; 0x32
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d96:	2300      	movs	r3, #0
 8004d98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d9a:	230b      	movs	r3, #11
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004da2:	4619      	mov	r1, r3
 8004da4:	4822      	ldr	r0, [pc, #136]	; (8004e30 <HAL_ETH_MspInit+0x19c>)
 8004da6:	f7fe f959 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004daa:	2386      	movs	r3, #134	; 0x86
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dae:	2302      	movs	r3, #2
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db6:	2300      	movs	r3, #0
 8004db8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004dba:	230b      	movs	r3, #11
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	481b      	ldr	r0, [pc, #108]	; (8004e34 <HAL_ETH_MspInit+0x1a0>)
 8004dc6:	f7fe f949 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ddc:	230b      	movs	r3, #11
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004de4:	4619      	mov	r1, r3
 8004de6:	4814      	ldr	r0, [pc, #80]	; (8004e38 <HAL_ETH_MspInit+0x1a4>)
 8004de8:	f7fe f938 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8004dec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df2:	2302      	movs	r3, #2
 8004df4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004dfe:	230b      	movs	r3, #11
 8004e00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e06:	4619      	mov	r1, r3
 8004e08:	480c      	ldr	r0, [pc, #48]	; (8004e3c <HAL_ETH_MspInit+0x1a8>)
 8004e0a:	f7fe f927 	bl	800305c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2105      	movs	r1, #5
 8004e12:	203d      	movs	r0, #61	; 0x3d
 8004e14:	f7fc f9d2 	bl	80011bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004e18:	203d      	movs	r0, #61	; 0x3d
 8004e1a:	f7fc f9e9 	bl	80011f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004e1e:	bf00      	nop
 8004e20:	3738      	adds	r7, #56	; 0x38
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40028000 	.word	0x40028000
 8004e2c:	58024400 	.word	0x58024400
 8004e30:	58020800 	.word	0x58020800
 8004e34:	58020000 	.word	0x58020000
 8004e38:	58020400 	.word	0x58020400
 8004e3c:	58021800 	.word	0x58021800

08004e40 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <HAL_ETH_RxCpltCallback+0x1c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fecb 	bl	8005be8 <osSemaphoreRelease>
}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	240000b8 	.word	0x240000b8

08004e60 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b0ac      	sub	sp, #176	; 0xb0
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t idx = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004e7a:	4b8f      	ldr	r3, [pc, #572]	; (80050b8 <low_level_init+0x258>)
 8004e7c:	4a8f      	ldr	r2, [pc, #572]	; (80050bc <low_level_init+0x25c>)
 8004e7e:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004e80:	2300      	movs	r3, #0
 8004e82:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8004e88:	23e1      	movs	r3, #225	; 0xe1
 8004e8a:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8004e90:	2300      	movs	r3, #0
 8004e92:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8004e94:	2300      	movs	r3, #0
 8004e96:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8004e98:	4a87      	ldr	r2, [pc, #540]	; (80050b8 <low_level_init+0x258>)
 8004e9a:	f107 030c 	add.w	r3, r7, #12
 8004e9e:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004ea0:	4b85      	ldr	r3, [pc, #532]	; (80050b8 <low_level_init+0x258>)
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004ea6:	4b84      	ldr	r3, [pc, #528]	; (80050b8 <low_level_init+0x258>)
 8004ea8:	4a85      	ldr	r2, [pc, #532]	; (80050c0 <low_level_init+0x260>)
 8004eaa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004eac:	4b82      	ldr	r3, [pc, #520]	; (80050b8 <low_level_init+0x258>)
 8004eae:	4a85      	ldr	r2, [pc, #532]	; (80050c4 <low_level_init+0x264>)
 8004eb0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8004eb2:	4b81      	ldr	r3, [pc, #516]	; (80050b8 <low_level_init+0x258>)
 8004eb4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004eb8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004eba:	487f      	ldr	r0, [pc, #508]	; (80050b8 <low_level_init+0x258>)
 8004ebc:	f7fc fa22 	bl	8001304 <HAL_ETH_Init>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004ec6:	2234      	movs	r2, #52	; 0x34
 8004ec8:	2100      	movs	r1, #0
 8004eca:	487f      	ldr	r0, [pc, #508]	; (80050c8 <low_level_init+0x268>)
 8004ecc:	f011 ff3f 	bl	8016d4e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004ed0:	4b7d      	ldr	r3, [pc, #500]	; (80050c8 <low_level_init+0x268>)
 8004ed2:	2221      	movs	r2, #33	; 0x21
 8004ed4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004ed6:	4b7c      	ldr	r3, [pc, #496]	; (80050c8 <low_level_init+0x268>)
 8004ed8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004edc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004ede:	4b7a      	ldr	r3, [pc, #488]	; (80050c8 <low_level_init+0x268>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004ee4:	4879      	ldr	r0, [pc, #484]	; (80050cc <low_level_init+0x26c>)
 8004ee6:	f007 fa0f 	bl	800c308 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2206      	movs	r2, #6
 8004eee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004ef2:	4b71      	ldr	r3, [pc, #452]	; (80050b8 <low_level_init+0x258>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	781a      	ldrb	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004efe:	4b6e      	ldr	r3, [pc, #440]	; (80050b8 <low_level_init+0x258>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	785a      	ldrb	r2, [r3, #1]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004f0a:	4b6b      	ldr	r3, [pc, #428]	; (80050b8 <low_level_init+0x258>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	789a      	ldrb	r2, [r3, #2]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004f16:	4b68      	ldr	r3, [pc, #416]	; (80050b8 <low_level_init+0x258>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	78da      	ldrb	r2, [r3, #3]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004f22:	4b65      	ldr	r3, [pc, #404]	; (80050b8 <low_level_init+0x258>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	791a      	ldrb	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004f2e:	4b62      	ldr	r3, [pc, #392]	; (80050b8 <low_level_init+0x258>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	795a      	ldrb	r2, [r3, #5]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004f40:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f48:	f043 030a 	orr.w	r3, r3, #10
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8004f54:	2300      	movs	r3, #0
 8004f56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f5a:	e012      	b.n	8004f82 <low_level_init+0x122>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8004f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f60:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f64:	fb02 f303 	mul.w	r3, r2, r3
 8004f68:	4a59      	ldr	r2, [pc, #356]	; (80050d0 <low_level_init+0x270>)
 8004f6a:	441a      	add	r2, r3
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004f72:	4851      	ldr	r0, [pc, #324]	; (80050b8 <low_level_init+0x258>)
 8004f74:	f7fc faa0 	bl	80014b8 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8004f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d9e8      	bls.n	8004f5c <low_level_init+0xfc>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	2001      	movs	r0, #1
 8004f90:	f000 fd4e 	bl	8005a30 <osSemaphoreNew>
 8004f94:	4603      	mov	r3, r0
 8004f96:	4a4f      	ldr	r2, [pc, #316]	; (80050d4 <low_level_init+0x274>)
 8004f98:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004f9a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004f9e:	2224      	movs	r2, #36	; 0x24
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f011 fed3 	bl	8016d4e <memset>
  attributes.name = "EthIf";
 8004fa8:	4b4b      	ldr	r3, [pc, #300]	; (80050d8 <low_level_init+0x278>)
 8004faa:	67bb      	str	r3, [r7, #120]	; 0x78
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004fac:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004fb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  attributes.priority = osPriorityRealtime;
 8004fb4:	2330      	movs	r3, #48	; 0x30
 8004fb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  osThreadNew(ethernetif_input, netif, &attributes);
 8004fba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4846      	ldr	r0, [pc, #280]	; (80050dc <low_level_init+0x27c>)
 8004fc4:	f000 fb79 	bl	80056ba <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004fc8:	4945      	ldr	r1, [pc, #276]	; (80050e0 <low_level_init+0x280>)
 8004fca:	4846      	ldr	r0, [pc, #280]	; (80050e4 <low_level_init+0x284>)
 8004fcc:	f7fb fe61 	bl	8000c92 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004fd0:	4844      	ldr	r0, [pc, #272]	; (80050e4 <low_level_init+0x284>)
 8004fd2:	f7fb fe90 	bl	8000cf6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004fd6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d165      	bne.n	80050aa <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004fde:	4841      	ldr	r0, [pc, #260]	; (80050e4 <low_level_init+0x284>)
 8004fe0:	f7fb ff31 	bl	8000e46 <LAN8742_GetLinkState>
 8004fe4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	dc06      	bgt.n	8004ffe <low_level_init+0x19e>
    {
      netif_set_link_down(netif);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f007 fd63 	bl	800cabc <netif_set_link_down>
      netif_set_down(netif);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f007 fcfa 	bl	800c9f0 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004ffc:	e057      	b.n	80050ae <low_level_init+0x24e>
 8004ffe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005002:	3b02      	subs	r3, #2
 8005004:	2b03      	cmp	r3, #3
 8005006:	d82b      	bhi.n	8005060 <low_level_init+0x200>
 8005008:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <low_level_init+0x1b0>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	08005021 	.word	0x08005021
 8005014:	08005033 	.word	0x08005033
 8005018:	08005043 	.word	0x08005043
 800501c:	08005053 	.word	0x08005053
        duplex = ETH_FULLDUPLEX_MODE;
 8005020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005024:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8005028:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800502c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8005030:	e01f      	b.n	8005072 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 8005032:	2300      	movs	r3, #0
 8005034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8005038:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800503c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8005040:	e017      	b.n	8005072 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 8005042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005046:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800504a:	2300      	movs	r3, #0
 800504c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8005050:	e00f      	b.n	8005072 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 8005052:	2300      	movs	r3, #0
 8005054:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8005058:	2300      	movs	r3, #0
 800505a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800505e:	e008      	b.n	8005072 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 8005060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8005068:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800506c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8005070:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005072:	f107 0314 	add.w	r3, r7, #20
 8005076:	4619      	mov	r1, r3
 8005078:	480f      	ldr	r0, [pc, #60]	; (80050b8 <low_level_init+0x258>)
 800507a:	f7fc ffef 	bl	800205c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800507e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
    MACConf.Speed = speed;
 8005084:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800508a:	f107 0314 	add.w	r3, r7, #20
 800508e:	4619      	mov	r1, r3
 8005090:	4809      	ldr	r0, [pc, #36]	; (80050b8 <low_level_init+0x258>)
 8005092:	f7fd f9b7 	bl	8002404 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005096:	4808      	ldr	r0, [pc, #32]	; (80050b8 <low_level_init+0x258>)
 8005098:	f7fc fa4f 	bl	800153a <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f007 fc3b 	bl	800c918 <netif_set_up>
    netif_set_link_up(netif);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f007 fcd6 	bl	800ca54 <netif_set_link_up>
}
 80050a8:	e001      	b.n	80050ae <low_level_init+0x24e>
    Error_Handler();
 80050aa:	f7fb fbb3 	bl	8000814 <Error_Handler>
}
 80050ae:	bf00      	nop
 80050b0:	37b0      	adds	r7, #176	; 0xb0
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	24004dd8 	.word	0x24004dd8
 80050bc:	40028000 	.word	0x40028000
 80050c0:	30040060 	.word	0x30040060
 80050c4:	30040000 	.word	0x30040000
 80050c8:	24004e60 	.word	0x24004e60
 80050cc:	0801b220 	.word	0x0801b220
 80050d0:	30040200 	.word	0x30040200
 80050d4:	240000b8 	.word	0x240000b8
 80050d8:	08017ca8 	.word	0x08017ca8
 80050dc:	080052f1 	.word	0x080052f1
 80050e0:	24000010 	.word	0x24000010
 80050e4:	24004db8 	.word	0x24004db8

080050e8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b092      	sub	sp, #72	; 0x48
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 80050f2:	2300      	movs	r3, #0
 80050f4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80050fc:	f107 030c 	add.w	r3, r7, #12
 8005100:	2230      	movs	r2, #48	; 0x30
 8005102:	2100      	movs	r1, #0
 8005104:	4618      	mov	r0, r3
 8005106:	f011 fe22 	bl	8016d4e <memset>

  for(q = p; q != NULL; q = q->next)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	643b      	str	r3, [r7, #64]	; 0x40
 800510e:	e049      	b.n	80051a4 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005112:	2b03      	cmp	r3, #3
 8005114:	d902      	bls.n	800511c <low_level_output+0x34>
      return ERR_IF;
 8005116:	f06f 030b 	mvn.w	r3, #11
 800511a:	e056      	b.n	80051ca <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800511c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511e:	6859      	ldr	r1, [r3, #4]
 8005120:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005122:	4613      	mov	r3, r2
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800512e:	4413      	add	r3, r2
 8005130:	3b3c      	subs	r3, #60	; 0x3c
 8005132:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005136:	895b      	ldrh	r3, [r3, #10]
 8005138:	4619      	mov	r1, r3
 800513a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800513c:	4613      	mov	r3, r2
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005148:	4413      	add	r3, r2
 800514a:	3b38      	subs	r3, #56	; 0x38
 800514c:	6019      	str	r1, [r3, #0]

    if(i>0)
 800514e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005150:	2b00      	cmp	r3, #0
 8005152:	d012      	beq.n	800517a <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005156:	1e5a      	subs	r2, r3, #1
 8005158:	f107 000c 	add.w	r0, r7, #12
 800515c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800515e:	460b      	mov	r3, r1
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	440b      	add	r3, r1
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	18c1      	adds	r1, r0, r3
 8005168:	4613      	mov	r3, r2
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005174:	4413      	add	r3, r2
 8005176:	3b34      	subs	r3, #52	; 0x34
 8005178:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800517a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8005182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005184:	4613      	mov	r3, r2
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005190:	4413      	add	r3, r2
 8005192:	3b34      	subs	r3, #52	; 0x34
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800519a:	3301      	adds	r3, #1
 800519c:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800519e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	643b      	str	r3, [r7, #64]	; 0x40
 80051a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1b2      	bne.n	8005110 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	891b      	ldrh	r3, [r3, #8]
 80051ae:	461a      	mov	r2, r3
 80051b0:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <low_level_output+0xec>)
 80051b2:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80051b4:	4a07      	ldr	r2, [pc, #28]	; (80051d4 <low_level_output+0xec>)
 80051b6:	f107 030c 	add.w	r3, r7, #12
 80051ba:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80051bc:	2214      	movs	r2, #20
 80051be:	4905      	ldr	r1, [pc, #20]	; (80051d4 <low_level_output+0xec>)
 80051c0:	4805      	ldr	r0, [pc, #20]	; (80051d8 <low_level_output+0xf0>)
 80051c2:	f7fc fab9 	bl	8001738 <HAL_ETH_Transmit>

  return errval;
 80051c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3748      	adds	r7, #72	; 0x48
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	24004e60 	.word	0x24004e60
 80051d8:	24004dd8 	.word	0x24004dd8

080051dc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b098      	sub	sp, #96	; 0x60
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60bb      	str	r3, [r7, #8]
 80051ec:	2300      	movs	r3, #0
 80051ee:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80051f0:	f107 030c 	add.w	r3, r7, #12
 80051f4:	2230      	movs	r2, #48	; 0x30
 80051f6:	2100      	movs	r1, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f011 fda8 	bl	8016d4e <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80051fe:	2300      	movs	r3, #0
 8005200:	653b      	str	r3, [r7, #80]	; 0x50
 8005202:	e015      	b.n	8005230 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8005204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	f107 010c 	add.w	r1, r7, #12
 800520c:	4613      	mov	r3, r2
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4419      	add	r1, r3
 8005216:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005218:	4613      	mov	r3, r2
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005224:	4413      	add	r3, r2
 8005226:	3b44      	subs	r3, #68	; 0x44
 8005228:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800522a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800522c:	3301      	adds	r3, #1
 800522e:	653b      	str	r3, [r7, #80]	; 0x50
 8005230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005232:	2b02      	cmp	r3, #2
 8005234:	d9e6      	bls.n	8005204 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 8005236:	f107 030c 	add.w	r3, r7, #12
 800523a:	4619      	mov	r1, r3
 800523c:	4828      	ldr	r0, [pc, #160]	; (80052e0 <low_level_input+0x104>)
 800523e:	f7fc fbf4 	bl	8001a2a <HAL_ETH_GetRxDataBuffer>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d145      	bne.n	80052d4 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8005248:	f107 0308 	add.w	r3, r7, #8
 800524c:	4619      	mov	r1, r3
 800524e:	4824      	ldr	r0, [pc, #144]	; (80052e0 <low_level_input+0x104>)
 8005250:	f7fc fc89 	bl	8001b66 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8005254:	4822      	ldr	r0, [pc, #136]	; (80052e0 <low_level_input+0x104>)
 8005256:	f7fc fcb9 	bl	8001bcc <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005260:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8005262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005264:	2b00      	cmp	r3, #0
 8005266:	dd1d      	ble.n	80052a4 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800526a:	f003 021f 	and.w	r2, r3, #31
 800526e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005270:	4413      	add	r3, r2
 8005272:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005276:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8005278:	f3bf 8f4f 	dsb	sy
}
 800527c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800527e:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <low_level_input+0x108>)
 8005280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005282:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005288:	3320      	adds	r3, #32
 800528a:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800528c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800528e:	3b20      	subs	r3, #32
 8005290:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8005292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	dcf2      	bgt.n	800527e <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 8005298:	f3bf 8f4f 	dsb	sy
}
 800529c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800529e:	f3bf 8f6f 	isb	sy
}
 80052a2:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80052a4:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 80052a6:	4810      	ldr	r0, [pc, #64]	; (80052e8 <low_level_input+0x10c>)
 80052a8:	f007 f8aa 	bl	800c400 <memp_malloc_pool>
 80052ac:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 80052ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00f      	beq.n	80052d4 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 80052b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b6:	4a0d      	ldr	r2, [pc, #52]	; (80052ec <low_level_input+0x110>)
 80052b8:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	b299      	uxth	r1, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	b292      	uxth	r2, r2
 80052c4:	9201      	str	r2, [sp, #4]
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ca:	2241      	movs	r2, #65	; 0x41
 80052cc:	2000      	movs	r0, #0
 80052ce:	f007 fe19 	bl	800cf04 <pbuf_alloced_custom>
 80052d2:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 80052d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3758      	adds	r7, #88	; 0x58
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	24004dd8 	.word	0x24004dd8
 80052e4:	e000ed00 	.word	0xe000ed00
 80052e8:	0801b220 	.word	0x0801b220
 80052ec:	0800539d 	.word	0x0800539d

080052f0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80052fc:	4b0f      	ldr	r3, [pc, #60]	; (800533c <ethernetif_input+0x4c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f04f 31ff 	mov.w	r1, #4294967295
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fc1d 	bl	8005b44 <osSemaphoreAcquire>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1f5      	bne.n	80052fc <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f7ff ff63 	bl	80051dc <low_level_input>
 8005316:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	68f9      	ldr	r1, [r7, #12]
 8005324:	68b8      	ldr	r0, [r7, #8]
 8005326:	4798      	blx	r3
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800532e:	68b8      	ldr	r0, [r7, #8]
 8005330:	f007 ffa2 	bl	800d278 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1ea      	bne.n	8005310 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800533a:	e7df      	b.n	80052fc <ethernetif_input+0xc>
 800533c:	240000b8 	.word	0x240000b8

08005340 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d106      	bne.n	800535c <ethernetif_init+0x1c>
 800534e:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <ethernetif_init+0x48>)
 8005350:	f240 224d 	movw	r2, #589	; 0x24d
 8005354:	490d      	ldr	r1, [pc, #52]	; (800538c <ethernetif_init+0x4c>)
 8005356:	480e      	ldr	r0, [pc, #56]	; (8005390 <ethernetif_init+0x50>)
 8005358:	f011 fd5c 	bl	8016e14 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2273      	movs	r2, #115	; 0x73
 8005360:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2274      	movs	r2, #116	; 0x74
 8005368:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a09      	ldr	r2, [pc, #36]	; (8005394 <ethernetif_init+0x54>)
 8005370:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a08      	ldr	r2, [pc, #32]	; (8005398 <ethernetif_init+0x58>)
 8005376:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff fd71 	bl	8004e60 <low_level_init>

  return ERR_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	08017cb0 	.word	0x08017cb0
 800538c:	08017ccc 	.word	0x08017ccc
 8005390:	08017cdc 	.word	0x08017cdc
 8005394:	08014a3d 	.word	0x08014a3d
 8005398:	080050e9 	.word	0x080050e9

0800539c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80053a8:	68f9      	ldr	r1, [r7, #12]
 80053aa:	4803      	ldr	r0, [pc, #12]	; (80053b8 <pbuf_free_custom+0x1c>)
 80053ac:	f007 f89c 	bl	800c4e8 <memp_free_pool>
}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	0801b220 	.word	0x0801b220

080053bc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80053c0:	f7fb fe18 	bl	8000ff4 <HAL_GetTick>
 80053c4:	4603      	mov	r3, r0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80053d0:	4802      	ldr	r0, [pc, #8]	; (80053dc <ETH_PHY_IO_Init+0x10>)
 80053d2:	f7fd f831 	bl	8002438 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	24004dd8 	.word	0x24004dd8

080053e0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return 0;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	68f9      	ldr	r1, [r7, #12]
 8005402:	4807      	ldr	r0, [pc, #28]	; (8005420 <ETH_PHY_IO_ReadReg+0x30>)
 8005404:	f7fc fd82 	bl	8001f0c <HAL_ETH_ReadPHYRegister>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800540e:	f04f 33ff 	mov.w	r3, #4294967295
 8005412:	e000      	b.n	8005416 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	24004dd8 	.word	0x24004dd8

08005424 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	68f9      	ldr	r1, [r7, #12]
 8005436:	4807      	ldr	r0, [pc, #28]	; (8005454 <ETH_PHY_IO_WriteReg+0x30>)
 8005438:	f7fc fdbc 	bl	8001fb4 <HAL_ETH_WritePHYRegister>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005442:	f04f 33ff 	mov.w	r3, #4294967295
 8005446:	e000      	b.n	800544a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	24004dd8 	.word	0x24004dd8

08005458 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800545c:	f7fb fdca 	bl	8000ff4 <HAL_GetTick>
 8005460:	4603      	mov	r3, r0
}
 8005462:	4618      	mov	r0, r3
 8005464:	bd80      	pop	{r7, pc}
	...

08005468 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b0a0      	sub	sp, #128	; 0x80
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8005470:	2300      	movs	r3, #0
 8005472:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005474:	2300      	movs	r3, #0
 8005476:	67bb      	str	r3, [r7, #120]	; 0x78
 8005478:	2300      	movs	r3, #0
 800547a:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005480:	483a      	ldr	r0, [pc, #232]	; (800556c <ethernet_link_thread+0x104>)
 8005482:	f7fb fce0 	bl	8000e46 <LAN8742_GetLinkState>
 8005486:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005488:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800548a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800548e:	089b      	lsrs	r3, r3, #2
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00c      	beq.n	80054b4 <ethernet_link_thread+0x4c>
 800549a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549c:	2b01      	cmp	r3, #1
 800549e:	dc09      	bgt.n	80054b4 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 80054a0:	4833      	ldr	r0, [pc, #204]	; (8005570 <ethernet_link_thread+0x108>)
 80054a2:	f7fc f8cf 	bl	8001644 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80054a6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80054a8:	f007 faa2 	bl	800c9f0 <netif_set_down>
    netif_set_link_down(netif);
 80054ac:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80054ae:	f007 fb05 	bl	800cabc <netif_set_link_down>
 80054b2:	e056      	b.n	8005562 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80054b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d14f      	bne.n	8005562 <ethernet_link_thread+0xfa>
 80054c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	dd4c      	ble.n	8005562 <ethernet_link_thread+0xfa>
 80054c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ca:	3b02      	subs	r3, #2
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d82b      	bhi.n	8005528 <ethernet_link_thread+0xc0>
 80054d0:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <ethernet_link_thread+0x70>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	080054e9 	.word	0x080054e9
 80054dc:	080054fb 	.word	0x080054fb
 80054e0:	0800550b 	.word	0x0800550b
 80054e4:	0800551b 	.word	0x0800551b
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80054e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054ec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80054ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054f2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054f4:	2301      	movs	r3, #1
 80054f6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054f8:	e017      	b.n	800552a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80054fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005502:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005504:	2301      	movs	r3, #1
 8005506:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005508:	e00f      	b.n	800552a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800550a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800550e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005510:	2300      	movs	r3, #0
 8005512:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005514:	2301      	movs	r3, #1
 8005516:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005518:	e007      	b.n	800552a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800551a:	2300      	movs	r3, #0
 800551c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800551e:	2300      	movs	r3, #0
 8005520:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005522:	2301      	movs	r3, #1
 8005524:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005526:	e000      	b.n	800552a <ethernet_link_thread+0xc2>
    default:
      break;
 8005528:	bf00      	nop
    }

    if(linkchanged)
 800552a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d018      	beq.n	8005562 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005530:	f107 0308 	add.w	r3, r7, #8
 8005534:	4619      	mov	r1, r3
 8005536:	480e      	ldr	r0, [pc, #56]	; (8005570 <ethernet_link_thread+0x108>)
 8005538:	f7fc fd90 	bl	800205c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800553c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800553e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005542:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005544:	f107 0308 	add.w	r3, r7, #8
 8005548:	4619      	mov	r1, r3
 800554a:	4809      	ldr	r0, [pc, #36]	; (8005570 <ethernet_link_thread+0x108>)
 800554c:	f7fc ff5a 	bl	8002404 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 8005550:	4807      	ldr	r0, [pc, #28]	; (8005570 <ethernet_link_thread+0x108>)
 8005552:	f7fb fff2 	bl	800153a <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005556:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005558:	f007 f9de 	bl	800c918 <netif_set_up>
      netif_set_link_up(netif);
 800555c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800555e:	f007 fa79 	bl	800ca54 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005562:	2064      	movs	r0, #100	; 0x64
 8005564:	f000 f93b 	bl	80057de <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005568:	e78a      	b.n	8005480 <ethernet_link_thread+0x18>
 800556a:	bf00      	nop
 800556c:	24004db8 	.word	0x24004db8
 8005570:	24004dd8 	.word	0x24004dd8

08005574 <__NVIC_SetPriority>:
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	6039      	str	r1, [r7, #0]
 800557e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005584:	2b00      	cmp	r3, #0
 8005586:	db0a      	blt.n	800559e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	b2da      	uxtb	r2, r3
 800558c:	490c      	ldr	r1, [pc, #48]	; (80055c0 <__NVIC_SetPriority+0x4c>)
 800558e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005592:	0112      	lsls	r2, r2, #4
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	440b      	add	r3, r1
 8005598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800559c:	e00a      	b.n	80055b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	4908      	ldr	r1, [pc, #32]	; (80055c4 <__NVIC_SetPriority+0x50>)
 80055a4:	88fb      	ldrh	r3, [r7, #6]
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	3b04      	subs	r3, #4
 80055ac:	0112      	lsls	r2, r2, #4
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	440b      	add	r3, r1
 80055b2:	761a      	strb	r2, [r3, #24]
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	e000e100 	.word	0xe000e100
 80055c4:	e000ed00 	.word	0xe000ed00

080055c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <SysTick_Handler+0x1c>)
 80055ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80055d0:	f002 fd3a 	bl	8008048 <xTaskGetSchedulerState>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d001      	beq.n	80055de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80055da:	f003 fc1d 	bl	8008e18 <xPortSysTickHandler>
  }
}
 80055de:	bf00      	nop
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	e000e010 	.word	0xe000e010

080055e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80055ec:	2100      	movs	r1, #0
 80055ee:	f06f 0004 	mvn.w	r0, #4
 80055f2:	f7ff ffbf 	bl	8005574 <__NVIC_SetPriority>
#endif
}
 80055f6:	bf00      	nop
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005602:	f3ef 8305 	mrs	r3, IPSR
 8005606:	603b      	str	r3, [r7, #0]
  return(result);
 8005608:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800560e:	f06f 0305 	mvn.w	r3, #5
 8005612:	607b      	str	r3, [r7, #4]
 8005614:	e00c      	b.n	8005630 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005616:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <osKernelInitialize+0x44>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d105      	bne.n	800562a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800561e:	4b08      	ldr	r3, [pc, #32]	; (8005640 <osKernelInitialize+0x44>)
 8005620:	2201      	movs	r2, #1
 8005622:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005624:	2300      	movs	r3, #0
 8005626:	607b      	str	r3, [r7, #4]
 8005628:	e002      	b.n	8005630 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800562a:	f04f 33ff 	mov.w	r3, #4294967295
 800562e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005630:	687b      	ldr	r3, [r7, #4]
}
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	240000c0 	.word	0x240000c0

08005644 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800564a:	f3ef 8305 	mrs	r3, IPSR
 800564e:	603b      	str	r3, [r7, #0]
  return(result);
 8005650:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005656:	f06f 0305 	mvn.w	r3, #5
 800565a:	607b      	str	r3, [r7, #4]
 800565c:	e010      	b.n	8005680 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800565e:	4b0b      	ldr	r3, [pc, #44]	; (800568c <osKernelStart+0x48>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d109      	bne.n	800567a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005666:	f7ff ffbf 	bl	80055e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800566a:	4b08      	ldr	r3, [pc, #32]	; (800568c <osKernelStart+0x48>)
 800566c:	2202      	movs	r2, #2
 800566e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005670:	f002 f86c 	bl	800774c <vTaskStartScheduler>
      stat = osOK;
 8005674:	2300      	movs	r3, #0
 8005676:	607b      	str	r3, [r7, #4]
 8005678:	e002      	b.n	8005680 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800567a:	f04f 33ff 	mov.w	r3, #4294967295
 800567e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005680:	687b      	ldr	r3, [r7, #4]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	240000c0 	.word	0x240000c0

08005690 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005696:	f3ef 8305 	mrs	r3, IPSR
 800569a:	603b      	str	r3, [r7, #0]
  return(result);
 800569c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80056a2:	f002 f97f 	bl	80079a4 <xTaskGetTickCountFromISR>
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	e002      	b.n	80056b0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80056aa:	f002 f96b 	bl	8007984 <xTaskGetTickCount>
 80056ae:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80056b0:	687b      	ldr	r3, [r7, #4]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b08e      	sub	sp, #56	; 0x38
 80056be:	af04      	add	r7, sp, #16
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056ca:	f3ef 8305 	mrs	r3, IPSR
 80056ce:	617b      	str	r3, [r7, #20]
  return(result);
 80056d0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d17e      	bne.n	80057d4 <osThreadNew+0x11a>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d07b      	beq.n	80057d4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80056e0:	2318      	movs	r3, #24
 80056e2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80056e4:	2300      	movs	r3, #0
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80056e8:	f04f 33ff 	mov.w	r3, #4294967295
 80056ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d045      	beq.n	8005780 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <osThreadNew+0x48>
        name = attr->name;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d008      	beq.n	8005728 <osThreadNew+0x6e>
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	2b38      	cmp	r3, #56	; 0x38
 800571a:	d805      	bhi.n	8005728 <osThreadNew+0x6e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <osThreadNew+0x72>
        return (NULL);
 8005728:	2300      	movs	r3, #0
 800572a:	e054      	b.n	80057d6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	089b      	lsrs	r3, r3, #2
 800573a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00e      	beq.n	8005762 <osThreadNew+0xa8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	2bbb      	cmp	r3, #187	; 0xbb
 800574a:	d90a      	bls.n	8005762 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005750:	2b00      	cmp	r3, #0
 8005752:	d006      	beq.n	8005762 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <osThreadNew+0xa8>
        mem = 1;
 800575c:	2301      	movs	r3, #1
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	e010      	b.n	8005784 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10c      	bne.n	8005784 <osThreadNew+0xca>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d108      	bne.n	8005784 <osThreadNew+0xca>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d104      	bne.n	8005784 <osThreadNew+0xca>
          mem = 0;
 800577a:	2300      	movs	r3, #0
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	e001      	b.n	8005784 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005780:	2300      	movs	r3, #0
 8005782:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d110      	bne.n	80057ac <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005792:	9202      	str	r2, [sp, #8]
 8005794:	9301      	str	r3, [sp, #4]
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6a3a      	ldr	r2, [r7, #32]
 800579e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f001 fde7 	bl	8007374 <xTaskCreateStatic>
 80057a6:	4603      	mov	r3, r0
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	e013      	b.n	80057d4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d110      	bne.n	80057d4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	f107 0310 	add.w	r3, r7, #16
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f001 fe32 	bl	800742e <xTaskCreate>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d001      	beq.n	80057d4 <osThreadNew+0x11a>
            hTask = NULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057d4:	693b      	ldr	r3, [r7, #16]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3728      	adds	r7, #40	; 0x28
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057e6:	f3ef 8305 	mrs	r3, IPSR
 80057ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80057ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <osDelay+0x1c>
    stat = osErrorISR;
 80057f2:	f06f 0305 	mvn.w	r3, #5
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	e007      	b.n	800580a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <osDelay+0x2c>
      vTaskDelay(ticks);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f001 ff6d 	bl	80076e4 <vTaskDelay>
    }
  }

  return (stat);
 800580a:	68fb      	ldr	r3, [r7, #12]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800581c:	2300      	movs	r3, #0
 800581e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005820:	f3ef 8305 	mrs	r3, IPSR
 8005824:	60bb      	str	r3, [r7, #8]
  return(result);
 8005826:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005828:	2b00      	cmp	r3, #0
 800582a:	d174      	bne.n	8005916 <osMutexNew+0x102>
    if (attr != NULL) {
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <osMutexNew+0x26>
      type = attr->attr_bits;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	61bb      	str	r3, [r7, #24]
 8005838:	e001      	b.n	800583e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <osMutexNew+0x3a>
      rmtx = 1U;
 8005848:	2301      	movs	r3, #1
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	e001      	b.n	8005852 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b00      	cmp	r3, #0
 800585a:	d15c      	bne.n	8005916 <osMutexNew+0x102>
      mem = -1;
 800585c:	f04f 33ff 	mov.w	r3, #4294967295
 8005860:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d015      	beq.n	8005894 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d006      	beq.n	800587e <osMutexNew+0x6a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b4f      	cmp	r3, #79	; 0x4f
 8005876:	d902      	bls.n	800587e <osMutexNew+0x6a>
          mem = 1;
 8005878:	2301      	movs	r3, #1
 800587a:	613b      	str	r3, [r7, #16]
 800587c:	e00c      	b.n	8005898 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d108      	bne.n	8005898 <osMutexNew+0x84>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d104      	bne.n	8005898 <osMutexNew+0x84>
            mem = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	e001      	b.n	8005898 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d112      	bne.n	80058c4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d007      	beq.n	80058b4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	4619      	mov	r1, r3
 80058aa:	2004      	movs	r0, #4
 80058ac:	f000 fdd1 	bl	8006452 <xQueueCreateMutexStatic>
 80058b0:	61f8      	str	r0, [r7, #28]
 80058b2:	e016      	b.n	80058e2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4619      	mov	r1, r3
 80058ba:	2001      	movs	r0, #1
 80058bc:	f000 fdc9 	bl	8006452 <xQueueCreateMutexStatic>
 80058c0:	61f8      	str	r0, [r7, #28]
 80058c2:	e00e      	b.n	80058e2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10b      	bne.n	80058e2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d004      	beq.n	80058da <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80058d0:	2004      	movs	r0, #4
 80058d2:	f000 fda6 	bl	8006422 <xQueueCreateMutex>
 80058d6:	61f8      	str	r0, [r7, #28]
 80058d8:	e003      	b.n	80058e2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80058da:	2001      	movs	r0, #1
 80058dc:	f000 fda1 	bl	8006422 <xQueueCreateMutex>
 80058e0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00c      	beq.n	8005902 <osMutexNew+0xee>
        if (attr != NULL) {
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <osMutexNew+0xe2>
          name = attr->name;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	e001      	b.n	80058fa <osMutexNew+0xe6>
        } else {
          name = NULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80058fa:	68f9      	ldr	r1, [r7, #12]
 80058fc:	69f8      	ldr	r0, [r7, #28]
 80058fe:	f001 fcb1 	bl	8007264 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d006      	beq.n	8005916 <osMutexNew+0x102>
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005916:	69fb      	ldr	r3, [r7, #28]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f023 0301 	bic.w	r3, r3, #1
 8005930:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800593e:	f3ef 8305 	mrs	r3, IPSR
 8005942:	60bb      	str	r3, [r7, #8]
  return(result);
 8005944:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800594a:	f06f 0305 	mvn.w	r3, #5
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	e02c      	b.n	80059ac <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d103      	bne.n	8005960 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005958:	f06f 0303 	mvn.w	r3, #3
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	e025      	b.n	80059ac <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d011      	beq.n	800598a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	6938      	ldr	r0, [r7, #16]
 800596a:	f000 fdc1 	bl	80064f0 <xQueueTakeMutexRecursive>
 800596e:	4603      	mov	r3, r0
 8005970:	2b01      	cmp	r3, #1
 8005972:	d01b      	beq.n	80059ac <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800597a:	f06f 0301 	mvn.w	r3, #1
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	e014      	b.n	80059ac <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005982:	f06f 0302 	mvn.w	r3, #2
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	e010      	b.n	80059ac <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6938      	ldr	r0, [r7, #16]
 800598e:	f001 f955 	bl	8006c3c <xQueueSemaphoreTake>
 8005992:	4603      	mov	r3, r0
 8005994:	2b01      	cmp	r3, #1
 8005996:	d009      	beq.n	80059ac <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800599e:	f06f 0301 	mvn.w	r3, #1
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	e002      	b.n	80059ac <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80059a6:	f06f 0302 	mvn.w	r3, #2
 80059aa:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80059ac:	697b      	ldr	r3, [r7, #20]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b086      	sub	sp, #24
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059d2:	f3ef 8305 	mrs	r3, IPSR
 80059d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80059d8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <osMutexRelease+0x30>
    stat = osErrorISR;
 80059de:	f06f 0305 	mvn.w	r3, #5
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	e01f      	b.n	8005a26 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d103      	bne.n	80059f4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80059ec:	f06f 0303 	mvn.w	r3, #3
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	e018      	b.n	8005a26 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80059fa:	6938      	ldr	r0, [r7, #16]
 80059fc:	f000 fd44 	bl	8006488 <xQueueGiveMutexRecursive>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d00f      	beq.n	8005a26 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005a06:	f06f 0302 	mvn.w	r3, #2
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	e00b      	b.n	8005a26 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005a0e:	2300      	movs	r3, #0
 8005a10:	2200      	movs	r2, #0
 8005a12:	2100      	movs	r1, #0
 8005a14:	6938      	ldr	r0, [r7, #16]
 8005a16:	f000 fe0b 	bl	8006630 <xQueueGenericSend>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d002      	beq.n	8005a26 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005a20:	f06f 0302 	mvn.w	r3, #2
 8005a24:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005a26:	697b      	ldr	r3, [r7, #20]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08a      	sub	sp, #40	; 0x28
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a40:	f3ef 8305 	mrs	r3, IPSR
 8005a44:	613b      	str	r3, [r7, #16]
  return(result);
 8005a46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d175      	bne.n	8005b38 <osSemaphoreNew+0x108>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d072      	beq.n	8005b38 <osSemaphoreNew+0x108>
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d86e      	bhi.n	8005b38 <osSemaphoreNew+0x108>
    mem = -1;
 8005a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d015      	beq.n	8005a92 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d006      	beq.n	8005a7c <osSemaphoreNew+0x4c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	2b4f      	cmp	r3, #79	; 0x4f
 8005a74:	d902      	bls.n	8005a7c <osSemaphoreNew+0x4c>
        mem = 1;
 8005a76:	2301      	movs	r3, #1
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	e00c      	b.n	8005a96 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d108      	bne.n	8005a96 <osSemaphoreNew+0x66>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <osSemaphoreNew+0x66>
          mem = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	e001      	b.n	8005a96 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d04c      	beq.n	8005b38 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d128      	bne.n	8005af6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d10a      	bne.n	8005ac0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2203      	movs	r2, #3
 8005ab0:	9200      	str	r2, [sp, #0]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	f000 fbc4 	bl	8006244 <xQueueGenericCreateStatic>
 8005abc:	61f8      	str	r0, [r7, #28]
 8005abe:	e005      	b.n	8005acc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	2001      	movs	r0, #1
 8005ac6:	f000 fc35 	bl	8006334 <xQueueGenericCreate>
 8005aca:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d022      	beq.n	8005b18 <osSemaphoreNew+0xe8>
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01f      	beq.n	8005b18 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005ad8:	2300      	movs	r3, #0
 8005ada:	2200      	movs	r2, #0
 8005adc:	2100      	movs	r1, #0
 8005ade:	69f8      	ldr	r0, [r7, #28]
 8005ae0:	f000 fda6 	bl	8006630 <xQueueGenericSend>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d016      	beq.n	8005b18 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005aea:	69f8      	ldr	r0, [r7, #28]
 8005aec:	f001 fa6e 	bl	8006fcc <vQueueDelete>
            hSemaphore = NULL;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61fb      	str	r3, [r7, #28]
 8005af4:	e010      	b.n	8005b18 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d108      	bne.n	8005b0e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	461a      	mov	r2, r3
 8005b02:	68b9      	ldr	r1, [r7, #8]
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 fd29 	bl	800655c <xQueueCreateCountingSemaphoreStatic>
 8005b0a:	61f8      	str	r0, [r7, #28]
 8005b0c:	e004      	b.n	8005b18 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 fd5a 	bl	80065ca <xQueueCreateCountingSemaphore>
 8005b16:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00c      	beq.n	8005b38 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <osSemaphoreNew+0xfc>
          name = attr->name;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	e001      	b.n	8005b30 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005b30:	6979      	ldr	r1, [r7, #20]
 8005b32:	69f8      	ldr	r0, [r7, #28]
 8005b34:	f001 fb96 	bl	8007264 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005b38:	69fb      	ldr	r3, [r7, #28]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3720      	adds	r7, #32
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d103      	bne.n	8005b64 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005b5c:	f06f 0303 	mvn.w	r3, #3
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	e039      	b.n	8005bd8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b64:	f3ef 8305 	mrs	r3, IPSR
 8005b68:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d022      	beq.n	8005bb6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005b76:	f06f 0303 	mvn.w	r3, #3
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	e02c      	b.n	8005bd8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005b82:	f107 0308 	add.w	r3, r7, #8
 8005b86:	461a      	mov	r2, r3
 8005b88:	2100      	movs	r1, #0
 8005b8a:	6938      	ldr	r0, [r7, #16]
 8005b8c:	f001 f962 	bl	8006e54 <xQueueReceiveFromISR>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d003      	beq.n	8005b9e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005b96:	f06f 0302 	mvn.w	r3, #2
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	e01c      	b.n	8005bd8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d019      	beq.n	8005bd8 <osSemaphoreAcquire+0x94>
 8005ba4:	4b0f      	ldr	r3, [pc, #60]	; (8005be4 <osSemaphoreAcquire+0xa0>)
 8005ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	e010      	b.n	8005bd8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6938      	ldr	r0, [r7, #16]
 8005bba:	f001 f83f 	bl	8006c3c <xQueueSemaphoreTake>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d009      	beq.n	8005bd8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005bca:	f06f 0301 	mvn.w	r3, #1
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	e002      	b.n	8005bd8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005bd2:	f06f 0302 	mvn.w	r3, #2
 8005bd6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005bd8:	697b      	ldr	r3, [r7, #20]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	e000ed04 	.word	0xe000ed04

08005be8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d103      	bne.n	8005c06 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005bfe:	f06f 0303 	mvn.w	r3, #3
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	e02c      	b.n	8005c60 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c06:	f3ef 8305 	mrs	r3, IPSR
 8005c0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d01a      	beq.n	8005c48 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005c16:	f107 0308 	add.w	r3, r7, #8
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6938      	ldr	r0, [r7, #16]
 8005c1e:	f000 fea0 	bl	8006962 <xQueueGiveFromISR>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d003      	beq.n	8005c30 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005c28:	f06f 0302 	mvn.w	r3, #2
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	e017      	b.n	8005c60 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d014      	beq.n	8005c60 <osSemaphoreRelease+0x78>
 8005c36:	4b0d      	ldr	r3, [pc, #52]	; (8005c6c <osSemaphoreRelease+0x84>)
 8005c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	e00b      	b.n	8005c60 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c48:	2300      	movs	r3, #0
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	6938      	ldr	r0, [r7, #16]
 8005c50:	f000 fcee 	bl	8006630 <xQueueGenericSend>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d002      	beq.n	8005c60 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005c5a:	f06f 0302 	mvn.w	r3, #2
 8005c5e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005c60:	697b      	ldr	r3, [r7, #20]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	e000ed04 	.word	0xe000ed04

08005c70 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c7c:	f3ef 8305 	mrs	r3, IPSR
 8005c80:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c82:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8005c88:	f06f 0305 	mvn.w	r3, #5
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e00e      	b.n	8005cae <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d103      	bne.n	8005c9e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8005c96:	f06f 0303 	mvn.w	r3, #3
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	e007      	b.n	8005cae <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005c9e:	6938      	ldr	r0, [r7, #16]
 8005ca0:	f001 fb0a 	bl	80072b8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8005ca8:	6938      	ldr	r0, [r7, #16]
 8005caa:	f001 f98f 	bl	8006fcc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005cae:	697b      	ldr	r3, [r7, #20]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08a      	sub	sp, #40	; 0x28
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cc8:	f3ef 8305 	mrs	r3, IPSR
 8005ccc:	613b      	str	r3, [r7, #16]
  return(result);
 8005cce:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d15f      	bne.n	8005d94 <osMessageQueueNew+0xdc>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d05c      	beq.n	8005d94 <osMessageQueueNew+0xdc>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d059      	beq.n	8005d94 <osMessageQueueNew+0xdc>
    mem = -1;
 8005ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d029      	beq.n	8005d40 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d012      	beq.n	8005d1a <osMessageQueueNew+0x62>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b4f      	cmp	r3, #79	; 0x4f
 8005cfa:	d90e      	bls.n	8005d1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d302      	bcc.n	8005d1a <osMessageQueueNew+0x62>
        mem = 1;
 8005d14:	2301      	movs	r3, #1
 8005d16:	61bb      	str	r3, [r7, #24]
 8005d18:	e014      	b.n	8005d44 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d110      	bne.n	8005d44 <osMessageQueueNew+0x8c>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10c      	bne.n	8005d44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d108      	bne.n	8005d44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d104      	bne.n	8005d44 <osMessageQueueNew+0x8c>
          mem = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	e001      	b.n	8005d44 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d10b      	bne.n	8005d62 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	2100      	movs	r1, #0
 8005d54:	9100      	str	r1, [sp, #0]
 8005d56:	68b9      	ldr	r1, [r7, #8]
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 fa73 	bl	8006244 <xQueueGenericCreateStatic>
 8005d5e:	61f8      	str	r0, [r7, #28]
 8005d60:	e008      	b.n	8005d74 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005d68:	2200      	movs	r2, #0
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 fae1 	bl	8006334 <xQueueGenericCreate>
 8005d72:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00c      	beq.n	8005d94 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	e001      	b.n	8005d8c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005d8c:	6979      	ldr	r1, [r7, #20]
 8005d8e:	69f8      	ldr	r0, [r7, #28]
 8005d90:	f001 fa68 	bl	8007264 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005d94:	69fb      	ldr	r3, [r7, #28]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3720      	adds	r7, #32
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	4613      	mov	r3, r2
 8005dae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005db8:	f3ef 8305 	mrs	r3, IPSR
 8005dbc:	617b      	str	r3, [r7, #20]
  return(result);
 8005dbe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d028      	beq.n	8005e16 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d005      	beq.n	8005dd6 <osMessageQueuePut+0x36>
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <osMessageQueuePut+0x36>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005dd6:	f06f 0303 	mvn.w	r3, #3
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	e038      	b.n	8005e50 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005de2:	f107 0210 	add.w	r2, r7, #16
 8005de6:	2300      	movs	r3, #0
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	69b8      	ldr	r0, [r7, #24]
 8005dec:	f000 fd1e 	bl	800682c <xQueueGenericSendFromISR>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d003      	beq.n	8005dfe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005df6:	f06f 0302 	mvn.w	r3, #2
 8005dfa:	61fb      	str	r3, [r7, #28]
 8005dfc:	e028      	b.n	8005e50 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d025      	beq.n	8005e50 <osMessageQueuePut+0xb0>
 8005e04:	4b15      	ldr	r3, [pc, #84]	; (8005e5c <osMessageQueuePut+0xbc>)
 8005e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	e01c      	b.n	8005e50 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <osMessageQueuePut+0x82>
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d103      	bne.n	8005e2a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005e22:	f06f 0303 	mvn.w	r3, #3
 8005e26:	61fb      	str	r3, [r7, #28]
 8005e28:	e012      	b.n	8005e50 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	68b9      	ldr	r1, [r7, #8]
 8005e30:	69b8      	ldr	r0, [r7, #24]
 8005e32:	f000 fbfd 	bl	8006630 <xQueueGenericSend>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d009      	beq.n	8005e50 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005e42:	f06f 0301 	mvn.w	r3, #1
 8005e46:	61fb      	str	r3, [r7, #28]
 8005e48:	e002      	b.n	8005e50 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005e4a:	f06f 0302 	mvn.w	r3, #2
 8005e4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005e50:	69fb      	ldr	r3, [r7, #28]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3720      	adds	r7, #32
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	e000ed04 	.word	0xe000ed04

08005e60 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e76:	f3ef 8305 	mrs	r3, IPSR
 8005e7a:	617b      	str	r3, [r7, #20]
  return(result);
 8005e7c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d028      	beq.n	8005ed4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <osMessageQueueGet+0x34>
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <osMessageQueueGet+0x34>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005e94:	f06f 0303 	mvn.w	r3, #3
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	e037      	b.n	8005f0c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005ea0:	f107 0310 	add.w	r3, r7, #16
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	69b8      	ldr	r0, [r7, #24]
 8005eaa:	f000 ffd3 	bl	8006e54 <xQueueReceiveFromISR>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d003      	beq.n	8005ebc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005eb4:	f06f 0302 	mvn.w	r3, #2
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	e027      	b.n	8005f0c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d024      	beq.n	8005f0c <osMessageQueueGet+0xac>
 8005ec2:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <osMessageQueueGet+0xb8>)
 8005ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	e01b      	b.n	8005f0c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <osMessageQueueGet+0x80>
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d103      	bne.n	8005ee8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005ee0:	f06f 0303 	mvn.w	r3, #3
 8005ee4:	61fb      	str	r3, [r7, #28]
 8005ee6:	e011      	b.n	8005f0c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	69b8      	ldr	r0, [r7, #24]
 8005eee:	f000 fdc5 	bl	8006a7c <xQueueReceive>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d009      	beq.n	8005f0c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005efe:	f06f 0301 	mvn.w	r3, #1
 8005f02:	61fb      	str	r3, [r7, #28]
 8005f04:	e002      	b.n	8005f0c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005f06:	f06f 0302 	mvn.w	r3, #2
 8005f0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005f0c:	69fb      	ldr	r3, [r7, #28]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3720      	adds	r7, #32
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	e000ed04 	.word	0xe000ed04

08005f1c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <osMessageQueueGetCount+0x18>
    count = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e00e      	b.n	8005f52 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f34:	f3ef 8305 	mrs	r3, IPSR
 8005f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005f40:	6938      	ldr	r0, [r7, #16]
 8005f42:	f001 f825 	bl	8006f90 <uxQueueMessagesWaitingFromISR>
 8005f46:	6178      	str	r0, [r7, #20]
 8005f48:	e003      	b.n	8005f52 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005f4a:	6938      	ldr	r0, [r7, #16]
 8005f4c:	f001 f802 	bl	8006f54 <uxQueueMessagesWaiting>
 8005f50:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005f52:	697b      	ldr	r3, [r7, #20]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3718      	adds	r7, #24
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f68:	f3ef 8305 	mrs	r3, IPSR
 8005f6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8005f74:	f06f 0305 	mvn.w	r3, #5
 8005f78:	617b      	str	r3, [r7, #20]
 8005f7a:	e00e      	b.n	8005f9a <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d103      	bne.n	8005f8a <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8005f82:	f06f 0303 	mvn.w	r3, #3
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	e007      	b.n	8005f9a <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8005f8a:	6938      	ldr	r0, [r7, #16]
 8005f8c:	f001 f994 	bl	80072b8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8005f94:	6938      	ldr	r0, [r7, #16]
 8005f96:	f001 f819 	bl	8006fcc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005f9a:	697b      	ldr	r3, [r7, #20]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4a07      	ldr	r2, [pc, #28]	; (8005fd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005fb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	4a06      	ldr	r2, [pc, #24]	; (8005fd4 <vApplicationGetIdleTaskMemory+0x30>)
 8005fba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2280      	movs	r2, #128	; 0x80
 8005fc0:	601a      	str	r2, [r3, #0]
}
 8005fc2:	bf00      	nop
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	240000c4 	.word	0x240000c4
 8005fd4:	24000180 	.word	0x24000180

08005fd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4a07      	ldr	r2, [pc, #28]	; (8006004 <vApplicationGetTimerTaskMemory+0x2c>)
 8005fe8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	4a06      	ldr	r2, [pc, #24]	; (8006008 <vApplicationGetTimerTaskMemory+0x30>)
 8005fee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ff6:	601a      	str	r2, [r3, #0]
}
 8005ff8:	bf00      	nop
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	24000380 	.word	0x24000380
 8006008:	2400043c 	.word	0x2400043c

0800600c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f103 0208 	add.w	r2, r3, #8
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f04f 32ff 	mov.w	r2, #4294967295
 8006024:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f103 0208 	add.w	r2, r3, #8
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f103 0208 	add.w	r2, r3, #8
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	601a      	str	r2, [r3, #0]
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060ae:	b480      	push	{r7}
 80060b0:	b085      	sub	sp, #20
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c4:	d103      	bne.n	80060ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	e00c      	b.n	80060e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3308      	adds	r3, #8
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e002      	b.n	80060dc <vListInsert+0x2e>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d2f6      	bcs.n	80060d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	601a      	str	r2, [r3, #0]
}
 8006114:	bf00      	nop
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6892      	ldr	r2, [r2, #8]
 8006136:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6852      	ldr	r2, [r2, #4]
 8006140:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	429a      	cmp	r2, r3
 800614a:	d103      	bne.n	8006154 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	1e5a      	subs	r2, r3, #1
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10a      	bne.n	800619e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800619a:	bf00      	nop
 800619c:	e7fe      	b.n	800619c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800619e:	f002 fda9 	bl	8008cf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061ae:	fb01 f303 	mul.w	r3, r1, r3
 80061b2:	441a      	add	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ce:	3b01      	subs	r3, #1
 80061d0:	68f9      	ldr	r1, [r7, #12]
 80061d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	441a      	add	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	22ff      	movs	r2, #255	; 0xff
 80061e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	22ff      	movs	r2, #255	; 0xff
 80061ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d114      	bne.n	800621e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01a      	beq.n	8006232 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3310      	adds	r3, #16
 8006200:	4618      	mov	r0, r3
 8006202:	f001 fd4f 	bl	8007ca4 <xTaskRemoveFromEventList>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d012      	beq.n	8006232 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800620c:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <xQueueGenericReset+0xcc>)
 800620e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	e009      	b.n	8006232 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3310      	adds	r3, #16
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff fef2 	bl	800600c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	3324      	adds	r3, #36	; 0x24
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff feed 	bl	800600c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006232:	f002 fd8f 	bl	8008d54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006236:	2301      	movs	r3, #1
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08e      	sub	sp, #56	; 0x38
 8006248:	af02      	add	r7, sp, #8
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10a      	bne.n	800628a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006286:	bf00      	nop
 8006288:	e7fe      	b.n	8006288 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <xQueueGenericCreateStatic+0x52>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <xQueueGenericCreateStatic+0x56>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <xQueueGenericCreateStatic+0x58>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	623b      	str	r3, [r7, #32]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d102      	bne.n	80062c2 <xQueueGenericCreateStatic+0x7e>
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <xQueueGenericCreateStatic+0x82>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e000      	b.n	80062c8 <xQueueGenericCreateStatic+0x84>
 80062c6:	2300      	movs	r3, #0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	61fb      	str	r3, [r7, #28]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062e2:	2350      	movs	r3, #80	; 0x50
 80062e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b50      	cmp	r3, #80	; 0x50
 80062ea:	d00a      	beq.n	8006302 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	61bb      	str	r3, [r7, #24]
}
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006302:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00d      	beq.n	800632a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006316:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800631a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	4613      	mov	r3, r2
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f83f 	bl	80063a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800632c:	4618      	mov	r0, r3
 800632e:	3730      	adds	r7, #48	; 0x30
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006334:	b580      	push	{r7, lr}
 8006336:	b08a      	sub	sp, #40	; 0x28
 8006338:	af02      	add	r7, sp, #8
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	4613      	mov	r3, r2
 8006340:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	613b      	str	r3, [r7, #16]
}
 800635a:	bf00      	nop
 800635c:	e7fe      	b.n	800635c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	fb02 f303 	mul.w	r3, r2, r3
 8006366:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	3350      	adds	r3, #80	; 0x50
 800636c:	4618      	mov	r0, r3
 800636e:	f002 fde3 	bl	8008f38 <pvPortMalloc>
 8006372:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d011      	beq.n	800639e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	3350      	adds	r3, #80	; 0x50
 8006382:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800638c:	79fa      	ldrb	r2, [r7, #7]
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	4613      	mov	r3, r2
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f805 	bl	80063a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800639e:	69bb      	ldr	r3, [r7, #24]
	}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3720      	adds	r7, #32
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d103      	bne.n	80063c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	e002      	b.n	80063ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063d6:	2101      	movs	r1, #1
 80063d8:	69b8      	ldr	r0, [r7, #24]
 80063da:	f7ff fecb 	bl	8006174 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	78fa      	ldrb	r2, [r7, #3]
 80063e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00e      	beq.n	800641a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800640e:	2300      	movs	r3, #0
 8006410:	2200      	movs	r2, #0
 8006412:	2100      	movs	r1, #0
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f90b 	bl	8006630 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006422:	b580      	push	{r7, lr}
 8006424:	b086      	sub	sp, #24
 8006426:	af00      	add	r7, sp, #0
 8006428:	4603      	mov	r3, r0
 800642a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800642c:	2301      	movs	r3, #1
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	2300      	movs	r3, #0
 8006432:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	461a      	mov	r2, r3
 8006438:	6939      	ldr	r1, [r7, #16]
 800643a:	6978      	ldr	r0, [r7, #20]
 800643c:	f7ff ff7a 	bl	8006334 <xQueueGenericCreate>
 8006440:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff ffd3 	bl	80063ee <prvInitialiseMutex>

		return xNewQueue;
 8006448:	68fb      	ldr	r3, [r7, #12]
	}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006452:	b580      	push	{r7, lr}
 8006454:	b088      	sub	sp, #32
 8006456:	af02      	add	r7, sp, #8
 8006458:	4603      	mov	r3, r0
 800645a:	6039      	str	r1, [r7, #0]
 800645c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800645e:	2301      	movs	r3, #1
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	2300      	movs	r3, #0
 8006464:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2200      	movs	r2, #0
 800646e:	6939      	ldr	r1, [r7, #16]
 8006470:	6978      	ldr	r0, [r7, #20]
 8006472:	f7ff fee7 	bl	8006244 <xQueueGenericCreateStatic>
 8006476:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f7ff ffb8 	bl	80063ee <prvInitialiseMutex>

		return xNewQueue;
 800647e:	68fb      	ldr	r3, [r7, #12]
	}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006488:	b590      	push	{r4, r7, lr}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	60fb      	str	r3, [r7, #12]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	689c      	ldr	r4, [r3, #8]
 80064b4:	f001 fdb8 	bl	8008028 <xTaskGetCurrentTaskHandle>
 80064b8:	4603      	mov	r3, r0
 80064ba:	429c      	cmp	r4, r3
 80064bc:	d111      	bne.n	80064e2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	1e5a      	subs	r2, r3, #1
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d105      	bne.n	80064dc <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80064d0:	2300      	movs	r3, #0
 80064d2:	2200      	movs	r2, #0
 80064d4:	2100      	movs	r1, #0
 80064d6:	6938      	ldr	r0, [r7, #16]
 80064d8:	f000 f8aa 	bl	8006630 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80064dc:	2301      	movs	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	e001      	b.n	80064e6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80064e6:	697b      	ldr	r3, [r7, #20]
	}
 80064e8:	4618      	mov	r0, r3
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd90      	pop	{r4, r7, pc}

080064f0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80064f0:	b590      	push	{r4, r7, lr}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10a      	bne.n	800651a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	60fb      	str	r3, [r7, #12]
}
 8006516:	bf00      	nop
 8006518:	e7fe      	b.n	8006518 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	689c      	ldr	r4, [r3, #8]
 800651e:	f001 fd83 	bl	8008028 <xTaskGetCurrentTaskHandle>
 8006522:	4603      	mov	r3, r0
 8006524:	429c      	cmp	r4, r3
 8006526:	d107      	bne.n	8006538 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006532:	2301      	movs	r3, #1
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	e00c      	b.n	8006552 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6938      	ldr	r0, [r7, #16]
 800653c:	f000 fb7e 	bl	8006c3c <xQueueSemaphoreTake>
 8006540:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d004      	beq.n	8006552 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006552:	697b      	ldr	r3, [r7, #20]
	}
 8006554:	4618      	mov	r0, r3
 8006556:	371c      	adds	r7, #28
 8006558:	46bd      	mov	sp, r7
 800655a:	bd90      	pop	{r4, r7, pc}

0800655c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08a      	sub	sp, #40	; 0x28
 8006560:	af02      	add	r7, sp, #8
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10a      	bne.n	8006584 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	61bb      	str	r3, [r7, #24]
}
 8006580:	bf00      	nop
 8006582:	e7fe      	b.n	8006582 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	429a      	cmp	r2, r3
 800658a:	d90a      	bls.n	80065a2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	617b      	str	r3, [r7, #20]
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80065a2:	2302      	movs	r3, #2
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	2100      	movs	r1, #0
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f7ff fe49 	bl	8006244 <xQueueGenericCreateStatic>
 80065b2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80065c0:	69fb      	ldr	r3, [r7, #28]
	}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3720      	adds	r7, #32
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b086      	sub	sp, #24
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	613b      	str	r3, [r7, #16]
}
 80065ec:	bf00      	nop
 80065ee:	e7fe      	b.n	80065ee <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d90a      	bls.n	800660e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	60fb      	str	r3, [r7, #12]
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800660e:	2202      	movs	r2, #2
 8006610:	2100      	movs	r1, #0
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff fe8e 	bl	8006334 <xQueueGenericCreate>
 8006618:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006626:	697b      	ldr	r3, [r7, #20]
	}
 8006628:	4618      	mov	r0, r3
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08e      	sub	sp, #56	; 0x38
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800663e:	2300      	movs	r3, #0
 8006640:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <xQueueGenericSend+0x32>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800665e:	bf00      	nop
 8006660:	e7fe      	b.n	8006660 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d103      	bne.n	8006670 <xQueueGenericSend+0x40>
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <xQueueGenericSend+0x44>
 8006670:	2301      	movs	r3, #1
 8006672:	e000      	b.n	8006676 <xQueueGenericSend+0x46>
 8006674:	2300      	movs	r3, #0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10a      	bne.n	8006690 <xQueueGenericSend+0x60>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d103      	bne.n	800669e <xQueueGenericSend+0x6e>
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <xQueueGenericSend+0x72>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <xQueueGenericSend+0x74>
 80066a2:	2300      	movs	r3, #0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10a      	bne.n	80066be <xQueueGenericSend+0x8e>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	623b      	str	r3, [r7, #32]
}
 80066ba:	bf00      	nop
 80066bc:	e7fe      	b.n	80066bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066be:	f001 fcc3 	bl	8008048 <xTaskGetSchedulerState>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <xQueueGenericSend+0x9e>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <xQueueGenericSend+0xa2>
 80066ce:	2301      	movs	r3, #1
 80066d0:	e000      	b.n	80066d4 <xQueueGenericSend+0xa4>
 80066d2:	2300      	movs	r3, #0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10a      	bne.n	80066ee <xQueueGenericSend+0xbe>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	61fb      	str	r3, [r7, #28]
}
 80066ea:	bf00      	nop
 80066ec:	e7fe      	b.n	80066ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066ee:	f002 fb01 	bl	8008cf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d302      	bcc.n	8006704 <xQueueGenericSend+0xd4>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b02      	cmp	r3, #2
 8006702:	d129      	bne.n	8006758 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	68b9      	ldr	r1, [r7, #8]
 8006708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800670a:	f000 fc9a 	bl	8007042 <prvCopyDataToQueue>
 800670e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	2b00      	cmp	r3, #0
 8006716:	d010      	beq.n	800673a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	3324      	adds	r3, #36	; 0x24
 800671c:	4618      	mov	r0, r3
 800671e:	f001 fac1 	bl	8007ca4 <xTaskRemoveFromEventList>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d013      	beq.n	8006750 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006728:	4b3f      	ldr	r3, [pc, #252]	; (8006828 <xQueueGenericSend+0x1f8>)
 800672a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	e00a      	b.n	8006750 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	2b00      	cmp	r3, #0
 800673e:	d007      	beq.n	8006750 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006740:	4b39      	ldr	r3, [pc, #228]	; (8006828 <xQueueGenericSend+0x1f8>)
 8006742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006750:	f002 fb00 	bl	8008d54 <vPortExitCritical>
				return pdPASS;
 8006754:	2301      	movs	r3, #1
 8006756:	e063      	b.n	8006820 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d103      	bne.n	8006766 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800675e:	f002 faf9 	bl	8008d54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006762:	2300      	movs	r3, #0
 8006764:	e05c      	b.n	8006820 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006768:	2b00      	cmp	r3, #0
 800676a:	d106      	bne.n	800677a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800676c:	f107 0314 	add.w	r3, r7, #20
 8006770:	4618      	mov	r0, r3
 8006772:	f001 fafb 	bl	8007d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006776:	2301      	movs	r3, #1
 8006778:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800677a:	f002 faeb 	bl	8008d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800677e:	f001 f855 	bl	800782c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006782:	f002 fab7 	bl	8008cf4 <vPortEnterCritical>
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800678c:	b25b      	sxtb	r3, r3
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d103      	bne.n	800679c <xQueueGenericSend+0x16c>
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067a2:	b25b      	sxtb	r3, r3
 80067a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a8:	d103      	bne.n	80067b2 <xQueueGenericSend+0x182>
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067b2:	f002 facf 	bl	8008d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067b6:	1d3a      	adds	r2, r7, #4
 80067b8:	f107 0314 	add.w	r3, r7, #20
 80067bc:	4611      	mov	r1, r2
 80067be:	4618      	mov	r0, r3
 80067c0:	f001 faea 	bl	8007d98 <xTaskCheckForTimeOut>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d124      	bne.n	8006814 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067cc:	f000 fd31 	bl	8007232 <prvIsQueueFull>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d018      	beq.n	8006808 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	3310      	adds	r3, #16
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	4611      	mov	r1, r2
 80067de:	4618      	mov	r0, r3
 80067e0:	f001 fa10 	bl	8007c04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80067e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067e6:	f000 fcbc 	bl	8007162 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80067ea:	f001 f82d 	bl	8007848 <xTaskResumeAll>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f47f af7c 	bne.w	80066ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80067f6:	4b0c      	ldr	r3, [pc, #48]	; (8006828 <xQueueGenericSend+0x1f8>)
 80067f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	e772      	b.n	80066ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800680a:	f000 fcaa 	bl	8007162 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800680e:	f001 f81b 	bl	8007848 <xTaskResumeAll>
 8006812:	e76c      	b.n	80066ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006816:	f000 fca4 	bl	8007162 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800681a:	f001 f815 	bl	8007848 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800681e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006820:	4618      	mov	r0, r3
 8006822:	3738      	adds	r7, #56	; 0x38
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	e000ed04 	.word	0xe000ed04

0800682c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b090      	sub	sp, #64	; 0x40
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800683e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10a      	bne.n	800685a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006856:	bf00      	nop
 8006858:	e7fe      	b.n	8006858 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d103      	bne.n	8006868 <xQueueGenericSendFromISR+0x3c>
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <xQueueGenericSendFromISR+0x40>
 8006868:	2301      	movs	r3, #1
 800686a:	e000      	b.n	800686e <xQueueGenericSendFromISR+0x42>
 800686c:	2300      	movs	r3, #0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006884:	bf00      	nop
 8006886:	e7fe      	b.n	8006886 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b02      	cmp	r3, #2
 800688c:	d103      	bne.n	8006896 <xQueueGenericSendFromISR+0x6a>
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006892:	2b01      	cmp	r3, #1
 8006894:	d101      	bne.n	800689a <xQueueGenericSendFromISR+0x6e>
 8006896:	2301      	movs	r3, #1
 8006898:	e000      	b.n	800689c <xQueueGenericSendFromISR+0x70>
 800689a:	2300      	movs	r3, #0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10a      	bne.n	80068b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	623b      	str	r3, [r7, #32]
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068b6:	f002 faff 	bl	8008eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80068ba:	f3ef 8211 	mrs	r2, BASEPRI
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	61fa      	str	r2, [r7, #28]
 80068d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80068d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068de:	429a      	cmp	r2, r3
 80068e0:	d302      	bcc.n	80068e8 <xQueueGenericSendFromISR+0xbc>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d12f      	bne.n	8006948 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	68b9      	ldr	r1, [r7, #8]
 80068fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068fe:	f000 fba0 	bl	8007042 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006902:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690a:	d112      	bne.n	8006932 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	2b00      	cmp	r3, #0
 8006912:	d016      	beq.n	8006942 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	3324      	adds	r3, #36	; 0x24
 8006918:	4618      	mov	r0, r3
 800691a:	f001 f9c3 	bl	8007ca4 <xTaskRemoveFromEventList>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00e      	beq.n	8006942 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00b      	beq.n	8006942 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	e007      	b.n	8006942 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006932:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006936:	3301      	adds	r3, #1
 8006938:	b2db      	uxtb	r3, r3
 800693a:	b25a      	sxtb	r2, r3
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006942:	2301      	movs	r3, #1
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006946:	e001      	b.n	800694c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006948:	2300      	movs	r3, #0
 800694a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800694c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006956:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800695a:	4618      	mov	r0, r3
 800695c:	3740      	adds	r7, #64	; 0x40
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b08e      	sub	sp, #56	; 0x38
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10a      	bne.n	800698c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	623b      	str	r3, [r7, #32]
}
 8006988:	bf00      	nop
 800698a:	e7fe      	b.n	800698a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <xQueueGiveFromISR+0x48>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	61fb      	str	r3, [r7, #28]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d103      	bne.n	80069ba <xQueueGiveFromISR+0x58>
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <xQueueGiveFromISR+0x5c>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <xQueueGiveFromISR+0x5e>
 80069be:	2300      	movs	r3, #0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <xQueueGiveFromISR+0x78>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	61bb      	str	r3, [r7, #24]
}
 80069d6:	bf00      	nop
 80069d8:	e7fe      	b.n	80069d8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069da:	f002 fa6d 	bl	8008eb8 <vPortValidateInterruptPriority>
	__asm volatile
 80069de:	f3ef 8211 	mrs	r2, BASEPRI
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	617a      	str	r2, [r7, #20]
 80069f4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80069f6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d22b      	bcs.n	8006a62 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a24:	d112      	bne.n	8006a4c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d016      	beq.n	8006a5c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	3324      	adds	r3, #36	; 0x24
 8006a32:	4618      	mov	r0, r3
 8006a34:	f001 f936 	bl	8007ca4 <xTaskRemoveFromEventList>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00e      	beq.n	8006a5c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00b      	beq.n	8006a5c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2201      	movs	r2, #1
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	e007      	b.n	8006a5c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a50:	3301      	adds	r3, #1
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	b25a      	sxtb	r2, r3
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a60:	e001      	b.n	8006a66 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	637b      	str	r3, [r7, #52]	; 0x34
 8006a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a68:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f383 8811 	msr	BASEPRI, r3
}
 8006a70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3738      	adds	r7, #56	; 0x38
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08c      	sub	sp, #48	; 0x30
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10a      	bne.n	8006aac <xQueueReceive+0x30>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	623b      	str	r3, [r7, #32]
}
 8006aa8:	bf00      	nop
 8006aaa:	e7fe      	b.n	8006aaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d103      	bne.n	8006aba <xQueueReceive+0x3e>
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <xQueueReceive+0x42>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e000      	b.n	8006ac0 <xQueueReceive+0x44>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <xQueueReceive+0x5e>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	61fb      	str	r3, [r7, #28]
}
 8006ad6:	bf00      	nop
 8006ad8:	e7fe      	b.n	8006ad8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ada:	f001 fab5 	bl	8008048 <xTaskGetSchedulerState>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <xQueueReceive+0x6e>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <xQueueReceive+0x72>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e000      	b.n	8006af0 <xQueueReceive+0x74>
 8006aee:	2300      	movs	r3, #0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <xQueueReceive+0x8e>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	61bb      	str	r3, [r7, #24]
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b0a:	f002 f8f3 	bl	8008cf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d01f      	beq.n	8006b5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b1e:	f000 fafa 	bl	8007116 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	1e5a      	subs	r2, r3, #1
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00f      	beq.n	8006b52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	3310      	adds	r3, #16
 8006b36:	4618      	mov	r0, r3
 8006b38:	f001 f8b4 	bl	8007ca4 <xTaskRemoveFromEventList>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d007      	beq.n	8006b52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b42:	4b3d      	ldr	r3, [pc, #244]	; (8006c38 <xQueueReceive+0x1bc>)
 8006b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b52:	f002 f8ff 	bl	8008d54 <vPortExitCritical>
				return pdPASS;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e069      	b.n	8006c2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d103      	bne.n	8006b68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b60:	f002 f8f8 	bl	8008d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b64:	2300      	movs	r3, #0
 8006b66:	e062      	b.n	8006c2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b6e:	f107 0310 	add.w	r3, r7, #16
 8006b72:	4618      	mov	r0, r3
 8006b74:	f001 f8fa 	bl	8007d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b7c:	f002 f8ea 	bl	8008d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b80:	f000 fe54 	bl	800782c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b84:	f002 f8b6 	bl	8008cf4 <vPortEnterCritical>
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b8e:	b25b      	sxtb	r3, r3
 8006b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b94:	d103      	bne.n	8006b9e <xQueueReceive+0x122>
 8006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba4:	b25b      	sxtb	r3, r3
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006baa:	d103      	bne.n	8006bb4 <xQueueReceive+0x138>
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bb4:	f002 f8ce 	bl	8008d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bb8:	1d3a      	adds	r2, r7, #4
 8006bba:	f107 0310 	add.w	r3, r7, #16
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 f8e9 	bl	8007d98 <xTaskCheckForTimeOut>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d123      	bne.n	8006c14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bce:	f000 fb1a 	bl	8007206 <prvIsQueueEmpty>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d017      	beq.n	8006c08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	3324      	adds	r3, #36	; 0x24
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	4611      	mov	r1, r2
 8006be0:	4618      	mov	r0, r3
 8006be2:	f001 f80f 	bl	8007c04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006be8:	f000 fabb 	bl	8007162 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006bec:	f000 fe2c 	bl	8007848 <xTaskResumeAll>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d189      	bne.n	8006b0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006bf6:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <xQueueReceive+0x1bc>)
 8006bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	e780      	b.n	8006b0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c0a:	f000 faaa 	bl	8007162 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c0e:	f000 fe1b 	bl	8007848 <xTaskResumeAll>
 8006c12:	e77a      	b.n	8006b0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c16:	f000 faa4 	bl	8007162 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c1a:	f000 fe15 	bl	8007848 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c20:	f000 faf1 	bl	8007206 <prvIsQueueEmpty>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f43f af6f 	beq.w	8006b0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3730      	adds	r7, #48	; 0x30
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08e      	sub	sp, #56	; 0x38
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c46:	2300      	movs	r3, #0
 8006c48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10a      	bne.n	8006c6e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	623b      	str	r3, [r7, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	e7fe      	b.n	8006c6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	61fb      	str	r3, [r7, #28]
}
 8006c88:	bf00      	nop
 8006c8a:	e7fe      	b.n	8006c8a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c8c:	f001 f9dc 	bl	8008048 <xTaskGetSchedulerState>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d102      	bne.n	8006c9c <xQueueSemaphoreTake+0x60>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <xQueueSemaphoreTake+0x64>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <xQueueSemaphoreTake+0x66>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	61bb      	str	r3, [r7, #24]
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cbc:	f002 f81a 	bl	8008cf4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d024      	beq.n	8006d16 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cce:	1e5a      	subs	r2, r3, #1
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d104      	bne.n	8006ce6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006cdc:	f001 fb2a 	bl	8008334 <pvTaskIncrementMutexHeldCount>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00f      	beq.n	8006d0e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	3310      	adds	r3, #16
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 ffd6 	bl	8007ca4 <xTaskRemoveFromEventList>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d007      	beq.n	8006d0e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cfe:	4b54      	ldr	r3, [pc, #336]	; (8006e50 <xQueueSemaphoreTake+0x214>)
 8006d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d0e:	f002 f821 	bl	8008d54 <vPortExitCritical>
				return pdPASS;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e097      	b.n	8006e46 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d111      	bne.n	8006d40 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	617b      	str	r3, [r7, #20]
}
 8006d34:	bf00      	nop
 8006d36:	e7fe      	b.n	8006d36 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006d38:	f002 f80c 	bl	8008d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e082      	b.n	8006e46 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d46:	f107 030c 	add.w	r3, r7, #12
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 f80e 	bl	8007d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d50:	2301      	movs	r3, #1
 8006d52:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d54:	f001 fffe 	bl	8008d54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d58:	f000 fd68 	bl	800782c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d5c:	f001 ffca 	bl	8008cf4 <vPortEnterCritical>
 8006d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d66:	b25b      	sxtb	r3, r3
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d103      	bne.n	8006d76 <xQueueSemaphoreTake+0x13a>
 8006d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d7c:	b25b      	sxtb	r3, r3
 8006d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d82:	d103      	bne.n	8006d8c <xQueueSemaphoreTake+0x150>
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d8c:	f001 ffe2 	bl	8008d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d90:	463a      	mov	r2, r7
 8006d92:	f107 030c 	add.w	r3, r7, #12
 8006d96:	4611      	mov	r1, r2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fffd 	bl	8007d98 <xTaskCheckForTimeOut>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d132      	bne.n	8006e0a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006da4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006da6:	f000 fa2e 	bl	8007206 <prvIsQueueEmpty>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d026      	beq.n	8006dfe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d109      	bne.n	8006dcc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006db8:	f001 ff9c 	bl	8008cf4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f001 f95f 	bl	8008084 <xTaskPriorityInherit>
 8006dc6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006dc8:	f001 ffc4 	bl	8008d54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	3324      	adds	r3, #36	; 0x24
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 ff15 	bl	8007c04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006dda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ddc:	f000 f9c1 	bl	8007162 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006de0:	f000 fd32 	bl	8007848 <xTaskResumeAll>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f47f af68 	bne.w	8006cbc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006dec:	4b18      	ldr	r3, [pc, #96]	; (8006e50 <xQueueSemaphoreTake+0x214>)
 8006dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	e75e      	b.n	8006cbc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006dfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e00:	f000 f9af 	bl	8007162 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e04:	f000 fd20 	bl	8007848 <xTaskResumeAll>
 8006e08:	e758      	b.n	8006cbc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006e0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e0c:	f000 f9a9 	bl	8007162 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e10:	f000 fd1a 	bl	8007848 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e16:	f000 f9f6 	bl	8007206 <prvIsQueueEmpty>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f43f af4d 	beq.w	8006cbc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00d      	beq.n	8006e44 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006e28:	f001 ff64 	bl	8008cf4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006e2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e2e:	f000 f8f0 	bl	8007012 <prvGetDisinheritPriorityAfterTimeout>
 8006e32:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f001 f9f8 	bl	8008230 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006e40:	f001 ff88 	bl	8008d54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3738      	adds	r7, #56	; 0x38
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b08e      	sub	sp, #56	; 0x38
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10a      	bne.n	8006e80 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	623b      	str	r3, [r7, #32]
}
 8006e7c:	bf00      	nop
 8006e7e:	e7fe      	b.n	8006e7e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d103      	bne.n	8006e8e <xQueueReceiveFromISR+0x3a>
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <xQueueReceiveFromISR+0x3e>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <xQueueReceiveFromISR+0x40>
 8006e92:	2300      	movs	r3, #0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	61fb      	str	r3, [r7, #28]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006eae:	f002 f803 	bl	8008eb8 <vPortValidateInterruptPriority>
	__asm volatile
 8006eb2:	f3ef 8211 	mrs	r2, BASEPRI
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	61ba      	str	r2, [r7, #24]
 8006ec8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006eca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d02f      	beq.n	8006f3a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ee4:	68b9      	ldr	r1, [r7, #8]
 8006ee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ee8:	f000 f915 	bl	8007116 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	1e5a      	subs	r2, r3, #1
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ef4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efc:	d112      	bne.n	8006f24 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d016      	beq.n	8006f34 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	3310      	adds	r3, #16
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 feca 	bl	8007ca4 <xTaskRemoveFromEventList>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00e      	beq.n	8006f34 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00b      	beq.n	8006f34 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	e007      	b.n	8006f34 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f28:	3301      	adds	r3, #1
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	b25a      	sxtb	r2, r3
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006f34:	2301      	movs	r3, #1
 8006f36:	637b      	str	r3, [r7, #52]	; 0x34
 8006f38:	e001      	b.n	8006f3e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f40:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f383 8811 	msr	BASEPRI, r3
}
 8006f48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3738      	adds	r7, #56	; 0x38
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	60bb      	str	r3, [r7, #8]
}
 8006f74:	bf00      	nop
 8006f76:	e7fe      	b.n	8006f76 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006f78:	f001 febc 	bl	8008cf4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f80:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006f82:	f001 fee7 	bl	8008d54 <vPortExitCritical>

	return uxReturn;
 8006f86:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10a      	bne.n	8006fb8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	60fb      	str	r3, [r7, #12]
}
 8006fb4:	bf00      	nop
 8006fb6:	e7fe      	b.n	8006fb6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006fbe:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10a      	bne.n	8006ff4 <vQueueDelete+0x28>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	60bb      	str	r3, [r7, #8]
}
 8006ff0:	bf00      	nop
 8006ff2:	e7fe      	b.n	8006ff2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 f95f 	bl	80072b8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007000:	2b00      	cmp	r3, #0
 8007002:	d102      	bne.n	800700a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f002 f863 	bl	80090d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	2b00      	cmp	r3, #0
 8007020:	d006      	beq.n	8007030 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	e001      	b.n	8007034 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007030:	2300      	movs	r3, #0
 8007032:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007034:	68fb      	ldr	r3, [r7, #12]
	}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b086      	sub	sp, #24
 8007046:	af00      	add	r7, sp, #0
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800704e:	2300      	movs	r3, #0
 8007050:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10d      	bne.n	800707c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d14d      	bne.n	8007104 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	4618      	mov	r0, r3
 800706e:	f001 f871 	bl	8008154 <xTaskPriorityDisinherit>
 8007072:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	609a      	str	r2, [r3, #8]
 800707a:	e043      	b.n	8007104 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d119      	bne.n	80070b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6858      	ldr	r0, [r3, #4]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	461a      	mov	r2, r3
 800708c:	68b9      	ldr	r1, [r7, #8]
 800708e:	f00f fe50 	bl	8016d32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	441a      	add	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d32b      	bcc.n	8007104 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	605a      	str	r2, [r3, #4]
 80070b4:	e026      	b.n	8007104 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68d8      	ldr	r0, [r3, #12]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	461a      	mov	r2, r3
 80070c0:	68b9      	ldr	r1, [r7, #8]
 80070c2:	f00f fe36 	bl	8016d32 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	425b      	negs	r3, r3
 80070d0:	441a      	add	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d207      	bcs.n	80070f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	425b      	negs	r3, r3
 80070ec:	441a      	add	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d105      	bne.n	8007104 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	3b01      	subs	r3, #1
 8007102:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800710c:	697b      	ldr	r3, [r7, #20]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	d018      	beq.n	800715a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007130:	441a      	add	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	429a      	cmp	r2, r3
 8007140:	d303      	bcc.n	800714a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68d9      	ldr	r1, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	461a      	mov	r2, r3
 8007154:	6838      	ldr	r0, [r7, #0]
 8007156:	f00f fdec 	bl	8016d32 <memcpy>
	}
}
 800715a:	bf00      	nop
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800716a:	f001 fdc3 	bl	8008cf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007174:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007176:	e011      	b.n	800719c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	d012      	beq.n	80071a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3324      	adds	r3, #36	; 0x24
 8007184:	4618      	mov	r0, r3
 8007186:	f000 fd8d 	bl	8007ca4 <xTaskRemoveFromEventList>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007190:	f000 fe64 	bl	8007e5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	3b01      	subs	r3, #1
 8007198:	b2db      	uxtb	r3, r3
 800719a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800719c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	dce9      	bgt.n	8007178 <prvUnlockQueue+0x16>
 80071a4:	e000      	b.n	80071a8 <prvUnlockQueue+0x46>
					break;
 80071a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	22ff      	movs	r2, #255	; 0xff
 80071ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80071b0:	f001 fdd0 	bl	8008d54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071b4:	f001 fd9e 	bl	8008cf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071c0:	e011      	b.n	80071e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d012      	beq.n	80071f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3310      	adds	r3, #16
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fd68 	bl	8007ca4 <xTaskRemoveFromEventList>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80071da:	f000 fe3f 	bl	8007e5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	dce9      	bgt.n	80071c2 <prvUnlockQueue+0x60>
 80071ee:	e000      	b.n	80071f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	22ff      	movs	r2, #255	; 0xff
 80071f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80071fa:	f001 fdab 	bl	8008d54 <vPortExitCritical>
}
 80071fe:	bf00      	nop
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800720e:	f001 fd71 	bl	8008cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007216:	2b00      	cmp	r3, #0
 8007218:	d102      	bne.n	8007220 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800721a:	2301      	movs	r3, #1
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	e001      	b.n	8007224 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007220:	2300      	movs	r3, #0
 8007222:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007224:	f001 fd96 	bl	8008d54 <vPortExitCritical>

	return xReturn;
 8007228:	68fb      	ldr	r3, [r7, #12]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b084      	sub	sp, #16
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800723a:	f001 fd5b 	bl	8008cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007246:	429a      	cmp	r2, r3
 8007248:	d102      	bne.n	8007250 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800724a:	2301      	movs	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	e001      	b.n	8007254 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007250:	2300      	movs	r3, #0
 8007252:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007254:	f001 fd7e 	bl	8008d54 <vPortExitCritical>

	return xReturn;
 8007258:	68fb      	ldr	r3, [r7, #12]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800726e:	2300      	movs	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	e014      	b.n	800729e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007274:	4a0f      	ldr	r2, [pc, #60]	; (80072b4 <vQueueAddToRegistry+0x50>)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10b      	bne.n	8007298 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007280:	490c      	ldr	r1, [pc, #48]	; (80072b4 <vQueueAddToRegistry+0x50>)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800728a:	4a0a      	ldr	r2, [pc, #40]	; (80072b4 <vQueueAddToRegistry+0x50>)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	00db      	lsls	r3, r3, #3
 8007290:	4413      	add	r3, r2
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007296:	e006      	b.n	80072a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b07      	cmp	r3, #7
 80072a2:	d9e7      	bls.n	8007274 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	24004e94 	.word	0x24004e94

080072b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072c0:	2300      	movs	r3, #0
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	e016      	b.n	80072f4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80072c6:	4a10      	ldr	r2, [pc, #64]	; (8007308 <vQueueUnregisterQueue+0x50>)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	4413      	add	r3, r2
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d10b      	bne.n	80072ee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80072d6:	4a0c      	ldr	r2, [pc, #48]	; (8007308 <vQueueUnregisterQueue+0x50>)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2100      	movs	r1, #0
 80072dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80072e0:	4a09      	ldr	r2, [pc, #36]	; (8007308 <vQueueUnregisterQueue+0x50>)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	4413      	add	r3, r2
 80072e8:	2200      	movs	r2, #0
 80072ea:	605a      	str	r2, [r3, #4]
				break;
 80072ec:	e006      	b.n	80072fc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3301      	adds	r3, #1
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b07      	cmp	r3, #7
 80072f8:	d9e5      	bls.n	80072c6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80072fa:	bf00      	nop
 80072fc:	bf00      	nop
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	24004e94 	.word	0x24004e94

0800730c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800731c:	f001 fcea 	bl	8008cf4 <vPortEnterCritical>
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007326:	b25b      	sxtb	r3, r3
 8007328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732c:	d103      	bne.n	8007336 <vQueueWaitForMessageRestricted+0x2a>
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800733c:	b25b      	sxtb	r3, r3
 800733e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007342:	d103      	bne.n	800734c <vQueueWaitForMessageRestricted+0x40>
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800734c:	f001 fd02 	bl	8008d54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	2b00      	cmp	r3, #0
 8007356:	d106      	bne.n	8007366 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	3324      	adds	r3, #36	; 0x24
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	68b9      	ldr	r1, [r7, #8]
 8007360:	4618      	mov	r0, r3
 8007362:	f000 fc73 	bl	8007c4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007366:	6978      	ldr	r0, [r7, #20]
 8007368:	f7ff fefb 	bl	8007162 <prvUnlockQueue>
	}
 800736c:	bf00      	nop
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08e      	sub	sp, #56	; 0x38
 8007378:	af04      	add	r7, sp, #16
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
 8007380:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	623b      	str	r3, [r7, #32]
}
 800739a:	bf00      	nop
 800739c:	e7fe      	b.n	800739c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <xTaskCreateStatic+0x46>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	61fb      	str	r3, [r7, #28]
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073ba:	23bc      	movs	r3, #188	; 0xbc
 80073bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2bbc      	cmp	r3, #188	; 0xbc
 80073c2:	d00a      	beq.n	80073da <xTaskCreateStatic+0x66>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	61bb      	str	r3, [r7, #24]
}
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80073da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d01e      	beq.n	8007420 <xTaskCreateStatic+0xac>
 80073e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01b      	beq.n	8007420 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	2202      	movs	r2, #2
 80073f6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073fa:	2300      	movs	r3, #0
 80073fc:	9303      	str	r3, [sp, #12]
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	9302      	str	r3, [sp, #8]
 8007402:	f107 0314 	add.w	r3, r7, #20
 8007406:	9301      	str	r3, [sp, #4]
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	68b9      	ldr	r1, [r7, #8]
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 f850 	bl	80074b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007418:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800741a:	f000 f8f3 	bl	8007604 <prvAddNewTaskToReadyList>
 800741e:	e001      	b.n	8007424 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007420:	2300      	movs	r3, #0
 8007422:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007424:	697b      	ldr	r3, [r7, #20]
	}
 8007426:	4618      	mov	r0, r3
 8007428:	3728      	adds	r7, #40	; 0x28
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800742e:	b580      	push	{r7, lr}
 8007430:	b08c      	sub	sp, #48	; 0x30
 8007432:	af04      	add	r7, sp, #16
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	603b      	str	r3, [r7, #0]
 800743a:	4613      	mov	r3, r2
 800743c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800743e:	88fb      	ldrh	r3, [r7, #6]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4618      	mov	r0, r3
 8007444:	f001 fd78 	bl	8008f38 <pvPortMalloc>
 8007448:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00e      	beq.n	800746e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007450:	20bc      	movs	r0, #188	; 0xbc
 8007452:	f001 fd71 	bl	8008f38 <pvPortMalloc>
 8007456:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	631a      	str	r2, [r3, #48]	; 0x30
 8007464:	e005      	b.n	8007472 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007466:	6978      	ldr	r0, [r7, #20]
 8007468:	f001 fe32 	bl	80090d0 <vPortFree>
 800746c:	e001      	b.n	8007472 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800746e:	2300      	movs	r3, #0
 8007470:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d017      	beq.n	80074a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007480:	88fa      	ldrh	r2, [r7, #6]
 8007482:	2300      	movs	r3, #0
 8007484:	9303      	str	r3, [sp, #12]
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	9302      	str	r3, [sp, #8]
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	9301      	str	r3, [sp, #4]
 800748e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	68b9      	ldr	r1, [r7, #8]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 f80e 	bl	80074b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800749c:	69f8      	ldr	r0, [r7, #28]
 800749e:	f000 f8b1 	bl	8007604 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074a2:	2301      	movs	r3, #1
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	e002      	b.n	80074ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074a8:	f04f 33ff 	mov.w	r3, #4294967295
 80074ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074ae:	69bb      	ldr	r3, [r7, #24]
	}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3720      	adds	r7, #32
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	461a      	mov	r2, r3
 80074d0:	21a5      	movs	r1, #165	; 0xa5
 80074d2:	f00f fc3c 	bl	8016d4e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80074e0:	440b      	add	r3, r1
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	f023 0307 	bic.w	r3, r3, #7
 80074ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <prvInitialiseNewTask+0x58>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	617b      	str	r3, [r7, #20]
}
 800750c:	bf00      	nop
 800750e:	e7fe      	b.n	800750e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d01f      	beq.n	8007556 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007516:	2300      	movs	r3, #0
 8007518:	61fb      	str	r3, [r7, #28]
 800751a:	e012      	b.n	8007542 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4413      	add	r3, r2
 8007522:	7819      	ldrb	r1, [r3, #0]
 8007524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	4413      	add	r3, r2
 800752a:	3334      	adds	r3, #52	; 0x34
 800752c:	460a      	mov	r2, r1
 800752e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	4413      	add	r3, r2
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d006      	beq.n	800754a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	3301      	adds	r3, #1
 8007540:	61fb      	str	r3, [r7, #28]
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	2b0f      	cmp	r3, #15
 8007546:	d9e9      	bls.n	800751c <prvInitialiseNewTask+0x64>
 8007548:	e000      	b.n	800754c <prvInitialiseNewTask+0x94>
			{
				break;
 800754a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007554:	e003      	b.n	800755e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	2b37      	cmp	r3, #55	; 0x37
 8007562:	d901      	bls.n	8007568 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007564:	2337      	movs	r3, #55	; 0x37
 8007566:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800756c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007572:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007576:	2200      	movs	r2, #0
 8007578:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	3304      	adds	r3, #4
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe fd64 	bl	800604c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	3318      	adds	r3, #24
 8007588:	4618      	mov	r0, r3
 800758a:	f7fe fd5f 	bl	800604c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007592:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	3354      	adds	r3, #84	; 0x54
 80075b8:	2260      	movs	r2, #96	; 0x60
 80075ba:	2100      	movs	r1, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	f00f fbc6 	bl	8016d4e <memset>
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	4a0c      	ldr	r2, [pc, #48]	; (80075f8 <prvInitialiseNewTask+0x140>)
 80075c6:	659a      	str	r2, [r3, #88]	; 0x58
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	4a0c      	ldr	r2, [pc, #48]	; (80075fc <prvInitialiseNewTask+0x144>)
 80075cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	4a0b      	ldr	r2, [pc, #44]	; (8007600 <prvInitialiseNewTask+0x148>)
 80075d2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	68f9      	ldr	r1, [r7, #12]
 80075d8:	69b8      	ldr	r0, [r7, #24]
 80075da:	f001 fa61 	bl	8008aa0 <pxPortInitialiseStack>
 80075de:	4602      	mov	r2, r0
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075f0:	bf00      	nop
 80075f2:	3720      	adds	r7, #32
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	0801b374 	.word	0x0801b374
 80075fc:	0801b394 	.word	0x0801b394
 8007600:	0801b354 	.word	0x0801b354

08007604 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800760c:	f001 fb72 	bl	8008cf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007610:	4b2d      	ldr	r3, [pc, #180]	; (80076c8 <prvAddNewTaskToReadyList+0xc4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3301      	adds	r3, #1
 8007616:	4a2c      	ldr	r2, [pc, #176]	; (80076c8 <prvAddNewTaskToReadyList+0xc4>)
 8007618:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800761a:	4b2c      	ldr	r3, [pc, #176]	; (80076cc <prvAddNewTaskToReadyList+0xc8>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d109      	bne.n	8007636 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007622:	4a2a      	ldr	r2, [pc, #168]	; (80076cc <prvAddNewTaskToReadyList+0xc8>)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007628:	4b27      	ldr	r3, [pc, #156]	; (80076c8 <prvAddNewTaskToReadyList+0xc4>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d110      	bne.n	8007652 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007630:	f000 fc38 	bl	8007ea4 <prvInitialiseTaskLists>
 8007634:	e00d      	b.n	8007652 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007636:	4b26      	ldr	r3, [pc, #152]	; (80076d0 <prvAddNewTaskToReadyList+0xcc>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d109      	bne.n	8007652 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800763e:	4b23      	ldr	r3, [pc, #140]	; (80076cc <prvAddNewTaskToReadyList+0xc8>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	429a      	cmp	r2, r3
 800764a:	d802      	bhi.n	8007652 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800764c:	4a1f      	ldr	r2, [pc, #124]	; (80076cc <prvAddNewTaskToReadyList+0xc8>)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007652:	4b20      	ldr	r3, [pc, #128]	; (80076d4 <prvAddNewTaskToReadyList+0xd0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3301      	adds	r3, #1
 8007658:	4a1e      	ldr	r2, [pc, #120]	; (80076d4 <prvAddNewTaskToReadyList+0xd0>)
 800765a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800765c:	4b1d      	ldr	r3, [pc, #116]	; (80076d4 <prvAddNewTaskToReadyList+0xd0>)
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007668:	4b1b      	ldr	r3, [pc, #108]	; (80076d8 <prvAddNewTaskToReadyList+0xd4>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d903      	bls.n	8007678 <prvAddNewTaskToReadyList+0x74>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	4a18      	ldr	r2, [pc, #96]	; (80076d8 <prvAddNewTaskToReadyList+0xd4>)
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767c:	4613      	mov	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4a15      	ldr	r2, [pc, #84]	; (80076dc <prvAddNewTaskToReadyList+0xd8>)
 8007686:	441a      	add	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3304      	adds	r3, #4
 800768c:	4619      	mov	r1, r3
 800768e:	4610      	mov	r0, r2
 8007690:	f7fe fce9 	bl	8006066 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007694:	f001 fb5e 	bl	8008d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007698:	4b0d      	ldr	r3, [pc, #52]	; (80076d0 <prvAddNewTaskToReadyList+0xcc>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00e      	beq.n	80076be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076a0:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <prvAddNewTaskToReadyList+0xc8>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d207      	bcs.n	80076be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076ae:	4b0c      	ldr	r3, [pc, #48]	; (80076e0 <prvAddNewTaskToReadyList+0xdc>)
 80076b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	24000d10 	.word	0x24000d10
 80076cc:	2400083c 	.word	0x2400083c
 80076d0:	24000d1c 	.word	0x24000d1c
 80076d4:	24000d2c 	.word	0x24000d2c
 80076d8:	24000d18 	.word	0x24000d18
 80076dc:	24000840 	.word	0x24000840
 80076e0:	e000ed04 	.word	0xe000ed04

080076e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d017      	beq.n	8007726 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076f6:	4b13      	ldr	r3, [pc, #76]	; (8007744 <vTaskDelay+0x60>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <vTaskDelay+0x30>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	60bb      	str	r3, [r7, #8]
}
 8007710:	bf00      	nop
 8007712:	e7fe      	b.n	8007712 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007714:	f000 f88a 	bl	800782c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007718:	2100      	movs	r1, #0
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fe1e 	bl	800835c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007720:	f000 f892 	bl	8007848 <xTaskResumeAll>
 8007724:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d107      	bne.n	800773c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <vTaskDelay+0x64>)
 800772e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800773c:	bf00      	nop
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	24000d38 	.word	0x24000d38
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	; 0x28
 8007750:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007752:	2300      	movs	r3, #0
 8007754:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007756:	2300      	movs	r3, #0
 8007758:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800775a:	463a      	mov	r2, r7
 800775c:	1d39      	adds	r1, r7, #4
 800775e:	f107 0308 	add.w	r3, r7, #8
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fc1e 	bl	8005fa4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	9202      	str	r2, [sp, #8]
 8007770:	9301      	str	r3, [sp, #4]
 8007772:	2300      	movs	r3, #0
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	2300      	movs	r3, #0
 8007778:	460a      	mov	r2, r1
 800777a:	4924      	ldr	r1, [pc, #144]	; (800780c <vTaskStartScheduler+0xc0>)
 800777c:	4824      	ldr	r0, [pc, #144]	; (8007810 <vTaskStartScheduler+0xc4>)
 800777e:	f7ff fdf9 	bl	8007374 <xTaskCreateStatic>
 8007782:	4603      	mov	r3, r0
 8007784:	4a23      	ldr	r2, [pc, #140]	; (8007814 <vTaskStartScheduler+0xc8>)
 8007786:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007788:	4b22      	ldr	r3, [pc, #136]	; (8007814 <vTaskStartScheduler+0xc8>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007790:	2301      	movs	r3, #1
 8007792:	617b      	str	r3, [r7, #20]
 8007794:	e001      	b.n	800779a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007796:	2300      	movs	r3, #0
 8007798:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d102      	bne.n	80077a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80077a0:	f000 fe30 	bl	8008404 <xTimerCreateTimerTask>
 80077a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d11b      	bne.n	80077e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	613b      	str	r3, [r7, #16]
}
 80077be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077c0:	4b15      	ldr	r3, [pc, #84]	; (8007818 <vTaskStartScheduler+0xcc>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3354      	adds	r3, #84	; 0x54
 80077c6:	4a15      	ldr	r2, [pc, #84]	; (800781c <vTaskStartScheduler+0xd0>)
 80077c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077ca:	4b15      	ldr	r3, [pc, #84]	; (8007820 <vTaskStartScheduler+0xd4>)
 80077cc:	f04f 32ff 	mov.w	r2, #4294967295
 80077d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077d2:	4b14      	ldr	r3, [pc, #80]	; (8007824 <vTaskStartScheduler+0xd8>)
 80077d4:	2201      	movs	r2, #1
 80077d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077d8:	4b13      	ldr	r3, [pc, #76]	; (8007828 <vTaskStartScheduler+0xdc>)
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077de:	f001 f9e7 	bl	8008bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077e2:	e00e      	b.n	8007802 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ea:	d10a      	bne.n	8007802 <vTaskStartScheduler+0xb6>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	60fb      	str	r3, [r7, #12]
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <vTaskStartScheduler+0xb4>
}
 8007802:	bf00      	nop
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	08017d04 	.word	0x08017d04
 8007810:	08007e75 	.word	0x08007e75
 8007814:	24000d34 	.word	0x24000d34
 8007818:	2400083c 	.word	0x2400083c
 800781c:	24000034 	.word	0x24000034
 8007820:	24000d30 	.word	0x24000d30
 8007824:	24000d1c 	.word	0x24000d1c
 8007828:	24000d14 	.word	0x24000d14

0800782c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007830:	4b04      	ldr	r3, [pc, #16]	; (8007844 <vTaskSuspendAll+0x18>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3301      	adds	r3, #1
 8007836:	4a03      	ldr	r2, [pc, #12]	; (8007844 <vTaskSuspendAll+0x18>)
 8007838:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800783a:	bf00      	nop
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	24000d38 	.word	0x24000d38

08007848 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007852:	2300      	movs	r3, #0
 8007854:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007856:	4b42      	ldr	r3, [pc, #264]	; (8007960 <xTaskResumeAll+0x118>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <xTaskResumeAll+0x2c>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	603b      	str	r3, [r7, #0]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007874:	f001 fa3e 	bl	8008cf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007878:	4b39      	ldr	r3, [pc, #228]	; (8007960 <xTaskResumeAll+0x118>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3b01      	subs	r3, #1
 800787e:	4a38      	ldr	r2, [pc, #224]	; (8007960 <xTaskResumeAll+0x118>)
 8007880:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007882:	4b37      	ldr	r3, [pc, #220]	; (8007960 <xTaskResumeAll+0x118>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d162      	bne.n	8007950 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800788a:	4b36      	ldr	r3, [pc, #216]	; (8007964 <xTaskResumeAll+0x11c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d05e      	beq.n	8007950 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007892:	e02f      	b.n	80078f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007894:	4b34      	ldr	r3, [pc, #208]	; (8007968 <xTaskResumeAll+0x120>)
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3318      	adds	r3, #24
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fe fc3d 	bl	8006120 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3304      	adds	r3, #4
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fc38 	bl	8006120 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b4:	4b2d      	ldr	r3, [pc, #180]	; (800796c <xTaskResumeAll+0x124>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d903      	bls.n	80078c4 <xTaskResumeAll+0x7c>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	4a2a      	ldr	r2, [pc, #168]	; (800796c <xTaskResumeAll+0x124>)
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4a27      	ldr	r2, [pc, #156]	; (8007970 <xTaskResumeAll+0x128>)
 80078d2:	441a      	add	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3304      	adds	r3, #4
 80078d8:	4619      	mov	r1, r3
 80078da:	4610      	mov	r0, r2
 80078dc:	f7fe fbc3 	bl	8006066 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e4:	4b23      	ldr	r3, [pc, #140]	; (8007974 <xTaskResumeAll+0x12c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d302      	bcc.n	80078f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80078ee:	4b22      	ldr	r3, [pc, #136]	; (8007978 <xTaskResumeAll+0x130>)
 80078f0:	2201      	movs	r2, #1
 80078f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078f4:	4b1c      	ldr	r3, [pc, #112]	; (8007968 <xTaskResumeAll+0x120>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1cb      	bne.n	8007894 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007902:	f000 fb71 	bl	8007fe8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007906:	4b1d      	ldr	r3, [pc, #116]	; (800797c <xTaskResumeAll+0x134>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d010      	beq.n	8007934 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007912:	f000 f859 	bl	80079c8 <xTaskIncrementTick>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800791c:	4b16      	ldr	r3, [pc, #88]	; (8007978 <xTaskResumeAll+0x130>)
 800791e:	2201      	movs	r2, #1
 8007920:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3b01      	subs	r3, #1
 8007926:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f1      	bne.n	8007912 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800792e:	4b13      	ldr	r3, [pc, #76]	; (800797c <xTaskResumeAll+0x134>)
 8007930:	2200      	movs	r2, #0
 8007932:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007934:	4b10      	ldr	r3, [pc, #64]	; (8007978 <xTaskResumeAll+0x130>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d009      	beq.n	8007950 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800793c:	2301      	movs	r3, #1
 800793e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007940:	4b0f      	ldr	r3, [pc, #60]	; (8007980 <xTaskResumeAll+0x138>)
 8007942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007950:	f001 fa00 	bl	8008d54 <vPortExitCritical>

	return xAlreadyYielded;
 8007954:	68bb      	ldr	r3, [r7, #8]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	24000d38 	.word	0x24000d38
 8007964:	24000d10 	.word	0x24000d10
 8007968:	24000cd0 	.word	0x24000cd0
 800796c:	24000d18 	.word	0x24000d18
 8007970:	24000840 	.word	0x24000840
 8007974:	2400083c 	.word	0x2400083c
 8007978:	24000d24 	.word	0x24000d24
 800797c:	24000d20 	.word	0x24000d20
 8007980:	e000ed04 	.word	0xe000ed04

08007984 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800798a:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <xTaskGetTickCount+0x1c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007990:	687b      	ldr	r3, [r7, #4]
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	24000d14 	.word	0x24000d14

080079a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079aa:	f001 fa85 	bl	8008eb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80079ae:	2300      	movs	r3, #0
 80079b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80079b2:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <xTaskGetTickCountFromISR+0x20>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079b8:	683b      	ldr	r3, [r7, #0]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	24000d14 	.word	0x24000d14

080079c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079ce:	2300      	movs	r3, #0
 80079d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079d2:	4b4f      	ldr	r3, [pc, #316]	; (8007b10 <xTaskIncrementTick+0x148>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f040 808f 	bne.w	8007afa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079dc:	4b4d      	ldr	r3, [pc, #308]	; (8007b14 <xTaskIncrementTick+0x14c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079e4:	4a4b      	ldr	r2, [pc, #300]	; (8007b14 <xTaskIncrementTick+0x14c>)
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d120      	bne.n	8007a32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80079f0:	4b49      	ldr	r3, [pc, #292]	; (8007b18 <xTaskIncrementTick+0x150>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <xTaskIncrementTick+0x48>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	603b      	str	r3, [r7, #0]
}
 8007a0c:	bf00      	nop
 8007a0e:	e7fe      	b.n	8007a0e <xTaskIncrementTick+0x46>
 8007a10:	4b41      	ldr	r3, [pc, #260]	; (8007b18 <xTaskIncrementTick+0x150>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	4b41      	ldr	r3, [pc, #260]	; (8007b1c <xTaskIncrementTick+0x154>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a3f      	ldr	r2, [pc, #252]	; (8007b18 <xTaskIncrementTick+0x150>)
 8007a1c:	6013      	str	r3, [r2, #0]
 8007a1e:	4a3f      	ldr	r2, [pc, #252]	; (8007b1c <xTaskIncrementTick+0x154>)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6013      	str	r3, [r2, #0]
 8007a24:	4b3e      	ldr	r3, [pc, #248]	; (8007b20 <xTaskIncrementTick+0x158>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	4a3d      	ldr	r2, [pc, #244]	; (8007b20 <xTaskIncrementTick+0x158>)
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	f000 fadb 	bl	8007fe8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a32:	4b3c      	ldr	r3, [pc, #240]	; (8007b24 <xTaskIncrementTick+0x15c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d349      	bcc.n	8007ad0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a3c:	4b36      	ldr	r3, [pc, #216]	; (8007b18 <xTaskIncrementTick+0x150>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d104      	bne.n	8007a50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a46:	4b37      	ldr	r3, [pc, #220]	; (8007b24 <xTaskIncrementTick+0x15c>)
 8007a48:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4c:	601a      	str	r2, [r3, #0]
					break;
 8007a4e:	e03f      	b.n	8007ad0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a50:	4b31      	ldr	r3, [pc, #196]	; (8007b18 <xTaskIncrementTick+0x150>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d203      	bcs.n	8007a70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a68:	4a2e      	ldr	r2, [pc, #184]	; (8007b24 <xTaskIncrementTick+0x15c>)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a6e:	e02f      	b.n	8007ad0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	3304      	adds	r3, #4
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fe fb53 	bl	8006120 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d004      	beq.n	8007a8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	3318      	adds	r3, #24
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fe fb4a 	bl	8006120 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a90:	4b25      	ldr	r3, [pc, #148]	; (8007b28 <xTaskIncrementTick+0x160>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d903      	bls.n	8007aa0 <xTaskIncrementTick+0xd8>
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	4a22      	ldr	r2, [pc, #136]	; (8007b28 <xTaskIncrementTick+0x160>)
 8007a9e:	6013      	str	r3, [r2, #0]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4a1f      	ldr	r2, [pc, #124]	; (8007b2c <xTaskIncrementTick+0x164>)
 8007aae:	441a      	add	r2, r3
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	f7fe fad5 	bl	8006066 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac0:	4b1b      	ldr	r3, [pc, #108]	; (8007b30 <xTaskIncrementTick+0x168>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d3b8      	bcc.n	8007a3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007aca:	2301      	movs	r3, #1
 8007acc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ace:	e7b5      	b.n	8007a3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ad0:	4b17      	ldr	r3, [pc, #92]	; (8007b30 <xTaskIncrementTick+0x168>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad6:	4915      	ldr	r1, [pc, #84]	; (8007b2c <xTaskIncrementTick+0x164>)
 8007ad8:	4613      	mov	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	440b      	add	r3, r1
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d901      	bls.n	8007aec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007aec:	4b11      	ldr	r3, [pc, #68]	; (8007b34 <xTaskIncrementTick+0x16c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d007      	beq.n	8007b04 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007af4:	2301      	movs	r3, #1
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	e004      	b.n	8007b04 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007afa:	4b0f      	ldr	r3, [pc, #60]	; (8007b38 <xTaskIncrementTick+0x170>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3301      	adds	r3, #1
 8007b00:	4a0d      	ldr	r2, [pc, #52]	; (8007b38 <xTaskIncrementTick+0x170>)
 8007b02:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b04:	697b      	ldr	r3, [r7, #20]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	24000d38 	.word	0x24000d38
 8007b14:	24000d14 	.word	0x24000d14
 8007b18:	24000cc8 	.word	0x24000cc8
 8007b1c:	24000ccc 	.word	0x24000ccc
 8007b20:	24000d28 	.word	0x24000d28
 8007b24:	24000d30 	.word	0x24000d30
 8007b28:	24000d18 	.word	0x24000d18
 8007b2c:	24000840 	.word	0x24000840
 8007b30:	2400083c 	.word	0x2400083c
 8007b34:	24000d24 	.word	0x24000d24
 8007b38:	24000d20 	.word	0x24000d20

08007b3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b42:	4b2a      	ldr	r3, [pc, #168]	; (8007bec <vTaskSwitchContext+0xb0>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b4a:	4b29      	ldr	r3, [pc, #164]	; (8007bf0 <vTaskSwitchContext+0xb4>)
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b50:	e046      	b.n	8007be0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007b52:	4b27      	ldr	r3, [pc, #156]	; (8007bf0 <vTaskSwitchContext+0xb4>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b58:	4b26      	ldr	r3, [pc, #152]	; (8007bf4 <vTaskSwitchContext+0xb8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	60fb      	str	r3, [r7, #12]
 8007b5e:	e010      	b.n	8007b82 <vTaskSwitchContext+0x46>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10a      	bne.n	8007b7c <vTaskSwitchContext+0x40>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	607b      	str	r3, [r7, #4]
}
 8007b78:	bf00      	nop
 8007b7a:	e7fe      	b.n	8007b7a <vTaskSwitchContext+0x3e>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	491d      	ldr	r1, [pc, #116]	; (8007bf8 <vTaskSwitchContext+0xbc>)
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4613      	mov	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	440b      	add	r3, r1
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d0e4      	beq.n	8007b60 <vTaskSwitchContext+0x24>
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <vTaskSwitchContext+0xbc>)
 8007ba2:	4413      	add	r3, r2
 8007ba4:	60bb      	str	r3, [r7, #8]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	605a      	str	r2, [r3, #4]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d104      	bne.n	8007bc6 <vTaskSwitchContext+0x8a>
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	605a      	str	r2, [r3, #4]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	4a0b      	ldr	r2, [pc, #44]	; (8007bfc <vTaskSwitchContext+0xc0>)
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	4a08      	ldr	r2, [pc, #32]	; (8007bf4 <vTaskSwitchContext+0xb8>)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007bd6:	4b09      	ldr	r3, [pc, #36]	; (8007bfc <vTaskSwitchContext+0xc0>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3354      	adds	r3, #84	; 0x54
 8007bdc:	4a08      	ldr	r2, [pc, #32]	; (8007c00 <vTaskSwitchContext+0xc4>)
 8007bde:	6013      	str	r3, [r2, #0]
}
 8007be0:	bf00      	nop
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	24000d38 	.word	0x24000d38
 8007bf0:	24000d24 	.word	0x24000d24
 8007bf4:	24000d18 	.word	0x24000d18
 8007bf8:	24000840 	.word	0x24000840
 8007bfc:	2400083c 	.word	0x2400083c
 8007c00:	24000034 	.word	0x24000034

08007c04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	60fb      	str	r3, [r7, #12]
}
 8007c26:	bf00      	nop
 8007c28:	e7fe      	b.n	8007c28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c2a:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <vTaskPlaceOnEventList+0x44>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3318      	adds	r3, #24
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7fe fa3b 	bl	80060ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c38:	2101      	movs	r1, #1
 8007c3a:	6838      	ldr	r0, [r7, #0]
 8007c3c:	f000 fb8e 	bl	800835c <prvAddCurrentTaskToDelayedList>
}
 8007c40:	bf00      	nop
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	2400083c 	.word	0x2400083c

08007c4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10a      	bne.n	8007c74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	617b      	str	r3, [r7, #20]
}
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c74:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3318      	adds	r3, #24
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f7fe f9f2 	bl	8006066 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007c88:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	68b8      	ldr	r0, [r7, #8]
 8007c92:	f000 fb63 	bl	800835c <prvAddCurrentTaskToDelayedList>
	}
 8007c96:	bf00      	nop
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	2400083c 	.word	0x2400083c

08007ca4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10a      	bne.n	8007cd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	60fb      	str	r3, [r7, #12]
}
 8007ccc:	bf00      	nop
 8007cce:	e7fe      	b.n	8007cce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	3318      	adds	r3, #24
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fe fa23 	bl	8006120 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cda:	4b1e      	ldr	r3, [pc, #120]	; (8007d54 <xTaskRemoveFromEventList+0xb0>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d11d      	bne.n	8007d1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe fa1a 	bl	8006120 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf0:	4b19      	ldr	r3, [pc, #100]	; (8007d58 <xTaskRemoveFromEventList+0xb4>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d903      	bls.n	8007d00 <xTaskRemoveFromEventList+0x5c>
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfc:	4a16      	ldr	r2, [pc, #88]	; (8007d58 <xTaskRemoveFromEventList+0xb4>)
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d04:	4613      	mov	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4a13      	ldr	r2, [pc, #76]	; (8007d5c <xTaskRemoveFromEventList+0xb8>)
 8007d0e:	441a      	add	r2, r3
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	3304      	adds	r3, #4
 8007d14:	4619      	mov	r1, r3
 8007d16:	4610      	mov	r0, r2
 8007d18:	f7fe f9a5 	bl	8006066 <vListInsertEnd>
 8007d1c:	e005      	b.n	8007d2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	3318      	adds	r3, #24
 8007d22:	4619      	mov	r1, r3
 8007d24:	480e      	ldr	r0, [pc, #56]	; (8007d60 <xTaskRemoveFromEventList+0xbc>)
 8007d26:	f7fe f99e 	bl	8006066 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d2e:	4b0d      	ldr	r3, [pc, #52]	; (8007d64 <xTaskRemoveFromEventList+0xc0>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d905      	bls.n	8007d44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <xTaskRemoveFromEventList+0xc4>)
 8007d3e:	2201      	movs	r2, #1
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	e001      	b.n	8007d48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007d44:	2300      	movs	r3, #0
 8007d46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d48:	697b      	ldr	r3, [r7, #20]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	24000d38 	.word	0x24000d38
 8007d58:	24000d18 	.word	0x24000d18
 8007d5c:	24000840 	.word	0x24000840
 8007d60:	24000cd0 	.word	0x24000cd0
 8007d64:	2400083c 	.word	0x2400083c
 8007d68:	24000d24 	.word	0x24000d24

08007d6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d74:	4b06      	ldr	r3, [pc, #24]	; (8007d90 <vTaskInternalSetTimeOutState+0x24>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d7c:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <vTaskInternalSetTimeOutState+0x28>)
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	605a      	str	r2, [r3, #4]
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	24000d28 	.word	0x24000d28
 8007d94:	24000d14 	.word	0x24000d14

08007d98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	613b      	str	r3, [r7, #16]
}
 8007dba:	bf00      	nop
 8007dbc:	e7fe      	b.n	8007dbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10a      	bne.n	8007dda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	60fb      	str	r3, [r7, #12]
}
 8007dd6:	bf00      	nop
 8007dd8:	e7fe      	b.n	8007dd8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007dda:	f000 ff8b 	bl	8008cf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dde:	4b1d      	ldr	r3, [pc, #116]	; (8007e54 <xTaskCheckForTimeOut+0xbc>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df6:	d102      	bne.n	8007dfe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	61fb      	str	r3, [r7, #28]
 8007dfc:	e023      	b.n	8007e46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	4b15      	ldr	r3, [pc, #84]	; (8007e58 <xTaskCheckForTimeOut+0xc0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d007      	beq.n	8007e1a <xTaskCheckForTimeOut+0x82>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d302      	bcc.n	8007e1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e14:	2301      	movs	r3, #1
 8007e16:	61fb      	str	r3, [r7, #28]
 8007e18:	e015      	b.n	8007e46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d20b      	bcs.n	8007e3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	1ad2      	subs	r2, r2, r3
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7ff ff9b 	bl	8007d6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e36:	2300      	movs	r3, #0
 8007e38:	61fb      	str	r3, [r7, #28]
 8007e3a:	e004      	b.n	8007e46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e42:	2301      	movs	r3, #1
 8007e44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e46:	f000 ff85 	bl	8008d54 <vPortExitCritical>

	return xReturn;
 8007e4a:	69fb      	ldr	r3, [r7, #28]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3720      	adds	r7, #32
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	24000d14 	.word	0x24000d14
 8007e58:	24000d28 	.word	0x24000d28

08007e5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e60:	4b03      	ldr	r3, [pc, #12]	; (8007e70 <vTaskMissedYield+0x14>)
 8007e62:	2201      	movs	r2, #1
 8007e64:	601a      	str	r2, [r3, #0]
}
 8007e66:	bf00      	nop
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	24000d24 	.word	0x24000d24

08007e74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e7c:	f000 f852 	bl	8007f24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e80:	4b06      	ldr	r3, [pc, #24]	; (8007e9c <prvIdleTask+0x28>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d9f9      	bls.n	8007e7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e88:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <prvIdleTask+0x2c>)
 8007e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e98:	e7f0      	b.n	8007e7c <prvIdleTask+0x8>
 8007e9a:	bf00      	nop
 8007e9c:	24000840 	.word	0x24000840
 8007ea0:	e000ed04 	.word	0xe000ed04

08007ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eaa:	2300      	movs	r3, #0
 8007eac:	607b      	str	r3, [r7, #4]
 8007eae:	e00c      	b.n	8007eca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4a12      	ldr	r2, [pc, #72]	; (8007f04 <prvInitialiseTaskLists+0x60>)
 8007ebc:	4413      	add	r3, r2
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe f8a4 	bl	800600c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	607b      	str	r3, [r7, #4]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b37      	cmp	r3, #55	; 0x37
 8007ece:	d9ef      	bls.n	8007eb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ed0:	480d      	ldr	r0, [pc, #52]	; (8007f08 <prvInitialiseTaskLists+0x64>)
 8007ed2:	f7fe f89b 	bl	800600c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ed6:	480d      	ldr	r0, [pc, #52]	; (8007f0c <prvInitialiseTaskLists+0x68>)
 8007ed8:	f7fe f898 	bl	800600c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007edc:	480c      	ldr	r0, [pc, #48]	; (8007f10 <prvInitialiseTaskLists+0x6c>)
 8007ede:	f7fe f895 	bl	800600c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ee2:	480c      	ldr	r0, [pc, #48]	; (8007f14 <prvInitialiseTaskLists+0x70>)
 8007ee4:	f7fe f892 	bl	800600c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ee8:	480b      	ldr	r0, [pc, #44]	; (8007f18 <prvInitialiseTaskLists+0x74>)
 8007eea:	f7fe f88f 	bl	800600c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007eee:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <prvInitialiseTaskLists+0x78>)
 8007ef0:	4a05      	ldr	r2, [pc, #20]	; (8007f08 <prvInitialiseTaskLists+0x64>)
 8007ef2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ef4:	4b0a      	ldr	r3, [pc, #40]	; (8007f20 <prvInitialiseTaskLists+0x7c>)
 8007ef6:	4a05      	ldr	r2, [pc, #20]	; (8007f0c <prvInitialiseTaskLists+0x68>)
 8007ef8:	601a      	str	r2, [r3, #0]
}
 8007efa:	bf00      	nop
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	24000840 	.word	0x24000840
 8007f08:	24000ca0 	.word	0x24000ca0
 8007f0c:	24000cb4 	.word	0x24000cb4
 8007f10:	24000cd0 	.word	0x24000cd0
 8007f14:	24000ce4 	.word	0x24000ce4
 8007f18:	24000cfc 	.word	0x24000cfc
 8007f1c:	24000cc8 	.word	0x24000cc8
 8007f20:	24000ccc 	.word	0x24000ccc

08007f24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f2a:	e019      	b.n	8007f60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f2c:	f000 fee2 	bl	8008cf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f30:	4b10      	ldr	r3, [pc, #64]	; (8007f74 <prvCheckTasksWaitingTermination+0x50>)
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe f8ef 	bl	8006120 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f42:	4b0d      	ldr	r3, [pc, #52]	; (8007f78 <prvCheckTasksWaitingTermination+0x54>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	4a0b      	ldr	r2, [pc, #44]	; (8007f78 <prvCheckTasksWaitingTermination+0x54>)
 8007f4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f4c:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <prvCheckTasksWaitingTermination+0x58>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3b01      	subs	r3, #1
 8007f52:	4a0a      	ldr	r2, [pc, #40]	; (8007f7c <prvCheckTasksWaitingTermination+0x58>)
 8007f54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f56:	f000 fefd 	bl	8008d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f810 	bl	8007f80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f60:	4b06      	ldr	r3, [pc, #24]	; (8007f7c <prvCheckTasksWaitingTermination+0x58>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e1      	bne.n	8007f2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f68:	bf00      	nop
 8007f6a:	bf00      	nop
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	24000ce4 	.word	0x24000ce4
 8007f78:	24000d10 	.word	0x24000d10
 8007f7c:	24000cf8 	.word	0x24000cf8

08007f80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3354      	adds	r3, #84	; 0x54
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f00e ffa7 	bl	8016ee0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d108      	bne.n	8007fae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 f895 	bl	80090d0 <vPortFree>
				vPortFree( pxTCB );
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f001 f892 	bl	80090d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fac:	e018      	b.n	8007fe0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d103      	bne.n	8007fc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 f889 	bl	80090d0 <vPortFree>
	}
 8007fbe:	e00f      	b.n	8007fe0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d00a      	beq.n	8007fe0 <prvDeleteTCB+0x60>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	60fb      	str	r3, [r7, #12]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <prvDeleteTCB+0x5e>
	}
 8007fe0:	bf00      	nop
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fee:	4b0c      	ldr	r3, [pc, #48]	; (8008020 <prvResetNextTaskUnblockTime+0x38>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d104      	bne.n	8008002 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ff8:	4b0a      	ldr	r3, [pc, #40]	; (8008024 <prvResetNextTaskUnblockTime+0x3c>)
 8007ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008000:	e008      	b.n	8008014 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008002:	4b07      	ldr	r3, [pc, #28]	; (8008020 <prvResetNextTaskUnblockTime+0x38>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	4a04      	ldr	r2, [pc, #16]	; (8008024 <prvResetNextTaskUnblockTime+0x3c>)
 8008012:	6013      	str	r3, [r2, #0]
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	24000cc8 	.word	0x24000cc8
 8008024:	24000d30 	.word	0x24000d30

08008028 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800802e:	4b05      	ldr	r3, [pc, #20]	; (8008044 <xTaskGetCurrentTaskHandle+0x1c>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008034:	687b      	ldr	r3, [r7, #4]
	}
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	2400083c 	.word	0x2400083c

08008048 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800804e:	4b0b      	ldr	r3, [pc, #44]	; (800807c <xTaskGetSchedulerState+0x34>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d102      	bne.n	800805c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008056:	2301      	movs	r3, #1
 8008058:	607b      	str	r3, [r7, #4]
 800805a:	e008      	b.n	800806e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800805c:	4b08      	ldr	r3, [pc, #32]	; (8008080 <xTaskGetSchedulerState+0x38>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d102      	bne.n	800806a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008064:	2302      	movs	r3, #2
 8008066:	607b      	str	r3, [r7, #4]
 8008068:	e001      	b.n	800806e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800806a:	2300      	movs	r3, #0
 800806c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800806e:	687b      	ldr	r3, [r7, #4]
	}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	24000d1c 	.word	0x24000d1c
 8008080:	24000d38 	.word	0x24000d38

08008084 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008090:	2300      	movs	r3, #0
 8008092:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d051      	beq.n	800813e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800809e:	4b2a      	ldr	r3, [pc, #168]	; (8008148 <xTaskPriorityInherit+0xc4>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d241      	bcs.n	800812c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	db06      	blt.n	80080be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080b0:	4b25      	ldr	r3, [pc, #148]	; (8008148 <xTaskPriorityInherit+0xc4>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	6959      	ldr	r1, [r3, #20]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4a1f      	ldr	r2, [pc, #124]	; (800814c <xTaskPriorityInherit+0xc8>)
 80080d0:	4413      	add	r3, r2
 80080d2:	4299      	cmp	r1, r3
 80080d4:	d122      	bne.n	800811c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	3304      	adds	r3, #4
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe f820 	bl	8006120 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080e0:	4b19      	ldr	r3, [pc, #100]	; (8008148 <xTaskPriorityInherit+0xc4>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ee:	4b18      	ldr	r3, [pc, #96]	; (8008150 <xTaskPriorityInherit+0xcc>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d903      	bls.n	80080fe <xTaskPriorityInherit+0x7a>
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fa:	4a15      	ldr	r2, [pc, #84]	; (8008150 <xTaskPriorityInherit+0xcc>)
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008102:	4613      	mov	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4a10      	ldr	r2, [pc, #64]	; (800814c <xTaskPriorityInherit+0xc8>)
 800810c:	441a      	add	r2, r3
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	3304      	adds	r3, #4
 8008112:	4619      	mov	r1, r3
 8008114:	4610      	mov	r0, r2
 8008116:	f7fd ffa6 	bl	8006066 <vListInsertEnd>
 800811a:	e004      	b.n	8008126 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800811c:	4b0a      	ldr	r3, [pc, #40]	; (8008148 <xTaskPriorityInherit+0xc4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008126:	2301      	movs	r3, #1
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	e008      	b.n	800813e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008130:	4b05      	ldr	r3, [pc, #20]	; (8008148 <xTaskPriorityInherit+0xc4>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008136:	429a      	cmp	r2, r3
 8008138:	d201      	bcs.n	800813e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800813a:	2301      	movs	r3, #1
 800813c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800813e:	68fb      	ldr	r3, [r7, #12]
	}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	2400083c 	.word	0x2400083c
 800814c:	24000840 	.word	0x24000840
 8008150:	24000d18 	.word	0x24000d18

08008154 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008160:	2300      	movs	r3, #0
 8008162:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d056      	beq.n	8008218 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800816a:	4b2e      	ldr	r3, [pc, #184]	; (8008224 <xTaskPriorityDisinherit+0xd0>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	429a      	cmp	r2, r3
 8008172:	d00a      	beq.n	800818a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	60fb      	str	r3, [r7, #12]
}
 8008186:	bf00      	nop
 8008188:	e7fe      	b.n	8008188 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10a      	bne.n	80081a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	60bb      	str	r3, [r7, #8]
}
 80081a4:	bf00      	nop
 80081a6:	e7fe      	b.n	80081a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ac:	1e5a      	subs	r2, r3, #1
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d02c      	beq.n	8008218 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d128      	bne.n	8008218 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	3304      	adds	r3, #4
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fd ffa8 	bl	8006120 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e8:	4b0f      	ldr	r3, [pc, #60]	; (8008228 <xTaskPriorityDisinherit+0xd4>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d903      	bls.n	80081f8 <xTaskPriorityDisinherit+0xa4>
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	4a0c      	ldr	r2, [pc, #48]	; (8008228 <xTaskPriorityDisinherit+0xd4>)
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	4613      	mov	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4a09      	ldr	r2, [pc, #36]	; (800822c <xTaskPriorityDisinherit+0xd8>)
 8008206:	441a      	add	r2, r3
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	3304      	adds	r3, #4
 800820c:	4619      	mov	r1, r3
 800820e:	4610      	mov	r0, r2
 8008210:	f7fd ff29 	bl	8006066 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008214:	2301      	movs	r3, #1
 8008216:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008218:	697b      	ldr	r3, [r7, #20]
	}
 800821a:	4618      	mov	r0, r3
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	2400083c 	.word	0x2400083c
 8008228:	24000d18 	.word	0x24000d18
 800822c:	24000840 	.word	0x24000840

08008230 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800823e:	2301      	movs	r3, #1
 8008240:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d06a      	beq.n	800831e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10a      	bne.n	8008266 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	60fb      	str	r3, [r7, #12]
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	429a      	cmp	r2, r3
 800826e:	d902      	bls.n	8008276 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	61fb      	str	r3, [r7, #28]
 8008274:	e002      	b.n	800827c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800827a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008280:	69fa      	ldr	r2, [r7, #28]
 8008282:	429a      	cmp	r2, r3
 8008284:	d04b      	beq.n	800831e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	429a      	cmp	r2, r3
 800828e:	d146      	bne.n	800831e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008290:	4b25      	ldr	r3, [pc, #148]	; (8008328 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	429a      	cmp	r2, r3
 8008298:	d10a      	bne.n	80082b0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	60bb      	str	r3, [r7, #8]
}
 80082ac:	bf00      	nop
 80082ae:	e7fe      	b.n	80082ae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	69fa      	ldr	r2, [r7, #28]
 80082ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	db04      	blt.n	80082ce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	6959      	ldr	r1, [r3, #20]
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	4613      	mov	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4a13      	ldr	r2, [pc, #76]	; (800832c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80082de:	4413      	add	r3, r2
 80082e0:	4299      	cmp	r1, r3
 80082e2:	d11c      	bne.n	800831e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	3304      	adds	r3, #4
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fd ff19 	bl	8006120 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f2:	4b0f      	ldr	r3, [pc, #60]	; (8008330 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d903      	bls.n	8008302 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fe:	4a0c      	ldr	r2, [pc, #48]	; (8008330 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008300:	6013      	str	r3, [r2, #0]
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008306:	4613      	mov	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4a07      	ldr	r2, [pc, #28]	; (800832c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008310:	441a      	add	r2, r3
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	3304      	adds	r3, #4
 8008316:	4619      	mov	r1, r3
 8008318:	4610      	mov	r0, r2
 800831a:	f7fd fea4 	bl	8006066 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800831e:	bf00      	nop
 8008320:	3720      	adds	r7, #32
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	2400083c 	.word	0x2400083c
 800832c:	24000840 	.word	0x24000840
 8008330:	24000d18 	.word	0x24000d18

08008334 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008334:	b480      	push	{r7}
 8008336:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008338:	4b07      	ldr	r3, [pc, #28]	; (8008358 <pvTaskIncrementMutexHeldCount+0x24>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d004      	beq.n	800834a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008340:	4b05      	ldr	r3, [pc, #20]	; (8008358 <pvTaskIncrementMutexHeldCount+0x24>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008346:	3201      	adds	r2, #1
 8008348:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800834a:	4b03      	ldr	r3, [pc, #12]	; (8008358 <pvTaskIncrementMutexHeldCount+0x24>)
 800834c:	681b      	ldr	r3, [r3, #0]
	}
 800834e:	4618      	mov	r0, r3
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	2400083c 	.word	0x2400083c

0800835c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008366:	4b21      	ldr	r3, [pc, #132]	; (80083ec <prvAddCurrentTaskToDelayedList+0x90>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800836c:	4b20      	ldr	r3, [pc, #128]	; (80083f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3304      	adds	r3, #4
 8008372:	4618      	mov	r0, r3
 8008374:	f7fd fed4 	bl	8006120 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837e:	d10a      	bne.n	8008396 <prvAddCurrentTaskToDelayedList+0x3a>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d007      	beq.n	8008396 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008386:	4b1a      	ldr	r3, [pc, #104]	; (80083f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3304      	adds	r3, #4
 800838c:	4619      	mov	r1, r3
 800838e:	4819      	ldr	r0, [pc, #100]	; (80083f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008390:	f7fd fe69 	bl	8006066 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008394:	e026      	b.n	80083e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4413      	add	r3, r2
 800839c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800839e:	4b14      	ldr	r3, [pc, #80]	; (80083f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d209      	bcs.n	80083c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ae:	4b12      	ldr	r3, [pc, #72]	; (80083f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	4b0f      	ldr	r3, [pc, #60]	; (80083f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3304      	adds	r3, #4
 80083b8:	4619      	mov	r1, r3
 80083ba:	4610      	mov	r0, r2
 80083bc:	f7fd fe77 	bl	80060ae <vListInsert>
}
 80083c0:	e010      	b.n	80083e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083c2:	4b0e      	ldr	r3, [pc, #56]	; (80083fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	4b0a      	ldr	r3, [pc, #40]	; (80083f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3304      	adds	r3, #4
 80083cc:	4619      	mov	r1, r3
 80083ce:	4610      	mov	r0, r2
 80083d0:	f7fd fe6d 	bl	80060ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083d4:	4b0a      	ldr	r3, [pc, #40]	; (8008400 <prvAddCurrentTaskToDelayedList+0xa4>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d202      	bcs.n	80083e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80083de:	4a08      	ldr	r2, [pc, #32]	; (8008400 <prvAddCurrentTaskToDelayedList+0xa4>)
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	6013      	str	r3, [r2, #0]
}
 80083e4:	bf00      	nop
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	24000d14 	.word	0x24000d14
 80083f0:	2400083c 	.word	0x2400083c
 80083f4:	24000cfc 	.word	0x24000cfc
 80083f8:	24000ccc 	.word	0x24000ccc
 80083fc:	24000cc8 	.word	0x24000cc8
 8008400:	24000d30 	.word	0x24000d30

08008404 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08a      	sub	sp, #40	; 0x28
 8008408:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800840a:	2300      	movs	r3, #0
 800840c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800840e:	f000 fb07 	bl	8008a20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008412:	4b1c      	ldr	r3, [pc, #112]	; (8008484 <xTimerCreateTimerTask+0x80>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d021      	beq.n	800845e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800841a:	2300      	movs	r3, #0
 800841c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800841e:	2300      	movs	r3, #0
 8008420:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008422:	1d3a      	adds	r2, r7, #4
 8008424:	f107 0108 	add.w	r1, r7, #8
 8008428:	f107 030c 	add.w	r3, r7, #12
 800842c:	4618      	mov	r0, r3
 800842e:	f7fd fdd3 	bl	8005fd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008432:	6879      	ldr	r1, [r7, #4]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	9202      	str	r2, [sp, #8]
 800843a:	9301      	str	r3, [sp, #4]
 800843c:	2302      	movs	r3, #2
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	2300      	movs	r3, #0
 8008442:	460a      	mov	r2, r1
 8008444:	4910      	ldr	r1, [pc, #64]	; (8008488 <xTimerCreateTimerTask+0x84>)
 8008446:	4811      	ldr	r0, [pc, #68]	; (800848c <xTimerCreateTimerTask+0x88>)
 8008448:	f7fe ff94 	bl	8007374 <xTaskCreateStatic>
 800844c:	4603      	mov	r3, r0
 800844e:	4a10      	ldr	r2, [pc, #64]	; (8008490 <xTimerCreateTimerTask+0x8c>)
 8008450:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008452:	4b0f      	ldr	r3, [pc, #60]	; (8008490 <xTimerCreateTimerTask+0x8c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800845a:	2301      	movs	r3, #1
 800845c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10a      	bne.n	800847a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	613b      	str	r3, [r7, #16]
}
 8008476:	bf00      	nop
 8008478:	e7fe      	b.n	8008478 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800847a:	697b      	ldr	r3, [r7, #20]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	24000d6c 	.word	0x24000d6c
 8008488:	08017d0c 	.word	0x08017d0c
 800848c:	080085c9 	.word	0x080085c9
 8008490:	24000d70 	.word	0x24000d70

08008494 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08a      	sub	sp, #40	; 0x28
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80084a2:	2300      	movs	r3, #0
 80084a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10a      	bne.n	80084c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	623b      	str	r3, [r7, #32]
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80084c2:	4b1a      	ldr	r3, [pc, #104]	; (800852c <xTimerGenericCommand+0x98>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d02a      	beq.n	8008520 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2b05      	cmp	r3, #5
 80084da:	dc18      	bgt.n	800850e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80084dc:	f7ff fdb4 	bl	8008048 <xTaskGetSchedulerState>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d109      	bne.n	80084fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80084e6:	4b11      	ldr	r3, [pc, #68]	; (800852c <xTimerGenericCommand+0x98>)
 80084e8:	6818      	ldr	r0, [r3, #0]
 80084ea:	f107 0110 	add.w	r1, r7, #16
 80084ee:	2300      	movs	r3, #0
 80084f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f2:	f7fe f89d 	bl	8006630 <xQueueGenericSend>
 80084f6:	6278      	str	r0, [r7, #36]	; 0x24
 80084f8:	e012      	b.n	8008520 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80084fa:	4b0c      	ldr	r3, [pc, #48]	; (800852c <xTimerGenericCommand+0x98>)
 80084fc:	6818      	ldr	r0, [r3, #0]
 80084fe:	f107 0110 	add.w	r1, r7, #16
 8008502:	2300      	movs	r3, #0
 8008504:	2200      	movs	r2, #0
 8008506:	f7fe f893 	bl	8006630 <xQueueGenericSend>
 800850a:	6278      	str	r0, [r7, #36]	; 0x24
 800850c:	e008      	b.n	8008520 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800850e:	4b07      	ldr	r3, [pc, #28]	; (800852c <xTimerGenericCommand+0x98>)
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	f107 0110 	add.w	r1, r7, #16
 8008516:	2300      	movs	r3, #0
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	f7fe f987 	bl	800682c <xQueueGenericSendFromISR>
 800851e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008522:	4618      	mov	r0, r3
 8008524:	3728      	adds	r7, #40	; 0x28
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	24000d6c 	.word	0x24000d6c

08008530 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af02      	add	r7, sp, #8
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800853a:	4b22      	ldr	r3, [pc, #136]	; (80085c4 <prvProcessExpiredTimer+0x94>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	3304      	adds	r3, #4
 8008548:	4618      	mov	r0, r3
 800854a:	f7fd fde9 	bl	8006120 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b00      	cmp	r3, #0
 800855a:	d022      	beq.n	80085a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	699a      	ldr	r2, [r3, #24]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	18d1      	adds	r1, r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	6978      	ldr	r0, [r7, #20]
 800856a:	f000 f8d1 	bl	8008710 <prvInsertTimerInActiveList>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d01f      	beq.n	80085b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008574:	2300      	movs	r3, #0
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	2300      	movs	r3, #0
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	2100      	movs	r1, #0
 800857e:	6978      	ldr	r0, [r7, #20]
 8008580:	f7ff ff88 	bl	8008494 <xTimerGenericCommand>
 8008584:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d113      	bne.n	80085b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	60fb      	str	r3, [r7, #12]
}
 800859e:	bf00      	nop
 80085a0:	e7fe      	b.n	80085a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085a8:	f023 0301 	bic.w	r3, r3, #1
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	6978      	ldr	r0, [r7, #20]
 80085ba:	4798      	blx	r3
}
 80085bc:	bf00      	nop
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	24000d64 	.word	0x24000d64

080085c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085d0:	f107 0308 	add.w	r3, r7, #8
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 f857 	bl	8008688 <prvGetNextExpireTime>
 80085da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	4619      	mov	r1, r3
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 f803 	bl	80085ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80085e6:	f000 f8d5 	bl	8008794 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085ea:	e7f1      	b.n	80085d0 <prvTimerTask+0x8>

080085ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80085f6:	f7ff f919 	bl	800782c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085fa:	f107 0308 	add.w	r3, r7, #8
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 f866 	bl	80086d0 <prvSampleTimeNow>
 8008604:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d130      	bne.n	800866e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10a      	bne.n	8008628 <prvProcessTimerOrBlockTask+0x3c>
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	429a      	cmp	r2, r3
 8008618:	d806      	bhi.n	8008628 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800861a:	f7ff f915 	bl	8007848 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800861e:	68f9      	ldr	r1, [r7, #12]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff ff85 	bl	8008530 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008626:	e024      	b.n	8008672 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d008      	beq.n	8008640 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800862e:	4b13      	ldr	r3, [pc, #76]	; (800867c <prvProcessTimerOrBlockTask+0x90>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d101      	bne.n	800863c <prvProcessTimerOrBlockTask+0x50>
 8008638:	2301      	movs	r3, #1
 800863a:	e000      	b.n	800863e <prvProcessTimerOrBlockTask+0x52>
 800863c:	2300      	movs	r3, #0
 800863e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008640:	4b0f      	ldr	r3, [pc, #60]	; (8008680 <prvProcessTimerOrBlockTask+0x94>)
 8008642:	6818      	ldr	r0, [r3, #0]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	4619      	mov	r1, r3
 800864e:	f7fe fe5d 	bl	800730c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008652:	f7ff f8f9 	bl	8007848 <xTaskResumeAll>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10a      	bne.n	8008672 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800865c:	4b09      	ldr	r3, [pc, #36]	; (8008684 <prvProcessTimerOrBlockTask+0x98>)
 800865e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	f3bf 8f6f 	isb	sy
}
 800866c:	e001      	b.n	8008672 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800866e:	f7ff f8eb 	bl	8007848 <xTaskResumeAll>
}
 8008672:	bf00      	nop
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	24000d68 	.word	0x24000d68
 8008680:	24000d6c 	.word	0x24000d6c
 8008684:	e000ed04 	.word	0xe000ed04

08008688 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008690:	4b0e      	ldr	r3, [pc, #56]	; (80086cc <prvGetNextExpireTime+0x44>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <prvGetNextExpireTime+0x16>
 800869a:	2201      	movs	r2, #1
 800869c:	e000      	b.n	80086a0 <prvGetNextExpireTime+0x18>
 800869e:	2200      	movs	r2, #0
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d105      	bne.n	80086b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086ac:	4b07      	ldr	r3, [pc, #28]	; (80086cc <prvGetNextExpireTime+0x44>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	e001      	b.n	80086bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80086bc:	68fb      	ldr	r3, [r7, #12]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	24000d64 	.word	0x24000d64

080086d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80086d8:	f7ff f954 	bl	8007984 <xTaskGetTickCount>
 80086dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80086de:	4b0b      	ldr	r3, [pc, #44]	; (800870c <prvSampleTimeNow+0x3c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d205      	bcs.n	80086f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80086e8:	f000 f936 	bl	8008958 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	601a      	str	r2, [r3, #0]
 80086f2:	e002      	b.n	80086fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80086fa:	4a04      	ldr	r2, [pc, #16]	; (800870c <prvSampleTimeNow+0x3c>)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008700:	68fb      	ldr	r3, [r7, #12]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	24000d74 	.word	0x24000d74

08008710 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800871e:	2300      	movs	r3, #0
 8008720:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	429a      	cmp	r2, r3
 8008734:	d812      	bhi.n	800875c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	1ad2      	subs	r2, r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	429a      	cmp	r2, r3
 8008742:	d302      	bcc.n	800874a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008744:	2301      	movs	r3, #1
 8008746:	617b      	str	r3, [r7, #20]
 8008748:	e01b      	b.n	8008782 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800874a:	4b10      	ldr	r3, [pc, #64]	; (800878c <prvInsertTimerInActiveList+0x7c>)
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3304      	adds	r3, #4
 8008752:	4619      	mov	r1, r3
 8008754:	4610      	mov	r0, r2
 8008756:	f7fd fcaa 	bl	80060ae <vListInsert>
 800875a:	e012      	b.n	8008782 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d206      	bcs.n	8008772 <prvInsertTimerInActiveList+0x62>
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	429a      	cmp	r2, r3
 800876a:	d302      	bcc.n	8008772 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800876c:	2301      	movs	r3, #1
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	e007      	b.n	8008782 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008772:	4b07      	ldr	r3, [pc, #28]	; (8008790 <prvInsertTimerInActiveList+0x80>)
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3304      	adds	r3, #4
 800877a:	4619      	mov	r1, r3
 800877c:	4610      	mov	r0, r2
 800877e:	f7fd fc96 	bl	80060ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008782:	697b      	ldr	r3, [r7, #20]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	24000d68 	.word	0x24000d68
 8008790:	24000d64 	.word	0x24000d64

08008794 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08e      	sub	sp, #56	; 0x38
 8008798:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800879a:	e0ca      	b.n	8008932 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	da18      	bge.n	80087d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80087a2:	1d3b      	adds	r3, r7, #4
 80087a4:	3304      	adds	r3, #4
 80087a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80087a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	61fb      	str	r3, [r7, #28]
}
 80087c0:	bf00      	nop
 80087c2:	e7fe      	b.n	80087c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80087c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087ca:	6850      	ldr	r0, [r2, #4]
 80087cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087ce:	6892      	ldr	r2, [r2, #8]
 80087d0:	4611      	mov	r1, r2
 80087d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f2c0 80aa 	blt.w	8008930 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d004      	beq.n	80087f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	3304      	adds	r3, #4
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fd fc97 	bl	8006120 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087f2:	463b      	mov	r3, r7
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff ff6b 	bl	80086d0 <prvSampleTimeNow>
 80087fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b09      	cmp	r3, #9
 8008800:	f200 8097 	bhi.w	8008932 <prvProcessReceivedCommands+0x19e>
 8008804:	a201      	add	r2, pc, #4	; (adr r2, 800880c <prvProcessReceivedCommands+0x78>)
 8008806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880a:	bf00      	nop
 800880c:	08008835 	.word	0x08008835
 8008810:	08008835 	.word	0x08008835
 8008814:	08008835 	.word	0x08008835
 8008818:	080088a9 	.word	0x080088a9
 800881c:	080088bd 	.word	0x080088bd
 8008820:	08008907 	.word	0x08008907
 8008824:	08008835 	.word	0x08008835
 8008828:	08008835 	.word	0x08008835
 800882c:	080088a9 	.word	0x080088a9
 8008830:	080088bd 	.word	0x080088bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800883a:	f043 0301 	orr.w	r3, r3, #1
 800883e:	b2da      	uxtb	r2, r3
 8008840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	18d1      	adds	r1, r2, r3
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008854:	f7ff ff5c 	bl	8008710 <prvInsertTimerInActiveList>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d069      	beq.n	8008932 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008864:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800886c:	f003 0304 	and.w	r3, r3, #4
 8008870:	2b00      	cmp	r3, #0
 8008872:	d05e      	beq.n	8008932 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	441a      	add	r2, r3
 800887c:	2300      	movs	r3, #0
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	2300      	movs	r3, #0
 8008882:	2100      	movs	r1, #0
 8008884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008886:	f7ff fe05 	bl	8008494 <xTimerGenericCommand>
 800888a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d14f      	bne.n	8008932 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	61bb      	str	r3, [r7, #24]
}
 80088a4:	bf00      	nop
 80088a6:	e7fe      	b.n	80088a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088ae:	f023 0301 	bic.w	r3, r3, #1
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80088ba:	e03a      	b.n	8008932 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088c2:	f043 0301 	orr.w	r3, r3, #1
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	617b      	str	r3, [r7, #20]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	699a      	ldr	r2, [r3, #24]
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	18d1      	adds	r1, r2, r3
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008900:	f7ff ff06 	bl	8008710 <prvInsertTimerInActiveList>
					break;
 8008904:	e015      	b.n	8008932 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d103      	bne.n	800891c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008916:	f000 fbdb 	bl	80090d0 <vPortFree>
 800891a:	e00a      	b.n	8008932 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008922:	f023 0301 	bic.w	r3, r3, #1
 8008926:	b2da      	uxtb	r2, r3
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800892e:	e000      	b.n	8008932 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008930:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008932:	4b08      	ldr	r3, [pc, #32]	; (8008954 <prvProcessReceivedCommands+0x1c0>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	1d39      	adds	r1, r7, #4
 8008938:	2200      	movs	r2, #0
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe f89e 	bl	8006a7c <xQueueReceive>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	f47f af2a 	bne.w	800879c <prvProcessReceivedCommands+0x8>
	}
}
 8008948:	bf00      	nop
 800894a:	bf00      	nop
 800894c:	3730      	adds	r7, #48	; 0x30
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	24000d6c 	.word	0x24000d6c

08008958 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b088      	sub	sp, #32
 800895c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800895e:	e048      	b.n	80089f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008960:	4b2d      	ldr	r3, [pc, #180]	; (8008a18 <prvSwitchTimerLists+0xc0>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800896a:	4b2b      	ldr	r3, [pc, #172]	; (8008a18 <prvSwitchTimerLists+0xc0>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	3304      	adds	r3, #4
 8008978:	4618      	mov	r0, r3
 800897a:	f7fd fbd1 	bl	8006120 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800898c:	f003 0304 	and.w	r3, r3, #4
 8008990:	2b00      	cmp	r3, #0
 8008992:	d02e      	beq.n	80089f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	4413      	add	r3, r2
 800899c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d90e      	bls.n	80089c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089b2:	4b19      	ldr	r3, [pc, #100]	; (8008a18 <prvSwitchTimerLists+0xc0>)
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3304      	adds	r3, #4
 80089ba:	4619      	mov	r1, r3
 80089bc:	4610      	mov	r0, r2
 80089be:	f7fd fb76 	bl	80060ae <vListInsert>
 80089c2:	e016      	b.n	80089f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089c4:	2300      	movs	r3, #0
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	2300      	movs	r3, #0
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	2100      	movs	r1, #0
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f7ff fd60 	bl	8008494 <xTimerGenericCommand>
 80089d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10a      	bne.n	80089f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80089dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	603b      	str	r3, [r7, #0]
}
 80089ee:	bf00      	nop
 80089f0:	e7fe      	b.n	80089f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <prvSwitchTimerLists+0xc0>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1b1      	bne.n	8008960 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80089fc:	4b06      	ldr	r3, [pc, #24]	; (8008a18 <prvSwitchTimerLists+0xc0>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a02:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <prvSwitchTimerLists+0xc4>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a04      	ldr	r2, [pc, #16]	; (8008a18 <prvSwitchTimerLists+0xc0>)
 8008a08:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a0a:	4a04      	ldr	r2, [pc, #16]	; (8008a1c <prvSwitchTimerLists+0xc4>)
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	6013      	str	r3, [r2, #0]
}
 8008a10:	bf00      	nop
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	24000d64 	.word	0x24000d64
 8008a1c:	24000d68 	.word	0x24000d68

08008a20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a26:	f000 f965 	bl	8008cf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a2a:	4b15      	ldr	r3, [pc, #84]	; (8008a80 <prvCheckForValidListAndQueue+0x60>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d120      	bne.n	8008a74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a32:	4814      	ldr	r0, [pc, #80]	; (8008a84 <prvCheckForValidListAndQueue+0x64>)
 8008a34:	f7fd faea 	bl	800600c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a38:	4813      	ldr	r0, [pc, #76]	; (8008a88 <prvCheckForValidListAndQueue+0x68>)
 8008a3a:	f7fd fae7 	bl	800600c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a3e:	4b13      	ldr	r3, [pc, #76]	; (8008a8c <prvCheckForValidListAndQueue+0x6c>)
 8008a40:	4a10      	ldr	r2, [pc, #64]	; (8008a84 <prvCheckForValidListAndQueue+0x64>)
 8008a42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a44:	4b12      	ldr	r3, [pc, #72]	; (8008a90 <prvCheckForValidListAndQueue+0x70>)
 8008a46:	4a10      	ldr	r2, [pc, #64]	; (8008a88 <prvCheckForValidListAndQueue+0x68>)
 8008a48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	4b11      	ldr	r3, [pc, #68]	; (8008a94 <prvCheckForValidListAndQueue+0x74>)
 8008a50:	4a11      	ldr	r2, [pc, #68]	; (8008a98 <prvCheckForValidListAndQueue+0x78>)
 8008a52:	2110      	movs	r1, #16
 8008a54:	200a      	movs	r0, #10
 8008a56:	f7fd fbf5 	bl	8006244 <xQueueGenericCreateStatic>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	4a08      	ldr	r2, [pc, #32]	; (8008a80 <prvCheckForValidListAndQueue+0x60>)
 8008a5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a60:	4b07      	ldr	r3, [pc, #28]	; (8008a80 <prvCheckForValidListAndQueue+0x60>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d005      	beq.n	8008a74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a68:	4b05      	ldr	r3, [pc, #20]	; (8008a80 <prvCheckForValidListAndQueue+0x60>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	490b      	ldr	r1, [pc, #44]	; (8008a9c <prvCheckForValidListAndQueue+0x7c>)
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fbf8 	bl	8007264 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a74:	f000 f96e 	bl	8008d54 <vPortExitCritical>
}
 8008a78:	bf00      	nop
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	24000d6c 	.word	0x24000d6c
 8008a84:	24000d3c 	.word	0x24000d3c
 8008a88:	24000d50 	.word	0x24000d50
 8008a8c:	24000d64 	.word	0x24000d64
 8008a90:	24000d68 	.word	0x24000d68
 8008a94:	24000e18 	.word	0x24000e18
 8008a98:	24000d78 	.word	0x24000d78
 8008a9c:	08017d14 	.word	0x08017d14

08008aa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3b04      	subs	r3, #4
 8008ab0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3b04      	subs	r3, #4
 8008abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	f023 0201 	bic.w	r2, r3, #1
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3b04      	subs	r3, #4
 8008ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ad0:	4a0c      	ldr	r2, [pc, #48]	; (8008b04 <pxPortInitialiseStack+0x64>)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3b14      	subs	r3, #20
 8008ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	3b04      	subs	r3, #4
 8008ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f06f 0202 	mvn.w	r2, #2
 8008aee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	3b20      	subs	r3, #32
 8008af4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008af6:	68fb      	ldr	r3, [r7, #12]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	08008b09 	.word	0x08008b09

08008b08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b12:	4b12      	ldr	r3, [pc, #72]	; (8008b5c <prvTaskExitError+0x54>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1a:	d00a      	beq.n	8008b32 <prvTaskExitError+0x2a>
	__asm volatile
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	60fb      	str	r3, [r7, #12]
}
 8008b2e:	bf00      	nop
 8008b30:	e7fe      	b.n	8008b30 <prvTaskExitError+0x28>
	__asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	60bb      	str	r3, [r7, #8]
}
 8008b44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b46:	bf00      	nop
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0fc      	beq.n	8008b48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b4e:	bf00      	nop
 8008b50:	bf00      	nop
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	24000024 	.word	0x24000024

08008b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b60:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <pxCurrentTCBConst2>)
 8008b62:	6819      	ldr	r1, [r3, #0]
 8008b64:	6808      	ldr	r0, [r1, #0]
 8008b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6a:	f380 8809 	msr	PSP, r0
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f04f 0000 	mov.w	r0, #0
 8008b76:	f380 8811 	msr	BASEPRI, r0
 8008b7a:	4770      	bx	lr
 8008b7c:	f3af 8000 	nop.w

08008b80 <pxCurrentTCBConst2>:
 8008b80:	2400083c 	.word	0x2400083c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop

08008b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b88:	4808      	ldr	r0, [pc, #32]	; (8008bac <prvPortStartFirstTask+0x24>)
 8008b8a:	6800      	ldr	r0, [r0, #0]
 8008b8c:	6800      	ldr	r0, [r0, #0]
 8008b8e:	f380 8808 	msr	MSP, r0
 8008b92:	f04f 0000 	mov.w	r0, #0
 8008b96:	f380 8814 	msr	CONTROL, r0
 8008b9a:	b662      	cpsie	i
 8008b9c:	b661      	cpsie	f
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	df00      	svc	0
 8008ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008baa:	bf00      	nop
 8008bac:	e000ed08 	.word	0xe000ed08

08008bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008bb6:	4b46      	ldr	r3, [pc, #280]	; (8008cd0 <xPortStartScheduler+0x120>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a46      	ldr	r2, [pc, #280]	; (8008cd4 <xPortStartScheduler+0x124>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d10a      	bne.n	8008bd6 <xPortStartScheduler+0x26>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	613b      	str	r3, [r7, #16]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008bd6:	4b3e      	ldr	r3, [pc, #248]	; (8008cd0 <xPortStartScheduler+0x120>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a3f      	ldr	r2, [pc, #252]	; (8008cd8 <xPortStartScheduler+0x128>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d10a      	bne.n	8008bf6 <xPortStartScheduler+0x46>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	60fb      	str	r3, [r7, #12]
}
 8008bf2:	bf00      	nop
 8008bf4:	e7fe      	b.n	8008bf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008bf6:	4b39      	ldr	r3, [pc, #228]	; (8008cdc <xPortStartScheduler+0x12c>)
 8008bf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	22ff      	movs	r2, #255	; 0xff
 8008c06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	4b31      	ldr	r3, [pc, #196]	; (8008ce0 <xPortStartScheduler+0x130>)
 8008c1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c1e:	4b31      	ldr	r3, [pc, #196]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c20:	2207      	movs	r2, #7
 8008c22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c24:	e009      	b.n	8008c3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c26:	4b2f      	ldr	r3, [pc, #188]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	4a2d      	ldr	r2, [pc, #180]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c30:	78fb      	ldrb	r3, [r7, #3]
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c3a:	78fb      	ldrb	r3, [r7, #3]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c42:	2b80      	cmp	r3, #128	; 0x80
 8008c44:	d0ef      	beq.n	8008c26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c46:	4b27      	ldr	r3, [pc, #156]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f1c3 0307 	rsb	r3, r3, #7
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	d00a      	beq.n	8008c68 <xPortStartScheduler+0xb8>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	60bb      	str	r3, [r7, #8]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c68:	4b1e      	ldr	r3, [pc, #120]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	021b      	lsls	r3, r3, #8
 8008c6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c72:	4b1c      	ldr	r3, [pc, #112]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c7a:	4a1a      	ldr	r2, [pc, #104]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c86:	4b18      	ldr	r3, [pc, #96]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a17      	ldr	r2, [pc, #92]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c92:	4b15      	ldr	r3, [pc, #84]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a14      	ldr	r2, [pc, #80]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c9e:	f000 f8dd 	bl	8008e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ca2:	4b12      	ldr	r3, [pc, #72]	; (8008cec <xPortStartScheduler+0x13c>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ca8:	f000 f8fc 	bl	8008ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cac:	4b10      	ldr	r3, [pc, #64]	; (8008cf0 <xPortStartScheduler+0x140>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a0f      	ldr	r2, [pc, #60]	; (8008cf0 <xPortStartScheduler+0x140>)
 8008cb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008cb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cb8:	f7ff ff66 	bl	8008b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cbc:	f7fe ff3e 	bl	8007b3c <vTaskSwitchContext>
	prvTaskExitError();
 8008cc0:	f7ff ff22 	bl	8008b08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	e000ed00 	.word	0xe000ed00
 8008cd4:	410fc271 	.word	0x410fc271
 8008cd8:	410fc270 	.word	0x410fc270
 8008cdc:	e000e400 	.word	0xe000e400
 8008ce0:	24000e68 	.word	0x24000e68
 8008ce4:	24000e6c 	.word	0x24000e6c
 8008ce8:	e000ed20 	.word	0xe000ed20
 8008cec:	24000024 	.word	0x24000024
 8008cf0:	e000ef34 	.word	0xe000ef34

08008cf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	607b      	str	r3, [r7, #4]
}
 8008d0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <vPortEnterCritical+0x58>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3301      	adds	r3, #1
 8008d14:	4a0d      	ldr	r2, [pc, #52]	; (8008d4c <vPortEnterCritical+0x58>)
 8008d16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d18:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <vPortEnterCritical+0x58>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d10f      	bne.n	8008d40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d20:	4b0b      	ldr	r3, [pc, #44]	; (8008d50 <vPortEnterCritical+0x5c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00a      	beq.n	8008d40 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	603b      	str	r3, [r7, #0]
}
 8008d3c:	bf00      	nop
 8008d3e:	e7fe      	b.n	8008d3e <vPortEnterCritical+0x4a>
	}
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	24000024 	.word	0x24000024
 8008d50:	e000ed04 	.word	0xe000ed04

08008d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d5a:	4b12      	ldr	r3, [pc, #72]	; (8008da4 <vPortExitCritical+0x50>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10a      	bne.n	8008d78 <vPortExitCritical+0x24>
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	607b      	str	r3, [r7, #4]
}
 8008d74:	bf00      	nop
 8008d76:	e7fe      	b.n	8008d76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d78:	4b0a      	ldr	r3, [pc, #40]	; (8008da4 <vPortExitCritical+0x50>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	4a09      	ldr	r2, [pc, #36]	; (8008da4 <vPortExitCritical+0x50>)
 8008d80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d82:	4b08      	ldr	r3, [pc, #32]	; (8008da4 <vPortExitCritical+0x50>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d105      	bne.n	8008d96 <vPortExitCritical+0x42>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	f383 8811 	msr	BASEPRI, r3
}
 8008d94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	24000024 	.word	0x24000024
	...

08008db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008db0:	f3ef 8009 	mrs	r0, PSP
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	4b15      	ldr	r3, [pc, #84]	; (8008e10 <pxCurrentTCBConst>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	f01e 0f10 	tst.w	lr, #16
 8008dc0:	bf08      	it	eq
 8008dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dca:	6010      	str	r0, [r2, #0]
 8008dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008dd4:	f380 8811 	msr	BASEPRI, r0
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f7fe feac 	bl	8007b3c <vTaskSwitchContext>
 8008de4:	f04f 0000 	mov.w	r0, #0
 8008de8:	f380 8811 	msr	BASEPRI, r0
 8008dec:	bc09      	pop	{r0, r3}
 8008dee:	6819      	ldr	r1, [r3, #0]
 8008df0:	6808      	ldr	r0, [r1, #0]
 8008df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df6:	f01e 0f10 	tst.w	lr, #16
 8008dfa:	bf08      	it	eq
 8008dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e00:	f380 8809 	msr	PSP, r0
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	f3af 8000 	nop.w

08008e10 <pxCurrentTCBConst>:
 8008e10:	2400083c 	.word	0x2400083c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop

08008e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	607b      	str	r3, [r7, #4]
}
 8008e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e32:	f7fe fdc9 	bl	80079c8 <xTaskIncrementTick>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e3c:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <xPortSysTickHandler+0x40>)
 8008e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	2300      	movs	r3, #0
 8008e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	f383 8811 	msr	BASEPRI, r3
}
 8008e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	e000ed04 	.word	0xe000ed04

08008e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e60:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <vPortSetupTimerInterrupt+0x34>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e66:	4b0b      	ldr	r3, [pc, #44]	; (8008e94 <vPortSetupTimerInterrupt+0x38>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e6c:	4b0a      	ldr	r3, [pc, #40]	; (8008e98 <vPortSetupTimerInterrupt+0x3c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a0a      	ldr	r2, [pc, #40]	; (8008e9c <vPortSetupTimerInterrupt+0x40>)
 8008e72:	fba2 2303 	umull	r2, r3, r2, r3
 8008e76:	099b      	lsrs	r3, r3, #6
 8008e78:	4a09      	ldr	r2, [pc, #36]	; (8008ea0 <vPortSetupTimerInterrupt+0x44>)
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e7e:	4b04      	ldr	r3, [pc, #16]	; (8008e90 <vPortSetupTimerInterrupt+0x34>)
 8008e80:	2207      	movs	r2, #7
 8008e82:	601a      	str	r2, [r3, #0]
}
 8008e84:	bf00      	nop
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	e000e010 	.word	0xe000e010
 8008e94:	e000e018 	.word	0xe000e018
 8008e98:	24000000 	.word	0x24000000
 8008e9c:	10624dd3 	.word	0x10624dd3
 8008ea0:	e000e014 	.word	0xe000e014

08008ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008eb4 <vPortEnableVFP+0x10>
 8008ea8:	6801      	ldr	r1, [r0, #0]
 8008eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008eae:	6001      	str	r1, [r0, #0]
 8008eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008eb2:	bf00      	nop
 8008eb4:	e000ed88 	.word	0xe000ed88

08008eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ebe:	f3ef 8305 	mrs	r3, IPSR
 8008ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b0f      	cmp	r3, #15
 8008ec8:	d914      	bls.n	8008ef4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008eca:	4a17      	ldr	r2, [pc, #92]	; (8008f28 <vPortValidateInterruptPriority+0x70>)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ed4:	4b15      	ldr	r3, [pc, #84]	; (8008f2c <vPortValidateInterruptPriority+0x74>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	7afa      	ldrb	r2, [r7, #11]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d20a      	bcs.n	8008ef4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	607b      	str	r3, [r7, #4]
}
 8008ef0:	bf00      	nop
 8008ef2:	e7fe      	b.n	8008ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ef4:	4b0e      	ldr	r3, [pc, #56]	; (8008f30 <vPortValidateInterruptPriority+0x78>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008efc:	4b0d      	ldr	r3, [pc, #52]	; (8008f34 <vPortValidateInterruptPriority+0x7c>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d90a      	bls.n	8008f1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	603b      	str	r3, [r7, #0]
}
 8008f16:	bf00      	nop
 8008f18:	e7fe      	b.n	8008f18 <vPortValidateInterruptPriority+0x60>
	}
 8008f1a:	bf00      	nop
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	e000e3f0 	.word	0xe000e3f0
 8008f2c:	24000e68 	.word	0x24000e68
 8008f30:	e000ed0c 	.word	0xe000ed0c
 8008f34:	24000e6c 	.word	0x24000e6c

08008f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08a      	sub	sp, #40	; 0x28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f40:	2300      	movs	r3, #0
 8008f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f44:	f7fe fc72 	bl	800782c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f48:	4b5b      	ldr	r3, [pc, #364]	; (80090b8 <pvPortMalloc+0x180>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f50:	f000 f920 	bl	8009194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f54:	4b59      	ldr	r3, [pc, #356]	; (80090bc <pvPortMalloc+0x184>)
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f040 8093 	bne.w	8009088 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d01d      	beq.n	8008fa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008f68:	2208      	movs	r2, #8
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f003 0307 	and.w	r3, r3, #7
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d014      	beq.n	8008fa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f023 0307 	bic.w	r3, r3, #7
 8008f80:	3308      	adds	r3, #8
 8008f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00a      	beq.n	8008fa4 <pvPortMalloc+0x6c>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	617b      	str	r3, [r7, #20]
}
 8008fa0:	bf00      	nop
 8008fa2:	e7fe      	b.n	8008fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d06e      	beq.n	8009088 <pvPortMalloc+0x150>
 8008faa:	4b45      	ldr	r3, [pc, #276]	; (80090c0 <pvPortMalloc+0x188>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d869      	bhi.n	8009088 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008fb4:	4b43      	ldr	r3, [pc, #268]	; (80090c4 <pvPortMalloc+0x18c>)
 8008fb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008fb8:	4b42      	ldr	r3, [pc, #264]	; (80090c4 <pvPortMalloc+0x18c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fbe:	e004      	b.n	8008fca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d903      	bls.n	8008fdc <pvPortMalloc+0xa4>
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1f1      	bne.n	8008fc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008fdc:	4b36      	ldr	r3, [pc, #216]	; (80090b8 <pvPortMalloc+0x180>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d050      	beq.n	8009088 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2208      	movs	r2, #8
 8008fec:	4413      	add	r3, r2
 8008fee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	6a3b      	ldr	r3, [r7, #32]
 8008ff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	685a      	ldr	r2, [r3, #4]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	1ad2      	subs	r2, r2, r3
 8009000:	2308      	movs	r3, #8
 8009002:	005b      	lsls	r3, r3, #1
 8009004:	429a      	cmp	r2, r3
 8009006:	d91f      	bls.n	8009048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4413      	add	r3, r2
 800900e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	f003 0307 	and.w	r3, r3, #7
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00a      	beq.n	8009030 <pvPortMalloc+0xf8>
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	613b      	str	r3, [r7, #16]
}
 800902c:	bf00      	nop
 800902e:	e7fe      	b.n	800902e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	1ad2      	subs	r2, r2, r3
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800903c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009042:	69b8      	ldr	r0, [r7, #24]
 8009044:	f000 f908 	bl	8009258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009048:	4b1d      	ldr	r3, [pc, #116]	; (80090c0 <pvPortMalloc+0x188>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	4a1b      	ldr	r2, [pc, #108]	; (80090c0 <pvPortMalloc+0x188>)
 8009054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009056:	4b1a      	ldr	r3, [pc, #104]	; (80090c0 <pvPortMalloc+0x188>)
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	4b1b      	ldr	r3, [pc, #108]	; (80090c8 <pvPortMalloc+0x190>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	429a      	cmp	r2, r3
 8009060:	d203      	bcs.n	800906a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009062:	4b17      	ldr	r3, [pc, #92]	; (80090c0 <pvPortMalloc+0x188>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a18      	ldr	r2, [pc, #96]	; (80090c8 <pvPortMalloc+0x190>)
 8009068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	4b13      	ldr	r3, [pc, #76]	; (80090bc <pvPortMalloc+0x184>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	431a      	orrs	r2, r3
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	2200      	movs	r2, #0
 800907c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800907e:	4b13      	ldr	r3, [pc, #76]	; (80090cc <pvPortMalloc+0x194>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3301      	adds	r3, #1
 8009084:	4a11      	ldr	r2, [pc, #68]	; (80090cc <pvPortMalloc+0x194>)
 8009086:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009088:	f7fe fbde 	bl	8007848 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00a      	beq.n	80090ac <pvPortMalloc+0x174>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	60fb      	str	r3, [r7, #12]
}
 80090a8:	bf00      	nop
 80090aa:	e7fe      	b.n	80090aa <pvPortMalloc+0x172>
	return pvReturn;
 80090ac:	69fb      	ldr	r3, [r7, #28]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3728      	adds	r7, #40	; 0x28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	24004a78 	.word	0x24004a78
 80090bc:	24004a8c 	.word	0x24004a8c
 80090c0:	24004a7c 	.word	0x24004a7c
 80090c4:	24004a70 	.word	0x24004a70
 80090c8:	24004a80 	.word	0x24004a80
 80090cc:	24004a84 	.word	0x24004a84

080090d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d04d      	beq.n	800917e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090e2:	2308      	movs	r3, #8
 80090e4:	425b      	negs	r3, r3
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	4413      	add	r3, r2
 80090ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	4b24      	ldr	r3, [pc, #144]	; (8009188 <vPortFree+0xb8>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4013      	ands	r3, r2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10a      	bne.n	8009114 <vPortFree+0x44>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	60fb      	str	r3, [r7, #12]
}
 8009110:	bf00      	nop
 8009112:	e7fe      	b.n	8009112 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00a      	beq.n	8009132 <vPortFree+0x62>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	60bb      	str	r3, [r7, #8]
}
 800912e:	bf00      	nop
 8009130:	e7fe      	b.n	8009130 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	4b14      	ldr	r3, [pc, #80]	; (8009188 <vPortFree+0xb8>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4013      	ands	r3, r2
 800913c:	2b00      	cmp	r3, #0
 800913e:	d01e      	beq.n	800917e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d11a      	bne.n	800917e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	4b0e      	ldr	r3, [pc, #56]	; (8009188 <vPortFree+0xb8>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	43db      	mvns	r3, r3
 8009152:	401a      	ands	r2, r3
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009158:	f7fe fb68 	bl	800782c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	4b0a      	ldr	r3, [pc, #40]	; (800918c <vPortFree+0xbc>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4413      	add	r3, r2
 8009166:	4a09      	ldr	r2, [pc, #36]	; (800918c <vPortFree+0xbc>)
 8009168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800916a:	6938      	ldr	r0, [r7, #16]
 800916c:	f000 f874 	bl	8009258 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009170:	4b07      	ldr	r3, [pc, #28]	; (8009190 <vPortFree+0xc0>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3301      	adds	r3, #1
 8009176:	4a06      	ldr	r2, [pc, #24]	; (8009190 <vPortFree+0xc0>)
 8009178:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800917a:	f7fe fb65 	bl	8007848 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800917e:	bf00      	nop
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	24004a8c 	.word	0x24004a8c
 800918c:	24004a7c 	.word	0x24004a7c
 8009190:	24004a88 	.word	0x24004a88

08009194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800919a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800919e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091a0:	4b27      	ldr	r3, [pc, #156]	; (8009240 <prvHeapInit+0xac>)
 80091a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f003 0307 	and.w	r3, r3, #7
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00c      	beq.n	80091c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3307      	adds	r3, #7
 80091b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f023 0307 	bic.w	r3, r3, #7
 80091ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	4a1f      	ldr	r2, [pc, #124]	; (8009240 <prvHeapInit+0xac>)
 80091c4:	4413      	add	r3, r2
 80091c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091cc:	4a1d      	ldr	r2, [pc, #116]	; (8009244 <prvHeapInit+0xb0>)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091d2:	4b1c      	ldr	r3, [pc, #112]	; (8009244 <prvHeapInit+0xb0>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	4413      	add	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091e0:	2208      	movs	r2, #8
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	1a9b      	subs	r3, r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f023 0307 	bic.w	r3, r3, #7
 80091ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4a15      	ldr	r2, [pc, #84]	; (8009248 <prvHeapInit+0xb4>)
 80091f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091f6:	4b14      	ldr	r3, [pc, #80]	; (8009248 <prvHeapInit+0xb4>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2200      	movs	r2, #0
 80091fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80091fe:	4b12      	ldr	r3, [pc, #72]	; (8009248 <prvHeapInit+0xb4>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	1ad2      	subs	r2, r2, r3
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009214:	4b0c      	ldr	r3, [pc, #48]	; (8009248 <prvHeapInit+0xb4>)
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	4a0a      	ldr	r2, [pc, #40]	; (800924c <prvHeapInit+0xb8>)
 8009222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	4a09      	ldr	r2, [pc, #36]	; (8009250 <prvHeapInit+0xbc>)
 800922a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800922c:	4b09      	ldr	r3, [pc, #36]	; (8009254 <prvHeapInit+0xc0>)
 800922e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009232:	601a      	str	r2, [r3, #0]
}
 8009234:	bf00      	nop
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	24000e70 	.word	0x24000e70
 8009244:	24004a70 	.word	0x24004a70
 8009248:	24004a78 	.word	0x24004a78
 800924c:	24004a80 	.word	0x24004a80
 8009250:	24004a7c 	.word	0x24004a7c
 8009254:	24004a8c 	.word	0x24004a8c

08009258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009260:	4b28      	ldr	r3, [pc, #160]	; (8009304 <prvInsertBlockIntoFreeList+0xac>)
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	e002      	b.n	800926c <prvInsertBlockIntoFreeList+0x14>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	429a      	cmp	r2, r3
 8009274:	d8f7      	bhi.n	8009266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	4413      	add	r3, r2
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	429a      	cmp	r2, r3
 8009286:	d108      	bne.n	800929a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	441a      	add	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	441a      	add	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d118      	bne.n	80092e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	4b15      	ldr	r3, [pc, #84]	; (8009308 <prvInsertBlockIntoFreeList+0xb0>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d00d      	beq.n	80092d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	441a      	add	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	e008      	b.n	80092e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092d6:	4b0c      	ldr	r3, [pc, #48]	; (8009308 <prvInsertBlockIntoFreeList+0xb0>)
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	e003      	b.n	80092e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d002      	beq.n	80092f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092f6:	bf00      	nop
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	24004a70 	.word	0x24004a70
 8009308:	24004a78 	.word	0x24004a78

0800930c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	330c      	adds	r3, #12
 800931c:	461a      	mov	r2, r3
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f002 fa9f 	bl	800b864 <tcpip_send_msg_wait_sem>
 8009326:	4603      	mov	r3, r0
 8009328:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800932a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d103      	bne.n	800933a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009338:	e001      	b.n	800933e <netconn_apimsg+0x32>
  }
  return err;
 800933a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08c      	sub	sp, #48	; 0x30
 800934c:	af00      	add	r7, sp, #0
 800934e:	4603      	mov	r3, r0
 8009350:	603a      	str	r2, [r7, #0]
 8009352:	71fb      	strb	r3, [r7, #7]
 8009354:	460b      	mov	r3, r1
 8009356:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009358:	79fb      	ldrb	r3, [r7, #7]
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	4618      	mov	r0, r3
 800935e:	f001 f923 	bl	800a5a8 <netconn_alloc>
 8009362:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009366:	2b00      	cmp	r3, #0
 8009368:	d054      	beq.n	8009414 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800936a:	79bb      	ldrb	r3, [r7, #6]
 800936c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800936e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009370:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009372:	f107 0308 	add.w	r3, r7, #8
 8009376:	4619      	mov	r1, r3
 8009378:	4829      	ldr	r0, [pc, #164]	; (8009420 <netconn_new_with_proto_and_callback+0xd8>)
 800937a:	f7ff ffc7 	bl	800930c <netconn_apimsg>
 800937e:	4603      	mov	r3, r0
 8009380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009384:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009388:	2b00      	cmp	r3, #0
 800938a:	d043      	beq.n	8009414 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800938c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d005      	beq.n	80093a0 <netconn_new_with_proto_and_callback+0x58>
 8009394:	4b23      	ldr	r3, [pc, #140]	; (8009424 <netconn_new_with_proto_and_callback+0xdc>)
 8009396:	22a3      	movs	r2, #163	; 0xa3
 8009398:	4923      	ldr	r1, [pc, #140]	; (8009428 <netconn_new_with_proto_and_callback+0xe0>)
 800939a:	4824      	ldr	r0, [pc, #144]	; (800942c <netconn_new_with_proto_and_callback+0xe4>)
 800939c:	f00d fd3a 	bl	8016e14 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80093a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a2:	3310      	adds	r3, #16
 80093a4:	4618      	mov	r0, r3
 80093a6:	f00d fa71 	bl	801688c <sys_mbox_valid>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d105      	bne.n	80093bc <netconn_new_with_proto_and_callback+0x74>
 80093b0:	4b1c      	ldr	r3, [pc, #112]	; (8009424 <netconn_new_with_proto_and_callback+0xdc>)
 80093b2:	22a4      	movs	r2, #164	; 0xa4
 80093b4:	491e      	ldr	r1, [pc, #120]	; (8009430 <netconn_new_with_proto_and_callback+0xe8>)
 80093b6:	481d      	ldr	r0, [pc, #116]	; (800942c <netconn_new_with_proto_and_callback+0xe4>)
 80093b8:	f00d fd2c 	bl	8016e14 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80093bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093be:	3314      	adds	r3, #20
 80093c0:	4618      	mov	r0, r3
 80093c2:	f00d fa63 	bl	801688c <sys_mbox_valid>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d005      	beq.n	80093d8 <netconn_new_with_proto_and_callback+0x90>
 80093cc:	4b15      	ldr	r3, [pc, #84]	; (8009424 <netconn_new_with_proto_and_callback+0xdc>)
 80093ce:	22a6      	movs	r2, #166	; 0xa6
 80093d0:	4918      	ldr	r1, [pc, #96]	; (8009434 <netconn_new_with_proto_and_callback+0xec>)
 80093d2:	4816      	ldr	r0, [pc, #88]	; (800942c <netconn_new_with_proto_and_callback+0xe4>)
 80093d4:	f00d fd1e 	bl	8016e14 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80093d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093da:	330c      	adds	r3, #12
 80093dc:	4618      	mov	r0, r3
 80093de:	f00d fae3 	bl	80169a8 <sys_sem_valid>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d105      	bne.n	80093f4 <netconn_new_with_proto_and_callback+0xac>
 80093e8:	4b0e      	ldr	r3, [pc, #56]	; (8009424 <netconn_new_with_proto_and_callback+0xdc>)
 80093ea:	22a9      	movs	r2, #169	; 0xa9
 80093ec:	4912      	ldr	r1, [pc, #72]	; (8009438 <netconn_new_with_proto_and_callback+0xf0>)
 80093ee:	480f      	ldr	r0, [pc, #60]	; (800942c <netconn_new_with_proto_and_callback+0xe4>)
 80093f0:	f00d fd10 	bl	8016e14 <iprintf>
      sys_sem_free(&conn->op_completed);
 80093f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f6:	330c      	adds	r3, #12
 80093f8:	4618      	mov	r0, r3
 80093fa:	f00d fac8 	bl	801698e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80093fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009400:	3310      	adds	r3, #16
 8009402:	4618      	mov	r0, r3
 8009404:	f00d f9ce 	bl	80167a4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009408:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800940a:	2007      	movs	r0, #7
 800940c:	f003 f890 	bl	800c530 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009410:	2300      	movs	r3, #0
 8009412:	e000      	b.n	8009416 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009416:	4618      	mov	r0, r3
 8009418:	3730      	adds	r7, #48	; 0x30
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	0800a57d 	.word	0x0800a57d
 8009424:	08017d1c 	.word	0x08017d1c
 8009428:	08017d50 	.word	0x08017d50
 800942c:	08017d74 	.word	0x08017d74
 8009430:	08017d9c 	.word	0x08017d9c
 8009434:	08017db4 	.word	0x08017db4
 8009438:	08017dd8 	.word	0x08017dd8

0800943c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08c      	sub	sp, #48	; 0x30
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	e014      	b.n	8009478 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009452:	2329      	movs	r3, #41	; 0x29
 8009454:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009456:	f107 030c 	add.w	r3, r7, #12
 800945a:	4619      	mov	r1, r3
 800945c:	4808      	ldr	r0, [pc, #32]	; (8009480 <netconn_prepare_delete+0x44>)
 800945e:	f7ff ff55 	bl	800930c <netconn_apimsg>
 8009462:	4603      	mov	r3, r0
 8009464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009468:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800946c:	2b00      	cmp	r3, #0
 800946e:	d002      	beq.n	8009476 <netconn_prepare_delete+0x3a>
    return err;
 8009470:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009474:	e000      	b.n	8009478 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3730      	adds	r7, #48	; 0x30
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	0800aae1 	.word	0x0800aae1

08009484 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <netconn_delete+0x12>
    return ERR_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	e00d      	b.n	80094b2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7ff ffd0 	bl	800943c <netconn_prepare_delete>
 800949c:	4603      	mov	r3, r0
 800949e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80094a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d102      	bne.n	80094ae <netconn_delete+0x2a>
    netconn_free(conn);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 f8eb 	bl	800a684 <netconn_free>
  }
  return err;
 80094ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b08e      	sub	sp, #56	; 0x38
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	4613      	mov	r3, r2
 80094c8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d109      	bne.n	80094e4 <netconn_bind+0x28>
 80094d0:	4b11      	ldr	r3, [pc, #68]	; (8009518 <netconn_bind+0x5c>)
 80094d2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80094d6:	4911      	ldr	r1, [pc, #68]	; (800951c <netconn_bind+0x60>)
 80094d8:	4811      	ldr	r0, [pc, #68]	; (8009520 <netconn_bind+0x64>)
 80094da:	f00d fc9b 	bl	8016e14 <iprintf>
 80094de:	f06f 030f 	mvn.w	r3, #15
 80094e2:	e015      	b.n	8009510 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80094ea:	4b0e      	ldr	r3, [pc, #56]	; (8009524 <netconn_bind+0x68>)
 80094ec:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80094f6:	88fb      	ldrh	r3, [r7, #6]
 80094f8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80094fa:	f107 0314 	add.w	r3, r7, #20
 80094fe:	4619      	mov	r1, r3
 8009500:	4809      	ldr	r0, [pc, #36]	; (8009528 <netconn_bind+0x6c>)
 8009502:	f7ff ff03 	bl	800930c <netconn_apimsg>
 8009506:	4603      	mov	r3, r0
 8009508:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800950c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009510:	4618      	mov	r0, r3
 8009512:	3738      	adds	r7, #56	; 0x38
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	08017d1c 	.word	0x08017d1c
 800951c:	08017e54 	.word	0x08017e54
 8009520:	08017d74 	.word	0x08017d74
 8009524:	0801b340 	.word	0x0801b340
 8009528:	0800aca9 	.word	0x0800aca9

0800952c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b08c      	sub	sp, #48	; 0x30
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	460b      	mov	r3, r1
 8009536:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d109      	bne.n	8009552 <netconn_listen_with_backlog+0x26>
 800953e:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <netconn_listen_with_backlog+0x48>)
 8009540:	f240 12bb 	movw	r2, #443	; 0x1bb
 8009544:	490c      	ldr	r1, [pc, #48]	; (8009578 <netconn_listen_with_backlog+0x4c>)
 8009546:	480d      	ldr	r0, [pc, #52]	; (800957c <netconn_listen_with_backlog+0x50>)
 8009548:	f00d fc64 	bl	8016e14 <iprintf>
 800954c:	f06f 030f 	mvn.w	r3, #15
 8009550:	e00c      	b.n	800956c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8009556:	f107 030c 	add.w	r3, r7, #12
 800955a:	4619      	mov	r1, r3
 800955c:	4808      	ldr	r0, [pc, #32]	; (8009580 <netconn_listen_with_backlog+0x54>)
 800955e:	f7ff fed5 	bl	800930c <netconn_apimsg>
 8009562:	4603      	mov	r3, r0
 8009564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009568:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800956c:	4618      	mov	r0, r3
 800956e:	3730      	adds	r7, #48	; 0x30
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	08017d1c 	.word	0x08017d1c
 8009578:	08017ed4 	.word	0x08017ed4
 800957c:	08017d74 	.word	0x08017d74
 8009580:	0800ad1d 	.word	0x0800ad1d

08009584 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d109      	bne.n	80095a8 <netconn_accept+0x24>
 8009594:	4b3d      	ldr	r3, [pc, #244]	; (800968c <netconn_accept+0x108>)
 8009596:	f240 12e1 	movw	r2, #481	; 0x1e1
 800959a:	493d      	ldr	r1, [pc, #244]	; (8009690 <netconn_accept+0x10c>)
 800959c:	483d      	ldr	r0, [pc, #244]	; (8009694 <netconn_accept+0x110>)
 800959e:	f00d fc39 	bl	8016e14 <iprintf>
 80095a2:	f06f 030f 	mvn.w	r3, #15
 80095a6:	e06c      	b.n	8009682 <netconn_accept+0xfe>
  *new_conn = NULL;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2200      	movs	r2, #0
 80095ac:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d109      	bne.n	80095c8 <netconn_accept+0x44>
 80095b4:	4b35      	ldr	r3, [pc, #212]	; (800968c <netconn_accept+0x108>)
 80095b6:	f240 12e3 	movw	r2, #483	; 0x1e3
 80095ba:	4937      	ldr	r1, [pc, #220]	; (8009698 <netconn_accept+0x114>)
 80095bc:	4835      	ldr	r0, [pc, #212]	; (8009694 <netconn_accept+0x110>)
 80095be:	f00d fc29 	bl	8016e14 <iprintf>
 80095c2:	f06f 030f 	mvn.w	r3, #15
 80095c6:	e05c      	b.n	8009682 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fb6c 	bl	8009ca6 <netconn_err>
 80095ce:	4603      	mov	r3, r0
 80095d0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80095d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80095da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095de:	e050      	b.n	8009682 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3314      	adds	r3, #20
 80095e4:	4618      	mov	r0, r3
 80095e6:	f00d f951 	bl	801688c <sys_mbox_valid>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d005      	beq.n	80095fc <netconn_accept+0x78>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	7f1b      	ldrb	r3, [r3, #28]
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80095fc:	f06f 030e 	mvn.w	r3, #14
 8009600:	e03f      	b.n	8009682 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	7f1b      	ldrb	r3, [r3, #28]
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00e      	beq.n	800962c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3314      	adds	r3, #20
 8009612:	f107 020c 	add.w	r2, r7, #12
 8009616:	4611      	mov	r1, r2
 8009618:	4618      	mov	r0, r3
 800961a:	f00d f920 	bl	801685e <sys_arch_mbox_tryfetch>
 800961e:	4603      	mov	r3, r0
 8009620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009624:	d10a      	bne.n	800963c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8009626:	f06f 0306 	mvn.w	r3, #6
 800962a:	e02a      	b.n	8009682 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3314      	adds	r3, #20
 8009630:	f107 010c 	add.w	r1, r7, #12
 8009634:	2200      	movs	r2, #0
 8009636:	4618      	mov	r0, r3
 8009638:	f00d f8e0 	bl	80167fc <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009640:	2b00      	cmp	r3, #0
 8009642:	d005      	beq.n	8009650 <netconn_accept+0xcc>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009648:	2200      	movs	r2, #0
 800964a:	2101      	movs	r1, #1
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f107 0213 	add.w	r2, r7, #19
 8009656:	4611      	mov	r1, r2
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fb75 	bl	8009d48 <lwip_netconn_is_err_msg>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8009664:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009668:	e00b      	b.n	8009682 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d102      	bne.n	8009676 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8009670:	f06f 030e 	mvn.w	r3, #14
 8009674:	e005      	b.n	8009682 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009680:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009682:	4618      	mov	r0, r3
 8009684:	3718      	adds	r7, #24
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	08017d1c 	.word	0x08017d1c
 8009690:	08017ef4 	.word	0x08017ef4
 8009694:	08017d74 	.word	0x08017d74
 8009698:	08017f14 	.word	0x08017f14

0800969c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	4613      	mov	r3, r2
 80096a8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80096aa:	2300      	movs	r3, #0
 80096ac:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d109      	bne.n	80096c8 <netconn_recv_data+0x2c>
 80096b4:	4b58      	ldr	r3, [pc, #352]	; (8009818 <netconn_recv_data+0x17c>)
 80096b6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80096ba:	4958      	ldr	r1, [pc, #352]	; (800981c <netconn_recv_data+0x180>)
 80096bc:	4858      	ldr	r0, [pc, #352]	; (8009820 <netconn_recv_data+0x184>)
 80096be:	f00d fba9 	bl	8016e14 <iprintf>
 80096c2:	f06f 030f 	mvn.w	r3, #15
 80096c6:	e0a2      	b.n	800980e <netconn_recv_data+0x172>
  *new_buf = NULL;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	2200      	movs	r2, #0
 80096cc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d109      	bne.n	80096e8 <netconn_recv_data+0x4c>
 80096d4:	4b50      	ldr	r3, [pc, #320]	; (8009818 <netconn_recv_data+0x17c>)
 80096d6:	f240 224a 	movw	r2, #586	; 0x24a
 80096da:	4952      	ldr	r1, [pc, #328]	; (8009824 <netconn_recv_data+0x188>)
 80096dc:	4850      	ldr	r0, [pc, #320]	; (8009820 <netconn_recv_data+0x184>)
 80096de:	f00d fb99 	bl	8016e14 <iprintf>
 80096e2:	f06f 030f 	mvn.w	r3, #15
 80096e6:	e092      	b.n	800980e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3310      	adds	r3, #16
 80096ec:	4618      	mov	r0, r3
 80096ee:	f00d f8cd 	bl	801688c <sys_mbox_valid>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10e      	bne.n	8009716 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f000 fad4 	bl	8009ca6 <netconn_err>
 80096fe:	4603      	mov	r3, r0
 8009700:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009702:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d002      	beq.n	8009710 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800970a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800970e:	e07e      	b.n	800980e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009710:	f06f 030a 	mvn.w	r3, #10
 8009714:	e07b      	b.n	800980e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	7f1b      	ldrb	r3, [r3, #28]
 800971a:	f003 0302 	and.w	r3, r3, #2
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10f      	bne.n	8009742 <netconn_recv_data+0xa6>
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	f003 0304 	and.w	r3, r3, #4
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10a      	bne.n	8009742 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	7f1b      	ldrb	r3, [r3, #28]
 8009730:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009734:	2b00      	cmp	r3, #0
 8009736:	d104      	bne.n	8009742 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d023      	beq.n	800978a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3310      	adds	r3, #16
 8009746:	f107 0218 	add.w	r2, r7, #24
 800974a:	4611      	mov	r1, r2
 800974c:	4618      	mov	r0, r3
 800974e:	f00d f886 	bl	801685e <sys_arch_mbox_tryfetch>
 8009752:	4603      	mov	r3, r0
 8009754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009758:	d11f      	bne.n	800979a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 faa3 	bl	8009ca6 <netconn_err>
 8009760:	4603      	mov	r3, r0
 8009762:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009764:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d002      	beq.n	8009772 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800976c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009770:	e04d      	b.n	800980e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	7f1b      	ldrb	r3, [r3, #28]
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d002      	beq.n	8009784 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800977e:	f06f 030a 	mvn.w	r3, #10
 8009782:	e044      	b.n	800980e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009784:	f06f 0306 	mvn.w	r3, #6
 8009788:	e041      	b.n	800980e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3310      	adds	r3, #16
 800978e:	f107 0118 	add.w	r1, r7, #24
 8009792:	2200      	movs	r2, #0
 8009794:	4618      	mov	r0, r3
 8009796:	f00d f831 	bl	80167fc <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097a2:	2b10      	cmp	r3, #16
 80097a4:	d117      	bne.n	80097d6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	f107 0217 	add.w	r2, r7, #23
 80097ac:	4611      	mov	r1, r2
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 faca 	bl	8009d48 <lwip_netconn_is_err_msg>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d009      	beq.n	80097ce <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80097ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097be:	f113 0f0f 	cmn.w	r3, #15
 80097c2:	d101      	bne.n	80097c8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	e022      	b.n	800980e <netconn_recv_data+0x172>
      }
      return err;
 80097c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097cc:	e01f      	b.n	800980e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	891b      	ldrh	r3, [r3, #8]
 80097d2:	83fb      	strh	r3, [r7, #30]
 80097d4:	e00d      	b.n	80097f2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d106      	bne.n	80097ea <netconn_recv_data+0x14e>
 80097dc:	4b0e      	ldr	r3, [pc, #56]	; (8009818 <netconn_recv_data+0x17c>)
 80097de:	f240 2291 	movw	r2, #657	; 0x291
 80097e2:	4911      	ldr	r1, [pc, #68]	; (8009828 <netconn_recv_data+0x18c>)
 80097e4:	480e      	ldr	r0, [pc, #56]	; (8009820 <netconn_recv_data+0x184>)
 80097e6:	f00d fb15 	bl	8016e14 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	891b      	ldrh	r3, [r3, #8]
 80097f0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d005      	beq.n	8009806 <netconn_recv_data+0x16a>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fe:	8bfa      	ldrh	r2, [r7, #30]
 8009800:	2101      	movs	r1, #1
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009806:	69ba      	ldr	r2, [r7, #24]
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3720      	adds	r7, #32
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	08017d1c 	.word	0x08017d1c
 800981c:	08017f34 	.word	0x08017f34
 8009820:	08017d74 	.word	0x08017d74
 8009824:	08017f54 	.word	0x08017f54
 8009828:	08017f70 	.word	0x08017f70

0800982c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d005      	beq.n	800984a <netconn_tcp_recvd_msg+0x1e>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009846:	2b10      	cmp	r3, #16
 8009848:	d009      	beq.n	800985e <netconn_tcp_recvd_msg+0x32>
 800984a:	4b0c      	ldr	r3, [pc, #48]	; (800987c <netconn_tcp_recvd_msg+0x50>)
 800984c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009850:	490b      	ldr	r1, [pc, #44]	; (8009880 <netconn_tcp_recvd_msg+0x54>)
 8009852:	480c      	ldr	r0, [pc, #48]	; (8009884 <netconn_tcp_recvd_msg+0x58>)
 8009854:	f00d fade 	bl	8016e14 <iprintf>
 8009858:	f06f 030f 	mvn.w	r3, #15
 800985c:	e00a      	b.n	8009874 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800986a:	6879      	ldr	r1, [r7, #4]
 800986c:	4806      	ldr	r0, [pc, #24]	; (8009888 <netconn_tcp_recvd_msg+0x5c>)
 800986e:	f7ff fd4d 	bl	800930c <netconn_apimsg>
 8009872:	4603      	mov	r3, r0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	08017d1c 	.word	0x08017d1c
 8009880:	08017f7c 	.word	0x08017f7c
 8009884:	08017d74 	.word	0x08017d74
 8009888:	0800ae4d 	.word	0x0800ae4d

0800988c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b090      	sub	sp, #64	; 0x40
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	4613      	mov	r3, r2
 8009898:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3310      	adds	r3, #16
 800989e:	4618      	mov	r0, r3
 80098a0:	f00c fff4 	bl	801688c <sys_mbox_valid>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d102      	bne.n	80098b0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80098aa:	f06f 030a 	mvn.w	r3, #10
 80098ae:	e06d      	b.n	800998c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	7f1b      	ldrb	r3, [r3, #28]
 80098b4:	b25b      	sxtb	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	da07      	bge.n	80098ca <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	7f1b      	ldrb	r3, [r3, #28]
 80098be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80098c8:	e039      	b.n	800993e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80098ca:	79fb      	ldrb	r3, [r7, #7]
 80098cc:	461a      	mov	r2, r3
 80098ce:	68b9      	ldr	r1, [r7, #8]
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f7ff fee3 	bl	800969c <netconn_recv_data>
 80098d6:	4603      	mov	r3, r0
 80098d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80098dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d002      	beq.n	80098ea <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80098e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80098e8:	e050      	b.n	800998c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80098f0:	79fb      	ldrb	r3, [r7, #7]
 80098f2:	f003 0308 	and.w	r3, r3, #8
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10e      	bne.n	8009918 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80098fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <netconn_recv_data_tcp+0x7a>
 8009900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009902:	891b      	ldrh	r3, [r3, #8]
 8009904:	e000      	b.n	8009908 <netconn_recv_data_tcp+0x7c>
 8009906:	2301      	movs	r3, #1
 8009908:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800990a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800990c:	f107 0214 	add.w	r2, r7, #20
 8009910:	4619      	mov	r1, r3
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f7ff ff8a 	bl	800982c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991a:	2b00      	cmp	r3, #0
 800991c:	d134      	bne.n	8009988 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800991e:	79fb      	ldrb	r3, [r7, #7]
 8009920:	f003 0310 	and.w	r3, r3, #16
 8009924:	2b00      	cmp	r3, #0
 8009926:	d009      	beq.n	800993c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	7f1b      	ldrb	r3, [r3, #28]
 800992c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009930:	b2da      	uxtb	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009936:	f06f 0306 	mvn.w	r3, #6
 800993a:	e027      	b.n	800998c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800993c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009942:	2b00      	cmp	r3, #0
 8009944:	d005      	beq.n	8009952 <netconn_recv_data_tcp+0xc6>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994a:	2200      	movs	r2, #0
 800994c:	2101      	movs	r1, #1
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10f      	bne.n	800997a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 f9a3 	bl	8009ca6 <netconn_err>
 8009960:	4603      	mov	r3, r0
 8009962:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009966:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <netconn_recv_data_tcp+0xe8>
          return err;
 800996e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009972:	e00b      	b.n	800998c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009974:	f06f 030d 	mvn.w	r3, #13
 8009978:	e008      	b.n	800998c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800997a:	2101      	movs	r1, #1
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 f955 	bl	8009c2c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009982:	f06f 030e 	mvn.w	r3, #14
 8009986:	e001      	b.n	800998c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009988:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800998c:	4618      	mov	r0, r3
 800998e:	3740      	adds	r7, #64	; 0x40
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d109      	bne.n	80099bc <netconn_recv+0x28>
 80099a8:	4b32      	ldr	r3, [pc, #200]	; (8009a74 <netconn_recv+0xe0>)
 80099aa:	f240 3263 	movw	r2, #867	; 0x363
 80099ae:	4932      	ldr	r1, [pc, #200]	; (8009a78 <netconn_recv+0xe4>)
 80099b0:	4832      	ldr	r0, [pc, #200]	; (8009a7c <netconn_recv+0xe8>)
 80099b2:	f00d fa2f 	bl	8016e14 <iprintf>
 80099b6:	f06f 030f 	mvn.w	r3, #15
 80099ba:	e056      	b.n	8009a6a <netconn_recv+0xd6>
  *new_buf = NULL;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2200      	movs	r2, #0
 80099c0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d109      	bne.n	80099dc <netconn_recv+0x48>
 80099c8:	4b2a      	ldr	r3, [pc, #168]	; (8009a74 <netconn_recv+0xe0>)
 80099ca:	f240 3265 	movw	r2, #869	; 0x365
 80099ce:	492c      	ldr	r1, [pc, #176]	; (8009a80 <netconn_recv+0xec>)
 80099d0:	482a      	ldr	r0, [pc, #168]	; (8009a7c <netconn_recv+0xe8>)
 80099d2:	f00d fa1f 	bl	8016e14 <iprintf>
 80099d6:	f06f 030f 	mvn.w	r3, #15
 80099da:	e046      	b.n	8009a6a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099e4:	2b10      	cmp	r3, #16
 80099e6:	d13a      	bne.n	8009a5e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80099ec:	2006      	movs	r0, #6
 80099ee:	f002 fd29 	bl	800c444 <memp_malloc>
 80099f2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d102      	bne.n	8009a00 <netconn_recv+0x6c>
      return ERR_MEM;
 80099fa:	f04f 33ff 	mov.w	r3, #4294967295
 80099fe:	e034      	b.n	8009a6a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009a00:	f107 030c 	add.w	r3, r7, #12
 8009a04:	2200      	movs	r2, #0
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff ff3f 	bl	800988c <netconn_recv_data_tcp>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009a12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d006      	beq.n	8009a28 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8009a1a:	6979      	ldr	r1, [r7, #20]
 8009a1c:	2006      	movs	r0, #6
 8009a1e:	f002 fd87 	bl	800c530 <memp_free>
      return err;
 8009a22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009a26:	e020      	b.n	8009a6a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d106      	bne.n	8009a3c <netconn_recv+0xa8>
 8009a2e:	4b11      	ldr	r3, [pc, #68]	; (8009a74 <netconn_recv+0xe0>)
 8009a30:	f240 3279 	movw	r2, #889	; 0x379
 8009a34:	4913      	ldr	r1, [pc, #76]	; (8009a84 <netconn_recv+0xf0>)
 8009a36:	4811      	ldr	r0, [pc, #68]	; (8009a7c <netconn_recv+0xe8>)
 8009a38:	f00d f9ec 	bl	8016e14 <iprintf>

    buf->p = p;
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2200      	movs	r2, #0
 8009a52:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e005      	b.n	8009a6a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8009a5e:	2200      	movs	r2, #0
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7ff fe1a 	bl	800969c <netconn_recv_data>
 8009a68:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	08017d1c 	.word	0x08017d1c
 8009a78:	08017f34 	.word	0x08017f34
 8009a7c:	08017d74 	.word	0x08017d74
 8009a80:	08017f54 	.word	0x08017f54
 8009a84:	08017fcc 	.word	0x08017fcc

08009a88 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b088      	sub	sp, #32
 8009a8c:	af02      	add	r7, sp, #8
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
 8009a94:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009a9e:	78fa      	ldrb	r2, [r7, #3]
 8009aa0:	f107 0110 	add.w	r1, r7, #16
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	2201      	movs	r2, #1
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f000 f805 	bl	8009abc <netconn_write_vectors_partly>
 8009ab2:	4603      	mov	r3, r0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3718      	adds	r7, #24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b092      	sub	sp, #72	; 0x48
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	4611      	mov	r1, r2
 8009ac8:	461a      	mov	r2, r3
 8009aca:	460b      	mov	r3, r1
 8009acc:	80fb      	strh	r3, [r7, #6]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d109      	bne.n	8009aec <netconn_write_vectors_partly+0x30>
 8009ad8:	4b4e      	ldr	r3, [pc, #312]	; (8009c14 <netconn_write_vectors_partly+0x158>)
 8009ada:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009ade:	494e      	ldr	r1, [pc, #312]	; (8009c18 <netconn_write_vectors_partly+0x15c>)
 8009ae0:	484e      	ldr	r0, [pc, #312]	; (8009c1c <netconn_write_vectors_partly+0x160>)
 8009ae2:	f00d f997 	bl	8016e14 <iprintf>
 8009ae6:	f06f 030f 	mvn.w	r3, #15
 8009aea:	e08e      	b.n	8009c0a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009af4:	2b10      	cmp	r3, #16
 8009af6:	d009      	beq.n	8009b0c <netconn_write_vectors_partly+0x50>
 8009af8:	4b46      	ldr	r3, [pc, #280]	; (8009c14 <netconn_write_vectors_partly+0x158>)
 8009afa:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009afe:	4948      	ldr	r1, [pc, #288]	; (8009c20 <netconn_write_vectors_partly+0x164>)
 8009b00:	4846      	ldr	r0, [pc, #280]	; (8009c1c <netconn_write_vectors_partly+0x160>)
 8009b02:	f00d f987 	bl	8016e14 <iprintf>
 8009b06:	f06f 0305 	mvn.w	r3, #5
 8009b0a:	e07e      	b.n	8009c0a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	7f1b      	ldrb	r3, [r3, #28]
 8009b10:	f003 0302 	and.w	r3, r3, #2
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d104      	bne.n	8009b22 <netconn_write_vectors_partly+0x66>
 8009b18:	797b      	ldrb	r3, [r7, #5]
 8009b1a:	f003 0304 	and.w	r3, r3, #4
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d001      	beq.n	8009b26 <netconn_write_vectors_partly+0x6a>
 8009b22:	2301      	movs	r3, #1
 8009b24:	e000      	b.n	8009b28 <netconn_write_vectors_partly+0x6c>
 8009b26:	2300      	movs	r3, #0
 8009b28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009b2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d005      	beq.n	8009b40 <netconn_write_vectors_partly+0x84>
 8009b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d102      	bne.n	8009b40 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009b3a:	f06f 0305 	mvn.w	r3, #5
 8009b3e:	e064      	b.n	8009c0a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009b40:	2300      	movs	r3, #0
 8009b42:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009b44:	2300      	movs	r3, #0
 8009b46:	643b      	str	r3, [r7, #64]	; 0x40
 8009b48:	e015      	b.n	8009b76 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b4c:	00db      	lsls	r3, r3, #3
 8009b4e:	68ba      	ldr	r2, [r7, #8]
 8009b50:	4413      	add	r3, r2
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b56:	4413      	add	r3, r2
 8009b58:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	4413      	add	r3, r2
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d202      	bcs.n	8009b70 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009b6a:	f06f 0305 	mvn.w	r3, #5
 8009b6e:	e04c      	b.n	8009c0a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b72:	3301      	adds	r3, #1
 8009b74:	643b      	str	r3, [r7, #64]	; 0x40
 8009b76:	88fb      	ldrh	r3, [r7, #6]
 8009b78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	dbe5      	blt.n	8009b4a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d101      	bne.n	8009b88 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009b84:	2300      	movs	r3, #0
 8009b86:	e040      	b.n	8009c0a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	da0a      	bge.n	8009ba4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d102      	bne.n	8009b9a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009b94:	f06f 0305 	mvn.w	r3, #5
 8009b98:	e037      	b.n	8009c0a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009b9a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009b9e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009bac:	88fb      	ldrh	r3, [r7, #6]
 8009bae:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009bb4:	797b      	ldrb	r3, [r7, #5]
 8009bb6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009bc2:	f107 0314 	add.w	r3, r7, #20
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	4816      	ldr	r0, [pc, #88]	; (8009c24 <netconn_write_vectors_partly+0x168>)
 8009bca:	f7ff fb9f 	bl	800930c <netconn_apimsg>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009bd4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d114      	bne.n	8009c06 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009be6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009be8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10a      	bne.n	8009c06 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d006      	beq.n	8009c06 <netconn_write_vectors_partly+0x14a>
 8009bf8:	4b06      	ldr	r3, [pc, #24]	; (8009c14 <netconn_write_vectors_partly+0x158>)
 8009bfa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009bfe:	490a      	ldr	r1, [pc, #40]	; (8009c28 <netconn_write_vectors_partly+0x16c>)
 8009c00:	4806      	ldr	r0, [pc, #24]	; (8009c1c <netconn_write_vectors_partly+0x160>)
 8009c02:	f00d f907 	bl	8016e14 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009c06:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3748      	adds	r7, #72	; 0x48
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	08017d1c 	.word	0x08017d1c
 8009c18:	08017ff4 	.word	0x08017ff4
 8009c1c:	08017d74 	.word	0x08017d74
 8009c20:	08018010 	.word	0x08018010
 8009c24:	0800b251 	.word	0x0800b251
 8009c28:	08018034 	.word	0x08018034

08009c2c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08c      	sub	sp, #48	; 0x30
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d109      	bne.n	8009c52 <netconn_close_shutdown+0x26>
 8009c3e:	4b0f      	ldr	r3, [pc, #60]	; (8009c7c <netconn_close_shutdown+0x50>)
 8009c40:	f240 4247 	movw	r2, #1095	; 0x447
 8009c44:	490e      	ldr	r1, [pc, #56]	; (8009c80 <netconn_close_shutdown+0x54>)
 8009c46:	480f      	ldr	r0, [pc, #60]	; (8009c84 <netconn_close_shutdown+0x58>)
 8009c48:	f00d f8e4 	bl	8016e14 <iprintf>
 8009c4c:	f06f 030f 	mvn.w	r3, #15
 8009c50:	e010      	b.n	8009c74 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009c56:	78fb      	ldrb	r3, [r7, #3]
 8009c58:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009c5a:	2329      	movs	r3, #41	; 0x29
 8009c5c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009c5e:	f107 030c 	add.w	r3, r7, #12
 8009c62:	4619      	mov	r1, r3
 8009c64:	4808      	ldr	r0, [pc, #32]	; (8009c88 <netconn_close_shutdown+0x5c>)
 8009c66:	f7ff fb51 	bl	800930c <netconn_apimsg>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009c70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3730      	adds	r7, #48	; 0x30
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	08017d1c 	.word	0x08017d1c
 8009c80:	08018058 	.word	0x08018058
 8009c84:	08017d74 	.word	0x08017d74
 8009c88:	0800b369 	.word	0x0800b369

08009c8c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009c94:	2103      	movs	r1, #3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7ff ffc8 	bl	8009c2c <netconn_close_shutdown>
 8009c9c:	4603      	mov	r3, r0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b084      	sub	sp, #16
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <netconn_err+0x12>
    return ERR_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	e00d      	b.n	8009cd4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009cb8:	f00c fef2 	bl	8016aa0 <sys_arch_protect>
 8009cbc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	7a1b      	ldrb	r3, [r3, #8]
 8009cc2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f00c fef6 	bl	8016abc <sys_arch_unprotect>
  return err;
 8009cd0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cea:	f113 0f0d 	cmn.w	r3, #13
 8009cee:	d009      	beq.n	8009d04 <lwip_netconn_err_to_msg+0x28>
 8009cf0:	f113 0f0d 	cmn.w	r3, #13
 8009cf4:	dc0c      	bgt.n	8009d10 <lwip_netconn_err_to_msg+0x34>
 8009cf6:	f113 0f0f 	cmn.w	r3, #15
 8009cfa:	d007      	beq.n	8009d0c <lwip_netconn_err_to_msg+0x30>
 8009cfc:	f113 0f0e 	cmn.w	r3, #14
 8009d00:	d002      	beq.n	8009d08 <lwip_netconn_err_to_msg+0x2c>
 8009d02:	e005      	b.n	8009d10 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009d04:	4b0a      	ldr	r3, [pc, #40]	; (8009d30 <lwip_netconn_err_to_msg+0x54>)
 8009d06:	e00e      	b.n	8009d26 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009d08:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <lwip_netconn_err_to_msg+0x58>)
 8009d0a:	e00c      	b.n	8009d26 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009d0c:	4b0a      	ldr	r3, [pc, #40]	; (8009d38 <lwip_netconn_err_to_msg+0x5c>)
 8009d0e:	e00a      	b.n	8009d26 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d005      	beq.n	8009d24 <lwip_netconn_err_to_msg+0x48>
 8009d18:	4b08      	ldr	r3, [pc, #32]	; (8009d3c <lwip_netconn_err_to_msg+0x60>)
 8009d1a:	227d      	movs	r2, #125	; 0x7d
 8009d1c:	4908      	ldr	r1, [pc, #32]	; (8009d40 <lwip_netconn_err_to_msg+0x64>)
 8009d1e:	4809      	ldr	r0, [pc, #36]	; (8009d44 <lwip_netconn_err_to_msg+0x68>)
 8009d20:	f00d f878 	bl	8016e14 <iprintf>
      return NULL;
 8009d24:	2300      	movs	r3, #0
  }
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	0801b22c 	.word	0x0801b22c
 8009d34:	0801b22d 	.word	0x0801b22d
 8009d38:	0801b22e 	.word	0x0801b22e
 8009d3c:	08018074 	.word	0x08018074
 8009d40:	080180a8 	.word	0x080180a8
 8009d44:	080180b8 	.word	0x080180b8

08009d48 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d105      	bne.n	8009d64 <lwip_netconn_is_err_msg+0x1c>
 8009d58:	4b12      	ldr	r3, [pc, #72]	; (8009da4 <lwip_netconn_is_err_msg+0x5c>)
 8009d5a:	2285      	movs	r2, #133	; 0x85
 8009d5c:	4912      	ldr	r1, [pc, #72]	; (8009da8 <lwip_netconn_is_err_msg+0x60>)
 8009d5e:	4813      	ldr	r0, [pc, #76]	; (8009dac <lwip_netconn_is_err_msg+0x64>)
 8009d60:	f00d f858 	bl	8016e14 <iprintf>

  if (msg == &netconn_aborted) {
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a12      	ldr	r2, [pc, #72]	; (8009db0 <lwip_netconn_is_err_msg+0x68>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d104      	bne.n	8009d76 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	22f3      	movs	r2, #243	; 0xf3
 8009d70:	701a      	strb	r2, [r3, #0]
    return 1;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e012      	b.n	8009d9c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a0e      	ldr	r2, [pc, #56]	; (8009db4 <lwip_netconn_is_err_msg+0x6c>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d104      	bne.n	8009d88 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	22f2      	movs	r2, #242	; 0xf2
 8009d82:	701a      	strb	r2, [r3, #0]
    return 1;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e009      	b.n	8009d9c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a0b      	ldr	r2, [pc, #44]	; (8009db8 <lwip_netconn_is_err_msg+0x70>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d104      	bne.n	8009d9a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	22f1      	movs	r2, #241	; 0xf1
 8009d94:	701a      	strb	r2, [r3, #0]
    return 1;
 8009d96:	2301      	movs	r3, #1
 8009d98:	e000      	b.n	8009d9c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	08018074 	.word	0x08018074
 8009da8:	080180e0 	.word	0x080180e0
 8009dac:	080180b8 	.word	0x080180b8
 8009db0:	0801b22c 	.word	0x0801b22c
 8009db4:	0801b22d 	.word	0x0801b22d
 8009db8:	0801b22e 	.word	0x0801b22e

08009dbc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b088      	sub	sp, #32
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d105      	bne.n	8009ddc <recv_udp+0x20>
 8009dd0:	4b34      	ldr	r3, [pc, #208]	; (8009ea4 <recv_udp+0xe8>)
 8009dd2:	22e5      	movs	r2, #229	; 0xe5
 8009dd4:	4934      	ldr	r1, [pc, #208]	; (8009ea8 <recv_udp+0xec>)
 8009dd6:	4835      	ldr	r0, [pc, #212]	; (8009eac <recv_udp+0xf0>)
 8009dd8:	f00d f81c 	bl	8016e14 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d105      	bne.n	8009dee <recv_udp+0x32>
 8009de2:	4b30      	ldr	r3, [pc, #192]	; (8009ea4 <recv_udp+0xe8>)
 8009de4:	22e6      	movs	r2, #230	; 0xe6
 8009de6:	4932      	ldr	r1, [pc, #200]	; (8009eb0 <recv_udp+0xf4>)
 8009de8:	4830      	ldr	r0, [pc, #192]	; (8009eac <recv_udp+0xf0>)
 8009dea:	f00d f813 	bl	8016e14 <iprintf>
  conn = (struct netconn *)arg;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d103      	bne.n	8009e00 <recv_udp+0x44>
    pbuf_free(p);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f003 fa3d 	bl	800d278 <pbuf_free>
    return;
 8009dfe:	e04d      	b.n	8009e9c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d005      	beq.n	8009e16 <recv_udp+0x5a>
 8009e0a:	4b26      	ldr	r3, [pc, #152]	; (8009ea4 <recv_udp+0xe8>)
 8009e0c:	22ee      	movs	r2, #238	; 0xee
 8009e0e:	4929      	ldr	r1, [pc, #164]	; (8009eb4 <recv_udp+0xf8>)
 8009e10:	4826      	ldr	r0, [pc, #152]	; (8009eac <recv_udp+0xf0>)
 8009e12:	f00c ffff 	bl	8016e14 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	3310      	adds	r3, #16
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f00c fd36 	bl	801688c <sys_mbox_valid>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d103      	bne.n	8009e2e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f003 fa26 	bl	800d278 <pbuf_free>
    return;
 8009e2c:	e036      	b.n	8009e9c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009e2e:	2006      	movs	r0, #6
 8009e30:	f002 fb08 	bl	800c444 <memp_malloc>
 8009e34:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d103      	bne.n	8009e44 <recv_udp+0x88>
    pbuf_free(p);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f003 fa1b 	bl	800d278 <pbuf_free>
    return;
 8009e42:	e02b      	b.n	8009e9c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d002      	beq.n	8009e5c <recv_udp+0xa0>
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	e000      	b.n	8009e5e <recv_udp+0xa2>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	69ba      	ldr	r2, [r7, #24]
 8009e60:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009e66:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	891b      	ldrh	r3, [r3, #8]
 8009e6c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	3310      	adds	r3, #16
 8009e72:	69b9      	ldr	r1, [r7, #24]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f00c fca7 	bl	80167c8 <sys_mbox_trypost>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d003      	beq.n	8009e88 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009e80:	69b8      	ldr	r0, [r7, #24]
 8009e82:	f001 fafd 	bl	800b480 <netbuf_delete>
    return;
 8009e86:	e009      	b.n	8009e9c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d005      	beq.n	8009e9c <recv_udp+0xe0>
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	8afa      	ldrh	r2, [r7, #22]
 8009e96:	2100      	movs	r1, #0
 8009e98:	69f8      	ldr	r0, [r7, #28]
 8009e9a:	4798      	blx	r3
  }
}
 8009e9c:	3720      	adds	r7, #32
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	08018074 	.word	0x08018074
 8009ea8:	080180ec 	.word	0x080180ec
 8009eac:	080180b8 	.word	0x080180b8
 8009eb0:	08018110 	.word	0x08018110
 8009eb4:	08018130 	.word	0x08018130

08009eb8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d106      	bne.n	8009eda <recv_tcp+0x22>
 8009ecc:	4b36      	ldr	r3, [pc, #216]	; (8009fa8 <recv_tcp+0xf0>)
 8009ece:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009ed2:	4936      	ldr	r1, [pc, #216]	; (8009fac <recv_tcp+0xf4>)
 8009ed4:	4836      	ldr	r0, [pc, #216]	; (8009fb0 <recv_tcp+0xf8>)
 8009ed6:	f00c ff9d 	bl	8016e14 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d106      	bne.n	8009eee <recv_tcp+0x36>
 8009ee0:	4b31      	ldr	r3, [pc, #196]	; (8009fa8 <recv_tcp+0xf0>)
 8009ee2:	f240 122d 	movw	r2, #301	; 0x12d
 8009ee6:	4933      	ldr	r1, [pc, #204]	; (8009fb4 <recv_tcp+0xfc>)
 8009ee8:	4831      	ldr	r0, [pc, #196]	; (8009fb0 <recv_tcp+0xf8>)
 8009eea:	f00c ff93 	bl	8016e14 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009eee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d006      	beq.n	8009f04 <recv_tcp+0x4c>
 8009ef6:	4b2c      	ldr	r3, [pc, #176]	; (8009fa8 <recv_tcp+0xf0>)
 8009ef8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009efc:	492e      	ldr	r1, [pc, #184]	; (8009fb8 <recv_tcp+0x100>)
 8009efe:	482c      	ldr	r0, [pc, #176]	; (8009fb0 <recv_tcp+0xf8>)
 8009f00:	f00c ff88 	bl	8016e14 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d102      	bne.n	8009f14 <recv_tcp+0x5c>
    return ERR_VAL;
 8009f0e:	f06f 0305 	mvn.w	r3, #5
 8009f12:	e045      	b.n	8009fa0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d006      	beq.n	8009f2c <recv_tcp+0x74>
 8009f1e:	4b22      	ldr	r3, [pc, #136]	; (8009fa8 <recv_tcp+0xf0>)
 8009f20:	f240 1235 	movw	r2, #309	; 0x135
 8009f24:	4925      	ldr	r1, [pc, #148]	; (8009fbc <recv_tcp+0x104>)
 8009f26:	4822      	ldr	r0, [pc, #136]	; (8009fb0 <recv_tcp+0xf8>)
 8009f28:	f00c ff74 	bl	8016e14 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	3310      	adds	r3, #16
 8009f30:	4618      	mov	r0, r3
 8009f32:	f00c fcab 	bl	801688c <sys_mbox_valid>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d10d      	bne.n	8009f58 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d008      	beq.n	8009f54 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	891b      	ldrh	r3, [r3, #8]
 8009f46:	4619      	mov	r1, r3
 8009f48:	68b8      	ldr	r0, [r7, #8]
 8009f4a:	f004 f94d 	bl	800e1e8 <tcp_recved>
      pbuf_free(p);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f003 f992 	bl	800d278 <pbuf_free>
    }
    return ERR_OK;
 8009f54:	2300      	movs	r3, #0
 8009f56:	e023      	b.n	8009fa0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d005      	beq.n	8009f6a <recv_tcp+0xb2>
    msg = p;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	891b      	ldrh	r3, [r3, #8]
 8009f66:	83fb      	strh	r3, [r7, #30]
 8009f68:	e003      	b.n	8009f72 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009f6a:	4b15      	ldr	r3, [pc, #84]	; (8009fc0 <recv_tcp+0x108>)
 8009f6c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	3310      	adds	r3, #16
 8009f76:	69b9      	ldr	r1, [r7, #24]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f00c fc25 	bl	80167c8 <sys_mbox_trypost>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009f84:	f04f 33ff 	mov.w	r3, #4294967295
 8009f88:	e00a      	b.n	8009fa0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d005      	beq.n	8009f9e <recv_tcp+0xe6>
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f96:	8bfa      	ldrh	r2, [r7, #30]
 8009f98:	2100      	movs	r1, #0
 8009f9a:	6978      	ldr	r0, [r7, #20]
 8009f9c:	4798      	blx	r3
  }

  return ERR_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3720      	adds	r7, #32
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	08018074 	.word	0x08018074
 8009fac:	08018150 	.word	0x08018150
 8009fb0:	080180b8 	.word	0x080180b8
 8009fb4:	08018174 	.word	0x08018174
 8009fb8:	08018194 	.word	0x08018194
 8009fbc:	080181ac 	.word	0x080181ac
 8009fc0:	0801b22e 	.word	0x0801b22e

08009fc4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d106      	bne.n	8009fe6 <poll_tcp+0x22>
 8009fd8:	4b29      	ldr	r3, [pc, #164]	; (800a080 <poll_tcp+0xbc>)
 8009fda:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009fde:	4929      	ldr	r1, [pc, #164]	; (800a084 <poll_tcp+0xc0>)
 8009fe0:	4829      	ldr	r0, [pc, #164]	; (800a088 <poll_tcp+0xc4>)
 8009fe2:	f00c ff17 	bl	8016e14 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	785b      	ldrb	r3, [r3, #1]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d104      	bne.n	8009ff8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009fee:	2101      	movs	r1, #1
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 ff61 	bl	800aeb8 <lwip_netconn_do_writemore>
 8009ff6:	e016      	b.n	800a026 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	785b      	ldrb	r3, [r3, #1]
 8009ffc:	2b04      	cmp	r3, #4
 8009ffe:	d112      	bne.n	800a026 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6a1b      	ldr	r3, [r3, #32]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00a      	beq.n	800a01e <poll_tcp+0x5a>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6a1b      	ldr	r3, [r3, #32]
 800a00c:	7a5b      	ldrb	r3, [r3, #9]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d005      	beq.n	800a01e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6a1b      	ldr	r3, [r3, #32]
 800a016:	7a5a      	ldrb	r2, [r3, #9]
 800a018:	3a01      	subs	r2, #1
 800a01a:	b2d2      	uxtb	r2, r2
 800a01c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a01e:	2101      	movs	r1, #1
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f000 fbf7 	bl	800a814 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	7f1b      	ldrb	r3, [r3, #28]
 800a02a:	f003 0310 	and.w	r3, r3, #16
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d021      	beq.n	800a076 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d01d      	beq.n	800a076 <poll_tcp+0xb2>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a042:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a046:	d316      	bcc.n	800a076 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a050:	2b04      	cmp	r3, #4
 800a052:	d810      	bhi.n	800a076 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	7f1b      	ldrb	r3, [r3, #28]
 800a058:	f023 0310 	bic.w	r3, r3, #16
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a066:	2b00      	cmp	r3, #0
 800a068:	d005      	beq.n	800a076 <poll_tcp+0xb2>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06e:	2200      	movs	r2, #0
 800a070:	2102      	movs	r1, #2
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	08018074 	.word	0x08018074
 800a084:	080181cc 	.word	0x080181cc
 800a088:	080180b8 	.word	0x080180b8

0800a08c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	4613      	mov	r3, r2
 800a098:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d106      	bne.n	800a0b2 <sent_tcp+0x26>
 800a0a4:	4b20      	ldr	r3, [pc, #128]	; (800a128 <sent_tcp+0x9c>)
 800a0a6:	f240 1293 	movw	r2, #403	; 0x193
 800a0aa:	4920      	ldr	r1, [pc, #128]	; (800a12c <sent_tcp+0xa0>)
 800a0ac:	4820      	ldr	r0, [pc, #128]	; (800a130 <sent_tcp+0xa4>)
 800a0ae:	f00c feb1 	bl	8016e14 <iprintf>

  if (conn) {
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d032      	beq.n	800a11e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	785b      	ldrb	r3, [r3, #1]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d104      	bne.n	800a0ca <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a0c0:	2101      	movs	r1, #1
 800a0c2:	6978      	ldr	r0, [r7, #20]
 800a0c4:	f000 fef8 	bl	800aeb8 <lwip_netconn_do_writemore>
 800a0c8:	e007      	b.n	800a0da <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	785b      	ldrb	r3, [r3, #1]
 800a0ce:	2b04      	cmp	r3, #4
 800a0d0:	d103      	bne.n	800a0da <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a0d2:	2101      	movs	r1, #1
 800a0d4:	6978      	ldr	r0, [r7, #20]
 800a0d6:	f000 fb9d 	bl	800a814 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d01d      	beq.n	800a11e <sent_tcp+0x92>
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0ea:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a0ee:	d316      	bcc.n	800a11e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a0f8:	2b04      	cmp	r3, #4
 800a0fa:	d810      	bhi.n	800a11e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	7f1b      	ldrb	r3, [r3, #28]
 800a100:	f023 0310 	bic.w	r3, r3, #16
 800a104:	b2da      	uxtb	r2, r3
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d005      	beq.n	800a11e <sent_tcp+0x92>
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a116:	88fa      	ldrh	r2, [r7, #6]
 800a118:	2102      	movs	r1, #2
 800a11a:	6978      	ldr	r0, [r7, #20]
 800a11c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3718      	adds	r7, #24
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	08018074 	.word	0x08018074
 800a12c:	080181cc 	.word	0x080181cc
 800a130:	080180b8 	.word	0x080180b8

0800a134 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b088      	sub	sp, #32
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d106      	bne.n	800a158 <err_tcp+0x24>
 800a14a:	4b5f      	ldr	r3, [pc, #380]	; (800a2c8 <err_tcp+0x194>)
 800a14c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a150:	495e      	ldr	r1, [pc, #376]	; (800a2cc <err_tcp+0x198>)
 800a152:	485f      	ldr	r0, [pc, #380]	; (800a2d0 <err_tcp+0x19c>)
 800a154:	f00c fe5e 	bl	8016e14 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a158:	f00c fca2 	bl	8016aa0 <sys_arch_protect>
 800a15c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	2200      	movs	r2, #0
 800a162:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	78fa      	ldrb	r2, [r7, #3]
 800a168:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	7f1b      	ldrb	r3, [r3, #28]
 800a16e:	f043 0301 	orr.w	r3, r3, #1
 800a172:	b2da      	uxtb	r2, r3
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	785b      	ldrb	r3, [r3, #1]
 800a17c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	2200      	movs	r2, #0
 800a182:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a184:	69b8      	ldr	r0, [r7, #24]
 800a186:	f00c fc99 	bl	8016abc <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d005      	beq.n	800a19e <err_tcp+0x6a>
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	2200      	movs	r2, #0
 800a198:	2104      	movs	r1, #4
 800a19a:	69f8      	ldr	r0, [r7, #28]
 800a19c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d005      	beq.n	800a1b2 <err_tcp+0x7e>
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	69f8      	ldr	r0, [r7, #28]
 800a1b0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d005      	beq.n	800a1c6 <err_tcp+0x92>
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2102      	movs	r1, #2
 800a1c2:	69f8      	ldr	r0, [r7, #28]
 800a1c4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a1c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7ff fd86 	bl	8009cdc <lwip_netconn_err_to_msg>
 800a1d0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	3310      	adds	r3, #16
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f00c fb58 	bl	801688c <sys_mbox_valid>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d005      	beq.n	800a1ee <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	3310      	adds	r3, #16
 800a1e6:	6939      	ldr	r1, [r7, #16]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f00c faed 	bl	80167c8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	3314      	adds	r3, #20
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f00c fb4a 	bl	801688c <sys_mbox_valid>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d005      	beq.n	800a20a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	3314      	adds	r3, #20
 800a202:	6939      	ldr	r1, [r7, #16]
 800a204:	4618      	mov	r0, r3
 800a206:	f00c fadf 	bl	80167c8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a20a:	7dfb      	ldrb	r3, [r7, #23]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d005      	beq.n	800a21c <err_tcp+0xe8>
 800a210:	7dfb      	ldrb	r3, [r7, #23]
 800a212:	2b04      	cmp	r3, #4
 800a214:	d002      	beq.n	800a21c <err_tcp+0xe8>
 800a216:	7dfb      	ldrb	r3, [r7, #23]
 800a218:	2b03      	cmp	r3, #3
 800a21a:	d143      	bne.n	800a2a4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	7f1b      	ldrb	r3, [r3, #28]
 800a220:	f003 0304 	and.w	r3, r3, #4
 800a224:	2b00      	cmp	r3, #0
 800a226:	bf14      	ite	ne
 800a228:	2301      	movne	r3, #1
 800a22a:	2300      	moveq	r3, #0
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	7f1b      	ldrb	r3, [r3, #28]
 800a234:	f023 0304 	bic.w	r3, r3, #4
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d13b      	bne.n	800a2bc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	6a1b      	ldr	r3, [r3, #32]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d106      	bne.n	800a25a <err_tcp+0x126>
 800a24c:	4b1e      	ldr	r3, [pc, #120]	; (800a2c8 <err_tcp+0x194>)
 800a24e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a252:	4920      	ldr	r1, [pc, #128]	; (800a2d4 <err_tcp+0x1a0>)
 800a254:	481e      	ldr	r0, [pc, #120]	; (800a2d0 <err_tcp+0x19c>)
 800a256:	f00c fddd 	bl	8016e14 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a25a:	7dfb      	ldrb	r3, [r7, #23]
 800a25c:	2b04      	cmp	r3, #4
 800a25e:	d104      	bne.n	800a26a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	6a1b      	ldr	r3, [r3, #32]
 800a264:	2200      	movs	r2, #0
 800a266:	711a      	strb	r2, [r3, #4]
 800a268:	e003      	b.n	800a272 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	78fa      	ldrb	r2, [r7, #3]
 800a270:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	330c      	adds	r3, #12
 800a27a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a27c:	68b8      	ldr	r0, [r7, #8]
 800a27e:	f00c fb93 	bl	80169a8 <sys_sem_valid>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d106      	bne.n	800a296 <err_tcp+0x162>
 800a288:	4b0f      	ldr	r3, [pc, #60]	; (800a2c8 <err_tcp+0x194>)
 800a28a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a28e:	4912      	ldr	r1, [pc, #72]	; (800a2d8 <err_tcp+0x1a4>)
 800a290:	480f      	ldr	r0, [pc, #60]	; (800a2d0 <err_tcp+0x19c>)
 800a292:	f00c fdbf 	bl	8016e14 <iprintf>
      conn->current_msg = NULL;
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	2200      	movs	r2, #0
 800a29a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a29c:	68b8      	ldr	r0, [r7, #8]
 800a29e:	f00c fb69 	bl	8016974 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a2a2:	e00b      	b.n	800a2bc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	6a1b      	ldr	r3, [r3, #32]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d008      	beq.n	800a2be <err_tcp+0x18a>
 800a2ac:	4b06      	ldr	r3, [pc, #24]	; (800a2c8 <err_tcp+0x194>)
 800a2ae:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a2b2:	490a      	ldr	r1, [pc, #40]	; (800a2dc <err_tcp+0x1a8>)
 800a2b4:	4806      	ldr	r0, [pc, #24]	; (800a2d0 <err_tcp+0x19c>)
 800a2b6:	f00c fdad 	bl	8016e14 <iprintf>
  }
}
 800a2ba:	e000      	b.n	800a2be <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a2bc:	bf00      	nop
}
 800a2be:	bf00      	nop
 800a2c0:	3720      	adds	r7, #32
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	08018074 	.word	0x08018074
 800a2cc:	080181cc 	.word	0x080181cc
 800a2d0:	080180b8 	.word	0x080180b8
 800a2d4:	080181dc 	.word	0x080181dc
 800a2d8:	080181f8 	.word	0x080181f8
 800a2dc:	08018214 	.word	0x08018214

0800a2e0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f004 fe3f 	bl	800ef74 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a2f6:	490a      	ldr	r1, [pc, #40]	; (800a320 <setup_tcp+0x40>)
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f004 fe4d 	bl	800ef98 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a2fe:	4909      	ldr	r1, [pc, #36]	; (800a324 <setup_tcp+0x44>)
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f004 fe6b 	bl	800efdc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a306:	2202      	movs	r2, #2
 800a308:	4907      	ldr	r1, [pc, #28]	; (800a328 <setup_tcp+0x48>)
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f004 fec2 	bl	800f094 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a310:	4906      	ldr	r1, [pc, #24]	; (800a32c <setup_tcp+0x4c>)
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f004 fe84 	bl	800f020 <tcp_err>
}
 800a318:	bf00      	nop
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	08009eb9 	.word	0x08009eb9
 800a324:	0800a08d 	.word	0x0800a08d
 800a328:	08009fc5 	.word	0x08009fc5
 800a32c:	0800a135 	.word	0x0800a135

0800a330 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a330:	b590      	push	{r4, r7, lr}
 800a332:	b089      	sub	sp, #36	; 0x24
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	4613      	mov	r3, r2
 800a33c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d102      	bne.n	800a34e <accept_function+0x1e>
    return ERR_VAL;
 800a348:	f06f 0305 	mvn.w	r3, #5
 800a34c:	e0a1      	b.n	800a492 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	3314      	adds	r3, #20
 800a352:	4618      	mov	r0, r3
 800a354:	f00c fa9a 	bl	801688c <sys_mbox_valid>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d102      	bne.n	800a364 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800a35e:	f06f 0305 	mvn.w	r3, #5
 800a362:	e096      	b.n	800a492 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d11b      	bne.n	800a3a2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	f103 0414 	add.w	r4, r3, #20
 800a370:	f06f 000c 	mvn.w	r0, #12
 800a374:	f7ff fcb2 	bl	8009cdc <lwip_netconn_err_to_msg>
 800a378:	4603      	mov	r3, r0
 800a37a:	4619      	mov	r1, r3
 800a37c:	4620      	mov	r0, r4
 800a37e:	f00c fa23 	bl	80167c8 <sys_mbox_trypost>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d109      	bne.n	800a39c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d005      	beq.n	800a39c <accept_function+0x6c>
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a394:	2200      	movs	r2, #0
 800a396:	2100      	movs	r1, #0
 800a398:	69f8      	ldr	r0, [r7, #28]
 800a39a:	4798      	blx	r3
    }
    return ERR_VAL;
 800a39c:	f06f 0305 	mvn.w	r3, #5
 800a3a0:	e077      	b.n	800a492 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a3a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d006      	beq.n	800a3b8 <accept_function+0x88>
 800a3aa:	4b3c      	ldr	r3, [pc, #240]	; (800a49c <accept_function+0x16c>)
 800a3ac:	f240 222a 	movw	r2, #554	; 0x22a
 800a3b0:	493b      	ldr	r1, [pc, #236]	; (800a4a0 <accept_function+0x170>)
 800a3b2:	483c      	ldr	r0, [pc, #240]	; (800a4a4 <accept_function+0x174>)
 800a3b4:	f00c fd2e 	bl	8016e14 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	781a      	ldrb	r2, [r3, #0]
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	f000 f8f0 	bl	800a5a8 <netconn_alloc>
 800a3c8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d11b      	bne.n	800a408 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	f103 0414 	add.w	r4, r3, #20
 800a3d6:	f06f 000c 	mvn.w	r0, #12
 800a3da:	f7ff fc7f 	bl	8009cdc <lwip_netconn_err_to_msg>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f00c f9f0 	bl	80167c8 <sys_mbox_trypost>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d109      	bne.n	800a402 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d005      	beq.n	800a402 <accept_function+0xd2>
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	69f8      	ldr	r0, [r7, #28]
 800a400:	4798      	blx	r3
    }
    return ERR_MEM;
 800a402:	f04f 33ff 	mov.w	r3, #4294967295
 800a406:	e044      	b.n	800a492 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a40e:	69b8      	ldr	r0, [r7, #24]
 800a410:	f7ff ff66 	bl	800a2e0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	3314      	adds	r3, #20
 800a418:	69b9      	ldr	r1, [r7, #24]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f00c f9d4 	bl	80167c8 <sys_mbox_trypost>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d02a      	beq.n	800a47c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a42c:	2100      	movs	r1, #0
 800a42e:	6978      	ldr	r0, [r7, #20]
 800a430:	f004 fda0 	bl	800ef74 <tcp_arg>
    tcp_recv(pcb, NULL);
 800a434:	2100      	movs	r1, #0
 800a436:	6978      	ldr	r0, [r7, #20]
 800a438:	f004 fdae 	bl	800ef98 <tcp_recv>
    tcp_sent(pcb, NULL);
 800a43c:	2100      	movs	r1, #0
 800a43e:	6978      	ldr	r0, [r7, #20]
 800a440:	f004 fdcc 	bl	800efdc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a444:	2200      	movs	r2, #0
 800a446:	2100      	movs	r1, #0
 800a448:	6978      	ldr	r0, [r7, #20]
 800a44a:	f004 fe23 	bl	800f094 <tcp_poll>
    tcp_err(pcb, NULL);
 800a44e:	2100      	movs	r1, #0
 800a450:	6978      	ldr	r0, [r7, #20]
 800a452:	f004 fde5 	bl	800f020 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	2200      	movs	r2, #0
 800a45a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	3310      	adds	r3, #16
 800a460:	4618      	mov	r0, r3
 800a462:	f00c f99f 	bl	80167a4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	3310      	adds	r3, #16
 800a46a:	4618      	mov	r0, r3
 800a46c:	f00c fa1f 	bl	80168ae <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a470:	69b8      	ldr	r0, [r7, #24]
 800a472:	f000 f907 	bl	800a684 <netconn_free>
    return ERR_MEM;
 800a476:	f04f 33ff 	mov.w	r3, #4294967295
 800a47a:	e00a      	b.n	800a492 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	2b00      	cmp	r3, #0
 800a482:	d005      	beq.n	800a490 <accept_function+0x160>
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	2200      	movs	r2, #0
 800a48a:	2100      	movs	r1, #0
 800a48c:	69f8      	ldr	r0, [r7, #28]
 800a48e:	4798      	blx	r3
  }

  return ERR_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3724      	adds	r7, #36	; 0x24
 800a496:	46bd      	mov	sp, r7
 800a498:	bd90      	pop	{r4, r7, pc}
 800a49a:	bf00      	nop
 800a49c:	08018074 	.word	0x08018074
 800a4a0:	08018230 	.word	0x08018230
 800a4a4:	080180b8 	.word	0x080180b8

0800a4a8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a4a8:	b590      	push	{r4, r7, lr}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d006      	beq.n	800a4cc <pcb_new+0x24>
 800a4be:	4b2b      	ldr	r3, [pc, #172]	; (800a56c <pcb_new+0xc4>)
 800a4c0:	f240 2265 	movw	r2, #613	; 0x265
 800a4c4:	492a      	ldr	r1, [pc, #168]	; (800a570 <pcb_new+0xc8>)
 800a4c6:	482b      	ldr	r0, [pc, #172]	; (800a574 <pcb_new+0xcc>)
 800a4c8:	f00c fca4 	bl	8016e14 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4d6:	2b10      	cmp	r3, #16
 800a4d8:	d022      	beq.n	800a520 <pcb_new+0x78>
 800a4da:	2b20      	cmp	r3, #32
 800a4dc:	d133      	bne.n	800a546 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681c      	ldr	r4, [r3, #0]
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f009 fe20 	bl	801412a <udp_new_ip_type>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d02a      	beq.n	800a54e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	2b22      	cmp	r3, #34	; 0x22
 800a500:	d104      	bne.n	800a50c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6858      	ldr	r0, [r3, #4]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	4917      	ldr	r1, [pc, #92]	; (800a578 <pcb_new+0xd0>)
 800a51a:	f009 fd8d 	bl	8014038 <udp_recv>
      }
      break;
 800a51e:	e016      	b.n	800a54e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681c      	ldr	r4, [r3, #0]
 800a524:	7bfb      	ldrb	r3, [r7, #15]
 800a526:	4618      	mov	r0, r3
 800a528:	f004 fd16 	bl	800ef58 <tcp_new_ip_type>
 800a52c:	4603      	mov	r3, r0
 800a52e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00b      	beq.n	800a552 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4618      	mov	r0, r3
 800a540:	f7ff fece 	bl	800a2e0 <setup_tcp>
      }
      break;
 800a544:	e005      	b.n	800a552 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	22fa      	movs	r2, #250	; 0xfa
 800a54a:	711a      	strb	r2, [r3, #4]
      return;
 800a54c:	e00a      	b.n	800a564 <pcb_new+0xbc>
      break;
 800a54e:	bf00      	nop
 800a550:	e000      	b.n	800a554 <pcb_new+0xac>
      break;
 800a552:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d102      	bne.n	800a564 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	22ff      	movs	r2, #255	; 0xff
 800a562:	711a      	strb	r2, [r3, #4]
  }
}
 800a564:	3714      	adds	r7, #20
 800a566:	46bd      	mov	sp, r7
 800a568:	bd90      	pop	{r4, r7, pc}
 800a56a:	bf00      	nop
 800a56c:	08018074 	.word	0x08018074
 800a570:	08018258 	.word	0x08018258
 800a574:	080180b8 	.word	0x080180b8
 800a578:	08009dbd 	.word	0x08009dbd

0800a57c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d102      	bne.n	800a59e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f7ff ff85 	bl	800a4a8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a59e:	bf00      	nop
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
	...

0800a5a8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	6039      	str	r1, [r7, #0]
 800a5b2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a5b8:	2007      	movs	r0, #7
 800a5ba:	f001 ff43 	bl	800c444 <memp_malloc>
 800a5be:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <netconn_alloc+0x22>
    return NULL;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	e052      	b.n	800a670 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	79fa      	ldrb	r2, [r7, #7]
 800a5d4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5e2:	2b10      	cmp	r3, #16
 800a5e4:	d004      	beq.n	800a5f0 <netconn_alloc+0x48>
 800a5e6:	2b20      	cmp	r3, #32
 800a5e8:	d105      	bne.n	800a5f6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a5ea:	2306      	movs	r3, #6
 800a5ec:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a5ee:	e00a      	b.n	800a606 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a5f0:	2306      	movs	r3, #6
 800a5f2:	617b      	str	r3, [r7, #20]
      break;
 800a5f4:	e007      	b.n	800a606 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a5f6:	4b20      	ldr	r3, [pc, #128]	; (800a678 <netconn_alloc+0xd0>)
 800a5f8:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a5fc:	491f      	ldr	r1, [pc, #124]	; (800a67c <netconn_alloc+0xd4>)
 800a5fe:	4820      	ldr	r0, [pc, #128]	; (800a680 <netconn_alloc+0xd8>)
 800a600:	f00c fc08 	bl	8016e14 <iprintf>
      goto free_and_return;
 800a604:	e02f      	b.n	800a666 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3310      	adds	r3, #16
 800a60a:	6979      	ldr	r1, [r7, #20]
 800a60c:	4618      	mov	r0, r3
 800a60e:	f00c f8af 	bl	8016770 <sys_mbox_new>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d125      	bne.n	800a664 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	330c      	adds	r3, #12
 800a61c:	2100      	movs	r1, #0
 800a61e:	4618      	mov	r0, r3
 800a620:	f00c f952 	bl	80168c8 <sys_sem_new>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d005      	beq.n	800a636 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	3310      	adds	r3, #16
 800a62e:	4618      	mov	r0, r3
 800a630:	f00c f8b8 	bl	80167a4 <sys_mbox_free>
    goto free_and_return;
 800a634:	e017      	b.n	800a666 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3314      	adds	r3, #20
 800a63a:	4618      	mov	r0, r3
 800a63c:	f00c f937 	bl	80168ae <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f04f 32ff 	mov.w	r2, #4294967295
 800a64c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	7cfa      	ldrb	r2, [r7, #19]
 800a65e:	771a      	strb	r2, [r3, #28]
  return conn;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	e005      	b.n	800a670 <netconn_alloc+0xc8>
    goto free_and_return;
 800a664:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a666:	68f9      	ldr	r1, [r7, #12]
 800a668:	2007      	movs	r0, #7
 800a66a:	f001 ff61 	bl	800c530 <memp_free>
  return NULL;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3718      	adds	r7, #24
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	08018074 	.word	0x08018074
 800a67c:	08018278 	.word	0x08018278
 800a680:	080180b8 	.word	0x080180b8

0800a684 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d006      	beq.n	800a6a2 <netconn_free+0x1e>
 800a694:	4b1b      	ldr	r3, [pc, #108]	; (800a704 <netconn_free+0x80>)
 800a696:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a69a:	491b      	ldr	r1, [pc, #108]	; (800a708 <netconn_free+0x84>)
 800a69c:	481b      	ldr	r0, [pc, #108]	; (800a70c <netconn_free+0x88>)
 800a69e:	f00c fbb9 	bl	8016e14 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3310      	adds	r3, #16
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f00c f8f0 	bl	801688c <sys_mbox_valid>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d006      	beq.n	800a6c0 <netconn_free+0x3c>
 800a6b2:	4b14      	ldr	r3, [pc, #80]	; (800a704 <netconn_free+0x80>)
 800a6b4:	f240 3223 	movw	r2, #803	; 0x323
 800a6b8:	4915      	ldr	r1, [pc, #84]	; (800a710 <netconn_free+0x8c>)
 800a6ba:	4814      	ldr	r0, [pc, #80]	; (800a70c <netconn_free+0x88>)
 800a6bc:	f00c fbaa 	bl	8016e14 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3314      	adds	r3, #20
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f00c f8e1 	bl	801688c <sys_mbox_valid>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d006      	beq.n	800a6de <netconn_free+0x5a>
 800a6d0:	4b0c      	ldr	r3, [pc, #48]	; (800a704 <netconn_free+0x80>)
 800a6d2:	f240 3226 	movw	r2, #806	; 0x326
 800a6d6:	490f      	ldr	r1, [pc, #60]	; (800a714 <netconn_free+0x90>)
 800a6d8:	480c      	ldr	r0, [pc, #48]	; (800a70c <netconn_free+0x88>)
 800a6da:	f00c fb9b 	bl	8016e14 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	330c      	adds	r3, #12
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f00c f953 	bl	801698e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	330c      	adds	r3, #12
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f00c f96c 	bl	80169ca <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a6f2:	6879      	ldr	r1, [r7, #4]
 800a6f4:	2007      	movs	r0, #7
 800a6f6:	f001 ff1b 	bl	800c530 <memp_free>
}
 800a6fa:	bf00      	nop
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	08018074 	.word	0x08018074
 800a708:	080182a0 	.word	0x080182a0
 800a70c:	080180b8 	.word	0x080180b8
 800a710:	080182d0 	.word	0x080182d0
 800a714:	0801830c 	.word	0x0801830c

0800a718 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b086      	sub	sp, #24
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3310      	adds	r3, #16
 800a724:	4618      	mov	r0, r3
 800a726:	f00c f8b1 	bl	801688c <sys_mbox_valid>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d02f      	beq.n	800a790 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a730:	e018      	b.n	800a764 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a73a:	2b10      	cmp	r3, #16
 800a73c:	d10e      	bne.n	800a75c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	f107 020f 	add.w	r2, r7, #15
 800a744:	4611      	mov	r1, r2
 800a746:	4618      	mov	r0, r3
 800a748:	f7ff fafe 	bl	8009d48 <lwip_netconn_is_err_msg>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d108      	bne.n	800a764 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	4618      	mov	r0, r3
 800a756:	f002 fd8f 	bl	800d278 <pbuf_free>
 800a75a:	e003      	b.n	800a764 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 fe8e 	bl	800b480 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	3310      	adds	r3, #16
 800a768:	f107 0210 	add.w	r2, r7, #16
 800a76c:	4611      	mov	r1, r2
 800a76e:	4618      	mov	r0, r3
 800a770:	f00c f875 	bl	801685e <sys_arch_mbox_tryfetch>
 800a774:	4603      	mov	r3, r0
 800a776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77a:	d1da      	bne.n	800a732 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	3310      	adds	r3, #16
 800a780:	4618      	mov	r0, r3
 800a782:	f00c f80f 	bl	80167a4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	3310      	adds	r3, #16
 800a78a:	4618      	mov	r0, r3
 800a78c:	f00c f88f 	bl	80168ae <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	3314      	adds	r3, #20
 800a794:	4618      	mov	r0, r3
 800a796:	f00c f879 	bl	801688c <sys_mbox_valid>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d034      	beq.n	800a80a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a7a0:	e01d      	b.n	800a7de <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f107 020e 	add.w	r2, r7, #14
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7ff facc 	bl	8009d48 <lwip_netconn_is_err_msg>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d113      	bne.n	800a7de <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a7ba:	6978      	ldr	r0, [r7, #20]
 800a7bc:	f7ff ffac 	bl	800a718 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d007      	beq.n	800a7d8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f003 fb43 	bl	800de58 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a7d8:	6978      	ldr	r0, [r7, #20]
 800a7da:	f7ff ff53 	bl	800a684 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	3314      	adds	r3, #20
 800a7e2:	f107 0210 	add.w	r2, r7, #16
 800a7e6:	4611      	mov	r1, r2
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f00c f838 	bl	801685e <sys_arch_mbox_tryfetch>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f4:	d1d5      	bne.n	800a7a2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	3314      	adds	r3, #20
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f00b ffd2 	bl	80167a4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3314      	adds	r3, #20
 800a804:	4618      	mov	r0, r3
 800a806:	f00c f852 	bl	80168ae <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a80a:	bf00      	nop
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
	...

0800a814 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	460b      	mov	r3, r1
 800a81e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d106      	bne.n	800a838 <lwip_netconn_do_close_internal+0x24>
 800a82a:	4ba1      	ldr	r3, [pc, #644]	; (800aab0 <lwip_netconn_do_close_internal+0x29c>)
 800a82c:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a830:	49a0      	ldr	r1, [pc, #640]	; (800aab4 <lwip_netconn_do_close_internal+0x2a0>)
 800a832:	48a1      	ldr	r0, [pc, #644]	; (800aab8 <lwip_netconn_do_close_internal+0x2a4>)
 800a834:	f00c faee 	bl	8016e14 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a840:	2b10      	cmp	r3, #16
 800a842:	d006      	beq.n	800a852 <lwip_netconn_do_close_internal+0x3e>
 800a844:	4b9a      	ldr	r3, [pc, #616]	; (800aab0 <lwip_netconn_do_close_internal+0x29c>)
 800a846:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a84a:	499c      	ldr	r1, [pc, #624]	; (800aabc <lwip_netconn_do_close_internal+0x2a8>)
 800a84c:	489a      	ldr	r0, [pc, #616]	; (800aab8 <lwip_netconn_do_close_internal+0x2a4>)
 800a84e:	f00c fae1 	bl	8016e14 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	785b      	ldrb	r3, [r3, #1]
 800a856:	2b04      	cmp	r3, #4
 800a858:	d006      	beq.n	800a868 <lwip_netconn_do_close_internal+0x54>
 800a85a:	4b95      	ldr	r3, [pc, #596]	; (800aab0 <lwip_netconn_do_close_internal+0x29c>)
 800a85c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a860:	4997      	ldr	r1, [pc, #604]	; (800aac0 <lwip_netconn_do_close_internal+0x2ac>)
 800a862:	4895      	ldr	r0, [pc, #596]	; (800aab8 <lwip_netconn_do_close_internal+0x2a4>)
 800a864:	f00c fad6 	bl	8016e14 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d106      	bne.n	800a87e <lwip_netconn_do_close_internal+0x6a>
 800a870:	4b8f      	ldr	r3, [pc, #572]	; (800aab0 <lwip_netconn_do_close_internal+0x29c>)
 800a872:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a876:	4993      	ldr	r1, [pc, #588]	; (800aac4 <lwip_netconn_do_close_internal+0x2b0>)
 800a878:	488f      	ldr	r0, [pc, #572]	; (800aab8 <lwip_netconn_do_close_internal+0x2a4>)
 800a87a:	f00c facb 	bl	8016e14 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d106      	bne.n	800a894 <lwip_netconn_do_close_internal+0x80>
 800a886:	4b8a      	ldr	r3, [pc, #552]	; (800aab0 <lwip_netconn_do_close_internal+0x29c>)
 800a888:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a88c:	498e      	ldr	r1, [pc, #568]	; (800aac8 <lwip_netconn_do_close_internal+0x2b4>)
 800a88e:	488a      	ldr	r0, [pc, #552]	; (800aab8 <lwip_netconn_do_close_internal+0x2a4>)
 800a890:	f00c fac0 	bl	8016e14 <iprintf>

  tpcb = conn->pcb.tcp;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	7a1b      	ldrb	r3, [r3, #8]
 800a8a0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
 800a8a4:	f003 0301 	and.w	r3, r3, #1
 800a8a8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
 800a8ac:	f003 0302 	and.w	r3, r3, #2
 800a8b0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a8b2:	7bfb      	ldrb	r3, [r7, #15]
 800a8b4:	2b03      	cmp	r3, #3
 800a8b6:	d102      	bne.n	800a8be <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	75bb      	strb	r3, [r7, #22]
 800a8bc:	e01f      	b.n	800a8fe <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a8be:	7bbb      	ldrb	r3, [r7, #14]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00e      	beq.n	800a8e2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a8c8:	2b05      	cmp	r3, #5
 800a8ca:	d007      	beq.n	800a8dc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a8d0:	2b06      	cmp	r3, #6
 800a8d2:	d003      	beq.n	800a8dc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a8d8:	2b08      	cmp	r3, #8
 800a8da:	d102      	bne.n	800a8e2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	75bb      	strb	r3, [r7, #22]
 800a8e0:	e00d      	b.n	800a8fe <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a8e2:	7b7b      	ldrb	r3, [r7, #13]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d008      	beq.n	800a8fa <lwip_netconn_do_close_internal+0xe6>
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	8b5b      	ldrh	r3, [r3, #26]
 800a8ec:	f003 0310 	and.w	r3, r3, #16
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d002      	beq.n	800a8fa <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	75bb      	strb	r3, [r7, #22]
 800a8f8:	e001      	b.n	800a8fe <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a8fe:	7dbb      	ldrb	r3, [r7, #22]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d003      	beq.n	800a90c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a904:	2100      	movs	r1, #0
 800a906:	6938      	ldr	r0, [r7, #16]
 800a908:	f004 fb34 	bl	800ef74 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	7d1b      	ldrb	r3, [r3, #20]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d104      	bne.n	800a91e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a914:	2100      	movs	r1, #0
 800a916:	6938      	ldr	r0, [r7, #16]
 800a918:	f004 fba4 	bl	800f064 <tcp_accept>
 800a91c:	e01d      	b.n	800a95a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a91e:	7bbb      	ldrb	r3, [r7, #14]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d007      	beq.n	800a934 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a924:	2100      	movs	r1, #0
 800a926:	6938      	ldr	r0, [r7, #16]
 800a928:	f004 fb36 	bl	800ef98 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a92c:	2100      	movs	r1, #0
 800a92e:	6938      	ldr	r0, [r7, #16]
 800a930:	f004 fb98 	bl	800f064 <tcp_accept>
    }
    if (shut_tx) {
 800a934:	7b7b      	ldrb	r3, [r7, #13]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d003      	beq.n	800a942 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a93a:	2100      	movs	r1, #0
 800a93c:	6938      	ldr	r0, [r7, #16]
 800a93e:	f004 fb4d 	bl	800efdc <tcp_sent>
    }
    if (shut_close) {
 800a942:	7dbb      	ldrb	r3, [r7, #22]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d008      	beq.n	800a95a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a948:	2200      	movs	r2, #0
 800a94a:	2100      	movs	r1, #0
 800a94c:	6938      	ldr	r0, [r7, #16]
 800a94e:	f004 fba1 	bl	800f094 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a952:	2100      	movs	r1, #0
 800a954:	6938      	ldr	r0, [r7, #16]
 800a956:	f004 fb63 	bl	800f020 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a95a:	7dbb      	ldrb	r3, [r7, #22]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d005      	beq.n	800a96c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a960:	6938      	ldr	r0, [r7, #16]
 800a962:	f003 f933 	bl	800dbcc <tcp_close>
 800a966:	4603      	mov	r3, r0
 800a968:	75fb      	strb	r3, [r7, #23]
 800a96a:	e007      	b.n	800a97c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a96c:	7bbb      	ldrb	r3, [r7, #14]
 800a96e:	7b7a      	ldrb	r2, [r7, #13]
 800a970:	4619      	mov	r1, r3
 800a972:	6938      	ldr	r0, [r7, #16]
 800a974:	f003 f956 	bl	800dc24 <tcp_shutdown>
 800a978:	4603      	mov	r3, r0
 800a97a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a97c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d102      	bne.n	800a98a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a984:	2301      	movs	r3, #1
 800a986:	757b      	strb	r3, [r7, #21]
 800a988:	e016      	b.n	800a9b8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a98a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a992:	d10f      	bne.n	800a9b4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a1b      	ldr	r3, [r3, #32]
 800a998:	7a5b      	ldrb	r3, [r3, #9]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10c      	bne.n	800a9b8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a9a2:	7dbb      	ldrb	r3, [r7, #22]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d007      	beq.n	800a9b8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a9a8:	6938      	ldr	r0, [r7, #16]
 800a9aa:	f003 fa55 	bl	800de58 <tcp_abort>
          err = ERR_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	75fb      	strb	r3, [r7, #23]
 800a9b2:	e001      	b.n	800a9b8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a9b8:	7d7b      	ldrb	r3, [r7, #21]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d044      	beq.n	800aa48 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	330c      	adds	r3, #12
 800a9c6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a1b      	ldr	r3, [r3, #32]
 800a9cc:	7dfa      	ldrb	r2, [r7, #23]
 800a9ce:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a9dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d129      	bne.n	800aa38 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a9e4:	7dbb      	ldrb	r3, [r7, #22]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00c      	beq.n	800aa04 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d005      	beq.n	800aa04 <lwip_netconn_do_close_internal+0x1f0>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	2104      	movs	r1, #4
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	4798      	blx	r3
      }
      if (shut_rx) {
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d009      	beq.n	800aa1e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d005      	beq.n	800aa1e <lwip_netconn_do_close_internal+0x20a>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	2200      	movs	r2, #0
 800aa18:	2100      	movs	r1, #0
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	4798      	blx	r3
      }
      if (shut_tx) {
 800aa1e:	7b7b      	ldrb	r3, [r7, #13]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d009      	beq.n	800aa38 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d005      	beq.n	800aa38 <lwip_netconn_do_close_internal+0x224>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	2200      	movs	r2, #0
 800aa32:	2102      	movs	r1, #2
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800aa38:	78fb      	ldrb	r3, [r7, #3]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800aa3e:	68b8      	ldr	r0, [r7, #8]
 800aa40:	f00b ff98 	bl	8016974 <sys_sem_signal>
    }
    return ERR_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	e02e      	b.n	800aaa6 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800aa48:	7d7b      	ldrb	r3, [r7, #21]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d11e      	bne.n	800aa8c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	7d1b      	ldrb	r3, [r3, #20]
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d106      	bne.n	800aa64 <lwip_netconn_do_close_internal+0x250>
 800aa56:	4b16      	ldr	r3, [pc, #88]	; (800aab0 <lwip_netconn_do_close_internal+0x29c>)
 800aa58:	f240 4241 	movw	r2, #1089	; 0x441
 800aa5c:	491b      	ldr	r1, [pc, #108]	; (800aacc <lwip_netconn_do_close_internal+0x2b8>)
 800aa5e:	4816      	ldr	r0, [pc, #88]	; (800aab8 <lwip_netconn_do_close_internal+0x2a4>)
 800aa60:	f00c f9d8 	bl	8016e14 <iprintf>
    if (shut_tx) {
 800aa64:	7b7b      	ldrb	r3, [r7, #13]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d003      	beq.n	800aa72 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800aa6a:	4919      	ldr	r1, [pc, #100]	; (800aad0 <lwip_netconn_do_close_internal+0x2bc>)
 800aa6c:	6938      	ldr	r0, [r7, #16]
 800aa6e:	f004 fab5 	bl	800efdc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800aa72:	2201      	movs	r2, #1
 800aa74:	4917      	ldr	r1, [pc, #92]	; (800aad4 <lwip_netconn_do_close_internal+0x2c0>)
 800aa76:	6938      	ldr	r0, [r7, #16]
 800aa78:	f004 fb0c 	bl	800f094 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800aa7c:	4916      	ldr	r1, [pc, #88]	; (800aad8 <lwip_netconn_do_close_internal+0x2c4>)
 800aa7e:	6938      	ldr	r0, [r7, #16]
 800aa80:	f004 face 	bl	800f020 <tcp_err>
    tcp_arg(tpcb, conn);
 800aa84:	6879      	ldr	r1, [r7, #4]
 800aa86:	6938      	ldr	r0, [r7, #16]
 800aa88:	f004 fa74 	bl	800ef74 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800aa8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d106      	bne.n	800aaa2 <lwip_netconn_do_close_internal+0x28e>
 800aa94:	4b06      	ldr	r3, [pc, #24]	; (800aab0 <lwip_netconn_do_close_internal+0x29c>)
 800aa96:	f240 424d 	movw	r2, #1101	; 0x44d
 800aa9a:	4910      	ldr	r1, [pc, #64]	; (800aadc <lwip_netconn_do_close_internal+0x2c8>)
 800aa9c:	4806      	ldr	r0, [pc, #24]	; (800aab8 <lwip_netconn_do_close_internal+0x2a4>)
 800aa9e:	f00c f9b9 	bl	8016e14 <iprintf>
  return err;
 800aaa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	08018074 	.word	0x08018074
 800aab4:	08018348 	.word	0x08018348
 800aab8:	080180b8 	.word	0x080180b8
 800aabc:	08018358 	.word	0x08018358
 800aac0:	08018378 	.word	0x08018378
 800aac4:	0801839c 	.word	0x0801839c
 800aac8:	080181dc 	.word	0x080181dc
 800aacc:	080183b0 	.word	0x080183b0
 800aad0:	0800a08d 	.word	0x0800a08d
 800aad4:	08009fc5 	.word	0x08009fc5
 800aad8:	0800a135 	.word	0x0800a135
 800aadc:	080183d4 	.word	0x080183d4

0800aae0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	785b      	ldrb	r3, [r3, #1]
 800aaf2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800aaf4:	7afb      	ldrb	r3, [r7, #11]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00d      	beq.n	800ab16 <lwip_netconn_do_delconn+0x36>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab04:	2b10      	cmp	r3, #16
 800ab06:	d006      	beq.n	800ab16 <lwip_netconn_do_delconn+0x36>
 800ab08:	4b60      	ldr	r3, [pc, #384]	; (800ac8c <lwip_netconn_do_delconn+0x1ac>)
 800ab0a:	f240 425e 	movw	r2, #1118	; 0x45e
 800ab0e:	4960      	ldr	r1, [pc, #384]	; (800ac90 <lwip_netconn_do_delconn+0x1b0>)
 800ab10:	4860      	ldr	r0, [pc, #384]	; (800ac94 <lwip_netconn_do_delconn+0x1b4>)
 800ab12:	f00c f97f 	bl	8016e14 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800ab16:	7afb      	ldrb	r3, [r7, #11]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d005      	beq.n	800ab28 <lwip_netconn_do_delconn+0x48>
 800ab1c:	7afb      	ldrb	r3, [r7, #11]
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d002      	beq.n	800ab28 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800ab22:	7afb      	ldrb	r3, [r7, #11]
 800ab24:	2b03      	cmp	r3, #3
 800ab26:	d109      	bne.n	800ab3c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800ab28:	7afb      	ldrb	r3, [r7, #11]
 800ab2a:	2b03      	cmp	r3, #3
 800ab2c:	d10a      	bne.n	800ab44 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	7f1b      	ldrb	r3, [r3, #28]
 800ab34:	f003 0304 	and.w	r3, r3, #4
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d103      	bne.n	800ab44 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	22fb      	movs	r2, #251	; 0xfb
 800ab40:	711a      	strb	r2, [r3, #4]
 800ab42:	e097      	b.n	800ac74 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800ab44:	7afb      	ldrb	r3, [r7, #11]
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	d10d      	bne.n	800ab66 <lwip_netconn_do_delconn+0x86>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	7f1b      	ldrb	r3, [r3, #28]
 800ab50:	f003 0304 	and.w	r3, r3, #4
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d106      	bne.n	800ab66 <lwip_netconn_do_delconn+0x86>
 800ab58:	4b4c      	ldr	r3, [pc, #304]	; (800ac8c <lwip_netconn_do_delconn+0x1ac>)
 800ab5a:	f240 427a 	movw	r2, #1146	; 0x47a
 800ab5e:	494e      	ldr	r1, [pc, #312]	; (800ac98 <lwip_netconn_do_delconn+0x1b8>)
 800ab60:	484c      	ldr	r0, [pc, #304]	; (800ac94 <lwip_netconn_do_delconn+0x1b4>)
 800ab62:	f00c f957 	bl	8016e14 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7ff fdd1 	bl	800a718 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d05f      	beq.n	800ac40 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab8a:	2b10      	cmp	r3, #16
 800ab8c:	d00d      	beq.n	800abaa <lwip_netconn_do_delconn+0xca>
 800ab8e:	2b20      	cmp	r3, #32
 800ab90:	d151      	bne.n	800ac36 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f009 fa68 	bl	8014078 <udp_remove>
          break;
 800aba8:	e046      	b.n	800ac38 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6a1b      	ldr	r3, [r3, #32]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d006      	beq.n	800abc2 <lwip_netconn_do_delconn+0xe2>
 800abb4:	4b35      	ldr	r3, [pc, #212]	; (800ac8c <lwip_netconn_do_delconn+0x1ac>)
 800abb6:	f240 4294 	movw	r2, #1172	; 0x494
 800abba:	4938      	ldr	r1, [pc, #224]	; (800ac9c <lwip_netconn_do_delconn+0x1bc>)
 800abbc:	4835      	ldr	r0, [pc, #212]	; (800ac94 <lwip_netconn_do_delconn+0x1b4>)
 800abbe:	f00c f929 	bl	8016e14 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2204      	movs	r2, #4
 800abc8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2203      	movs	r2, #3
 800abce:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2100      	movs	r1, #0
 800abde:	4618      	mov	r0, r3
 800abe0:	f7ff fe18 	bl	800a814 <lwip_netconn_do_close_internal>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d04b      	beq.n	800ac82 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	785b      	ldrb	r3, [r3, #1]
 800abf0:	2b04      	cmp	r3, #4
 800abf2:	d006      	beq.n	800ac02 <lwip_netconn_do_delconn+0x122>
 800abf4:	4b25      	ldr	r3, [pc, #148]	; (800ac8c <lwip_netconn_do_delconn+0x1ac>)
 800abf6:	f240 429a 	movw	r2, #1178	; 0x49a
 800abfa:	4929      	ldr	r1, [pc, #164]	; (800aca0 <lwip_netconn_do_delconn+0x1c0>)
 800abfc:	4825      	ldr	r0, [pc, #148]	; (800ac94 <lwip_netconn_do_delconn+0x1b4>)
 800abfe:	f00c f909 	bl	8016e14 <iprintf>
            UNLOCK_TCPIP_CORE();
 800ac02:	4828      	ldr	r0, [pc, #160]	; (800aca4 <lwip_netconn_do_delconn+0x1c4>)
 800ac04:	f00b ff1f 	bl	8016a46 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	330c      	adds	r3, #12
 800ac0e:	2100      	movs	r1, #0
 800ac10:	4618      	mov	r0, r3
 800ac12:	f00b fe7e 	bl	8016912 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800ac16:	4823      	ldr	r0, [pc, #140]	; (800aca4 <lwip_netconn_do_delconn+0x1c4>)
 800ac18:	f00b ff06 	bl	8016a28 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	785b      	ldrb	r3, [r3, #1]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d02d      	beq.n	800ac82 <lwip_netconn_do_delconn+0x1a2>
 800ac26:	4b19      	ldr	r3, [pc, #100]	; (800ac8c <lwip_netconn_do_delconn+0x1ac>)
 800ac28:	f240 429e 	movw	r2, #1182	; 0x49e
 800ac2c:	491c      	ldr	r1, [pc, #112]	; (800aca0 <lwip_netconn_do_delconn+0x1c0>)
 800ac2e:	4819      	ldr	r0, [pc, #100]	; (800ac94 <lwip_netconn_do_delconn+0x1b4>)
 800ac30:	f00c f8f0 	bl	8016e14 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800ac34:	e025      	b.n	800ac82 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800ac36:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d007      	beq.n	800ac5a <lwip_netconn_do_delconn+0x17a>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	6810      	ldr	r0, [r2, #0]
 800ac54:	2200      	movs	r2, #0
 800ac56:	2100      	movs	r1, #0
 800ac58:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d007      	beq.n	800ac74 <lwip_netconn_do_delconn+0x194>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	6810      	ldr	r0, [r2, #0]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	2102      	movs	r1, #2
 800ac72:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	330c      	adds	r3, #12
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f00b fe94 	bl	80169a8 <sys_sem_valid>
 800ac80:	e000      	b.n	800ac84 <lwip_netconn_do_delconn+0x1a4>
          return;
 800ac82:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	08018074 	.word	0x08018074
 800ac90:	080183e4 	.word	0x080183e4
 800ac94:	080180b8 	.word	0x080180b8
 800ac98:	080183f8 	.word	0x080183f8
 800ac9c:	08018418 	.word	0x08018418
 800aca0:	08018434 	.word	0x08018434
 800aca4:	24004ed4 	.word	0x24004ed4

0800aca8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d025      	beq.n	800ad0a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acc8:	2b10      	cmp	r3, #16
 800acca:	d00e      	beq.n	800acea <lwip_netconn_do_bind+0x42>
 800accc:	2b20      	cmp	r3, #32
 800acce:	d119      	bne.n	800ad04 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	6858      	ldr	r0, [r3, #4]
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	6899      	ldr	r1, [r3, #8]
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	899b      	ldrh	r3, [r3, #12]
 800acde:	461a      	mov	r2, r3
 800ace0:	f009 f922 	bl	8013f28 <udp_bind>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73fb      	strb	r3, [r7, #15]
        break;
 800ace8:	e011      	b.n	800ad0e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	6858      	ldr	r0, [r3, #4]
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	6899      	ldr	r1, [r3, #8]
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	899b      	ldrh	r3, [r3, #12]
 800acf8:	461a      	mov	r2, r3
 800acfa:	f003 f8b9 	bl	800de70 <tcp_bind>
 800acfe:	4603      	mov	r3, r0
 800ad00:	73fb      	strb	r3, [r7, #15]
        break;
 800ad02:	e004      	b.n	800ad0e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ad04:	23fa      	movs	r3, #250	; 0xfa
 800ad06:	73fb      	strb	r3, [r7, #15]
        break;
 800ad08:	e001      	b.n	800ad0e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800ad0a:	23fa      	movs	r3, #250	; 0xfa
 800ad0c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	7bfa      	ldrb	r2, [r7, #15]
 800ad12:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ad14:	bf00      	nop
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d07f      	beq.n	800ae32 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad3c:	2b10      	cmp	r3, #16
 800ad3e:	d175      	bne.n	800ae2c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	785b      	ldrb	r3, [r3, #1]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d165      	bne.n	800ae16 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	7d1b      	ldrb	r3, [r3, #20]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d002      	beq.n	800ad5c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800ad56:	23fa      	movs	r3, #250	; 0xfa
 800ad58:	72fb      	strb	r3, [r7, #11]
 800ad5a:	e06c      	b.n	800ae36 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800ad5c:	23ff      	movs	r3, #255	; 0xff
 800ad5e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	f107 020b 	add.w	r2, r7, #11
 800ad6a:	7cf9      	ldrb	r1, [r7, #19]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f003 f937 	bl	800dfe0 <tcp_listen_with_backlog_and_err>
 800ad72:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d05d      	beq.n	800ae36 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	3310      	adds	r3, #16
 800ad80:	4618      	mov	r0, r3
 800ad82:	f00b fd83 	bl	801688c <sys_mbox_valid>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00b      	beq.n	800ada4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	3310      	adds	r3, #16
 800ad92:	4618      	mov	r0, r3
 800ad94:	f00b fd06 	bl	80167a4 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	3310      	adds	r3, #16
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f00b fd85 	bl	80168ae <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800ada4:	2300      	movs	r3, #0
 800ada6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3314      	adds	r3, #20
 800adae:	4618      	mov	r0, r3
 800adb0:	f00b fd6c 	bl	801688c <sys_mbox_valid>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d108      	bne.n	800adcc <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3314      	adds	r3, #20
 800adc0:	2106      	movs	r1, #6
 800adc2:	4618      	mov	r0, r3
 800adc4:	f00b fcd4 	bl	8016770 <sys_mbox_new>
 800adc8:	4603      	mov	r3, r0
 800adca:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800adcc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d118      	bne.n	800ae06 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2202      	movs	r2, #2
 800adda:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	685a      	ldr	r2, [r3, #4]
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4619      	mov	r1, r3
 800adf0:	4610      	mov	r0, r2
 800adf2:	f004 f8bf 	bl	800ef74 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	4912      	ldr	r1, [pc, #72]	; (800ae48 <lwip_netconn_do_listen+0x12c>)
 800adfe:	4618      	mov	r0, r3
 800ae00:	f004 f930 	bl	800f064 <tcp_accept>
 800ae04:	e017      	b.n	800ae36 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f002 fee0 	bl	800dbcc <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2200      	movs	r2, #0
 800ae12:	605a      	str	r2, [r3, #4]
 800ae14:	e00f      	b.n	800ae36 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	785b      	ldrb	r3, [r3, #1]
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d102      	bne.n	800ae26 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	72fb      	strb	r3, [r7, #11]
 800ae24:	e007      	b.n	800ae36 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800ae26:	23f5      	movs	r3, #245	; 0xf5
 800ae28:	72fb      	strb	r3, [r7, #11]
 800ae2a:	e004      	b.n	800ae36 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800ae2c:	23f0      	movs	r3, #240	; 0xf0
 800ae2e:	72fb      	strb	r3, [r7, #11]
 800ae30:	e001      	b.n	800ae36 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800ae32:	23f5      	movs	r3, #245	; 0xf5
 800ae34:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800ae36:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ae3e:	bf00      	nop
 800ae40:	3718      	adds	r7, #24
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	0800a331 	.word	0x0800a331

0800ae4c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d022      	beq.n	800aeae <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae72:	2b10      	cmp	r3, #16
 800ae74:	d11b      	bne.n	800aeae <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae82:	d202      	bcs.n	800ae8a <lwip_netconn_do_recv+0x3e>
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	e001      	b.n	800ae8e <lwip_netconn_do_recv+0x42>
 800ae8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae8e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	89fa      	ldrh	r2, [r7, #14]
 800ae98:	4611      	mov	r1, r2
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f003 f9a4 	bl	800e1e8 <tcp_recved>
        remaining -= recved;
 800aea0:	89fb      	ldrh	r3, [r7, #14]
 800aea2:	697a      	ldr	r2, [r7, #20]
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1e6      	bne.n	800ae7c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aeae:	bf00      	nop
 800aeb0:	3718      	adds	r7, #24
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
	...

0800aeb8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b088      	sub	sp, #32
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800aec4:	2300      	movs	r3, #0
 800aec6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d106      	bne.n	800aedc <lwip_netconn_do_writemore+0x24>
 800aece:	4b96      	ldr	r3, [pc, #600]	; (800b128 <lwip_netconn_do_writemore+0x270>)
 800aed0:	f240 6273 	movw	r2, #1651	; 0x673
 800aed4:	4995      	ldr	r1, [pc, #596]	; (800b12c <lwip_netconn_do_writemore+0x274>)
 800aed6:	4896      	ldr	r0, [pc, #600]	; (800b130 <lwip_netconn_do_writemore+0x278>)
 800aed8:	f00b ff9c 	bl	8016e14 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	785b      	ldrb	r3, [r3, #1]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d006      	beq.n	800aef2 <lwip_netconn_do_writemore+0x3a>
 800aee4:	4b90      	ldr	r3, [pc, #576]	; (800b128 <lwip_netconn_do_writemore+0x270>)
 800aee6:	f240 6274 	movw	r2, #1652	; 0x674
 800aeea:	4992      	ldr	r1, [pc, #584]	; (800b134 <lwip_netconn_do_writemore+0x27c>)
 800aeec:	4890      	ldr	r0, [pc, #576]	; (800b130 <lwip_netconn_do_writemore+0x278>)
 800aeee:	f00b ff91 	bl	8016e14 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d106      	bne.n	800af08 <lwip_netconn_do_writemore+0x50>
 800aefa:	4b8b      	ldr	r3, [pc, #556]	; (800b128 <lwip_netconn_do_writemore+0x270>)
 800aefc:	f240 6275 	movw	r2, #1653	; 0x675
 800af00:	498d      	ldr	r1, [pc, #564]	; (800b138 <lwip_netconn_do_writemore+0x280>)
 800af02:	488b      	ldr	r0, [pc, #556]	; (800b130 <lwip_netconn_do_writemore+0x278>)
 800af04:	f00b ff86 	bl	8016e14 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d106      	bne.n	800af1e <lwip_netconn_do_writemore+0x66>
 800af10:	4b85      	ldr	r3, [pc, #532]	; (800b128 <lwip_netconn_do_writemore+0x270>)
 800af12:	f240 6276 	movw	r2, #1654	; 0x676
 800af16:	4989      	ldr	r1, [pc, #548]	; (800b13c <lwip_netconn_do_writemore+0x284>)
 800af18:	4885      	ldr	r0, [pc, #532]	; (800b130 <lwip_netconn_do_writemore+0x278>)
 800af1a:	f00b ff7b 	bl	8016e14 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	699a      	ldr	r2, [r3, #24]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a1b      	ldr	r3, [r3, #32]
 800af28:	695b      	ldr	r3, [r3, #20]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d306      	bcc.n	800af3c <lwip_netconn_do_writemore+0x84>
 800af2e:	4b7e      	ldr	r3, [pc, #504]	; (800b128 <lwip_netconn_do_writemore+0x270>)
 800af30:	f240 6277 	movw	r2, #1655	; 0x677
 800af34:	4982      	ldr	r1, [pc, #520]	; (800b140 <lwip_netconn_do_writemore+0x288>)
 800af36:	487e      	ldr	r0, [pc, #504]	; (800b130 <lwip_netconn_do_writemore+0x278>)
 800af38:	f00b ff6c 	bl	8016e14 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a1b      	ldr	r3, [r3, #32]
 800af40:	899b      	ldrh	r3, [r3, #12]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d106      	bne.n	800af54 <lwip_netconn_do_writemore+0x9c>
 800af46:	4b78      	ldr	r3, [pc, #480]	; (800b128 <lwip_netconn_do_writemore+0x270>)
 800af48:	f240 6279 	movw	r2, #1657	; 0x679
 800af4c:	497d      	ldr	r1, [pc, #500]	; (800b144 <lwip_netconn_do_writemore+0x28c>)
 800af4e:	4878      	ldr	r0, [pc, #480]	; (800b130 <lwip_netconn_do_writemore+0x278>)
 800af50:	f00b ff60 	bl	8016e14 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6a1b      	ldr	r3, [r3, #32]
 800af58:	7f1b      	ldrb	r3, [r3, #28]
 800af5a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	7f1b      	ldrb	r3, [r3, #28]
 800af60:	f003 0302 	and.w	r3, r3, #2
 800af64:	2b00      	cmp	r3, #0
 800af66:	d104      	bne.n	800af72 <lwip_netconn_do_writemore+0xba>
 800af68:	7ebb      	ldrb	r3, [r7, #26]
 800af6a:	f003 0304 	and.w	r3, r3, #4
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <lwip_netconn_do_writemore+0xbe>
 800af72:	2301      	movs	r3, #1
 800af74:	e000      	b.n	800af78 <lwip_netconn_do_writemore+0xc0>
 800af76:	2300      	movs	r3, #0
 800af78:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a1b      	ldr	r3, [r3, #32]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a1b      	ldr	r3, [r3, #32]
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	4413      	add	r3, r2
 800af8a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6a1b      	ldr	r3, [r3, #32]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	685a      	ldr	r2, [r3, #4]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a1b      	ldr	r3, [r3, #32]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	1ad3      	subs	r3, r2, r3
 800af9c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afa4:	d307      	bcc.n	800afb6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800afa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800afaa:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800afac:	7ebb      	ldrb	r3, [r7, #26]
 800afae:	f043 0302 	orr.w	r3, r3, #2
 800afb2:	76bb      	strb	r3, [r7, #26]
 800afb4:	e001      	b.n	800afba <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800afc2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800afc4:	89fa      	ldrh	r2, [r7, #14]
 800afc6:	8bbb      	ldrh	r3, [r7, #28]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d216      	bcs.n	800affa <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800afcc:	89fb      	ldrh	r3, [r7, #14]
 800afce:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800afd0:	7e3b      	ldrb	r3, [r7, #24]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00d      	beq.n	800aff2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800afd6:	8bbb      	ldrh	r3, [r7, #28]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10e      	bne.n	800affa <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a1b      	ldr	r3, [r3, #32]
 800afe0:	699b      	ldr	r3, [r3, #24]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d102      	bne.n	800afec <lwip_netconn_do_writemore+0x134>
 800afe6:	f06f 0306 	mvn.w	r3, #6
 800afea:	e000      	b.n	800afee <lwip_netconn_do_writemore+0x136>
 800afec:	2300      	movs	r3, #0
 800afee:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800aff0:	e07d      	b.n	800b0ee <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800aff2:	7ebb      	ldrb	r3, [r7, #26]
 800aff4:	f043 0302 	orr.w	r3, r3, #2
 800aff8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	691a      	ldr	r2, [r3, #16]
 800b000:	8bbb      	ldrh	r3, [r7, #28]
 800b002:	441a      	add	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6a1b      	ldr	r3, [r3, #32]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d906      	bls.n	800b01e <lwip_netconn_do_writemore+0x166>
 800b010:	4b45      	ldr	r3, [pc, #276]	; (800b128 <lwip_netconn_do_writemore+0x270>)
 800b012:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b016:	494c      	ldr	r1, [pc, #304]	; (800b148 <lwip_netconn_do_writemore+0x290>)
 800b018:	4845      	ldr	r0, [pc, #276]	; (800b130 <lwip_netconn_do_writemore+0x278>)
 800b01a:	f00b fefb 	bl	8016e14 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b01e:	8bbb      	ldrh	r3, [r7, #28]
 800b020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b024:	4293      	cmp	r3, r2
 800b026:	d103      	bne.n	800b030 <lwip_netconn_do_writemore+0x178>
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b02e:	d209      	bcs.n	800b044 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b034:	8bba      	ldrh	r2, [r7, #28]
 800b036:	429a      	cmp	r2, r3
 800b038:	d10b      	bne.n	800b052 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a1b      	ldr	r3, [r3, #32]
 800b03e:	899b      	ldrh	r3, [r3, #12]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d906      	bls.n	800b052 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b044:	2301      	movs	r3, #1
 800b046:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b048:	7ebb      	ldrb	r3, [r7, #26]
 800b04a:	f043 0302 	orr.w	r3, r3, #2
 800b04e:	76bb      	strb	r3, [r7, #26]
 800b050:	e001      	b.n	800b056 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b052:	2300      	movs	r3, #0
 800b054:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6858      	ldr	r0, [r3, #4]
 800b05a:	7ebb      	ldrb	r3, [r7, #26]
 800b05c:	8bba      	ldrh	r2, [r7, #28]
 800b05e:	6979      	ldr	r1, [r7, #20]
 800b060:	f006 fec6 	bl	8011df0 <tcp_write>
 800b064:	4603      	mov	r3, r0
 800b066:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b068:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d12c      	bne.n	800b0ca <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a1b      	ldr	r3, [r3, #32]
 800b074:	6999      	ldr	r1, [r3, #24]
 800b076:	8bba      	ldrh	r2, [r7, #28]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a1b      	ldr	r3, [r3, #32]
 800b07c:	440a      	add	r2, r1
 800b07e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a1b      	ldr	r3, [r3, #32]
 800b084:	6919      	ldr	r1, [r3, #16]
 800b086:	8bba      	ldrh	r2, [r7, #28]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a1b      	ldr	r3, [r3, #32]
 800b08c:	440a      	add	r2, r1
 800b08e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a1b      	ldr	r3, [r3, #32]
 800b094:	691a      	ldr	r2, [r3, #16]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a1b      	ldr	r3, [r3, #32]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d113      	bne.n	800b0ca <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6a1b      	ldr	r3, [r3, #32]
 800b0a6:	899a      	ldrh	r2, [r3, #12]
 800b0a8:	3a01      	subs	r2, #1
 800b0aa:	b292      	uxth	r2, r2
 800b0ac:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	899b      	ldrh	r3, [r3, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d008      	beq.n	800b0ca <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a1b      	ldr	r3, [r3, #32]
 800b0bc:	689a      	ldr	r2, [r3, #8]
 800b0be:	3208      	adds	r2, #8
 800b0c0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b0ca:	7e7b      	ldrb	r3, [r7, #25]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d004      	beq.n	800b0da <lwip_netconn_do_writemore+0x222>
 800b0d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f43f af50 	beq.w	800af7a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b0da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d004      	beq.n	800b0ec <lwip_netconn_do_writemore+0x234>
 800b0e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ea:	d146      	bne.n	800b17a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b0ec:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b0ee:	7e3b      	ldrb	r3, [r7, #24]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d02b      	beq.n	800b14c <lwip_netconn_do_writemore+0x294>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	699a      	ldr	r2, [r3, #24]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a1b      	ldr	r3, [r3, #32]
 800b0fe:	695b      	ldr	r3, [r3, #20]
 800b100:	429a      	cmp	r2, r3
 800b102:	d223      	bcs.n	800b14c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d005      	beq.n	800b118 <lwip_netconn_do_writemore+0x260>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b110:	2200      	movs	r2, #0
 800b112:	2103      	movs	r1, #3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	7f1b      	ldrb	r3, [r3, #28]
 800b11c:	f043 0310 	orr.w	r3, r3, #16
 800b120:	b2da      	uxtb	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	771a      	strb	r2, [r3, #28]
 800b126:	e028      	b.n	800b17a <lwip_netconn_do_writemore+0x2c2>
 800b128:	08018074 	.word	0x08018074
 800b12c:	080181cc 	.word	0x080181cc
 800b130:	080180b8 	.word	0x080180b8
 800b134:	080184d4 	.word	0x080184d4
 800b138:	080181dc 	.word	0x080181dc
 800b13c:	080184f4 	.word	0x080184f4
 800b140:	0801850c 	.word	0x0801850c
 800b144:	0801854c 	.word	0x0801854c
 800b148:	08018574 	.word	0x08018574
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b154:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b158:	d305      	bcc.n	800b166 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b162:	2b04      	cmp	r3, #4
 800b164:	d909      	bls.n	800b17a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d005      	beq.n	800b17a <lwip_netconn_do_writemore+0x2c2>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b172:	2200      	movs	r2, #0
 800b174:	2103      	movs	r1, #3
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b17a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d11d      	bne.n	800b1be <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	699a      	ldr	r2, [r3, #24]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a1b      	ldr	r3, [r3, #32]
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d002      	beq.n	800b198 <lwip_netconn_do_writemore+0x2e0>
 800b192:	7e3b      	ldrb	r3, [r7, #24]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b198:	2301      	movs	r3, #1
 800b19a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f007 fc0f 	bl	80129c4 <tcp_output>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b1aa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b1ae:	f113 0f04 	cmn.w	r3, #4
 800b1b2:	d12c      	bne.n	800b20e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b1b4:	7b3b      	ldrb	r3, [r7, #12]
 800b1b6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	76fb      	strb	r3, [r7, #27]
 800b1bc:	e027      	b.n	800b20e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b1be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1c6:	d120      	bne.n	800b20a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f007 fbf9 	bl	80129c4 <tcp_output>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b1d6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b1da:	f113 0f04 	cmn.w	r3, #4
 800b1de:	d104      	bne.n	800b1ea <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b1e0:	7b7b      	ldrb	r3, [r7, #13]
 800b1e2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	76fb      	strb	r3, [r7, #27]
 800b1e8:	e011      	b.n	800b20e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b1ea:	7e3b      	ldrb	r3, [r7, #24]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00e      	beq.n	800b20e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6a1b      	ldr	r3, [r3, #32]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d102      	bne.n	800b200 <lwip_netconn_do_writemore+0x348>
 800b1fa:	f06f 0306 	mvn.w	r3, #6
 800b1fe:	e000      	b.n	800b202 <lwip_netconn_do_writemore+0x34a>
 800b200:	2300      	movs	r3, #0
 800b202:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b204:	2301      	movs	r3, #1
 800b206:	76fb      	strb	r3, [r7, #27]
 800b208:	e001      	b.n	800b20e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b20a:	2301      	movs	r3, #1
 800b20c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b20e:	7efb      	ldrb	r3, [r7, #27]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d015      	beq.n	800b240 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a1b      	ldr	r3, [r3, #32]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	330c      	adds	r3, #12
 800b21c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a1b      	ldr	r3, [r3, #32]
 800b222:	7ffa      	ldrb	r2, [r7, #31]
 800b224:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b232:	78fb      	ldrb	r3, [r7, #3]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d006      	beq.n	800b246 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b238:	68b8      	ldr	r0, [r7, #8]
 800b23a:	f00b fb9b 	bl	8016974 <sys_sem_signal>
 800b23e:	e002      	b.n	800b246 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b240:	f04f 33ff 	mov.w	r3, #4294967295
 800b244:	e000      	b.n	800b248 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3720      	adds	r7, #32
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4618      	mov	r0, r3
 800b262:	f7fe fd20 	bl	8009ca6 <netconn_err>
 800b266:	4603      	mov	r3, r0
 800b268:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d166      	bne.n	800b340 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b27c:	2b10      	cmp	r3, #16
 800b27e:	d15d      	bne.n	800b33c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	785b      	ldrb	r3, [r3, #1]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d002      	beq.n	800b290 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b28a:	23fb      	movs	r3, #251	; 0xfb
 800b28c:	73fb      	strb	r3, [r7, #15]
 800b28e:	e057      	b.n	800b340 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d04d      	beq.n	800b336 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	6a1b      	ldr	r3, [r3, #32]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d006      	beq.n	800b2ba <lwip_netconn_do_write+0x6a>
 800b2ac:	4b28      	ldr	r3, [pc, #160]	; (800b350 <lwip_netconn_do_write+0x100>)
 800b2ae:	f240 7223 	movw	r2, #1827	; 0x723
 800b2b2:	4928      	ldr	r1, [pc, #160]	; (800b354 <lwip_netconn_do_write+0x104>)
 800b2b4:	4828      	ldr	r0, [pc, #160]	; (800b358 <lwip_netconn_do_write+0x108>)
 800b2b6:	f00b fdad 	bl	8016e14 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	695b      	ldr	r3, [r3, #20]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d106      	bne.n	800b2d0 <lwip_netconn_do_write+0x80>
 800b2c2:	4b23      	ldr	r3, [pc, #140]	; (800b350 <lwip_netconn_do_write+0x100>)
 800b2c4:	f240 7224 	movw	r2, #1828	; 0x724
 800b2c8:	4924      	ldr	r1, [pc, #144]	; (800b35c <lwip_netconn_do_write+0x10c>)
 800b2ca:	4823      	ldr	r0, [pc, #140]	; (800b358 <lwip_netconn_do_write+0x108>)
 800b2cc:	f00b fda2 	bl	8016e14 <iprintf>
        msg->conn->current_msg = msg;
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2100      	movs	r1, #0
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7ff fdea 	bl	800aeb8 <lwip_netconn_do_writemore>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d02e      	beq.n	800b348 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	785b      	ldrb	r3, [r3, #1]
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d006      	beq.n	800b302 <lwip_netconn_do_write+0xb2>
 800b2f4:	4b16      	ldr	r3, [pc, #88]	; (800b350 <lwip_netconn_do_write+0x100>)
 800b2f6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b2fa:	4919      	ldr	r1, [pc, #100]	; (800b360 <lwip_netconn_do_write+0x110>)
 800b2fc:	4816      	ldr	r0, [pc, #88]	; (800b358 <lwip_netconn_do_write+0x108>)
 800b2fe:	f00b fd89 	bl	8016e14 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b302:	4818      	ldr	r0, [pc, #96]	; (800b364 <lwip_netconn_do_write+0x114>)
 800b304:	f00b fb9f 	bl	8016a46 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	330c      	adds	r3, #12
 800b30e:	2100      	movs	r1, #0
 800b310:	4618      	mov	r0, r3
 800b312:	f00b fafe 	bl	8016912 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b316:	4813      	ldr	r0, [pc, #76]	; (800b364 <lwip_netconn_do_write+0x114>)
 800b318:	f00b fb86 	bl	8016a28 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	785b      	ldrb	r3, [r3, #1]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d110      	bne.n	800b348 <lwip_netconn_do_write+0xf8>
 800b326:	4b0a      	ldr	r3, [pc, #40]	; (800b350 <lwip_netconn_do_write+0x100>)
 800b328:	f240 722c 	movw	r2, #1836	; 0x72c
 800b32c:	490c      	ldr	r1, [pc, #48]	; (800b360 <lwip_netconn_do_write+0x110>)
 800b32e:	480a      	ldr	r0, [pc, #40]	; (800b358 <lwip_netconn_do_write+0x108>)
 800b330:	f00b fd70 	bl	8016e14 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b334:	e008      	b.n	800b348 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b336:	23f5      	movs	r3, #245	; 0xf5
 800b338:	73fb      	strb	r3, [r7, #15]
 800b33a:	e001      	b.n	800b340 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b33c:	23fa      	movs	r3, #250	; 0xfa
 800b33e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	7bfa      	ldrb	r2, [r7, #15]
 800b344:	711a      	strb	r2, [r3, #4]
 800b346:	e000      	b.n	800b34a <lwip_netconn_do_write+0xfa>
        return;
 800b348:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	08018074 	.word	0x08018074
 800b354:	08018418 	.word	0x08018418
 800b358:	080180b8 	.word	0x080180b8
 800b35c:	080185a0 	.word	0x080185a0
 800b360:	08018434 	.word	0x08018434
 800b364:	24004ed4 	.word	0x24004ed4

0800b368 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	785b      	ldrb	r3, [r3, #1]
 800b37a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d069      	beq.n	800b45a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b390:	2b10      	cmp	r3, #16
 800b392:	d162      	bne.n	800b45a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d002      	beq.n	800b3a2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b39c:	7afb      	ldrb	r3, [r7, #11]
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	d05b      	beq.n	800b45a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b3a2:	7afb      	ldrb	r3, [r7, #11]
 800b3a4:	2b03      	cmp	r3, #3
 800b3a6:	d103      	bne.n	800b3b0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	22f5      	movs	r2, #245	; 0xf5
 800b3ac:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b3ae:	e059      	b.n	800b464 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b3b0:	7afb      	ldrb	r3, [r7, #11]
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d103      	bne.n	800b3be <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	22fb      	movs	r2, #251	; 0xfb
 800b3ba:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b3bc:	e052      	b.n	800b464 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	7a1b      	ldrb	r3, [r3, #8]
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d004      	beq.n	800b3d4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7ff f9a2 	bl	800a718 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d006      	beq.n	800b3ec <lwip_netconn_do_close+0x84>
 800b3de:	4b23      	ldr	r3, [pc, #140]	; (800b46c <lwip_netconn_do_close+0x104>)
 800b3e0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b3e4:	4922      	ldr	r1, [pc, #136]	; (800b470 <lwip_netconn_do_close+0x108>)
 800b3e6:	4823      	ldr	r0, [pc, #140]	; (800b474 <lwip_netconn_do_close+0x10c>)
 800b3e8:	f00b fd14 	bl	8016e14 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2204      	movs	r2, #4
 800b3f2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2100      	movs	r1, #0
 800b402:	4618      	mov	r0, r3
 800b404:	f7ff fa06 	bl	800a814 <lwip_netconn_do_close_internal>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d029      	beq.n	800b462 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	785b      	ldrb	r3, [r3, #1]
 800b414:	2b04      	cmp	r3, #4
 800b416:	d006      	beq.n	800b426 <lwip_netconn_do_close+0xbe>
 800b418:	4b14      	ldr	r3, [pc, #80]	; (800b46c <lwip_netconn_do_close+0x104>)
 800b41a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b41e:	4916      	ldr	r1, [pc, #88]	; (800b478 <lwip_netconn_do_close+0x110>)
 800b420:	4814      	ldr	r0, [pc, #80]	; (800b474 <lwip_netconn_do_close+0x10c>)
 800b422:	f00b fcf7 	bl	8016e14 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b426:	4815      	ldr	r0, [pc, #84]	; (800b47c <lwip_netconn_do_close+0x114>)
 800b428:	f00b fb0d 	bl	8016a46 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	330c      	adds	r3, #12
 800b432:	2100      	movs	r1, #0
 800b434:	4618      	mov	r0, r3
 800b436:	f00b fa6c 	bl	8016912 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b43a:	4810      	ldr	r0, [pc, #64]	; (800b47c <lwip_netconn_do_close+0x114>)
 800b43c:	f00b faf4 	bl	8016a28 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	785b      	ldrb	r3, [r3, #1]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00b      	beq.n	800b462 <lwip_netconn_do_close+0xfa>
 800b44a:	4b08      	ldr	r3, [pc, #32]	; (800b46c <lwip_netconn_do_close+0x104>)
 800b44c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b450:	4909      	ldr	r1, [pc, #36]	; (800b478 <lwip_netconn_do_close+0x110>)
 800b452:	4808      	ldr	r0, [pc, #32]	; (800b474 <lwip_netconn_do_close+0x10c>)
 800b454:	f00b fcde 	bl	8016e14 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b458:	e003      	b.n	800b462 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	22f5      	movs	r2, #245	; 0xf5
 800b45e:	711a      	strb	r2, [r3, #4]
 800b460:	e000      	b.n	800b464 <lwip_netconn_do_close+0xfc>
      return;
 800b462:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	08018074 	.word	0x08018074
 800b470:	08018418 	.word	0x08018418
 800b474:	080180b8 	.word	0x080180b8
 800b478:	08018434 	.word	0x08018434
 800b47c:	24004ed4 	.word	0x24004ed4

0800b480 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d013      	beq.n	800b4b6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00b      	beq.n	800b4ae <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f001 feec 	bl	800d278 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	605a      	str	r2, [r3, #4]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	685a      	ldr	r2, [r3, #4]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b4ae:	6879      	ldr	r1, [r7, #4]
 800b4b0:	2006      	movs	r0, #6
 800b4b2:	f001 f83d 	bl	800c530 <memp_free>
  }
}
 800b4b6:	bf00      	nop
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
	...

0800b4c0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d108      	bne.n	800b4e4 <netbuf_data+0x24>
 800b4d2:	4b1b      	ldr	r3, [pc, #108]	; (800b540 <netbuf_data+0x80>)
 800b4d4:	22c6      	movs	r2, #198	; 0xc6
 800b4d6:	491b      	ldr	r1, [pc, #108]	; (800b544 <netbuf_data+0x84>)
 800b4d8:	481b      	ldr	r0, [pc, #108]	; (800b548 <netbuf_data+0x88>)
 800b4da:	f00b fc9b 	bl	8016e14 <iprintf>
 800b4de:	f06f 030f 	mvn.w	r3, #15
 800b4e2:	e029      	b.n	800b538 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d108      	bne.n	800b4fc <netbuf_data+0x3c>
 800b4ea:	4b15      	ldr	r3, [pc, #84]	; (800b540 <netbuf_data+0x80>)
 800b4ec:	22c7      	movs	r2, #199	; 0xc7
 800b4ee:	4917      	ldr	r1, [pc, #92]	; (800b54c <netbuf_data+0x8c>)
 800b4f0:	4815      	ldr	r0, [pc, #84]	; (800b548 <netbuf_data+0x88>)
 800b4f2:	f00b fc8f 	bl	8016e14 <iprintf>
 800b4f6:	f06f 030f 	mvn.w	r3, #15
 800b4fa:	e01d      	b.n	800b538 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d108      	bne.n	800b514 <netbuf_data+0x54>
 800b502:	4b0f      	ldr	r3, [pc, #60]	; (800b540 <netbuf_data+0x80>)
 800b504:	22c8      	movs	r2, #200	; 0xc8
 800b506:	4912      	ldr	r1, [pc, #72]	; (800b550 <netbuf_data+0x90>)
 800b508:	480f      	ldr	r0, [pc, #60]	; (800b548 <netbuf_data+0x88>)
 800b50a:	f00b fc83 	bl	8016e14 <iprintf>
 800b50e:	f06f 030f 	mvn.w	r3, #15
 800b512:	e011      	b.n	800b538 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d102      	bne.n	800b522 <netbuf_data+0x62>
    return ERR_BUF;
 800b51c:	f06f 0301 	mvn.w	r3, #1
 800b520:	e00a      	b.n	800b538 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	685a      	ldr	r2, [r3, #4]
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	895a      	ldrh	r2, [r3, #10]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	080185cc 	.word	0x080185cc
 800b544:	080186d4 	.word	0x080186d4
 800b548:	0801861c 	.word	0x0801861c
 800b54c:	080186f0 	.word	0x080186f0
 800b550:	08018710 	.word	0x08018710

0800b554 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d108      	bne.n	800b574 <netbuf_next+0x20>
 800b562:	4b11      	ldr	r3, [pc, #68]	; (800b5a8 <netbuf_next+0x54>)
 800b564:	22e0      	movs	r2, #224	; 0xe0
 800b566:	4911      	ldr	r1, [pc, #68]	; (800b5ac <netbuf_next+0x58>)
 800b568:	4811      	ldr	r0, [pc, #68]	; (800b5b0 <netbuf_next+0x5c>)
 800b56a:	f00b fc53 	bl	8016e14 <iprintf>
 800b56e:	f04f 33ff 	mov.w	r3, #4294967295
 800b572:	e014      	b.n	800b59e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d102      	bne.n	800b584 <netbuf_next+0x30>
    return -1;
 800b57e:	f04f 33ff 	mov.w	r3, #4294967295
 800b582:	e00c      	b.n	800b59e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d101      	bne.n	800b59c <netbuf_next+0x48>
    return 1;
 800b598:	2301      	movs	r3, #1
 800b59a:	e000      	b.n	800b59e <netbuf_next+0x4a>
  }
  return 0;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3708      	adds	r7, #8
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	080185cc 	.word	0x080185cc
 800b5ac:	0801872c 	.word	0x0801872c
 800b5b0:	0801861c 	.word	0x0801861c

0800b5b4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b5be:	f008 fab9 	bl	8013b34 <sys_timeouts_sleeptime>
 800b5c2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ca:	d10b      	bne.n	800b5e4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b5cc:	4813      	ldr	r0, [pc, #76]	; (800b61c <tcpip_timeouts_mbox_fetch+0x68>)
 800b5ce:	f00b fa3a 	bl	8016a46 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	6839      	ldr	r1, [r7, #0]
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f00b f910 	bl	80167fc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b5dc:	480f      	ldr	r0, [pc, #60]	; (800b61c <tcpip_timeouts_mbox_fetch+0x68>)
 800b5de:	f00b fa23 	bl	8016a28 <sys_mutex_lock>
    return;
 800b5e2:	e018      	b.n	800b616 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d102      	bne.n	800b5f0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b5ea:	f008 fa69 	bl	8013ac0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b5ee:	e7e6      	b.n	800b5be <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b5f0:	480a      	ldr	r0, [pc, #40]	; (800b61c <tcpip_timeouts_mbox_fetch+0x68>)
 800b5f2:	f00b fa28 	bl	8016a46 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f00b f8fe 	bl	80167fc <sys_arch_mbox_fetch>
 800b600:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b602:	4806      	ldr	r0, [pc, #24]	; (800b61c <tcpip_timeouts_mbox_fetch+0x68>)
 800b604:	f00b fa10 	bl	8016a28 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b60e:	d102      	bne.n	800b616 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b610:	f008 fa56 	bl	8013ac0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b614:	e7d3      	b.n	800b5be <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	24004ed4 	.word	0x24004ed4

0800b620 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b628:	4810      	ldr	r0, [pc, #64]	; (800b66c <tcpip_thread+0x4c>)
 800b62a:	f00b f9fd 	bl	8016a28 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b62e:	4b10      	ldr	r3, [pc, #64]	; (800b670 <tcpip_thread+0x50>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d005      	beq.n	800b642 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b636:	4b0e      	ldr	r3, [pc, #56]	; (800b670 <tcpip_thread+0x50>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a0e      	ldr	r2, [pc, #56]	; (800b674 <tcpip_thread+0x54>)
 800b63c:	6812      	ldr	r2, [r2, #0]
 800b63e:	4610      	mov	r0, r2
 800b640:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b642:	f107 030c 	add.w	r3, r7, #12
 800b646:	4619      	mov	r1, r3
 800b648:	480b      	ldr	r0, [pc, #44]	; (800b678 <tcpip_thread+0x58>)
 800b64a:	f7ff ffb3 	bl	800b5b4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d106      	bne.n	800b662 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b654:	4b09      	ldr	r3, [pc, #36]	; (800b67c <tcpip_thread+0x5c>)
 800b656:	2291      	movs	r2, #145	; 0x91
 800b658:	4909      	ldr	r1, [pc, #36]	; (800b680 <tcpip_thread+0x60>)
 800b65a:	480a      	ldr	r0, [pc, #40]	; (800b684 <tcpip_thread+0x64>)
 800b65c:	f00b fbda 	bl	8016e14 <iprintf>
      continue;
 800b660:	e003      	b.n	800b66a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	4618      	mov	r0, r3
 800b666:	f000 f80f 	bl	800b688 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b66a:	e7ea      	b.n	800b642 <tcpip_thread+0x22>
 800b66c:	24004ed4 	.word	0x24004ed4
 800b670:	24004a90 	.word	0x24004a90
 800b674:	24004a94 	.word	0x24004a94
 800b678:	24004a98 	.word	0x24004a98
 800b67c:	08018764 	.word	0x08018764
 800b680:	08018794 	.word	0x08018794
 800b684:	080187b4 	.word	0x080187b4

0800b688 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	2b02      	cmp	r3, #2
 800b696:	d026      	beq.n	800b6e6 <tcpip_thread_handle_msg+0x5e>
 800b698:	2b02      	cmp	r3, #2
 800b69a:	dc2b      	bgt.n	800b6f4 <tcpip_thread_handle_msg+0x6c>
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <tcpip_thread_handle_msg+0x1e>
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d015      	beq.n	800b6d0 <tcpip_thread_handle_msg+0x48>
 800b6a4:	e026      	b.n	800b6f4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	6850      	ldr	r0, [r2, #4]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	6892      	ldr	r2, [r2, #8]
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	4798      	blx	r3
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d004      	beq.n	800b6c6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f001 fdd9 	bl	800d278 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b6c6:	6879      	ldr	r1, [r7, #4]
 800b6c8:	2009      	movs	r0, #9
 800b6ca:	f000 ff31 	bl	800c530 <memp_free>
      break;
 800b6ce:	e018      	b.n	800b702 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	6892      	ldr	r2, [r2, #8]
 800b6d8:	4610      	mov	r0, r2
 800b6da:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b6dc:	6879      	ldr	r1, [r7, #4]
 800b6de:	2008      	movs	r0, #8
 800b6e0:	f000 ff26 	bl	800c530 <memp_free>
      break;
 800b6e4:	e00d      	b.n	800b702 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	6892      	ldr	r2, [r2, #8]
 800b6ee:	4610      	mov	r0, r2
 800b6f0:	4798      	blx	r3
      break;
 800b6f2:	e006      	b.n	800b702 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b6f4:	4b05      	ldr	r3, [pc, #20]	; (800b70c <tcpip_thread_handle_msg+0x84>)
 800b6f6:	22cf      	movs	r2, #207	; 0xcf
 800b6f8:	4905      	ldr	r1, [pc, #20]	; (800b710 <tcpip_thread_handle_msg+0x88>)
 800b6fa:	4806      	ldr	r0, [pc, #24]	; (800b714 <tcpip_thread_handle_msg+0x8c>)
 800b6fc:	f00b fb8a 	bl	8016e14 <iprintf>
      break;
 800b700:	bf00      	nop
  }
}
 800b702:	bf00      	nop
 800b704:	3708      	adds	r7, #8
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	08018764 	.word	0x08018764
 800b710:	08018794 	.word	0x08018794
 800b714:	080187b4 	.word	0x080187b4

0800b718 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b724:	481a      	ldr	r0, [pc, #104]	; (800b790 <tcpip_inpkt+0x78>)
 800b726:	f00b f8b1 	bl	801688c <sys_mbox_valid>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d105      	bne.n	800b73c <tcpip_inpkt+0x24>
 800b730:	4b18      	ldr	r3, [pc, #96]	; (800b794 <tcpip_inpkt+0x7c>)
 800b732:	22fc      	movs	r2, #252	; 0xfc
 800b734:	4918      	ldr	r1, [pc, #96]	; (800b798 <tcpip_inpkt+0x80>)
 800b736:	4819      	ldr	r0, [pc, #100]	; (800b79c <tcpip_inpkt+0x84>)
 800b738:	f00b fb6c 	bl	8016e14 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b73c:	2009      	movs	r0, #9
 800b73e:	f000 fe81 	bl	800c444 <memp_malloc>
 800b742:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d102      	bne.n	800b750 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b74a:	f04f 33ff 	mov.w	r3, #4294967295
 800b74e:	e01a      	b.n	800b786 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	2200      	movs	r2, #0
 800b754:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b768:	6979      	ldr	r1, [r7, #20]
 800b76a:	4809      	ldr	r0, [pc, #36]	; (800b790 <tcpip_inpkt+0x78>)
 800b76c:	f00b f82c 	bl	80167c8 <sys_mbox_trypost>
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	d006      	beq.n	800b784 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b776:	6979      	ldr	r1, [r7, #20]
 800b778:	2009      	movs	r0, #9
 800b77a:	f000 fed9 	bl	800c530 <memp_free>
    return ERR_MEM;
 800b77e:	f04f 33ff 	mov.w	r3, #4294967295
 800b782:	e000      	b.n	800b786 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b784:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b786:	4618      	mov	r0, r3
 800b788:	3718      	adds	r7, #24
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	24004a98 	.word	0x24004a98
 800b794:	08018764 	.word	0x08018764
 800b798:	080187dc 	.word	0x080187dc
 800b79c:	080187b4 	.word	0x080187b4

0800b7a0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b7b0:	f003 0318 	and.w	r3, r3, #24
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d006      	beq.n	800b7c6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b7b8:	4a08      	ldr	r2, [pc, #32]	; (800b7dc <tcpip_input+0x3c>)
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7ff ffab 	bl	800b718 <tcpip_inpkt>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	e005      	b.n	800b7d2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b7c6:	4a06      	ldr	r2, [pc, #24]	; (800b7e0 <tcpip_input+0x40>)
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7ff ffa4 	bl	800b718 <tcpip_inpkt>
 800b7d0:	4603      	mov	r3, r0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	080165c5 	.word	0x080165c5
 800b7e0:	080154d9 	.word	0x080154d9

0800b7e4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b7ee:	4819      	ldr	r0, [pc, #100]	; (800b854 <tcpip_try_callback+0x70>)
 800b7f0:	f00b f84c 	bl	801688c <sys_mbox_valid>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d106      	bne.n	800b808 <tcpip_try_callback+0x24>
 800b7fa:	4b17      	ldr	r3, [pc, #92]	; (800b858 <tcpip_try_callback+0x74>)
 800b7fc:	f240 125d 	movw	r2, #349	; 0x15d
 800b800:	4916      	ldr	r1, [pc, #88]	; (800b85c <tcpip_try_callback+0x78>)
 800b802:	4817      	ldr	r0, [pc, #92]	; (800b860 <tcpip_try_callback+0x7c>)
 800b804:	f00b fb06 	bl	8016e14 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b808:	2008      	movs	r0, #8
 800b80a:	f000 fe1b 	bl	800c444 <memp_malloc>
 800b80e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d102      	bne.n	800b81c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b816:	f04f 33ff 	mov.w	r3, #4294967295
 800b81a:	e017      	b.n	800b84c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2201      	movs	r2, #1
 800b820:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b82e:	68f9      	ldr	r1, [r7, #12]
 800b830:	4808      	ldr	r0, [pc, #32]	; (800b854 <tcpip_try_callback+0x70>)
 800b832:	f00a ffc9 	bl	80167c8 <sys_mbox_trypost>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d006      	beq.n	800b84a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b83c:	68f9      	ldr	r1, [r7, #12]
 800b83e:	2008      	movs	r0, #8
 800b840:	f000 fe76 	bl	800c530 <memp_free>
    return ERR_MEM;
 800b844:	f04f 33ff 	mov.w	r3, #4294967295
 800b848:	e000      	b.n	800b84c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b84a:	2300      	movs	r3, #0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	24004a98 	.word	0x24004a98
 800b858:	08018764 	.word	0x08018764
 800b85c:	080187dc 	.word	0x080187dc
 800b860:	080187b4 	.word	0x080187b4

0800b864 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b870:	4806      	ldr	r0, [pc, #24]	; (800b88c <tcpip_send_msg_wait_sem+0x28>)
 800b872:	f00b f8d9 	bl	8016a28 <sys_mutex_lock>
  fn(apimsg);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	68b8      	ldr	r0, [r7, #8]
 800b87a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b87c:	4803      	ldr	r0, [pc, #12]	; (800b88c <tcpip_send_msg_wait_sem+0x28>)
 800b87e:	f00b f8e2 	bl	8016a46 <sys_mutex_unlock>
  return ERR_OK;
 800b882:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	24004ed4 	.word	0x24004ed4

0800b890 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af02      	add	r7, sp, #8
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b89a:	f000 f92d 	bl	800baf8 <lwip_init>

  tcpip_init_done = initfunc;
 800b89e:	4a17      	ldr	r2, [pc, #92]	; (800b8fc <tcpip_init+0x6c>)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b8a4:	4a16      	ldr	r2, [pc, #88]	; (800b900 <tcpip_init+0x70>)
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b8aa:	2106      	movs	r1, #6
 800b8ac:	4815      	ldr	r0, [pc, #84]	; (800b904 <tcpip_init+0x74>)
 800b8ae:	f00a ff5f 	bl	8016770 <sys_mbox_new>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d006      	beq.n	800b8c6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b8b8:	4b13      	ldr	r3, [pc, #76]	; (800b908 <tcpip_init+0x78>)
 800b8ba:	f240 2261 	movw	r2, #609	; 0x261
 800b8be:	4913      	ldr	r1, [pc, #76]	; (800b90c <tcpip_init+0x7c>)
 800b8c0:	4813      	ldr	r0, [pc, #76]	; (800b910 <tcpip_init+0x80>)
 800b8c2:	f00b faa7 	bl	8016e14 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b8c6:	4813      	ldr	r0, [pc, #76]	; (800b914 <tcpip_init+0x84>)
 800b8c8:	f00b f898 	bl	80169fc <sys_mutex_new>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d006      	beq.n	800b8e0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b8d2:	4b0d      	ldr	r3, [pc, #52]	; (800b908 <tcpip_init+0x78>)
 800b8d4:	f240 2265 	movw	r2, #613	; 0x265
 800b8d8:	490f      	ldr	r1, [pc, #60]	; (800b918 <tcpip_init+0x88>)
 800b8da:	480d      	ldr	r0, [pc, #52]	; (800b910 <tcpip_init+0x80>)
 800b8dc:	f00b fa9a 	bl	8016e14 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b8e0:	2318      	movs	r3, #24
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	490c      	ldr	r1, [pc, #48]	; (800b91c <tcpip_init+0x8c>)
 800b8ec:	480c      	ldr	r0, [pc, #48]	; (800b920 <tcpip_init+0x90>)
 800b8ee:	f00b f8b7 	bl	8016a60 <sys_thread_new>
}
 800b8f2:	bf00      	nop
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	24004a90 	.word	0x24004a90
 800b900:	24004a94 	.word	0x24004a94
 800b904:	24004a98 	.word	0x24004a98
 800b908:	08018764 	.word	0x08018764
 800b90c:	080187ec 	.word	0x080187ec
 800b910:	080187b4 	.word	0x080187b4
 800b914:	24004ed4 	.word	0x24004ed4
 800b918:	08018810 	.word	0x08018810
 800b91c:	0800b621 	.word	0x0800b621
 800b920:	08018834 	.word	0x08018834

0800b924 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	4603      	mov	r3, r0
 800b92c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b92e:	88fb      	ldrh	r3, [r7, #6]
 800b930:	021b      	lsls	r3, r3, #8
 800b932:	b21a      	sxth	r2, r3
 800b934:	88fb      	ldrh	r3, [r7, #6]
 800b936:	0a1b      	lsrs	r3, r3, #8
 800b938:	b29b      	uxth	r3, r3
 800b93a:	b21b      	sxth	r3, r3
 800b93c:	4313      	orrs	r3, r2
 800b93e:	b21b      	sxth	r3, r3
 800b940:	b29b      	uxth	r3, r3
}
 800b942:	4618      	mov	r0, r3
 800b944:	370c      	adds	r7, #12
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b94e:	b480      	push	{r7}
 800b950:	b083      	sub	sp, #12
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	061a      	lsls	r2, r3, #24
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	021b      	lsls	r3, r3, #8
 800b95e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b962:	431a      	orrs	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	0a1b      	lsrs	r3, r3, #8
 800b968:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b96c:	431a      	orrs	r2, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	0e1b      	lsrs	r3, r3, #24
 800b972:	4313      	orrs	r3, r2
}
 800b974:	4618      	mov	r0, r3
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b980:	b480      	push	{r7}
 800b982:	b089      	sub	sp, #36	; 0x24
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b98e:	2300      	movs	r3, #0
 800b990:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	f003 0301 	and.w	r3, r3, #1
 800b99c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00d      	beq.n	800b9c0 <lwip_standard_chksum+0x40>
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	dd0a      	ble.n	800b9c0 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b9aa:	69fa      	ldr	r2, [r7, #28]
 800b9ac:	1c53      	adds	r3, r2, #1
 800b9ae:	61fb      	str	r3, [r7, #28]
 800b9b0:	f107 030e 	add.w	r3, r7, #14
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	7812      	ldrb	r2, [r2, #0]
 800b9b8:	701a      	strb	r2, [r3, #0]
    len--;
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b9c4:	e00a      	b.n	800b9dc <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	1c9a      	adds	r2, r3, #2
 800b9ca:	61ba      	str	r2, [r7, #24]
 800b9cc:	881b      	ldrh	r3, [r3, #0]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	3b02      	subs	r3, #2
 800b9da:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	dcf1      	bgt.n	800b9c6 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	dd04      	ble.n	800b9f2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b9e8:	f107 030e 	add.w	r3, r7, #14
 800b9ec:	69ba      	ldr	r2, [r7, #24]
 800b9ee:	7812      	ldrb	r2, [r2, #0]
 800b9f0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b9f2:	89fb      	ldrh	r3, [r7, #14]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	0c1a      	lsrs	r2, r3, #16
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	4413      	add	r3, r2
 800ba06:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	0c1a      	lsrs	r2, r3, #16
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	4413      	add	r3, r2
 800ba12:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d007      	beq.n	800ba2a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	021b      	lsls	r3, r3, #8
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	0a1b      	lsrs	r3, r3, #8
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	4313      	orrs	r3, r2
 800ba28:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	b29b      	uxth	r3, r3
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3724      	adds	r7, #36	; 0x24
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	460b      	mov	r3, r1
 800ba44:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800ba46:	887b      	ldrh	r3, [r7, #2]
 800ba48:	4619      	mov	r1, r3
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7ff ff98 	bl	800b980 <lwip_standard_chksum>
 800ba50:	4603      	mov	r3, r0
 800ba52:	43db      	mvns	r3, r3
 800ba54:	b29b      	uxth	r3, r3
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b086      	sub	sp, #24
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800ba66:	2300      	movs	r3, #0
 800ba68:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	613b      	str	r3, [r7, #16]
 800ba72:	e02b      	b.n	800bacc <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	685a      	ldr	r2, [r3, #4]
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	895b      	ldrh	r3, [r3, #10]
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4610      	mov	r0, r2
 800ba80:	f7ff ff7e 	bl	800b980 <lwip_standard_chksum>
 800ba84:	4603      	mov	r3, r0
 800ba86:	461a      	mov	r2, r3
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	0c1a      	lsrs	r2, r3, #16
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	4413      	add	r3, r2
 800ba98:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	895b      	ldrh	r3, [r3, #10]
 800ba9e:	f003 0301 	and.w	r3, r3, #1
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00e      	beq.n	800bac6 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	bf0c      	ite	eq
 800baae:	2301      	moveq	r3, #1
 800bab0:	2300      	movne	r3, #0
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	021b      	lsls	r3, r3, #8
 800baba:	b29a      	uxth	r2, r3
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	0a1b      	lsrs	r3, r3, #8
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	4313      	orrs	r3, r2
 800bac4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	613b      	str	r3, [r7, #16]
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1d0      	bne.n	800ba74 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d007      	beq.n	800bae8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	021b      	lsls	r3, r3, #8
 800badc:	b29a      	uxth	r2, r3
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	0a1b      	lsrs	r3, r3, #8
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	4313      	orrs	r3, r2
 800bae6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	b29b      	uxth	r3, r3
 800baec:	43db      	mvns	r3, r3
 800baee:	b29b      	uxth	r3, r3
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3718      	adds	r7, #24
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bafe:	2300      	movs	r3, #0
 800bb00:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bb02:	f00a ff6f 	bl	80169e4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bb06:	f000 f8d5 	bl	800bcb4 <mem_init>
  memp_init();
 800bb0a:	f000 fc2d 	bl	800c368 <memp_init>
  pbuf_init();
  netif_init();
 800bb0e:	f000 fd39 	bl	800c584 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bb12:	f008 f847 	bl	8013ba4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bb16:	f001 fe49 	bl	800d7ac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bb1a:	f007 ff89 	bl	8013a30 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bb1e:	bf00      	nop
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
	...

0800bb28 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	4603      	mov	r3, r0
 800bb30:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bb32:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <ptr_to_mem+0x20>)
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	88fb      	ldrh	r3, [r7, #6]
 800bb38:	4413      	add	r3, r2
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	24004a9c 	.word	0x24004a9c

0800bb4c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bb54:	4b05      	ldr	r3, [pc, #20]	; (800bb6c <mem_to_ptr+0x20>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	1ad3      	subs	r3, r2, r3
 800bb5c:	b29b      	uxth	r3, r3
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop
 800bb6c:	24004a9c 	.word	0x24004a9c

0800bb70 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bb70:	b590      	push	{r4, r7, lr}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bb78:	4b45      	ldr	r3, [pc, #276]	; (800bc90 <plug_holes+0x120>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d206      	bcs.n	800bb90 <plug_holes+0x20>
 800bb82:	4b44      	ldr	r3, [pc, #272]	; (800bc94 <plug_holes+0x124>)
 800bb84:	f240 12df 	movw	r2, #479	; 0x1df
 800bb88:	4943      	ldr	r1, [pc, #268]	; (800bc98 <plug_holes+0x128>)
 800bb8a:	4844      	ldr	r0, [pc, #272]	; (800bc9c <plug_holes+0x12c>)
 800bb8c:	f00b f942 	bl	8016e14 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bb90:	4b43      	ldr	r3, [pc, #268]	; (800bca0 <plug_holes+0x130>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d306      	bcc.n	800bba8 <plug_holes+0x38>
 800bb9a:	4b3e      	ldr	r3, [pc, #248]	; (800bc94 <plug_holes+0x124>)
 800bb9c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bba0:	4940      	ldr	r1, [pc, #256]	; (800bca4 <plug_holes+0x134>)
 800bba2:	483e      	ldr	r0, [pc, #248]	; (800bc9c <plug_holes+0x12c>)
 800bba4:	f00b f936 	bl	8016e14 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	791b      	ldrb	r3, [r3, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d006      	beq.n	800bbbe <plug_holes+0x4e>
 800bbb0:	4b38      	ldr	r3, [pc, #224]	; (800bc94 <plug_holes+0x124>)
 800bbb2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bbb6:	493c      	ldr	r1, [pc, #240]	; (800bca8 <plug_holes+0x138>)
 800bbb8:	4838      	ldr	r0, [pc, #224]	; (800bc9c <plug_holes+0x12c>)
 800bbba:	f00b f92b 	bl	8016e14 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	881b      	ldrh	r3, [r3, #0]
 800bbc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bbc6:	d906      	bls.n	800bbd6 <plug_holes+0x66>
 800bbc8:	4b32      	ldr	r3, [pc, #200]	; (800bc94 <plug_holes+0x124>)
 800bbca:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bbce:	4937      	ldr	r1, [pc, #220]	; (800bcac <plug_holes+0x13c>)
 800bbd0:	4832      	ldr	r0, [pc, #200]	; (800bc9c <plug_holes+0x12c>)
 800bbd2:	f00b f91f 	bl	8016e14 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	881b      	ldrh	r3, [r3, #0]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7ff ffa4 	bl	800bb28 <ptr_to_mem>
 800bbe0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d024      	beq.n	800bc34 <plug_holes+0xc4>
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	791b      	ldrb	r3, [r3, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d120      	bne.n	800bc34 <plug_holes+0xc4>
 800bbf2:	4b2b      	ldr	r3, [pc, #172]	; (800bca0 <plug_holes+0x130>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d01b      	beq.n	800bc34 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bbfc:	4b2c      	ldr	r3, [pc, #176]	; (800bcb0 <plug_holes+0x140>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d102      	bne.n	800bc0c <plug_holes+0x9c>
      lfree = mem;
 800bc06:	4a2a      	ldr	r2, [pc, #168]	; (800bcb0 <plug_holes+0x140>)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	881a      	ldrh	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	881b      	ldrh	r3, [r3, #0]
 800bc18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc1c:	d00a      	beq.n	800bc34 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	881b      	ldrh	r3, [r3, #0]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7ff ff80 	bl	800bb28 <ptr_to_mem>
 800bc28:	4604      	mov	r4, r0
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f7ff ff8e 	bl	800bb4c <mem_to_ptr>
 800bc30:	4603      	mov	r3, r0
 800bc32:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	885b      	ldrh	r3, [r3, #2]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7ff ff75 	bl	800bb28 <ptr_to_mem>
 800bc3e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bc40:	68ba      	ldr	r2, [r7, #8]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d01f      	beq.n	800bc88 <plug_holes+0x118>
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	791b      	ldrb	r3, [r3, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d11b      	bne.n	800bc88 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bc50:	4b17      	ldr	r3, [pc, #92]	; (800bcb0 <plug_holes+0x140>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d102      	bne.n	800bc60 <plug_holes+0xf0>
      lfree = pmem;
 800bc5a:	4a15      	ldr	r2, [pc, #84]	; (800bcb0 <plug_holes+0x140>)
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	881a      	ldrh	r2, [r3, #0]
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	881b      	ldrh	r3, [r3, #0]
 800bc6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc70:	d00a      	beq.n	800bc88 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	881b      	ldrh	r3, [r3, #0]
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7ff ff56 	bl	800bb28 <ptr_to_mem>
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	68b8      	ldr	r0, [r7, #8]
 800bc80:	f7ff ff64 	bl	800bb4c <mem_to_ptr>
 800bc84:	4603      	mov	r3, r0
 800bc86:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bc88:	bf00      	nop
 800bc8a:	3714      	adds	r7, #20
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd90      	pop	{r4, r7, pc}
 800bc90:	24004a9c 	.word	0x24004a9c
 800bc94:	08018844 	.word	0x08018844
 800bc98:	08018874 	.word	0x08018874
 800bc9c:	0801888c 	.word	0x0801888c
 800bca0:	24004aa0 	.word	0x24004aa0
 800bca4:	080188b4 	.word	0x080188b4
 800bca8:	080188d0 	.word	0x080188d0
 800bcac:	080188ec 	.word	0x080188ec
 800bcb0:	24004aa8 	.word	0x24004aa8

0800bcb4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bcba:	4b1d      	ldr	r3, [pc, #116]	; (800bd30 <mem_init+0x7c>)
 800bcbc:	4a1d      	ldr	r2, [pc, #116]	; (800bd34 <mem_init+0x80>)
 800bcbe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bcc0:	4b1b      	ldr	r3, [pc, #108]	; (800bd30 <mem_init+0x7c>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bccc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bcda:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800bcde:	f7ff ff23 	bl	800bb28 <ptr_to_mem>
 800bce2:	4603      	mov	r3, r0
 800bce4:	4a14      	ldr	r2, [pc, #80]	; (800bd38 <mem_init+0x84>)
 800bce6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bce8:	4b13      	ldr	r3, [pc, #76]	; (800bd38 <mem_init+0x84>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2201      	movs	r2, #1
 800bcee:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bcf0:	4b11      	ldr	r3, [pc, #68]	; (800bd38 <mem_init+0x84>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bcf8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bcfa:	4b0f      	ldr	r3, [pc, #60]	; (800bd38 <mem_init+0x84>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bd02:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bd04:	4b0a      	ldr	r3, [pc, #40]	; (800bd30 <mem_init+0x7c>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a0c      	ldr	r2, [pc, #48]	; (800bd3c <mem_init+0x88>)
 800bd0a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bd0c:	480c      	ldr	r0, [pc, #48]	; (800bd40 <mem_init+0x8c>)
 800bd0e:	f00a fe75 	bl	80169fc <sys_mutex_new>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d006      	beq.n	800bd26 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bd18:	4b0a      	ldr	r3, [pc, #40]	; (800bd44 <mem_init+0x90>)
 800bd1a:	f240 221f 	movw	r2, #543	; 0x21f
 800bd1e:	490a      	ldr	r1, [pc, #40]	; (800bd48 <mem_init+0x94>)
 800bd20:	480a      	ldr	r0, [pc, #40]	; (800bd4c <mem_init+0x98>)
 800bd22:	f00b f877 	bl	8016e14 <iprintf>
  }
}
 800bd26:	bf00      	nop
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	24004a9c 	.word	0x24004a9c
 800bd34:	30044000 	.word	0x30044000
 800bd38:	24004aa0 	.word	0x24004aa0
 800bd3c:	24004aa8 	.word	0x24004aa8
 800bd40:	24004aa4 	.word	0x24004aa4
 800bd44:	08018844 	.word	0x08018844
 800bd48:	08018918 	.word	0x08018918
 800bd4c:	0801888c 	.word	0x0801888c

0800bd50 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7ff fef7 	bl	800bb4c <mem_to_ptr>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7ff fede 	bl	800bb28 <ptr_to_mem>
 800bd6c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	885b      	ldrh	r3, [r3, #2]
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7ff fed8 	bl	800bb28 <ptr_to_mem>
 800bd78:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	881b      	ldrh	r3, [r3, #0]
 800bd7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd82:	d818      	bhi.n	800bdb6 <mem_link_valid+0x66>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	885b      	ldrh	r3, [r3, #2]
 800bd88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd8c:	d813      	bhi.n	800bdb6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bd92:	8afa      	ldrh	r2, [r7, #22]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d004      	beq.n	800bda2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	881b      	ldrh	r3, [r3, #0]
 800bd9c:	8afa      	ldrh	r2, [r7, #22]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d109      	bne.n	800bdb6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bda2:	4b08      	ldr	r3, [pc, #32]	; (800bdc4 <mem_link_valid+0x74>)
 800bda4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bda6:	693a      	ldr	r2, [r7, #16]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d006      	beq.n	800bdba <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	885b      	ldrh	r3, [r3, #2]
 800bdb0:	8afa      	ldrh	r2, [r7, #22]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d001      	beq.n	800bdba <mem_link_valid+0x6a>
    return 0;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	e000      	b.n	800bdbc <mem_link_valid+0x6c>
  }
  return 1;
 800bdba:	2301      	movs	r3, #1
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3718      	adds	r7, #24
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	24004aa0 	.word	0x24004aa0

0800bdc8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d070      	beq.n	800beb8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f003 0303 	and.w	r3, r3, #3
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00d      	beq.n	800bdfc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bde0:	4b37      	ldr	r3, [pc, #220]	; (800bec0 <mem_free+0xf8>)
 800bde2:	f240 2273 	movw	r2, #627	; 0x273
 800bde6:	4937      	ldr	r1, [pc, #220]	; (800bec4 <mem_free+0xfc>)
 800bde8:	4837      	ldr	r0, [pc, #220]	; (800bec8 <mem_free+0x100>)
 800bdea:	f00b f813 	bl	8016e14 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bdee:	f00a fe57 	bl	8016aa0 <sys_arch_protect>
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	f00a fe61 	bl	8016abc <sys_arch_unprotect>
    return;
 800bdfa:	e05e      	b.n	800beba <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	3b08      	subs	r3, #8
 800be00:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800be02:	4b32      	ldr	r3, [pc, #200]	; (800becc <mem_free+0x104>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	69fa      	ldr	r2, [r7, #28]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d306      	bcc.n	800be1a <mem_free+0x52>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f103 020c 	add.w	r2, r3, #12
 800be12:	4b2f      	ldr	r3, [pc, #188]	; (800bed0 <mem_free+0x108>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	429a      	cmp	r2, r3
 800be18:	d90d      	bls.n	800be36 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800be1a:	4b29      	ldr	r3, [pc, #164]	; (800bec0 <mem_free+0xf8>)
 800be1c:	f240 227f 	movw	r2, #639	; 0x27f
 800be20:	492c      	ldr	r1, [pc, #176]	; (800bed4 <mem_free+0x10c>)
 800be22:	4829      	ldr	r0, [pc, #164]	; (800bec8 <mem_free+0x100>)
 800be24:	f00a fff6 	bl	8016e14 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be28:	f00a fe3a 	bl	8016aa0 <sys_arch_protect>
 800be2c:	6138      	str	r0, [r7, #16]
 800be2e:	6938      	ldr	r0, [r7, #16]
 800be30:	f00a fe44 	bl	8016abc <sys_arch_unprotect>
    return;
 800be34:	e041      	b.n	800beba <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800be36:	4828      	ldr	r0, [pc, #160]	; (800bed8 <mem_free+0x110>)
 800be38:	f00a fdf6 	bl	8016a28 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	791b      	ldrb	r3, [r3, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d110      	bne.n	800be66 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800be44:	4b1e      	ldr	r3, [pc, #120]	; (800bec0 <mem_free+0xf8>)
 800be46:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800be4a:	4924      	ldr	r1, [pc, #144]	; (800bedc <mem_free+0x114>)
 800be4c:	481e      	ldr	r0, [pc, #120]	; (800bec8 <mem_free+0x100>)
 800be4e:	f00a ffe1 	bl	8016e14 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800be52:	4821      	ldr	r0, [pc, #132]	; (800bed8 <mem_free+0x110>)
 800be54:	f00a fdf7 	bl	8016a46 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be58:	f00a fe22 	bl	8016aa0 <sys_arch_protect>
 800be5c:	6178      	str	r0, [r7, #20]
 800be5e:	6978      	ldr	r0, [r7, #20]
 800be60:	f00a fe2c 	bl	8016abc <sys_arch_unprotect>
    return;
 800be64:	e029      	b.n	800beba <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800be66:	69f8      	ldr	r0, [r7, #28]
 800be68:	f7ff ff72 	bl	800bd50 <mem_link_valid>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d110      	bne.n	800be94 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800be72:	4b13      	ldr	r3, [pc, #76]	; (800bec0 <mem_free+0xf8>)
 800be74:	f240 2295 	movw	r2, #661	; 0x295
 800be78:	4919      	ldr	r1, [pc, #100]	; (800bee0 <mem_free+0x118>)
 800be7a:	4813      	ldr	r0, [pc, #76]	; (800bec8 <mem_free+0x100>)
 800be7c:	f00a ffca 	bl	8016e14 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800be80:	4815      	ldr	r0, [pc, #84]	; (800bed8 <mem_free+0x110>)
 800be82:	f00a fde0 	bl	8016a46 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be86:	f00a fe0b 	bl	8016aa0 <sys_arch_protect>
 800be8a:	61b8      	str	r0, [r7, #24]
 800be8c:	69b8      	ldr	r0, [r7, #24]
 800be8e:	f00a fe15 	bl	8016abc <sys_arch_unprotect>
    return;
 800be92:	e012      	b.n	800beba <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	2200      	movs	r2, #0
 800be98:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800be9a:	4b12      	ldr	r3, [pc, #72]	; (800bee4 <mem_free+0x11c>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	69fa      	ldr	r2, [r7, #28]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d202      	bcs.n	800beaa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bea4:	4a0f      	ldr	r2, [pc, #60]	; (800bee4 <mem_free+0x11c>)
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800beaa:	69f8      	ldr	r0, [r7, #28]
 800beac:	f7ff fe60 	bl	800bb70 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800beb0:	4809      	ldr	r0, [pc, #36]	; (800bed8 <mem_free+0x110>)
 800beb2:	f00a fdc8 	bl	8016a46 <sys_mutex_unlock>
 800beb6:	e000      	b.n	800beba <mem_free+0xf2>
    return;
 800beb8:	bf00      	nop
}
 800beba:	3720      	adds	r7, #32
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	08018844 	.word	0x08018844
 800bec4:	08018934 	.word	0x08018934
 800bec8:	0801888c 	.word	0x0801888c
 800becc:	24004a9c 	.word	0x24004a9c
 800bed0:	24004aa0 	.word	0x24004aa0
 800bed4:	08018958 	.word	0x08018958
 800bed8:	24004aa4 	.word	0x24004aa4
 800bedc:	08018974 	.word	0x08018974
 800bee0:	0801899c 	.word	0x0801899c
 800bee4:	24004aa8 	.word	0x24004aa8

0800bee8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b088      	sub	sp, #32
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	460b      	mov	r3, r1
 800bef2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bef4:	887b      	ldrh	r3, [r7, #2]
 800bef6:	3303      	adds	r3, #3
 800bef8:	b29b      	uxth	r3, r3
 800befa:	f023 0303 	bic.w	r3, r3, #3
 800befe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bf00:	8bfb      	ldrh	r3, [r7, #30]
 800bf02:	2b0b      	cmp	r3, #11
 800bf04:	d801      	bhi.n	800bf0a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bf06:	230c      	movs	r3, #12
 800bf08:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bf0a:	8bfb      	ldrh	r3, [r7, #30]
 800bf0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf10:	d803      	bhi.n	800bf1a <mem_trim+0x32>
 800bf12:	8bfa      	ldrh	r2, [r7, #30]
 800bf14:	887b      	ldrh	r3, [r7, #2]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d201      	bcs.n	800bf1e <mem_trim+0x36>
    return NULL;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	e0d8      	b.n	800c0d0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bf1e:	4b6e      	ldr	r3, [pc, #440]	; (800c0d8 <mem_trim+0x1f0>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d304      	bcc.n	800bf32 <mem_trim+0x4a>
 800bf28:	4b6c      	ldr	r3, [pc, #432]	; (800c0dc <mem_trim+0x1f4>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d306      	bcc.n	800bf40 <mem_trim+0x58>
 800bf32:	4b6b      	ldr	r3, [pc, #428]	; (800c0e0 <mem_trim+0x1f8>)
 800bf34:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bf38:	496a      	ldr	r1, [pc, #424]	; (800c0e4 <mem_trim+0x1fc>)
 800bf3a:	486b      	ldr	r0, [pc, #428]	; (800c0e8 <mem_trim+0x200>)
 800bf3c:	f00a ff6a 	bl	8016e14 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bf40:	4b65      	ldr	r3, [pc, #404]	; (800c0d8 <mem_trim+0x1f0>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d304      	bcc.n	800bf54 <mem_trim+0x6c>
 800bf4a:	4b64      	ldr	r3, [pc, #400]	; (800c0dc <mem_trim+0x1f4>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d307      	bcc.n	800bf64 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf54:	f00a fda4 	bl	8016aa0 <sys_arch_protect>
 800bf58:	60b8      	str	r0, [r7, #8]
 800bf5a:	68b8      	ldr	r0, [r7, #8]
 800bf5c:	f00a fdae 	bl	8016abc <sys_arch_unprotect>
    return rmem;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	e0b5      	b.n	800c0d0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	3b08      	subs	r3, #8
 800bf68:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bf6a:	69b8      	ldr	r0, [r7, #24]
 800bf6c:	f7ff fdee 	bl	800bb4c <mem_to_ptr>
 800bf70:	4603      	mov	r3, r0
 800bf72:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	881a      	ldrh	r2, [r3, #0]
 800bf78:	8afb      	ldrh	r3, [r7, #22]
 800bf7a:	1ad3      	subs	r3, r2, r3
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	3b08      	subs	r3, #8
 800bf80:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bf82:	8bfa      	ldrh	r2, [r7, #30]
 800bf84:	8abb      	ldrh	r3, [r7, #20]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d906      	bls.n	800bf98 <mem_trim+0xb0>
 800bf8a:	4b55      	ldr	r3, [pc, #340]	; (800c0e0 <mem_trim+0x1f8>)
 800bf8c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bf90:	4956      	ldr	r1, [pc, #344]	; (800c0ec <mem_trim+0x204>)
 800bf92:	4855      	ldr	r0, [pc, #340]	; (800c0e8 <mem_trim+0x200>)
 800bf94:	f00a ff3e 	bl	8016e14 <iprintf>
  if (newsize > size) {
 800bf98:	8bfa      	ldrh	r2, [r7, #30]
 800bf9a:	8abb      	ldrh	r3, [r7, #20]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d901      	bls.n	800bfa4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	e095      	b.n	800c0d0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bfa4:	8bfa      	ldrh	r2, [r7, #30]
 800bfa6:	8abb      	ldrh	r3, [r7, #20]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d101      	bne.n	800bfb0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	e08f      	b.n	800c0d0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bfb0:	484f      	ldr	r0, [pc, #316]	; (800c0f0 <mem_trim+0x208>)
 800bfb2:	f00a fd39 	bl	8016a28 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	881b      	ldrh	r3, [r3, #0]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7ff fdb4 	bl	800bb28 <ptr_to_mem>
 800bfc0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	791b      	ldrb	r3, [r3, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d13f      	bne.n	800c04a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	881b      	ldrh	r3, [r3, #0]
 800bfce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bfd2:	d106      	bne.n	800bfe2 <mem_trim+0xfa>
 800bfd4:	4b42      	ldr	r3, [pc, #264]	; (800c0e0 <mem_trim+0x1f8>)
 800bfd6:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bfda:	4946      	ldr	r1, [pc, #280]	; (800c0f4 <mem_trim+0x20c>)
 800bfdc:	4842      	ldr	r0, [pc, #264]	; (800c0e8 <mem_trim+0x200>)
 800bfde:	f00a ff19 	bl	8016e14 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	881b      	ldrh	r3, [r3, #0]
 800bfe6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bfe8:	8afa      	ldrh	r2, [r7, #22]
 800bfea:	8bfb      	ldrh	r3, [r7, #30]
 800bfec:	4413      	add	r3, r2
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	3308      	adds	r3, #8
 800bff2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bff4:	4b40      	ldr	r3, [pc, #256]	; (800c0f8 <mem_trim+0x210>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	693a      	ldr	r2, [r7, #16]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d106      	bne.n	800c00c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bffe:	89fb      	ldrh	r3, [r7, #14]
 800c000:	4618      	mov	r0, r3
 800c002:	f7ff fd91 	bl	800bb28 <ptr_to_mem>
 800c006:	4603      	mov	r3, r0
 800c008:	4a3b      	ldr	r2, [pc, #236]	; (800c0f8 <mem_trim+0x210>)
 800c00a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c00c:	89fb      	ldrh	r3, [r7, #14]
 800c00e:	4618      	mov	r0, r3
 800c010:	f7ff fd8a 	bl	800bb28 <ptr_to_mem>
 800c014:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	2200      	movs	r2, #0
 800c01a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	89ba      	ldrh	r2, [r7, #12]
 800c020:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	8afa      	ldrh	r2, [r7, #22]
 800c026:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	89fa      	ldrh	r2, [r7, #14]
 800c02c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	881b      	ldrh	r3, [r3, #0]
 800c032:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c036:	d047      	beq.n	800c0c8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	881b      	ldrh	r3, [r3, #0]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7ff fd73 	bl	800bb28 <ptr_to_mem>
 800c042:	4602      	mov	r2, r0
 800c044:	89fb      	ldrh	r3, [r7, #14]
 800c046:	8053      	strh	r3, [r2, #2]
 800c048:	e03e      	b.n	800c0c8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c04a:	8bfb      	ldrh	r3, [r7, #30]
 800c04c:	f103 0214 	add.w	r2, r3, #20
 800c050:	8abb      	ldrh	r3, [r7, #20]
 800c052:	429a      	cmp	r2, r3
 800c054:	d838      	bhi.n	800c0c8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c056:	8afa      	ldrh	r2, [r7, #22]
 800c058:	8bfb      	ldrh	r3, [r7, #30]
 800c05a:	4413      	add	r3, r2
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	3308      	adds	r3, #8
 800c060:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	881b      	ldrh	r3, [r3, #0]
 800c066:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c06a:	d106      	bne.n	800c07a <mem_trim+0x192>
 800c06c:	4b1c      	ldr	r3, [pc, #112]	; (800c0e0 <mem_trim+0x1f8>)
 800c06e:	f240 3216 	movw	r2, #790	; 0x316
 800c072:	4920      	ldr	r1, [pc, #128]	; (800c0f4 <mem_trim+0x20c>)
 800c074:	481c      	ldr	r0, [pc, #112]	; (800c0e8 <mem_trim+0x200>)
 800c076:	f00a fecd 	bl	8016e14 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c07a:	89fb      	ldrh	r3, [r7, #14]
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7ff fd53 	bl	800bb28 <ptr_to_mem>
 800c082:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c084:	4b1c      	ldr	r3, [pc, #112]	; (800c0f8 <mem_trim+0x210>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d202      	bcs.n	800c094 <mem_trim+0x1ac>
      lfree = mem2;
 800c08e:	4a1a      	ldr	r2, [pc, #104]	; (800c0f8 <mem_trim+0x210>)
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	2200      	movs	r2, #0
 800c098:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	881a      	ldrh	r2, [r3, #0]
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	8afa      	ldrh	r2, [r7, #22]
 800c0a6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	89fa      	ldrh	r2, [r7, #14]
 800c0ac:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	881b      	ldrh	r3, [r3, #0]
 800c0b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c0b6:	d007      	beq.n	800c0c8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	881b      	ldrh	r3, [r3, #0]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7ff fd33 	bl	800bb28 <ptr_to_mem>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	89fb      	ldrh	r3, [r7, #14]
 800c0c6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c0c8:	4809      	ldr	r0, [pc, #36]	; (800c0f0 <mem_trim+0x208>)
 800c0ca:	f00a fcbc 	bl	8016a46 <sys_mutex_unlock>
  return rmem;
 800c0ce:	687b      	ldr	r3, [r7, #4]
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3720      	adds	r7, #32
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	24004a9c 	.word	0x24004a9c
 800c0dc:	24004aa0 	.word	0x24004aa0
 800c0e0:	08018844 	.word	0x08018844
 800c0e4:	080189d0 	.word	0x080189d0
 800c0e8:	0801888c 	.word	0x0801888c
 800c0ec:	080189e8 	.word	0x080189e8
 800c0f0:	24004aa4 	.word	0x24004aa4
 800c0f4:	08018a08 	.word	0x08018a08
 800c0f8:	24004aa8 	.word	0x24004aa8

0800c0fc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b088      	sub	sp, #32
 800c100:	af00      	add	r7, sp, #0
 800c102:	4603      	mov	r3, r0
 800c104:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c106:	88fb      	ldrh	r3, [r7, #6]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d101      	bne.n	800c110 <mem_malloc+0x14>
    return NULL;
 800c10c:	2300      	movs	r3, #0
 800c10e:	e0e2      	b.n	800c2d6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c110:	88fb      	ldrh	r3, [r7, #6]
 800c112:	3303      	adds	r3, #3
 800c114:	b29b      	uxth	r3, r3
 800c116:	f023 0303 	bic.w	r3, r3, #3
 800c11a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c11c:	8bbb      	ldrh	r3, [r7, #28]
 800c11e:	2b0b      	cmp	r3, #11
 800c120:	d801      	bhi.n	800c126 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c122:	230c      	movs	r3, #12
 800c124:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c126:	8bbb      	ldrh	r3, [r7, #28]
 800c128:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c12c:	d803      	bhi.n	800c136 <mem_malloc+0x3a>
 800c12e:	8bba      	ldrh	r2, [r7, #28]
 800c130:	88fb      	ldrh	r3, [r7, #6]
 800c132:	429a      	cmp	r2, r3
 800c134:	d201      	bcs.n	800c13a <mem_malloc+0x3e>
    return NULL;
 800c136:	2300      	movs	r3, #0
 800c138:	e0cd      	b.n	800c2d6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c13a:	4869      	ldr	r0, [pc, #420]	; (800c2e0 <mem_malloc+0x1e4>)
 800c13c:	f00a fc74 	bl	8016a28 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c140:	4b68      	ldr	r3, [pc, #416]	; (800c2e4 <mem_malloc+0x1e8>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4618      	mov	r0, r3
 800c146:	f7ff fd01 	bl	800bb4c <mem_to_ptr>
 800c14a:	4603      	mov	r3, r0
 800c14c:	83fb      	strh	r3, [r7, #30]
 800c14e:	e0b7      	b.n	800c2c0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c150:	8bfb      	ldrh	r3, [r7, #30]
 800c152:	4618      	mov	r0, r3
 800c154:	f7ff fce8 	bl	800bb28 <ptr_to_mem>
 800c158:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	791b      	ldrb	r3, [r3, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f040 80a7 	bne.w	800c2b2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	881b      	ldrh	r3, [r3, #0]
 800c168:	461a      	mov	r2, r3
 800c16a:	8bfb      	ldrh	r3, [r7, #30]
 800c16c:	1ad3      	subs	r3, r2, r3
 800c16e:	f1a3 0208 	sub.w	r2, r3, #8
 800c172:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c174:	429a      	cmp	r2, r3
 800c176:	f0c0 809c 	bcc.w	800c2b2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	881b      	ldrh	r3, [r3, #0]
 800c17e:	461a      	mov	r2, r3
 800c180:	8bfb      	ldrh	r3, [r7, #30]
 800c182:	1ad3      	subs	r3, r2, r3
 800c184:	f1a3 0208 	sub.w	r2, r3, #8
 800c188:	8bbb      	ldrh	r3, [r7, #28]
 800c18a:	3314      	adds	r3, #20
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d333      	bcc.n	800c1f8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c190:	8bfa      	ldrh	r2, [r7, #30]
 800c192:	8bbb      	ldrh	r3, [r7, #28]
 800c194:	4413      	add	r3, r2
 800c196:	b29b      	uxth	r3, r3
 800c198:	3308      	adds	r3, #8
 800c19a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c19c:	8a7b      	ldrh	r3, [r7, #18]
 800c19e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1a2:	d106      	bne.n	800c1b2 <mem_malloc+0xb6>
 800c1a4:	4b50      	ldr	r3, [pc, #320]	; (800c2e8 <mem_malloc+0x1ec>)
 800c1a6:	f240 3287 	movw	r2, #903	; 0x387
 800c1aa:	4950      	ldr	r1, [pc, #320]	; (800c2ec <mem_malloc+0x1f0>)
 800c1ac:	4850      	ldr	r0, [pc, #320]	; (800c2f0 <mem_malloc+0x1f4>)
 800c1ae:	f00a fe31 	bl	8016e14 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c1b2:	8a7b      	ldrh	r3, [r7, #18]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7ff fcb7 	bl	800bb28 <ptr_to_mem>
 800c1ba:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	881a      	ldrh	r2, [r3, #0]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	8bfa      	ldrh	r2, [r7, #30]
 800c1ce:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	8a7a      	ldrh	r2, [r7, #18]
 800c1d4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	2201      	movs	r2, #1
 800c1da:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	881b      	ldrh	r3, [r3, #0]
 800c1e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1e4:	d00b      	beq.n	800c1fe <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	881b      	ldrh	r3, [r3, #0]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7ff fc9c 	bl	800bb28 <ptr_to_mem>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	8a7b      	ldrh	r3, [r7, #18]
 800c1f4:	8053      	strh	r3, [r2, #2]
 800c1f6:	e002      	b.n	800c1fe <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c1fe:	4b39      	ldr	r3, [pc, #228]	; (800c2e4 <mem_malloc+0x1e8>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	697a      	ldr	r2, [r7, #20]
 800c204:	429a      	cmp	r2, r3
 800c206:	d127      	bne.n	800c258 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c208:	4b36      	ldr	r3, [pc, #216]	; (800c2e4 <mem_malloc+0x1e8>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c20e:	e005      	b.n	800c21c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	881b      	ldrh	r3, [r3, #0]
 800c214:	4618      	mov	r0, r3
 800c216:	f7ff fc87 	bl	800bb28 <ptr_to_mem>
 800c21a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	791b      	ldrb	r3, [r3, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d004      	beq.n	800c22e <mem_malloc+0x132>
 800c224:	4b33      	ldr	r3, [pc, #204]	; (800c2f4 <mem_malloc+0x1f8>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	69ba      	ldr	r2, [r7, #24]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d1f0      	bne.n	800c210 <mem_malloc+0x114>
          }
          lfree = cur;
 800c22e:	4a2d      	ldr	r2, [pc, #180]	; (800c2e4 <mem_malloc+0x1e8>)
 800c230:	69bb      	ldr	r3, [r7, #24]
 800c232:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c234:	4b2b      	ldr	r3, [pc, #172]	; (800c2e4 <mem_malloc+0x1e8>)
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	4b2e      	ldr	r3, [pc, #184]	; (800c2f4 <mem_malloc+0x1f8>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d00b      	beq.n	800c258 <mem_malloc+0x15c>
 800c240:	4b28      	ldr	r3, [pc, #160]	; (800c2e4 <mem_malloc+0x1e8>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	791b      	ldrb	r3, [r3, #4]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d006      	beq.n	800c258 <mem_malloc+0x15c>
 800c24a:	4b27      	ldr	r3, [pc, #156]	; (800c2e8 <mem_malloc+0x1ec>)
 800c24c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c250:	4929      	ldr	r1, [pc, #164]	; (800c2f8 <mem_malloc+0x1fc>)
 800c252:	4827      	ldr	r0, [pc, #156]	; (800c2f0 <mem_malloc+0x1f4>)
 800c254:	f00a fdde 	bl	8016e14 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c258:	4821      	ldr	r0, [pc, #132]	; (800c2e0 <mem_malloc+0x1e4>)
 800c25a:	f00a fbf4 	bl	8016a46 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c25e:	8bba      	ldrh	r2, [r7, #28]
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	4413      	add	r3, r2
 800c264:	3308      	adds	r3, #8
 800c266:	4a23      	ldr	r2, [pc, #140]	; (800c2f4 <mem_malloc+0x1f8>)
 800c268:	6812      	ldr	r2, [r2, #0]
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d906      	bls.n	800c27c <mem_malloc+0x180>
 800c26e:	4b1e      	ldr	r3, [pc, #120]	; (800c2e8 <mem_malloc+0x1ec>)
 800c270:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c274:	4921      	ldr	r1, [pc, #132]	; (800c2fc <mem_malloc+0x200>)
 800c276:	481e      	ldr	r0, [pc, #120]	; (800c2f0 <mem_malloc+0x1f4>)
 800c278:	f00a fdcc 	bl	8016e14 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	f003 0303 	and.w	r3, r3, #3
 800c282:	2b00      	cmp	r3, #0
 800c284:	d006      	beq.n	800c294 <mem_malloc+0x198>
 800c286:	4b18      	ldr	r3, [pc, #96]	; (800c2e8 <mem_malloc+0x1ec>)
 800c288:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c28c:	491c      	ldr	r1, [pc, #112]	; (800c300 <mem_malloc+0x204>)
 800c28e:	4818      	ldr	r0, [pc, #96]	; (800c2f0 <mem_malloc+0x1f4>)
 800c290:	f00a fdc0 	bl	8016e14 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	f003 0303 	and.w	r3, r3, #3
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d006      	beq.n	800c2ac <mem_malloc+0x1b0>
 800c29e:	4b12      	ldr	r3, [pc, #72]	; (800c2e8 <mem_malloc+0x1ec>)
 800c2a0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c2a4:	4917      	ldr	r1, [pc, #92]	; (800c304 <mem_malloc+0x208>)
 800c2a6:	4812      	ldr	r0, [pc, #72]	; (800c2f0 <mem_malloc+0x1f4>)
 800c2a8:	f00a fdb4 	bl	8016e14 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	3308      	adds	r3, #8
 800c2b0:	e011      	b.n	800c2d6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c2b2:	8bfb      	ldrh	r3, [r7, #30]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7ff fc37 	bl	800bb28 <ptr_to_mem>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	881b      	ldrh	r3, [r3, #0]
 800c2be:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c2c0:	8bfa      	ldrh	r2, [r7, #30]
 800c2c2:	8bbb      	ldrh	r3, [r7, #28]
 800c2c4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	f4ff af41 	bcc.w	800c150 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c2ce:	4804      	ldr	r0, [pc, #16]	; (800c2e0 <mem_malloc+0x1e4>)
 800c2d0:	f00a fbb9 	bl	8016a46 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3720      	adds	r7, #32
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	24004aa4 	.word	0x24004aa4
 800c2e4:	24004aa8 	.word	0x24004aa8
 800c2e8:	08018844 	.word	0x08018844
 800c2ec:	08018a08 	.word	0x08018a08
 800c2f0:	0801888c 	.word	0x0801888c
 800c2f4:	24004aa0 	.word	0x24004aa0
 800c2f8:	08018a1c 	.word	0x08018a1c
 800c2fc:	08018a38 	.word	0x08018a38
 800c300:	08018a68 	.word	0x08018a68
 800c304:	08018a98 	.word	0x08018a98

0800c308 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	2200      	movs	r2, #0
 800c316:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	3303      	adds	r3, #3
 800c31e:	f023 0303 	bic.w	r3, r3, #3
 800c322:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c324:	2300      	movs	r3, #0
 800c326:	60fb      	str	r3, [r7, #12]
 800c328:	e011      	b.n	800c34e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	68ba      	ldr	r2, [r7, #8]
 800c33a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	881b      	ldrh	r3, [r3, #0]
 800c340:	461a      	mov	r2, r3
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	4413      	add	r3, r2
 800c346:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	3301      	adds	r3, #1
 800c34c:	60fb      	str	r3, [r7, #12]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	885b      	ldrh	r3, [r3, #2]
 800c352:	461a      	mov	r2, r3
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	4293      	cmp	r3, r2
 800c358:	dbe7      	blt.n	800c32a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c35a:	bf00      	nop
 800c35c:	bf00      	nop
 800c35e:	3714      	adds	r7, #20
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c36e:	2300      	movs	r3, #0
 800c370:	80fb      	strh	r3, [r7, #6]
 800c372:	e009      	b.n	800c388 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c374:	88fb      	ldrh	r3, [r7, #6]
 800c376:	4a08      	ldr	r2, [pc, #32]	; (800c398 <memp_init+0x30>)
 800c378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff ffc3 	bl	800c308 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c382:	88fb      	ldrh	r3, [r7, #6]
 800c384:	3301      	adds	r3, #1
 800c386:	80fb      	strh	r3, [r7, #6]
 800c388:	88fb      	ldrh	r3, [r7, #6]
 800c38a:	2b0c      	cmp	r3, #12
 800c38c:	d9f2      	bls.n	800c374 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c38e:	bf00      	nop
 800c390:	bf00      	nop
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	0801b2cc 	.word	0x0801b2cc

0800c39c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c3a4:	f00a fb7c 	bl	8016aa0 <sys_arch_protect>
 800c3a8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d015      	beq.n	800c3e4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	6812      	ldr	r2, [r2, #0]
 800c3c0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	f003 0303 	and.w	r3, r3, #3
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d006      	beq.n	800c3da <do_memp_malloc_pool+0x3e>
 800c3cc:	4b09      	ldr	r3, [pc, #36]	; (800c3f4 <do_memp_malloc_pool+0x58>)
 800c3ce:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c3d2:	4909      	ldr	r1, [pc, #36]	; (800c3f8 <do_memp_malloc_pool+0x5c>)
 800c3d4:	4809      	ldr	r0, [pc, #36]	; (800c3fc <do_memp_malloc_pool+0x60>)
 800c3d6:	f00a fd1d 	bl	8016e14 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c3da:	68f8      	ldr	r0, [r7, #12]
 800c3dc:	f00a fb6e 	bl	8016abc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	e003      	b.n	800c3ec <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f00a fb69 	bl	8016abc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	08018abc 	.word	0x08018abc
 800c3f8:	08018aec 	.word	0x08018aec
 800c3fc:	08018b10 	.word	0x08018b10

0800c400 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d106      	bne.n	800c41c <memp_malloc_pool+0x1c>
 800c40e:	4b0a      	ldr	r3, [pc, #40]	; (800c438 <memp_malloc_pool+0x38>)
 800c410:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c414:	4909      	ldr	r1, [pc, #36]	; (800c43c <memp_malloc_pool+0x3c>)
 800c416:	480a      	ldr	r0, [pc, #40]	; (800c440 <memp_malloc_pool+0x40>)
 800c418:	f00a fcfc 	bl	8016e14 <iprintf>
  if (desc == NULL) {
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d101      	bne.n	800c426 <memp_malloc_pool+0x26>
    return NULL;
 800c422:	2300      	movs	r3, #0
 800c424:	e003      	b.n	800c42e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f7ff ffb8 	bl	800c39c <do_memp_malloc_pool>
 800c42c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	08018abc 	.word	0x08018abc
 800c43c:	08018b38 	.word	0x08018b38
 800c440:	08018b10 	.word	0x08018b10

0800c444 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	4603      	mov	r3, r0
 800c44c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c44e:	79fb      	ldrb	r3, [r7, #7]
 800c450:	2b0c      	cmp	r3, #12
 800c452:	d908      	bls.n	800c466 <memp_malloc+0x22>
 800c454:	4b0a      	ldr	r3, [pc, #40]	; (800c480 <memp_malloc+0x3c>)
 800c456:	f240 1257 	movw	r2, #343	; 0x157
 800c45a:	490a      	ldr	r1, [pc, #40]	; (800c484 <memp_malloc+0x40>)
 800c45c:	480a      	ldr	r0, [pc, #40]	; (800c488 <memp_malloc+0x44>)
 800c45e:	f00a fcd9 	bl	8016e14 <iprintf>
 800c462:	2300      	movs	r3, #0
 800c464:	e008      	b.n	800c478 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c466:	79fb      	ldrb	r3, [r7, #7]
 800c468:	4a08      	ldr	r2, [pc, #32]	; (800c48c <memp_malloc+0x48>)
 800c46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c46e:	4618      	mov	r0, r3
 800c470:	f7ff ff94 	bl	800c39c <do_memp_malloc_pool>
 800c474:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c476:	68fb      	ldr	r3, [r7, #12]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	08018abc 	.word	0x08018abc
 800c484:	08018b4c 	.word	0x08018b4c
 800c488:	08018b10 	.word	0x08018b10
 800c48c:	0801b2cc 	.word	0x0801b2cc

0800c490 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	f003 0303 	and.w	r3, r3, #3
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d006      	beq.n	800c4b2 <do_memp_free_pool+0x22>
 800c4a4:	4b0d      	ldr	r3, [pc, #52]	; (800c4dc <do_memp_free_pool+0x4c>)
 800c4a6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c4aa:	490d      	ldr	r1, [pc, #52]	; (800c4e0 <do_memp_free_pool+0x50>)
 800c4ac:	480d      	ldr	r0, [pc, #52]	; (800c4e4 <do_memp_free_pool+0x54>)
 800c4ae:	f00a fcb1 	bl	8016e14 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c4b6:	f00a faf3 	bl	8016aa0 <sys_arch_protect>
 800c4ba:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c4ce:	68b8      	ldr	r0, [r7, #8]
 800c4d0:	f00a faf4 	bl	8016abc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c4d4:	bf00      	nop
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	08018abc 	.word	0x08018abc
 800c4e0:	08018b6c 	.word	0x08018b6c
 800c4e4:	08018b10 	.word	0x08018b10

0800c4e8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d106      	bne.n	800c506 <memp_free_pool+0x1e>
 800c4f8:	4b0a      	ldr	r3, [pc, #40]	; (800c524 <memp_free_pool+0x3c>)
 800c4fa:	f240 1295 	movw	r2, #405	; 0x195
 800c4fe:	490a      	ldr	r1, [pc, #40]	; (800c528 <memp_free_pool+0x40>)
 800c500:	480a      	ldr	r0, [pc, #40]	; (800c52c <memp_free_pool+0x44>)
 800c502:	f00a fc87 	bl	8016e14 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d007      	beq.n	800c51c <memp_free_pool+0x34>
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d004      	beq.n	800c51c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c512:	6839      	ldr	r1, [r7, #0]
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f7ff ffbb 	bl	800c490 <do_memp_free_pool>
 800c51a:	e000      	b.n	800c51e <memp_free_pool+0x36>
    return;
 800c51c:	bf00      	nop
}
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	08018abc 	.word	0x08018abc
 800c528:	08018b38 	.word	0x08018b38
 800c52c:	08018b10 	.word	0x08018b10

0800c530 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	4603      	mov	r3, r0
 800c538:	6039      	str	r1, [r7, #0]
 800c53a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c53c:	79fb      	ldrb	r3, [r7, #7]
 800c53e:	2b0c      	cmp	r3, #12
 800c540:	d907      	bls.n	800c552 <memp_free+0x22>
 800c542:	4b0c      	ldr	r3, [pc, #48]	; (800c574 <memp_free+0x44>)
 800c544:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c548:	490b      	ldr	r1, [pc, #44]	; (800c578 <memp_free+0x48>)
 800c54a:	480c      	ldr	r0, [pc, #48]	; (800c57c <memp_free+0x4c>)
 800c54c:	f00a fc62 	bl	8016e14 <iprintf>
 800c550:	e00c      	b.n	800c56c <memp_free+0x3c>

  if (mem == NULL) {
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d008      	beq.n	800c56a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c558:	79fb      	ldrb	r3, [r7, #7]
 800c55a:	4a09      	ldr	r2, [pc, #36]	; (800c580 <memp_free+0x50>)
 800c55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c560:	6839      	ldr	r1, [r7, #0]
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff ff94 	bl	800c490 <do_memp_free_pool>
 800c568:	e000      	b.n	800c56c <memp_free+0x3c>
    return;
 800c56a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c56c:	3708      	adds	r7, #8
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	08018abc 	.word	0x08018abc
 800c578:	08018b8c 	.word	0x08018b8c
 800c57c:	08018b10 	.word	0x08018b10
 800c580:	0801b2cc 	.word	0x0801b2cc

0800c584 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c584:	b480      	push	{r7}
 800c586:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c588:	bf00      	nop
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
	...

0800c594 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b086      	sub	sp, #24
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
 800c5a0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d108      	bne.n	800c5ba <netif_add+0x26>
 800c5a8:	4b57      	ldr	r3, [pc, #348]	; (800c708 <netif_add+0x174>)
 800c5aa:	f240 1227 	movw	r2, #295	; 0x127
 800c5ae:	4957      	ldr	r1, [pc, #348]	; (800c70c <netif_add+0x178>)
 800c5b0:	4857      	ldr	r0, [pc, #348]	; (800c710 <netif_add+0x17c>)
 800c5b2:	f00a fc2f 	bl	8016e14 <iprintf>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	e0a2      	b.n	800c700 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d108      	bne.n	800c5d2 <netif_add+0x3e>
 800c5c0:	4b51      	ldr	r3, [pc, #324]	; (800c708 <netif_add+0x174>)
 800c5c2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c5c6:	4953      	ldr	r1, [pc, #332]	; (800c714 <netif_add+0x180>)
 800c5c8:	4851      	ldr	r0, [pc, #324]	; (800c710 <netif_add+0x17c>)
 800c5ca:	f00a fc23 	bl	8016e14 <iprintf>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	e096      	b.n	800c700 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d101      	bne.n	800c5dc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c5d8:	4b4f      	ldr	r3, [pc, #316]	; (800c718 <netif_add+0x184>)
 800c5da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d101      	bne.n	800c5e6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c5e2:	4b4d      	ldr	r3, [pc, #308]	; (800c718 <netif_add+0x184>)
 800c5e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d101      	bne.n	800c5f0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c5ec:	4b4a      	ldr	r3, [pc, #296]	; (800c718 <netif_add+0x184>)
 800c5ee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2200      	movs	r2, #0
 800c600:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	4a45      	ldr	r2, [pc, #276]	; (800c71c <netif_add+0x188>)
 800c606:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2200      	movs	r2, #0
 800c60c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2200      	movs	r2, #0
 800c612:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2200      	movs	r2, #0
 800c61a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6a3a      	ldr	r2, [r7, #32]
 800c620:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c622:	4b3f      	ldr	r3, [pc, #252]	; (800c720 <netif_add+0x18c>)
 800c624:	781a      	ldrb	r2, [r3, #0]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c630:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	68b9      	ldr	r1, [r7, #8]
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f000 f913 	bl	800c864 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	4798      	blx	r3
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d001      	beq.n	800c64e <netif_add+0xba>
    return NULL;
 800c64a:	2300      	movs	r3, #0
 800c64c:	e058      	b.n	800c700 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c654:	2bff      	cmp	r3, #255	; 0xff
 800c656:	d103      	bne.n	800c660 <netif_add+0xcc>
        netif->num = 0;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2200      	movs	r2, #0
 800c65c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c664:	4b2f      	ldr	r3, [pc, #188]	; (800c724 <netif_add+0x190>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	617b      	str	r3, [r7, #20]
 800c66a:	e02b      	b.n	800c6c4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c66c:	697a      	ldr	r2, [r7, #20]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	429a      	cmp	r2, r3
 800c672:	d106      	bne.n	800c682 <netif_add+0xee>
 800c674:	4b24      	ldr	r3, [pc, #144]	; (800c708 <netif_add+0x174>)
 800c676:	f240 128b 	movw	r2, #395	; 0x18b
 800c67a:	492b      	ldr	r1, [pc, #172]	; (800c728 <netif_add+0x194>)
 800c67c:	4824      	ldr	r0, [pc, #144]	; (800c710 <netif_add+0x17c>)
 800c67e:	f00a fbc9 	bl	8016e14 <iprintf>
        num_netifs++;
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	3301      	adds	r3, #1
 800c686:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	2bff      	cmp	r3, #255	; 0xff
 800c68c:	dd06      	ble.n	800c69c <netif_add+0x108>
 800c68e:	4b1e      	ldr	r3, [pc, #120]	; (800c708 <netif_add+0x174>)
 800c690:	f240 128d 	movw	r2, #397	; 0x18d
 800c694:	4925      	ldr	r1, [pc, #148]	; (800c72c <netif_add+0x198>)
 800c696:	481e      	ldr	r0, [pc, #120]	; (800c710 <netif_add+0x17c>)
 800c698:	f00a fbbc 	bl	8016e14 <iprintf>
        if (netif2->num == netif->num) {
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d108      	bne.n	800c6be <netif_add+0x12a>
          netif->num++;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c6bc:	e005      	b.n	800c6ca <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	617b      	str	r3, [r7, #20]
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1d0      	bne.n	800c66c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d1be      	bne.n	800c64e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6d6:	2bfe      	cmp	r3, #254	; 0xfe
 800c6d8:	d103      	bne.n	800c6e2 <netif_add+0x14e>
    netif_num = 0;
 800c6da:	4b11      	ldr	r3, [pc, #68]	; (800c720 <netif_add+0x18c>)
 800c6dc:	2200      	movs	r2, #0
 800c6de:	701a      	strb	r2, [r3, #0]
 800c6e0:	e006      	b.n	800c6f0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	4b0c      	ldr	r3, [pc, #48]	; (800c720 <netif_add+0x18c>)
 800c6ee:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c6f0:	4b0c      	ldr	r3, [pc, #48]	; (800c724 <netif_add+0x190>)
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c6f8:	4a0a      	ldr	r2, [pc, #40]	; (800c724 <netif_add+0x190>)
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3718      	adds	r7, #24
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	08018ba8 	.word	0x08018ba8
 800c70c:	08018c3c 	.word	0x08018c3c
 800c710:	08018bf8 	.word	0x08018bf8
 800c714:	08018c58 	.word	0x08018c58
 800c718:	0801b340 	.word	0x0801b340
 800c71c:	0800cb3f 	.word	0x0800cb3f
 800c720:	24004ae0 	.word	0x24004ae0
 800c724:	24007f88 	.word	0x24007f88
 800c728:	08018c7c 	.word	0x08018c7c
 800c72c:	08018c90 	.word	0x08018c90

0800c730 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c73a:	6839      	ldr	r1, [r7, #0]
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f002 fe4f 	bl	800f3e0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c742:	6839      	ldr	r1, [r7, #0]
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f007 fcfd 	bl	8014144 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c74a:	bf00      	nop
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
	...

0800c754 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d106      	bne.n	800c774 <netif_do_set_ipaddr+0x20>
 800c766:	4b1d      	ldr	r3, [pc, #116]	; (800c7dc <netif_do_set_ipaddr+0x88>)
 800c768:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c76c:	491c      	ldr	r1, [pc, #112]	; (800c7e0 <netif_do_set_ipaddr+0x8c>)
 800c76e:	481d      	ldr	r0, [pc, #116]	; (800c7e4 <netif_do_set_ipaddr+0x90>)
 800c770:	f00a fb50 	bl	8016e14 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d106      	bne.n	800c788 <netif_do_set_ipaddr+0x34>
 800c77a:	4b18      	ldr	r3, [pc, #96]	; (800c7dc <netif_do_set_ipaddr+0x88>)
 800c77c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c780:	4917      	ldr	r1, [pc, #92]	; (800c7e0 <netif_do_set_ipaddr+0x8c>)
 800c782:	4818      	ldr	r0, [pc, #96]	; (800c7e4 <netif_do_set_ipaddr+0x90>)
 800c784:	f00a fb46 	bl	8016e14 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	3304      	adds	r3, #4
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	429a      	cmp	r2, r3
 800c794:	d01c      	beq.n	800c7d0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	3304      	adds	r3, #4
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c7a6:	f107 0314 	add.w	r3, r7, #20
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7ff ffbf 	bl	800c730 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d002      	beq.n	800c7be <netif_do_set_ipaddr+0x6a>
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	e000      	b.n	800c7c0 <netif_do_set_ipaddr+0x6c>
 800c7be:	2300      	movs	r3, #0
 800c7c0:	68fa      	ldr	r2, [r7, #12]
 800c7c2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c7c4:	2101      	movs	r1, #1
 800c7c6:	68f8      	ldr	r0, [r7, #12]
 800c7c8:	f000 f8d2 	bl	800c970 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e000      	b.n	800c7d2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c7d0:	2300      	movs	r3, #0
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3718      	adds	r7, #24
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	08018ba8 	.word	0x08018ba8
 800c7e0:	08018cc0 	.word	0x08018cc0
 800c7e4:	08018bf8 	.word	0x08018bf8

0800c7e8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	3308      	adds	r3, #8
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d00a      	beq.n	800c818 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d002      	beq.n	800c80e <netif_do_set_netmask+0x26>
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	e000      	b.n	800c810 <netif_do_set_netmask+0x28>
 800c80e:	2300      	movs	r3, #0
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c814:	2301      	movs	r3, #1
 800c816:	e000      	b.n	800c81a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c826:	b480      	push	{r7}
 800c828:	b085      	sub	sp, #20
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	60f8      	str	r0, [r7, #12]
 800c82e:	60b9      	str	r1, [r7, #8]
 800c830:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	330c      	adds	r3, #12
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d00a      	beq.n	800c856 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d002      	beq.n	800c84c <netif_do_set_gw+0x26>
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	e000      	b.n	800c84e <netif_do_set_gw+0x28>
 800c84c:	2300      	movs	r3, #0
 800c84e:	68fa      	ldr	r2, [r7, #12]
 800c850:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c852:	2301      	movs	r3, #1
 800c854:	e000      	b.n	800c858 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c856:	2300      	movs	r3, #0
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b088      	sub	sp, #32
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
 800c870:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c872:	2300      	movs	r3, #0
 800c874:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c876:	2300      	movs	r3, #0
 800c878:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d101      	bne.n	800c884 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c880:	4b1c      	ldr	r3, [pc, #112]	; (800c8f4 <netif_set_addr+0x90>)
 800c882:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d101      	bne.n	800c88e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c88a:	4b1a      	ldr	r3, [pc, #104]	; (800c8f4 <netif_set_addr+0x90>)
 800c88c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d101      	bne.n	800c898 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c894:	4b17      	ldr	r3, [pc, #92]	; (800c8f4 <netif_set_addr+0x90>)
 800c896:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d003      	beq.n	800c8a6 <netif_set_addr+0x42>
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d101      	bne.n	800c8aa <netif_set_addr+0x46>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e000      	b.n	800c8ac <netif_set_addr+0x48>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d006      	beq.n	800c8c2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c8b4:	f107 0310 	add.w	r3, r7, #16
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	68b9      	ldr	r1, [r7, #8]
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f7ff ff49 	bl	800c754 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c8c2:	69fa      	ldr	r2, [r7, #28]
 800c8c4:	6879      	ldr	r1, [r7, #4]
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	f7ff ff8e 	bl	800c7e8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c8cc:	69ba      	ldr	r2, [r7, #24]
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f7ff ffa8 	bl	800c826 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d106      	bne.n	800c8ea <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c8dc:	f107 0310 	add.w	r3, r7, #16
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	68b9      	ldr	r1, [r7, #8]
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f7ff ff35 	bl	800c754 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c8ea:	bf00      	nop
 800c8ec:	3720      	adds	r7, #32
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	0801b340 	.word	0x0801b340

0800c8f8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c900:	4a04      	ldr	r2, [pc, #16]	; (800c914 <netif_set_default+0x1c>)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c906:	bf00      	nop
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	24007f8c 	.word	0x24007f8c

0800c918 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d107      	bne.n	800c936 <netif_set_up+0x1e>
 800c926:	4b0f      	ldr	r3, [pc, #60]	; (800c964 <netif_set_up+0x4c>)
 800c928:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c92c:	490e      	ldr	r1, [pc, #56]	; (800c968 <netif_set_up+0x50>)
 800c92e:	480f      	ldr	r0, [pc, #60]	; (800c96c <netif_set_up+0x54>)
 800c930:	f00a fa70 	bl	8016e14 <iprintf>
 800c934:	e013      	b.n	800c95e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c93c:	f003 0301 	and.w	r3, r3, #1
 800c940:	2b00      	cmp	r3, #0
 800c942:	d10c      	bne.n	800c95e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c94a:	f043 0301 	orr.w	r3, r3, #1
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c956:	2103      	movs	r1, #3
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 f809 	bl	800c970 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	08018ba8 	.word	0x08018ba8
 800c968:	08018d30 	.word	0x08018d30
 800c96c:	08018bf8 	.word	0x08018bf8

0800c970 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	460b      	mov	r3, r1
 800c97a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d106      	bne.n	800c990 <netif_issue_reports+0x20>
 800c982:	4b18      	ldr	r3, [pc, #96]	; (800c9e4 <netif_issue_reports+0x74>)
 800c984:	f240 326d 	movw	r2, #877	; 0x36d
 800c988:	4917      	ldr	r1, [pc, #92]	; (800c9e8 <netif_issue_reports+0x78>)
 800c98a:	4818      	ldr	r0, [pc, #96]	; (800c9ec <netif_issue_reports+0x7c>)
 800c98c:	f00a fa42 	bl	8016e14 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c996:	f003 0304 	and.w	r3, r3, #4
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d01e      	beq.n	800c9dc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9a4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d017      	beq.n	800c9dc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c9ac:	78fb      	ldrb	r3, [r7, #3]
 800c9ae:	f003 0301 	and.w	r3, r3, #1
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d013      	beq.n	800c9de <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	3304      	adds	r3, #4
 800c9ba:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00e      	beq.n	800c9de <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9c6:	f003 0308 	and.w	r3, r3, #8
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d007      	beq.n	800c9de <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f008 fb1f 	bl	8015018 <etharp_request>
 800c9da:	e000      	b.n	800c9de <netif_issue_reports+0x6e>
    return;
 800c9dc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	08018ba8 	.word	0x08018ba8
 800c9e8:	08018d4c 	.word	0x08018d4c
 800c9ec:	08018bf8 	.word	0x08018bf8

0800c9f0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d107      	bne.n	800ca0e <netif_set_down+0x1e>
 800c9fe:	4b12      	ldr	r3, [pc, #72]	; (800ca48 <netif_set_down+0x58>)
 800ca00:	f240 329b 	movw	r2, #923	; 0x39b
 800ca04:	4911      	ldr	r1, [pc, #68]	; (800ca4c <netif_set_down+0x5c>)
 800ca06:	4812      	ldr	r0, [pc, #72]	; (800ca50 <netif_set_down+0x60>)
 800ca08:	f00a fa04 	bl	8016e14 <iprintf>
 800ca0c:	e019      	b.n	800ca42 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca14:	f003 0301 	and.w	r3, r3, #1
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d012      	beq.n	800ca42 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca22:	f023 0301 	bic.w	r3, r3, #1
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca34:	f003 0308 	and.w	r3, r3, #8
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d002      	beq.n	800ca42 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f007 fea9 	bl	8014794 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	08018ba8 	.word	0x08018ba8
 800ca4c:	08018d70 	.word	0x08018d70
 800ca50:	08018bf8 	.word	0x08018bf8

0800ca54 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d107      	bne.n	800ca72 <netif_set_link_up+0x1e>
 800ca62:	4b13      	ldr	r3, [pc, #76]	; (800cab0 <netif_set_link_up+0x5c>)
 800ca64:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ca68:	4912      	ldr	r1, [pc, #72]	; (800cab4 <netif_set_link_up+0x60>)
 800ca6a:	4813      	ldr	r0, [pc, #76]	; (800cab8 <netif_set_link_up+0x64>)
 800ca6c:	f00a f9d2 	bl	8016e14 <iprintf>
 800ca70:	e01b      	b.n	800caaa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca78:	f003 0304 	and.w	r3, r3, #4
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d114      	bne.n	800caaa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca86:	f043 0304 	orr.w	r3, r3, #4
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ca92:	2103      	movs	r1, #3
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f7ff ff6b 	bl	800c970 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	69db      	ldr	r3, [r3, #28]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d003      	beq.n	800caaa <netif_set_link_up+0x56>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	69db      	ldr	r3, [r3, #28]
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800caaa:	3708      	adds	r7, #8
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	08018ba8 	.word	0x08018ba8
 800cab4:	08018d90 	.word	0x08018d90
 800cab8:	08018bf8 	.word	0x08018bf8

0800cabc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d107      	bne.n	800cada <netif_set_link_down+0x1e>
 800caca:	4b11      	ldr	r3, [pc, #68]	; (800cb10 <netif_set_link_down+0x54>)
 800cacc:	f240 4206 	movw	r2, #1030	; 0x406
 800cad0:	4910      	ldr	r1, [pc, #64]	; (800cb14 <netif_set_link_down+0x58>)
 800cad2:	4811      	ldr	r0, [pc, #68]	; (800cb18 <netif_set_link_down+0x5c>)
 800cad4:	f00a f99e 	bl	8016e14 <iprintf>
 800cad8:	e017      	b.n	800cb0a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cae0:	f003 0304 	and.w	r3, r3, #4
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d010      	beq.n	800cb0a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800caee:	f023 0304 	bic.w	r3, r3, #4
 800caf2:	b2da      	uxtb	r2, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	69db      	ldr	r3, [r3, #28]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d003      	beq.n	800cb0a <netif_set_link_down+0x4e>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	69db      	ldr	r3, [r3, #28]
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	08018ba8 	.word	0x08018ba8
 800cb14:	08018db4 	.word	0x08018db4
 800cb18:	08018bf8 	.word	0x08018bf8

0800cb1c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d002      	beq.n	800cb32 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	683a      	ldr	r2, [r7, #0]
 800cb30:	61da      	str	r2, [r3, #28]
  }
}
 800cb32:	bf00      	nop
 800cb34:	370c      	adds	r7, #12
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr

0800cb3e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cb3e:	b480      	push	{r7}
 800cb40:	b085      	sub	sp, #20
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	60f8      	str	r0, [r7, #12]
 800cb46:	60b9      	str	r1, [r7, #8]
 800cb48:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cb4a:	f06f 030b 	mvn.w	r3, #11
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3714      	adds	r7, #20
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr
	...

0800cb5c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b085      	sub	sp, #20
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	4603      	mov	r3, r0
 800cb64:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cb66:	79fb      	ldrb	r3, [r7, #7]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d013      	beq.n	800cb94 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cb6c:	4b0d      	ldr	r3, [pc, #52]	; (800cba4 <netif_get_by_index+0x48>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	60fb      	str	r3, [r7, #12]
 800cb72:	e00c      	b.n	800cb8e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	79fa      	ldrb	r2, [r7, #7]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d101      	bne.n	800cb88 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	e006      	b.n	800cb96 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	60fb      	str	r3, [r7, #12]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d1ef      	bne.n	800cb74 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cb94:	2300      	movs	r3, #0
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3714      	adds	r7, #20
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	24007f88 	.word	0x24007f88

0800cba8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cbae:	f009 ff77 	bl	8016aa0 <sys_arch_protect>
 800cbb2:	6038      	str	r0, [r7, #0]
 800cbb4:	4b0d      	ldr	r3, [pc, #52]	; (800cbec <pbuf_free_ooseq+0x44>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	701a      	strb	r2, [r3, #0]
 800cbba:	6838      	ldr	r0, [r7, #0]
 800cbbc:	f009 ff7e 	bl	8016abc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cbc0:	4b0b      	ldr	r3, [pc, #44]	; (800cbf0 <pbuf_free_ooseq+0x48>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	607b      	str	r3, [r7, #4]
 800cbc6:	e00a      	b.n	800cbde <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d003      	beq.n	800cbd8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f002 fc43 	bl	800f45c <tcp_free_ooseq>
      return;
 800cbd6:	e005      	b.n	800cbe4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	607b      	str	r3, [r7, #4]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d1f1      	bne.n	800cbc8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800cbe4:	3708      	adds	r7, #8
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	24007f90 	.word	0x24007f90
 800cbf0:	24007f98 	.word	0x24007f98

0800cbf4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cbfc:	f7ff ffd4 	bl	800cba8 <pbuf_free_ooseq>
}
 800cc00:	bf00      	nop
 800cc02:	3708      	adds	r7, #8
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cc0e:	f009 ff47 	bl	8016aa0 <sys_arch_protect>
 800cc12:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cc14:	4b0f      	ldr	r3, [pc, #60]	; (800cc54 <pbuf_pool_is_empty+0x4c>)
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cc1a:	4b0e      	ldr	r3, [pc, #56]	; (800cc54 <pbuf_pool_is_empty+0x4c>)
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f009 ff4b 	bl	8016abc <sys_arch_unprotect>

  if (!queued) {
 800cc26:	78fb      	ldrb	r3, [r7, #3]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d10f      	bne.n	800cc4c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	480a      	ldr	r0, [pc, #40]	; (800cc58 <pbuf_pool_is_empty+0x50>)
 800cc30:	f7fe fdd8 	bl	800b7e4 <tcpip_try_callback>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d008      	beq.n	800cc4c <pbuf_pool_is_empty+0x44>
 800cc3a:	f009 ff31 	bl	8016aa0 <sys_arch_protect>
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	4b04      	ldr	r3, [pc, #16]	; (800cc54 <pbuf_pool_is_empty+0x4c>)
 800cc42:	2200      	movs	r2, #0
 800cc44:	701a      	strb	r2, [r3, #0]
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f009 ff38 	bl	8016abc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cc4c:	bf00      	nop
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	24007f90 	.word	0x24007f90
 800cc58:	0800cbf5 	.word	0x0800cbf5

0800cc5c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b085      	sub	sp, #20
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	4611      	mov	r1, r2
 800cc68:	461a      	mov	r2, r3
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	80fb      	strh	r3, [r7, #6]
 800cc6e:	4613      	mov	r3, r2
 800cc70:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2200      	movs	r2, #0
 800cc76:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	68ba      	ldr	r2, [r7, #8]
 800cc7c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	88fa      	ldrh	r2, [r7, #6]
 800cc82:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	88ba      	ldrh	r2, [r7, #4]
 800cc88:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cc8a:	8b3b      	ldrh	r3, [r7, #24]
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	7f3a      	ldrb	r2, [r7, #28]
 800cc96:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2200      	movs	r2, #0
 800cca2:	73da      	strb	r2, [r3, #15]
}
 800cca4:	bf00      	nop
 800cca6:	3714      	adds	r7, #20
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b08c      	sub	sp, #48	; 0x30
 800ccb4:	af02      	add	r7, sp, #8
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	71fb      	strb	r3, [r7, #7]
 800ccba:	460b      	mov	r3, r1
 800ccbc:	80bb      	strh	r3, [r7, #4]
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ccc2:	79fb      	ldrb	r3, [r7, #7]
 800ccc4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ccc6:	887b      	ldrh	r3, [r7, #2]
 800ccc8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cccc:	d07f      	beq.n	800cdce <pbuf_alloc+0x11e>
 800ccce:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ccd2:	f300 80c8 	bgt.w	800ce66 <pbuf_alloc+0x1b6>
 800ccd6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ccda:	d010      	beq.n	800ccfe <pbuf_alloc+0x4e>
 800ccdc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cce0:	f300 80c1 	bgt.w	800ce66 <pbuf_alloc+0x1b6>
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d002      	beq.n	800ccee <pbuf_alloc+0x3e>
 800cce8:	2b41      	cmp	r3, #65	; 0x41
 800ccea:	f040 80bc 	bne.w	800ce66 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ccee:	887a      	ldrh	r2, [r7, #2]
 800ccf0:	88bb      	ldrh	r3, [r7, #4]
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	f000 f8d1 	bl	800ce9c <pbuf_alloc_reference>
 800ccfa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ccfc:	e0bd      	b.n	800ce7a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cd02:	2300      	movs	r3, #0
 800cd04:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cd06:	88bb      	ldrh	r3, [r7, #4]
 800cd08:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cd0a:	200c      	movs	r0, #12
 800cd0c:	f7ff fb9a 	bl	800c444 <memp_malloc>
 800cd10:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d109      	bne.n	800cd2c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cd18:	f7ff ff76 	bl	800cc08 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d002      	beq.n	800cd28 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cd22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd24:	f000 faa8 	bl	800d278 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	e0a7      	b.n	800ce7c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cd2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd2e:	3303      	adds	r3, #3
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	f023 0303 	bic.w	r3, r3, #3
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	8b7a      	ldrh	r2, [r7, #26]
 800cd40:	4293      	cmp	r3, r2
 800cd42:	bf28      	it	cs
 800cd44:	4613      	movcs	r3, r2
 800cd46:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cd48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd4a:	3310      	adds	r3, #16
 800cd4c:	693a      	ldr	r2, [r7, #16]
 800cd4e:	4413      	add	r3, r2
 800cd50:	3303      	adds	r3, #3
 800cd52:	f023 0303 	bic.w	r3, r3, #3
 800cd56:	4618      	mov	r0, r3
 800cd58:	89f9      	ldrh	r1, [r7, #14]
 800cd5a:	8b7a      	ldrh	r2, [r7, #26]
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	9301      	str	r3, [sp, #4]
 800cd60:	887b      	ldrh	r3, [r7, #2]
 800cd62:	9300      	str	r3, [sp, #0]
 800cd64:	460b      	mov	r3, r1
 800cd66:	4601      	mov	r1, r0
 800cd68:	6938      	ldr	r0, [r7, #16]
 800cd6a:	f7ff ff77 	bl	800cc5c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	f003 0303 	and.w	r3, r3, #3
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d006      	beq.n	800cd88 <pbuf_alloc+0xd8>
 800cd7a:	4b42      	ldr	r3, [pc, #264]	; (800ce84 <pbuf_alloc+0x1d4>)
 800cd7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd80:	4941      	ldr	r1, [pc, #260]	; (800ce88 <pbuf_alloc+0x1d8>)
 800cd82:	4842      	ldr	r0, [pc, #264]	; (800ce8c <pbuf_alloc+0x1dc>)
 800cd84:	f00a f846 	bl	8016e14 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cd88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd8a:	3303      	adds	r3, #3
 800cd8c:	f023 0303 	bic.w	r3, r3, #3
 800cd90:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cd94:	d106      	bne.n	800cda4 <pbuf_alloc+0xf4>
 800cd96:	4b3b      	ldr	r3, [pc, #236]	; (800ce84 <pbuf_alloc+0x1d4>)
 800cd98:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cd9c:	493c      	ldr	r1, [pc, #240]	; (800ce90 <pbuf_alloc+0x1e0>)
 800cd9e:	483b      	ldr	r0, [pc, #236]	; (800ce8c <pbuf_alloc+0x1dc>)
 800cda0:	f00a f838 	bl	8016e14 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d102      	bne.n	800cdb0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	627b      	str	r3, [r7, #36]	; 0x24
 800cdae:	e002      	b.n	800cdb6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	693a      	ldr	r2, [r7, #16]
 800cdb4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cdba:	8b7a      	ldrh	r2, [r7, #26]
 800cdbc:	89fb      	ldrh	r3, [r7, #14]
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cdc6:	8b7b      	ldrh	r3, [r7, #26]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d19e      	bne.n	800cd0a <pbuf_alloc+0x5a>
      break;
 800cdcc:	e055      	b.n	800ce7a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cdce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdd0:	3303      	adds	r3, #3
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	f023 0303 	bic.w	r3, r3, #3
 800cdd8:	b29a      	uxth	r2, r3
 800cdda:	88bb      	ldrh	r3, [r7, #4]
 800cddc:	3303      	adds	r3, #3
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	f023 0303 	bic.w	r3, r3, #3
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	4413      	add	r3, r2
 800cde8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cdea:	8b3b      	ldrh	r3, [r7, #24]
 800cdec:	3310      	adds	r3, #16
 800cdee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cdf0:	8b3a      	ldrh	r2, [r7, #24]
 800cdf2:	88bb      	ldrh	r3, [r7, #4]
 800cdf4:	3303      	adds	r3, #3
 800cdf6:	f023 0303 	bic.w	r3, r3, #3
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d306      	bcc.n	800ce0c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cdfe:	8afa      	ldrh	r2, [r7, #22]
 800ce00:	88bb      	ldrh	r3, [r7, #4]
 800ce02:	3303      	adds	r3, #3
 800ce04:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d201      	bcs.n	800ce10 <pbuf_alloc+0x160>
        return NULL;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	e035      	b.n	800ce7c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ce10:	8afb      	ldrh	r3, [r7, #22]
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7ff f972 	bl	800c0fc <mem_malloc>
 800ce18:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ce1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d101      	bne.n	800ce24 <pbuf_alloc+0x174>
        return NULL;
 800ce20:	2300      	movs	r3, #0
 800ce22:	e02b      	b.n	800ce7c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ce24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce26:	3310      	adds	r3, #16
 800ce28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce2a:	4413      	add	r3, r2
 800ce2c:	3303      	adds	r3, #3
 800ce2e:	f023 0303 	bic.w	r3, r3, #3
 800ce32:	4618      	mov	r0, r3
 800ce34:	88b9      	ldrh	r1, [r7, #4]
 800ce36:	88ba      	ldrh	r2, [r7, #4]
 800ce38:	2300      	movs	r3, #0
 800ce3a:	9301      	str	r3, [sp, #4]
 800ce3c:	887b      	ldrh	r3, [r7, #2]
 800ce3e:	9300      	str	r3, [sp, #0]
 800ce40:	460b      	mov	r3, r1
 800ce42:	4601      	mov	r1, r0
 800ce44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce46:	f7ff ff09 	bl	800cc5c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ce4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	f003 0303 	and.w	r3, r3, #3
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d010      	beq.n	800ce78 <pbuf_alloc+0x1c8>
 800ce56:	4b0b      	ldr	r3, [pc, #44]	; (800ce84 <pbuf_alloc+0x1d4>)
 800ce58:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ce5c:	490d      	ldr	r1, [pc, #52]	; (800ce94 <pbuf_alloc+0x1e4>)
 800ce5e:	480b      	ldr	r0, [pc, #44]	; (800ce8c <pbuf_alloc+0x1dc>)
 800ce60:	f009 ffd8 	bl	8016e14 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ce64:	e008      	b.n	800ce78 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ce66:	4b07      	ldr	r3, [pc, #28]	; (800ce84 <pbuf_alloc+0x1d4>)
 800ce68:	f240 1227 	movw	r2, #295	; 0x127
 800ce6c:	490a      	ldr	r1, [pc, #40]	; (800ce98 <pbuf_alloc+0x1e8>)
 800ce6e:	4807      	ldr	r0, [pc, #28]	; (800ce8c <pbuf_alloc+0x1dc>)
 800ce70:	f009 ffd0 	bl	8016e14 <iprintf>
      return NULL;
 800ce74:	2300      	movs	r3, #0
 800ce76:	e001      	b.n	800ce7c <pbuf_alloc+0x1cc>
      break;
 800ce78:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3728      	adds	r7, #40	; 0x28
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	08018dd8 	.word	0x08018dd8
 800ce88:	08018e08 	.word	0x08018e08
 800ce8c:	08018e38 	.word	0x08018e38
 800ce90:	08018e60 	.word	0x08018e60
 800ce94:	08018e94 	.word	0x08018e94
 800ce98:	08018ec0 	.word	0x08018ec0

0800ce9c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b086      	sub	sp, #24
 800cea0:	af02      	add	r7, sp, #8
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	807b      	strh	r3, [r7, #2]
 800cea8:	4613      	mov	r3, r2
 800ceaa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ceac:	883b      	ldrh	r3, [r7, #0]
 800ceae:	2b41      	cmp	r3, #65	; 0x41
 800ceb0:	d009      	beq.n	800cec6 <pbuf_alloc_reference+0x2a>
 800ceb2:	883b      	ldrh	r3, [r7, #0]
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d006      	beq.n	800cec6 <pbuf_alloc_reference+0x2a>
 800ceb8:	4b0f      	ldr	r3, [pc, #60]	; (800cef8 <pbuf_alloc_reference+0x5c>)
 800ceba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cebe:	490f      	ldr	r1, [pc, #60]	; (800cefc <pbuf_alloc_reference+0x60>)
 800cec0:	480f      	ldr	r0, [pc, #60]	; (800cf00 <pbuf_alloc_reference+0x64>)
 800cec2:	f009 ffa7 	bl	8016e14 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cec6:	200b      	movs	r0, #11
 800cec8:	f7ff fabc 	bl	800c444 <memp_malloc>
 800cecc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d101      	bne.n	800ced8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ced4:	2300      	movs	r3, #0
 800ced6:	e00b      	b.n	800cef0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ced8:	8879      	ldrh	r1, [r7, #2]
 800ceda:	887a      	ldrh	r2, [r7, #2]
 800cedc:	2300      	movs	r3, #0
 800cede:	9301      	str	r3, [sp, #4]
 800cee0:	883b      	ldrh	r3, [r7, #0]
 800cee2:	9300      	str	r3, [sp, #0]
 800cee4:	460b      	mov	r3, r1
 800cee6:	6879      	ldr	r1, [r7, #4]
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f7ff feb7 	bl	800cc5c <pbuf_init_alloced_pbuf>
  return p;
 800ceee:	68fb      	ldr	r3, [r7, #12]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	08018dd8 	.word	0x08018dd8
 800cefc:	08018edc 	.word	0x08018edc
 800cf00:	08018e38 	.word	0x08018e38

0800cf04 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b088      	sub	sp, #32
 800cf08:	af02      	add	r7, sp, #8
 800cf0a:	607b      	str	r3, [r7, #4]
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73fb      	strb	r3, [r7, #15]
 800cf10:	460b      	mov	r3, r1
 800cf12:	81bb      	strh	r3, [r7, #12]
 800cf14:	4613      	mov	r3, r2
 800cf16:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cf18:	7bfb      	ldrb	r3, [r7, #15]
 800cf1a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cf1c:	8a7b      	ldrh	r3, [r7, #18]
 800cf1e:	3303      	adds	r3, #3
 800cf20:	f023 0203 	bic.w	r2, r3, #3
 800cf24:	89bb      	ldrh	r3, [r7, #12]
 800cf26:	441a      	add	r2, r3
 800cf28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d901      	bls.n	800cf32 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	e018      	b.n	800cf64 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d007      	beq.n	800cf48 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cf38:	8a7b      	ldrh	r3, [r7, #18]
 800cf3a:	3303      	adds	r3, #3
 800cf3c:	f023 0303 	bic.w	r3, r3, #3
 800cf40:	6a3a      	ldr	r2, [r7, #32]
 800cf42:	4413      	add	r3, r2
 800cf44:	617b      	str	r3, [r7, #20]
 800cf46:	e001      	b.n	800cf4c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	89b9      	ldrh	r1, [r7, #12]
 800cf50:	89ba      	ldrh	r2, [r7, #12]
 800cf52:	2302      	movs	r3, #2
 800cf54:	9301      	str	r3, [sp, #4]
 800cf56:	897b      	ldrh	r3, [r7, #10]
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	6979      	ldr	r1, [r7, #20]
 800cf5e:	f7ff fe7d 	bl	800cc5c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cf62:	687b      	ldr	r3, [r7, #4]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3718      	adds	r7, #24
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	460b      	mov	r3, r1
 800cf76:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d106      	bne.n	800cf8c <pbuf_realloc+0x20>
 800cf7e:	4b3a      	ldr	r3, [pc, #232]	; (800d068 <pbuf_realloc+0xfc>)
 800cf80:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cf84:	4939      	ldr	r1, [pc, #228]	; (800d06c <pbuf_realloc+0x100>)
 800cf86:	483a      	ldr	r0, [pc, #232]	; (800d070 <pbuf_realloc+0x104>)
 800cf88:	f009 ff44 	bl	8016e14 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	891b      	ldrh	r3, [r3, #8]
 800cf90:	887a      	ldrh	r2, [r7, #2]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d263      	bcs.n	800d05e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	891a      	ldrh	r2, [r3, #8]
 800cf9a:	887b      	ldrh	r3, [r7, #2]
 800cf9c:	1ad3      	subs	r3, r2, r3
 800cf9e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cfa0:	887b      	ldrh	r3, [r7, #2]
 800cfa2:	817b      	strh	r3, [r7, #10]
  q = p;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cfa8:	e018      	b.n	800cfdc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	895b      	ldrh	r3, [r3, #10]
 800cfae:	897a      	ldrh	r2, [r7, #10]
 800cfb0:	1ad3      	subs	r3, r2, r3
 800cfb2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	891a      	ldrh	r2, [r3, #8]
 800cfb8:	893b      	ldrh	r3, [r7, #8]
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	b29a      	uxth	r2, r3
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d106      	bne.n	800cfdc <pbuf_realloc+0x70>
 800cfce:	4b26      	ldr	r3, [pc, #152]	; (800d068 <pbuf_realloc+0xfc>)
 800cfd0:	f240 12af 	movw	r2, #431	; 0x1af
 800cfd4:	4927      	ldr	r1, [pc, #156]	; (800d074 <pbuf_realloc+0x108>)
 800cfd6:	4826      	ldr	r0, [pc, #152]	; (800d070 <pbuf_realloc+0x104>)
 800cfd8:	f009 ff1c 	bl	8016e14 <iprintf>
  while (rem_len > q->len) {
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	895b      	ldrh	r3, [r3, #10]
 800cfe0:	897a      	ldrh	r2, [r7, #10]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d8e1      	bhi.n	800cfaa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	7b1b      	ldrb	r3, [r3, #12]
 800cfea:	f003 030f 	and.w	r3, r3, #15
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d121      	bne.n	800d036 <pbuf_realloc+0xca>
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	895b      	ldrh	r3, [r3, #10]
 800cff6:	897a      	ldrh	r2, [r7, #10]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d01c      	beq.n	800d036 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	7b5b      	ldrb	r3, [r3, #13]
 800d000:	f003 0302 	and.w	r3, r3, #2
 800d004:	2b00      	cmp	r3, #0
 800d006:	d116      	bne.n	800d036 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	685a      	ldr	r2, [r3, #4]
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	b29a      	uxth	r2, r3
 800d012:	897b      	ldrh	r3, [r7, #10]
 800d014:	4413      	add	r3, r2
 800d016:	b29b      	uxth	r3, r3
 800d018:	4619      	mov	r1, r3
 800d01a:	68f8      	ldr	r0, [r7, #12]
 800d01c:	f7fe ff64 	bl	800bee8 <mem_trim>
 800d020:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d106      	bne.n	800d036 <pbuf_realloc+0xca>
 800d028:	4b0f      	ldr	r3, [pc, #60]	; (800d068 <pbuf_realloc+0xfc>)
 800d02a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d02e:	4912      	ldr	r1, [pc, #72]	; (800d078 <pbuf_realloc+0x10c>)
 800d030:	480f      	ldr	r0, [pc, #60]	; (800d070 <pbuf_realloc+0x104>)
 800d032:	f009 feef 	bl	8016e14 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	897a      	ldrh	r2, [r7, #10]
 800d03a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	895a      	ldrh	r2, [r3, #10]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d004      	beq.n	800d056 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4618      	mov	r0, r3
 800d052:	f000 f911 	bl	800d278 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2200      	movs	r2, #0
 800d05a:	601a      	str	r2, [r3, #0]
 800d05c:	e000      	b.n	800d060 <pbuf_realloc+0xf4>
    return;
 800d05e:	bf00      	nop

}
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	08018dd8 	.word	0x08018dd8
 800d06c:	08018ef0 	.word	0x08018ef0
 800d070:	08018e38 	.word	0x08018e38
 800d074:	08018f08 	.word	0x08018f08
 800d078:	08018f20 	.word	0x08018f20

0800d07c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b086      	sub	sp, #24
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	4613      	mov	r3, r2
 800d088:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d106      	bne.n	800d09e <pbuf_add_header_impl+0x22>
 800d090:	4b2b      	ldr	r3, [pc, #172]	; (800d140 <pbuf_add_header_impl+0xc4>)
 800d092:	f240 12df 	movw	r2, #479	; 0x1df
 800d096:	492b      	ldr	r1, [pc, #172]	; (800d144 <pbuf_add_header_impl+0xc8>)
 800d098:	482b      	ldr	r0, [pc, #172]	; (800d148 <pbuf_add_header_impl+0xcc>)
 800d09a:	f009 febb 	bl	8016e14 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d003      	beq.n	800d0ac <pbuf_add_header_impl+0x30>
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0aa:	d301      	bcc.n	800d0b0 <pbuf_add_header_impl+0x34>
    return 1;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e043      	b.n	800d138 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d101      	bne.n	800d0ba <pbuf_add_header_impl+0x3e>
    return 0;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	e03e      	b.n	800d138 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	891a      	ldrh	r2, [r3, #8]
 800d0c2:	8a7b      	ldrh	r3, [r7, #18]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	8a7a      	ldrh	r2, [r7, #18]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d901      	bls.n	800d0d2 <pbuf_add_header_impl+0x56>
    return 1;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e032      	b.n	800d138 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	7b1b      	ldrb	r3, [r3, #12]
 800d0d6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d0d8:	8a3b      	ldrh	r3, [r7, #16]
 800d0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d00c      	beq.n	800d0fc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	685a      	ldr	r2, [r3, #4]
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	425b      	negs	r3, r3
 800d0ea:	4413      	add	r3, r2
 800d0ec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	3310      	adds	r3, #16
 800d0f2:	697a      	ldr	r2, [r7, #20]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d20d      	bcs.n	800d114 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	e01d      	b.n	800d138 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d0fc:	79fb      	ldrb	r3, [r7, #7]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d006      	beq.n	800d110 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	685a      	ldr	r2, [r3, #4]
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	425b      	negs	r3, r3
 800d10a:	4413      	add	r3, r2
 800d10c:	617b      	str	r3, [r7, #20]
 800d10e:	e001      	b.n	800d114 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d110:	2301      	movs	r3, #1
 800d112:	e011      	b.n	800d138 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	697a      	ldr	r2, [r7, #20]
 800d118:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	895a      	ldrh	r2, [r3, #10]
 800d11e:	8a7b      	ldrh	r3, [r7, #18]
 800d120:	4413      	add	r3, r2
 800d122:	b29a      	uxth	r2, r3
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	891a      	ldrh	r2, [r3, #8]
 800d12c:	8a7b      	ldrh	r3, [r7, #18]
 800d12e:	4413      	add	r3, r2
 800d130:	b29a      	uxth	r2, r3
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	811a      	strh	r2, [r3, #8]


  return 0;
 800d136:	2300      	movs	r3, #0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3718      	adds	r7, #24
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	08018dd8 	.word	0x08018dd8
 800d144:	08018f3c 	.word	0x08018f3c
 800d148:	08018e38 	.word	0x08018e38

0800d14c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d156:	2200      	movs	r2, #0
 800d158:	6839      	ldr	r1, [r7, #0]
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7ff ff8e 	bl	800d07c <pbuf_add_header_impl>
 800d160:	4603      	mov	r3, r0
}
 800d162:	4618      	mov	r0, r3
 800d164:	3708      	adds	r7, #8
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
	...

0800d16c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d106      	bne.n	800d18a <pbuf_remove_header+0x1e>
 800d17c:	4b20      	ldr	r3, [pc, #128]	; (800d200 <pbuf_remove_header+0x94>)
 800d17e:	f240 224b 	movw	r2, #587	; 0x24b
 800d182:	4920      	ldr	r1, [pc, #128]	; (800d204 <pbuf_remove_header+0x98>)
 800d184:	4820      	ldr	r0, [pc, #128]	; (800d208 <pbuf_remove_header+0x9c>)
 800d186:	f009 fe45 	bl	8016e14 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d003      	beq.n	800d198 <pbuf_remove_header+0x2c>
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d196:	d301      	bcc.n	800d19c <pbuf_remove_header+0x30>
    return 1;
 800d198:	2301      	movs	r3, #1
 800d19a:	e02c      	b.n	800d1f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d101      	bne.n	800d1a6 <pbuf_remove_header+0x3a>
    return 0;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	e027      	b.n	800d1f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	895b      	ldrh	r3, [r3, #10]
 800d1ae:	89fa      	ldrh	r2, [r7, #14]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d908      	bls.n	800d1c6 <pbuf_remove_header+0x5a>
 800d1b4:	4b12      	ldr	r3, [pc, #72]	; (800d200 <pbuf_remove_header+0x94>)
 800d1b6:	f240 2255 	movw	r2, #597	; 0x255
 800d1ba:	4914      	ldr	r1, [pc, #80]	; (800d20c <pbuf_remove_header+0xa0>)
 800d1bc:	4812      	ldr	r0, [pc, #72]	; (800d208 <pbuf_remove_header+0x9c>)
 800d1be:	f009 fe29 	bl	8016e14 <iprintf>
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e017      	b.n	800d1f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685a      	ldr	r2, [r3, #4]
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	441a      	add	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	895a      	ldrh	r2, [r3, #10]
 800d1dc:	89fb      	ldrh	r3, [r7, #14]
 800d1de:	1ad3      	subs	r3, r2, r3
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	891a      	ldrh	r2, [r3, #8]
 800d1ea:	89fb      	ldrh	r3, [r7, #14]
 800d1ec:	1ad3      	subs	r3, r2, r3
 800d1ee:	b29a      	uxth	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d1f4:	2300      	movs	r3, #0
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3710      	adds	r7, #16
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	08018dd8 	.word	0x08018dd8
 800d204:	08018f3c 	.word	0x08018f3c
 800d208:	08018e38 	.word	0x08018e38
 800d20c:	08018f48 	.word	0x08018f48

0800d210 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	460b      	mov	r3, r1
 800d21a:	807b      	strh	r3, [r7, #2]
 800d21c:	4613      	mov	r3, r2
 800d21e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d220:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d224:	2b00      	cmp	r3, #0
 800d226:	da08      	bge.n	800d23a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d228:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d22c:	425b      	negs	r3, r3
 800d22e:	4619      	mov	r1, r3
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f7ff ff9b 	bl	800d16c <pbuf_remove_header>
 800d236:	4603      	mov	r3, r0
 800d238:	e007      	b.n	800d24a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d23a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d23e:	787a      	ldrb	r2, [r7, #1]
 800d240:	4619      	mov	r1, r3
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f7ff ff1a 	bl	800d07c <pbuf_add_header_impl>
 800d248:	4603      	mov	r3, r0
  }
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3708      	adds	r7, #8
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b082      	sub	sp, #8
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	460b      	mov	r3, r1
 800d25c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d25e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d262:	2201      	movs	r2, #1
 800d264:	4619      	mov	r1, r3
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7ff ffd2 	bl	800d210 <pbuf_header_impl>
 800d26c:	4603      	mov	r3, r0
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3708      	adds	r7, #8
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
	...

0800d278 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b088      	sub	sp, #32
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d10b      	bne.n	800d29e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d106      	bne.n	800d29a <pbuf_free+0x22>
 800d28c:	4b3b      	ldr	r3, [pc, #236]	; (800d37c <pbuf_free+0x104>)
 800d28e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d292:	493b      	ldr	r1, [pc, #236]	; (800d380 <pbuf_free+0x108>)
 800d294:	483b      	ldr	r0, [pc, #236]	; (800d384 <pbuf_free+0x10c>)
 800d296:	f009 fdbd 	bl	8016e14 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d29a:	2300      	movs	r3, #0
 800d29c:	e069      	b.n	800d372 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d2a2:	e062      	b.n	800d36a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d2a4:	f009 fbfc 	bl	8016aa0 <sys_arch_protect>
 800d2a8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	7b9b      	ldrb	r3, [r3, #14]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d106      	bne.n	800d2c0 <pbuf_free+0x48>
 800d2b2:	4b32      	ldr	r3, [pc, #200]	; (800d37c <pbuf_free+0x104>)
 800d2b4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d2b8:	4933      	ldr	r1, [pc, #204]	; (800d388 <pbuf_free+0x110>)
 800d2ba:	4832      	ldr	r0, [pc, #200]	; (800d384 <pbuf_free+0x10c>)
 800d2bc:	f009 fdaa 	bl	8016e14 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	7b9b      	ldrb	r3, [r3, #14]
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	b2da      	uxtb	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	739a      	strb	r2, [r3, #14]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	7b9b      	ldrb	r3, [r3, #14]
 800d2d0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d2d2:	69b8      	ldr	r0, [r7, #24]
 800d2d4:	f009 fbf2 	bl	8016abc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d2d8:	7dfb      	ldrb	r3, [r7, #23]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d143      	bne.n	800d366 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	7b1b      	ldrb	r3, [r3, #12]
 800d2e8:	f003 030f 	and.w	r3, r3, #15
 800d2ec:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	7b5b      	ldrb	r3, [r3, #13]
 800d2f2:	f003 0302 	and.w	r3, r3, #2
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d011      	beq.n	800d31e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	691b      	ldr	r3, [r3, #16]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d106      	bne.n	800d314 <pbuf_free+0x9c>
 800d306:	4b1d      	ldr	r3, [pc, #116]	; (800d37c <pbuf_free+0x104>)
 800d308:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d30c:	491f      	ldr	r1, [pc, #124]	; (800d38c <pbuf_free+0x114>)
 800d30e:	481d      	ldr	r0, [pc, #116]	; (800d384 <pbuf_free+0x10c>)
 800d310:	f009 fd80 	bl	8016e14 <iprintf>
        pc->custom_free_function(p);
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	691b      	ldr	r3, [r3, #16]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	4798      	blx	r3
 800d31c:	e01d      	b.n	800d35a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d31e:	7bfb      	ldrb	r3, [r7, #15]
 800d320:	2b02      	cmp	r3, #2
 800d322:	d104      	bne.n	800d32e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d324:	6879      	ldr	r1, [r7, #4]
 800d326:	200c      	movs	r0, #12
 800d328:	f7ff f902 	bl	800c530 <memp_free>
 800d32c:	e015      	b.n	800d35a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d32e:	7bfb      	ldrb	r3, [r7, #15]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d104      	bne.n	800d33e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d334:	6879      	ldr	r1, [r7, #4]
 800d336:	200b      	movs	r0, #11
 800d338:	f7ff f8fa 	bl	800c530 <memp_free>
 800d33c:	e00d      	b.n	800d35a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d33e:	7bfb      	ldrb	r3, [r7, #15]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d103      	bne.n	800d34c <pbuf_free+0xd4>
          mem_free(p);
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7fe fd3f 	bl	800bdc8 <mem_free>
 800d34a:	e006      	b.n	800d35a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d34c:	4b0b      	ldr	r3, [pc, #44]	; (800d37c <pbuf_free+0x104>)
 800d34e:	f240 320f 	movw	r2, #783	; 0x30f
 800d352:	490f      	ldr	r1, [pc, #60]	; (800d390 <pbuf_free+0x118>)
 800d354:	480b      	ldr	r0, [pc, #44]	; (800d384 <pbuf_free+0x10c>)
 800d356:	f009 fd5d 	bl	8016e14 <iprintf>
        }
      }
      count++;
 800d35a:	7ffb      	ldrb	r3, [r7, #31]
 800d35c:	3301      	adds	r3, #1
 800d35e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	607b      	str	r3, [r7, #4]
 800d364:	e001      	b.n	800d36a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d366:	2300      	movs	r3, #0
 800d368:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d199      	bne.n	800d2a4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d370:	7ffb      	ldrb	r3, [r7, #31]
}
 800d372:	4618      	mov	r0, r3
 800d374:	3720      	adds	r7, #32
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	08018dd8 	.word	0x08018dd8
 800d380:	08018f3c 	.word	0x08018f3c
 800d384:	08018e38 	.word	0x08018e38
 800d388:	08018f68 	.word	0x08018f68
 800d38c:	08018f80 	.word	0x08018f80
 800d390:	08018fa4 	.word	0x08018fa4

0800d394 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d394:	b480      	push	{r7}
 800d396:	b085      	sub	sp, #20
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d39c:	2300      	movs	r3, #0
 800d39e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d3a0:	e005      	b.n	800d3ae <pbuf_clen+0x1a>
    ++len;
 800d3a2:	89fb      	ldrh	r3, [r7, #14]
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d1f6      	bne.n	800d3a2 <pbuf_clen+0xe>
  }
  return len;
 800d3b4:	89fb      	ldrh	r3, [r7, #14]
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3714      	adds	r7, #20
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr
	...

0800d3c4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d016      	beq.n	800d400 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d3d2:	f009 fb65 	bl	8016aa0 <sys_arch_protect>
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	7b9b      	ldrb	r3, [r3, #14]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	b2da      	uxtb	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	739a      	strb	r2, [r3, #14]
 800d3e4:	68f8      	ldr	r0, [r7, #12]
 800d3e6:	f009 fb69 	bl	8016abc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	7b9b      	ldrb	r3, [r3, #14]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d106      	bne.n	800d400 <pbuf_ref+0x3c>
 800d3f2:	4b05      	ldr	r3, [pc, #20]	; (800d408 <pbuf_ref+0x44>)
 800d3f4:	f240 3242 	movw	r2, #834	; 0x342
 800d3f8:	4904      	ldr	r1, [pc, #16]	; (800d40c <pbuf_ref+0x48>)
 800d3fa:	4805      	ldr	r0, [pc, #20]	; (800d410 <pbuf_ref+0x4c>)
 800d3fc:	f009 fd0a 	bl	8016e14 <iprintf>
  }
}
 800d400:	bf00      	nop
 800d402:	3710      	adds	r7, #16
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	08018dd8 	.word	0x08018dd8
 800d40c:	08018fb8 	.word	0x08018fb8
 800d410:	08018e38 	.word	0x08018e38

0800d414 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <pbuf_cat+0x16>
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d107      	bne.n	800d43a <pbuf_cat+0x26>
 800d42a:	4b20      	ldr	r3, [pc, #128]	; (800d4ac <pbuf_cat+0x98>)
 800d42c:	f240 3259 	movw	r2, #857	; 0x359
 800d430:	491f      	ldr	r1, [pc, #124]	; (800d4b0 <pbuf_cat+0x9c>)
 800d432:	4820      	ldr	r0, [pc, #128]	; (800d4b4 <pbuf_cat+0xa0>)
 800d434:	f009 fcee 	bl	8016e14 <iprintf>
 800d438:	e034      	b.n	800d4a4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	60fb      	str	r3, [r7, #12]
 800d43e:	e00a      	b.n	800d456 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	891a      	ldrh	r2, [r3, #8]
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	891b      	ldrh	r3, [r3, #8]
 800d448:	4413      	add	r3, r2
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	60fb      	str	r3, [r7, #12]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d1f0      	bne.n	800d440 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	891a      	ldrh	r2, [r3, #8]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	895b      	ldrh	r3, [r3, #10]
 800d466:	429a      	cmp	r2, r3
 800d468:	d006      	beq.n	800d478 <pbuf_cat+0x64>
 800d46a:	4b10      	ldr	r3, [pc, #64]	; (800d4ac <pbuf_cat+0x98>)
 800d46c:	f240 3262 	movw	r2, #866	; 0x362
 800d470:	4911      	ldr	r1, [pc, #68]	; (800d4b8 <pbuf_cat+0xa4>)
 800d472:	4810      	ldr	r0, [pc, #64]	; (800d4b4 <pbuf_cat+0xa0>)
 800d474:	f009 fcce 	bl	8016e14 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d006      	beq.n	800d48e <pbuf_cat+0x7a>
 800d480:	4b0a      	ldr	r3, [pc, #40]	; (800d4ac <pbuf_cat+0x98>)
 800d482:	f240 3263 	movw	r2, #867	; 0x363
 800d486:	490d      	ldr	r1, [pc, #52]	; (800d4bc <pbuf_cat+0xa8>)
 800d488:	480a      	ldr	r0, [pc, #40]	; (800d4b4 <pbuf_cat+0xa0>)
 800d48a:	f009 fcc3 	bl	8016e14 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	891a      	ldrh	r2, [r3, #8]
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	891b      	ldrh	r3, [r3, #8]
 800d496:	4413      	add	r3, r2
 800d498:	b29a      	uxth	r2, r3
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	08018dd8 	.word	0x08018dd8
 800d4b0:	08018fcc 	.word	0x08018fcc
 800d4b4:	08018e38 	.word	0x08018e38
 800d4b8:	08019004 	.word	0x08019004
 800d4bc:	08019034 	.word	0x08019034

0800d4c0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b086      	sub	sp, #24
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	617b      	str	r3, [r7, #20]
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d008      	beq.n	800d4ea <pbuf_copy+0x2a>
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d005      	beq.n	800d4ea <pbuf_copy+0x2a>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	891a      	ldrh	r2, [r3, #8]
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	891b      	ldrh	r3, [r3, #8]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d209      	bcs.n	800d4fe <pbuf_copy+0x3e>
 800d4ea:	4b57      	ldr	r3, [pc, #348]	; (800d648 <pbuf_copy+0x188>)
 800d4ec:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d4f0:	4956      	ldr	r1, [pc, #344]	; (800d64c <pbuf_copy+0x18c>)
 800d4f2:	4857      	ldr	r0, [pc, #348]	; (800d650 <pbuf_copy+0x190>)
 800d4f4:	f009 fc8e 	bl	8016e14 <iprintf>
 800d4f8:	f06f 030f 	mvn.w	r3, #15
 800d4fc:	e09f      	b.n	800d63e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	895b      	ldrh	r3, [r3, #10]
 800d502:	461a      	mov	r2, r3
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	1ad2      	subs	r2, r2, r3
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	895b      	ldrh	r3, [r3, #10]
 800d50c:	4619      	mov	r1, r3
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	1acb      	subs	r3, r1, r3
 800d512:	429a      	cmp	r2, r3
 800d514:	d306      	bcc.n	800d524 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	895b      	ldrh	r3, [r3, #10]
 800d51a:	461a      	mov	r2, r3
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	1ad3      	subs	r3, r2, r3
 800d520:	60fb      	str	r3, [r7, #12]
 800d522:	e005      	b.n	800d530 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	895b      	ldrh	r3, [r3, #10]
 800d528:	461a      	mov	r2, r3
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	685a      	ldr	r2, [r3, #4]
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	18d0      	adds	r0, r2, r3
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	685a      	ldr	r2, [r3, #4]
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	4413      	add	r3, r2
 800d540:	68fa      	ldr	r2, [r7, #12]
 800d542:	4619      	mov	r1, r3
 800d544:	f009 fbf5 	bl	8016d32 <memcpy>
    offset_to += len;
 800d548:	697a      	ldr	r2, [r7, #20]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	4413      	add	r3, r2
 800d54e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d550:	693a      	ldr	r2, [r7, #16]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	4413      	add	r3, r2
 800d556:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	895b      	ldrh	r3, [r3, #10]
 800d55c:	461a      	mov	r2, r3
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	4293      	cmp	r3, r2
 800d562:	d906      	bls.n	800d572 <pbuf_copy+0xb2>
 800d564:	4b38      	ldr	r3, [pc, #224]	; (800d648 <pbuf_copy+0x188>)
 800d566:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d56a:	493a      	ldr	r1, [pc, #232]	; (800d654 <pbuf_copy+0x194>)
 800d56c:	4838      	ldr	r0, [pc, #224]	; (800d650 <pbuf_copy+0x190>)
 800d56e:	f009 fc51 	bl	8016e14 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	895b      	ldrh	r3, [r3, #10]
 800d576:	461a      	mov	r2, r3
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d906      	bls.n	800d58c <pbuf_copy+0xcc>
 800d57e:	4b32      	ldr	r3, [pc, #200]	; (800d648 <pbuf_copy+0x188>)
 800d580:	f240 32da 	movw	r2, #986	; 0x3da
 800d584:	4934      	ldr	r1, [pc, #208]	; (800d658 <pbuf_copy+0x198>)
 800d586:	4832      	ldr	r0, [pc, #200]	; (800d650 <pbuf_copy+0x190>)
 800d588:	f009 fc44 	bl	8016e14 <iprintf>
    if (offset_from >= p_from->len) {
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	895b      	ldrh	r3, [r3, #10]
 800d590:	461a      	mov	r2, r3
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	4293      	cmp	r3, r2
 800d596:	d304      	bcc.n	800d5a2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d598:	2300      	movs	r3, #0
 800d59a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	895b      	ldrh	r3, [r3, #10]
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d114      	bne.n	800d5d8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d10c      	bne.n	800d5d8 <pbuf_copy+0x118>
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d009      	beq.n	800d5d8 <pbuf_copy+0x118>
 800d5c4:	4b20      	ldr	r3, [pc, #128]	; (800d648 <pbuf_copy+0x188>)
 800d5c6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d5ca:	4924      	ldr	r1, [pc, #144]	; (800d65c <pbuf_copy+0x19c>)
 800d5cc:	4820      	ldr	r0, [pc, #128]	; (800d650 <pbuf_copy+0x190>)
 800d5ce:	f009 fc21 	bl	8016e14 <iprintf>
 800d5d2:	f06f 030f 	mvn.w	r3, #15
 800d5d6:	e032      	b.n	800d63e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d013      	beq.n	800d606 <pbuf_copy+0x146>
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	895a      	ldrh	r2, [r3, #10]
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	891b      	ldrh	r3, [r3, #8]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d10d      	bne.n	800d606 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d009      	beq.n	800d606 <pbuf_copy+0x146>
 800d5f2:	4b15      	ldr	r3, [pc, #84]	; (800d648 <pbuf_copy+0x188>)
 800d5f4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d5f8:	4919      	ldr	r1, [pc, #100]	; (800d660 <pbuf_copy+0x1a0>)
 800d5fa:	4815      	ldr	r0, [pc, #84]	; (800d650 <pbuf_copy+0x190>)
 800d5fc:	f009 fc0a 	bl	8016e14 <iprintf>
 800d600:	f06f 0305 	mvn.w	r3, #5
 800d604:	e01b      	b.n	800d63e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d013      	beq.n	800d634 <pbuf_copy+0x174>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	895a      	ldrh	r2, [r3, #10]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	891b      	ldrh	r3, [r3, #8]
 800d614:	429a      	cmp	r2, r3
 800d616:	d10d      	bne.n	800d634 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d009      	beq.n	800d634 <pbuf_copy+0x174>
 800d620:	4b09      	ldr	r3, [pc, #36]	; (800d648 <pbuf_copy+0x188>)
 800d622:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d626:	490e      	ldr	r1, [pc, #56]	; (800d660 <pbuf_copy+0x1a0>)
 800d628:	4809      	ldr	r0, [pc, #36]	; (800d650 <pbuf_copy+0x190>)
 800d62a:	f009 fbf3 	bl	8016e14 <iprintf>
 800d62e:	f06f 0305 	mvn.w	r3, #5
 800d632:	e004      	b.n	800d63e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	f47f af61 	bne.w	800d4fe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d63c:	2300      	movs	r3, #0
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3718      	adds	r7, #24
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	08018dd8 	.word	0x08018dd8
 800d64c:	08019080 	.word	0x08019080
 800d650:	08018e38 	.word	0x08018e38
 800d654:	080190b0 	.word	0x080190b0
 800d658:	080190c8 	.word	0x080190c8
 800d65c:	080190e4 	.word	0x080190e4
 800d660:	080190f4 	.word	0x080190f4

0800d664 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b088      	sub	sp, #32
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	4611      	mov	r1, r2
 800d670:	461a      	mov	r2, r3
 800d672:	460b      	mov	r3, r1
 800d674:	80fb      	strh	r3, [r7, #6]
 800d676:	4613      	mov	r3, r2
 800d678:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d67a:	2300      	movs	r3, #0
 800d67c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d67e:	2300      	movs	r3, #0
 800d680:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d108      	bne.n	800d69a <pbuf_copy_partial+0x36>
 800d688:	4b2b      	ldr	r3, [pc, #172]	; (800d738 <pbuf_copy_partial+0xd4>)
 800d68a:	f240 420a 	movw	r2, #1034	; 0x40a
 800d68e:	492b      	ldr	r1, [pc, #172]	; (800d73c <pbuf_copy_partial+0xd8>)
 800d690:	482b      	ldr	r0, [pc, #172]	; (800d740 <pbuf_copy_partial+0xdc>)
 800d692:	f009 fbbf 	bl	8016e14 <iprintf>
 800d696:	2300      	movs	r3, #0
 800d698:	e04a      	b.n	800d730 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d108      	bne.n	800d6b2 <pbuf_copy_partial+0x4e>
 800d6a0:	4b25      	ldr	r3, [pc, #148]	; (800d738 <pbuf_copy_partial+0xd4>)
 800d6a2:	f240 420b 	movw	r2, #1035	; 0x40b
 800d6a6:	4927      	ldr	r1, [pc, #156]	; (800d744 <pbuf_copy_partial+0xe0>)
 800d6a8:	4825      	ldr	r0, [pc, #148]	; (800d740 <pbuf_copy_partial+0xdc>)
 800d6aa:	f009 fbb3 	bl	8016e14 <iprintf>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	e03e      	b.n	800d730 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	61fb      	str	r3, [r7, #28]
 800d6b6:	e034      	b.n	800d722 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d6b8:	88bb      	ldrh	r3, [r7, #4]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00a      	beq.n	800d6d4 <pbuf_copy_partial+0x70>
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	895b      	ldrh	r3, [r3, #10]
 800d6c2:	88ba      	ldrh	r2, [r7, #4]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d305      	bcc.n	800d6d4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	895b      	ldrh	r3, [r3, #10]
 800d6cc:	88ba      	ldrh	r2, [r7, #4]
 800d6ce:	1ad3      	subs	r3, r2, r3
 800d6d0:	80bb      	strh	r3, [r7, #4]
 800d6d2:	e023      	b.n	800d71c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	895a      	ldrh	r2, [r3, #10]
 800d6d8:	88bb      	ldrh	r3, [r7, #4]
 800d6da:	1ad3      	subs	r3, r2, r3
 800d6dc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d6de:	8b3a      	ldrh	r2, [r7, #24]
 800d6e0:	88fb      	ldrh	r3, [r7, #6]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d901      	bls.n	800d6ea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d6e6:	88fb      	ldrh	r3, [r7, #6]
 800d6e8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d6ea:	8b7b      	ldrh	r3, [r7, #26]
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	18d0      	adds	r0, r2, r3
 800d6f0:	69fb      	ldr	r3, [r7, #28]
 800d6f2:	685a      	ldr	r2, [r3, #4]
 800d6f4:	88bb      	ldrh	r3, [r7, #4]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	8b3a      	ldrh	r2, [r7, #24]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	f009 fb19 	bl	8016d32 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d700:	8afa      	ldrh	r2, [r7, #22]
 800d702:	8b3b      	ldrh	r3, [r7, #24]
 800d704:	4413      	add	r3, r2
 800d706:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d708:	8b7a      	ldrh	r2, [r7, #26]
 800d70a:	8b3b      	ldrh	r3, [r7, #24]
 800d70c:	4413      	add	r3, r2
 800d70e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d710:	88fa      	ldrh	r2, [r7, #6]
 800d712:	8b3b      	ldrh	r3, [r7, #24]
 800d714:	1ad3      	subs	r3, r2, r3
 800d716:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d718:	2300      	movs	r3, #0
 800d71a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	61fb      	str	r3, [r7, #28]
 800d722:	88fb      	ldrh	r3, [r7, #6]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d002      	beq.n	800d72e <pbuf_copy_partial+0xca>
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d1c4      	bne.n	800d6b8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d72e:	8afb      	ldrh	r3, [r7, #22]
}
 800d730:	4618      	mov	r0, r3
 800d732:	3720      	adds	r7, #32
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	08018dd8 	.word	0x08018dd8
 800d73c:	08019120 	.word	0x08019120
 800d740:	08018e38 	.word	0x08018e38
 800d744:	08019140 	.word	0x08019140

0800d748 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b084      	sub	sp, #16
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	4603      	mov	r3, r0
 800d750:	603a      	str	r2, [r7, #0]
 800d752:	71fb      	strb	r3, [r7, #7]
 800d754:	460b      	mov	r3, r1
 800d756:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	8919      	ldrh	r1, [r3, #8]
 800d75c:	88ba      	ldrh	r2, [r7, #4]
 800d75e:	79fb      	ldrb	r3, [r7, #7]
 800d760:	4618      	mov	r0, r3
 800d762:	f7ff faa5 	bl	800ccb0 <pbuf_alloc>
 800d766:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d101      	bne.n	800d772 <pbuf_clone+0x2a>
    return NULL;
 800d76e:	2300      	movs	r3, #0
 800d770:	e011      	b.n	800d796 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d772:	6839      	ldr	r1, [r7, #0]
 800d774:	68f8      	ldr	r0, [r7, #12]
 800d776:	f7ff fea3 	bl	800d4c0 <pbuf_copy>
 800d77a:	4603      	mov	r3, r0
 800d77c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d77e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d006      	beq.n	800d794 <pbuf_clone+0x4c>
 800d786:	4b06      	ldr	r3, [pc, #24]	; (800d7a0 <pbuf_clone+0x58>)
 800d788:	f240 5224 	movw	r2, #1316	; 0x524
 800d78c:	4905      	ldr	r1, [pc, #20]	; (800d7a4 <pbuf_clone+0x5c>)
 800d78e:	4806      	ldr	r0, [pc, #24]	; (800d7a8 <pbuf_clone+0x60>)
 800d790:	f009 fb40 	bl	8016e14 <iprintf>
  return q;
 800d794:	68fb      	ldr	r3, [r7, #12]
}
 800d796:	4618      	mov	r0, r3
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	08018dd8 	.word	0x08018dd8
 800d7a4:	0801924c 	.word	0x0801924c
 800d7a8:	08018e38 	.word	0x08018e38

0800d7ac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d7b0:	f009 fb48 	bl	8016e44 <rand>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	4b01      	ldr	r3, [pc, #4]	; (800d7cc <tcp_init+0x20>)
 800d7c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d7c8:	bf00      	nop
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	24000028 	.word	0x24000028

0800d7d0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	7d1b      	ldrb	r3, [r3, #20]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d105      	bne.n	800d7ec <tcp_free+0x1c>
 800d7e0:	4b06      	ldr	r3, [pc, #24]	; (800d7fc <tcp_free+0x2c>)
 800d7e2:	22d4      	movs	r2, #212	; 0xd4
 800d7e4:	4906      	ldr	r1, [pc, #24]	; (800d800 <tcp_free+0x30>)
 800d7e6:	4807      	ldr	r0, [pc, #28]	; (800d804 <tcp_free+0x34>)
 800d7e8:	f009 fb14 	bl	8016e14 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d7ec:	6879      	ldr	r1, [r7, #4]
 800d7ee:	2001      	movs	r0, #1
 800d7f0:	f7fe fe9e 	bl	800c530 <memp_free>
}
 800d7f4:	bf00      	nop
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	080192d8 	.word	0x080192d8
 800d800:	08019308 	.word	0x08019308
 800d804:	0801931c 	.word	0x0801931c

0800d808 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	7d1b      	ldrb	r3, [r3, #20]
 800d814:	2b01      	cmp	r3, #1
 800d816:	d105      	bne.n	800d824 <tcp_free_listen+0x1c>
 800d818:	4b06      	ldr	r3, [pc, #24]	; (800d834 <tcp_free_listen+0x2c>)
 800d81a:	22df      	movs	r2, #223	; 0xdf
 800d81c:	4906      	ldr	r1, [pc, #24]	; (800d838 <tcp_free_listen+0x30>)
 800d81e:	4807      	ldr	r0, [pc, #28]	; (800d83c <tcp_free_listen+0x34>)
 800d820:	f009 faf8 	bl	8016e14 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d824:	6879      	ldr	r1, [r7, #4]
 800d826:	2002      	movs	r0, #2
 800d828:	f7fe fe82 	bl	800c530 <memp_free>
}
 800d82c:	bf00      	nop
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	080192d8 	.word	0x080192d8
 800d838:	08019344 	.word	0x08019344
 800d83c:	0801931c 	.word	0x0801931c

0800d840 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d844:	f001 f8a6 	bl	800e994 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d848:	4b07      	ldr	r3, [pc, #28]	; (800d868 <tcp_tmr+0x28>)
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	3301      	adds	r3, #1
 800d84e:	b2da      	uxtb	r2, r3
 800d850:	4b05      	ldr	r3, [pc, #20]	; (800d868 <tcp_tmr+0x28>)
 800d852:	701a      	strb	r2, [r3, #0]
 800d854:	4b04      	ldr	r3, [pc, #16]	; (800d868 <tcp_tmr+0x28>)
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	f003 0301 	and.w	r3, r3, #1
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d001      	beq.n	800d864 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d860:	f000 fd58 	bl	800e314 <tcp_slowtmr>
  }
}
 800d864:	bf00      	nop
 800d866:	bd80      	pop	{r7, pc}
 800d868:	24004ae1 	.word	0x24004ae1

0800d86c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d105      	bne.n	800d888 <tcp_remove_listener+0x1c>
 800d87c:	4b0d      	ldr	r3, [pc, #52]	; (800d8b4 <tcp_remove_listener+0x48>)
 800d87e:	22ff      	movs	r2, #255	; 0xff
 800d880:	490d      	ldr	r1, [pc, #52]	; (800d8b8 <tcp_remove_listener+0x4c>)
 800d882:	480e      	ldr	r0, [pc, #56]	; (800d8bc <tcp_remove_listener+0x50>)
 800d884:	f009 fac6 	bl	8016e14 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	60fb      	str	r3, [r7, #12]
 800d88c:	e00a      	b.n	800d8a4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d892:	683a      	ldr	r2, [r7, #0]
 800d894:	429a      	cmp	r2, r3
 800d896:	d102      	bne.n	800d89e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2200      	movs	r2, #0
 800d89c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	60fb      	str	r3, [r7, #12]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1f1      	bne.n	800d88e <tcp_remove_listener+0x22>
    }
  }
}
 800d8aa:	bf00      	nop
 800d8ac:	bf00      	nop
 800d8ae:	3710      	adds	r7, #16
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	080192d8 	.word	0x080192d8
 800d8b8:	08019360 	.word	0x08019360
 800d8bc:	0801931c 	.word	0x0801931c

0800d8c0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d106      	bne.n	800d8dc <tcp_listen_closed+0x1c>
 800d8ce:	4b14      	ldr	r3, [pc, #80]	; (800d920 <tcp_listen_closed+0x60>)
 800d8d0:	f240 1211 	movw	r2, #273	; 0x111
 800d8d4:	4913      	ldr	r1, [pc, #76]	; (800d924 <tcp_listen_closed+0x64>)
 800d8d6:	4814      	ldr	r0, [pc, #80]	; (800d928 <tcp_listen_closed+0x68>)
 800d8d8:	f009 fa9c 	bl	8016e14 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	7d1b      	ldrb	r3, [r3, #20]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d006      	beq.n	800d8f2 <tcp_listen_closed+0x32>
 800d8e4:	4b0e      	ldr	r3, [pc, #56]	; (800d920 <tcp_listen_closed+0x60>)
 800d8e6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d8ea:	4910      	ldr	r1, [pc, #64]	; (800d92c <tcp_listen_closed+0x6c>)
 800d8ec:	480e      	ldr	r0, [pc, #56]	; (800d928 <tcp_listen_closed+0x68>)
 800d8ee:	f009 fa91 	bl	8016e14 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	60fb      	str	r3, [r7, #12]
 800d8f6:	e00b      	b.n	800d910 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d8f8:	4a0d      	ldr	r2, [pc, #52]	; (800d930 <tcp_listen_closed+0x70>)
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	6879      	ldr	r1, [r7, #4]
 800d904:	4618      	mov	r0, r3
 800d906:	f7ff ffb1 	bl	800d86c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	3301      	adds	r3, #1
 800d90e:	60fb      	str	r3, [r7, #12]
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2b03      	cmp	r3, #3
 800d914:	d9f0      	bls.n	800d8f8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d916:	bf00      	nop
 800d918:	bf00      	nop
 800d91a:	3710      	adds	r7, #16
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	080192d8 	.word	0x080192d8
 800d924:	08019388 	.word	0x08019388
 800d928:	0801931c 	.word	0x0801931c
 800d92c:	08019394 	.word	0x08019394
 800d930:	0801b318 	.word	0x0801b318

0800d934 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d934:	b5b0      	push	{r4, r5, r7, lr}
 800d936:	b088      	sub	sp, #32
 800d938:	af04      	add	r7, sp, #16
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	460b      	mov	r3, r1
 800d93e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d106      	bne.n	800d954 <tcp_close_shutdown+0x20>
 800d946:	4b63      	ldr	r3, [pc, #396]	; (800dad4 <tcp_close_shutdown+0x1a0>)
 800d948:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d94c:	4962      	ldr	r1, [pc, #392]	; (800dad8 <tcp_close_shutdown+0x1a4>)
 800d94e:	4863      	ldr	r0, [pc, #396]	; (800dadc <tcp_close_shutdown+0x1a8>)
 800d950:	f009 fa60 	bl	8016e14 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d954:	78fb      	ldrb	r3, [r7, #3]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d066      	beq.n	800da28 <tcp_close_shutdown+0xf4>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	7d1b      	ldrb	r3, [r3, #20]
 800d95e:	2b04      	cmp	r3, #4
 800d960:	d003      	beq.n	800d96a <tcp_close_shutdown+0x36>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	7d1b      	ldrb	r3, [r3, #20]
 800d966:	2b07      	cmp	r3, #7
 800d968:	d15e      	bne.n	800da28 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d104      	bne.n	800d97c <tcp_close_shutdown+0x48>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d976:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d97a:	d055      	beq.n	800da28 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	8b5b      	ldrh	r3, [r3, #26]
 800d980:	f003 0310 	and.w	r3, r3, #16
 800d984:	2b00      	cmp	r3, #0
 800d986:	d106      	bne.n	800d996 <tcp_close_shutdown+0x62>
 800d988:	4b52      	ldr	r3, [pc, #328]	; (800dad4 <tcp_close_shutdown+0x1a0>)
 800d98a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d98e:	4954      	ldr	r1, [pc, #336]	; (800dae0 <tcp_close_shutdown+0x1ac>)
 800d990:	4852      	ldr	r0, [pc, #328]	; (800dadc <tcp_close_shutdown+0x1a8>)
 800d992:	f009 fa3f 	bl	8016e14 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d99e:	687d      	ldr	r5, [r7, #4]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	3304      	adds	r3, #4
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	8ad2      	ldrh	r2, [r2, #22]
 800d9a8:	6879      	ldr	r1, [r7, #4]
 800d9aa:	8b09      	ldrh	r1, [r1, #24]
 800d9ac:	9102      	str	r1, [sp, #8]
 800d9ae:	9201      	str	r2, [sp, #4]
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	462b      	mov	r3, r5
 800d9b4:	4622      	mov	r2, r4
 800d9b6:	4601      	mov	r1, r0
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f005 fdb7 	bl	801352c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f001 fb98 	bl	800f0f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d9c4:	4b47      	ldr	r3, [pc, #284]	; (800dae4 <tcp_close_shutdown+0x1b0>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d105      	bne.n	800d9da <tcp_close_shutdown+0xa6>
 800d9ce:	4b45      	ldr	r3, [pc, #276]	; (800dae4 <tcp_close_shutdown+0x1b0>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	4a43      	ldr	r2, [pc, #268]	; (800dae4 <tcp_close_shutdown+0x1b0>)
 800d9d6:	6013      	str	r3, [r2, #0]
 800d9d8:	e013      	b.n	800da02 <tcp_close_shutdown+0xce>
 800d9da:	4b42      	ldr	r3, [pc, #264]	; (800dae4 <tcp_close_shutdown+0x1b0>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	60fb      	str	r3, [r7, #12]
 800d9e0:	e00c      	b.n	800d9fc <tcp_close_shutdown+0xc8>
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d104      	bne.n	800d9f6 <tcp_close_shutdown+0xc2>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	68da      	ldr	r2, [r3, #12]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	60da      	str	r2, [r3, #12]
 800d9f4:	e005      	b.n	800da02 <tcp_close_shutdown+0xce>
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	60fb      	str	r3, [r7, #12]
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1ef      	bne.n	800d9e2 <tcp_close_shutdown+0xae>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	60da      	str	r2, [r3, #12]
 800da08:	4b37      	ldr	r3, [pc, #220]	; (800dae8 <tcp_close_shutdown+0x1b4>)
 800da0a:	2201      	movs	r2, #1
 800da0c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800da0e:	4b37      	ldr	r3, [pc, #220]	; (800daec <tcp_close_shutdown+0x1b8>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	429a      	cmp	r2, r3
 800da16:	d102      	bne.n	800da1e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800da18:	f004 f82c 	bl	8011a74 <tcp_trigger_input_pcb_close>
 800da1c:	e002      	b.n	800da24 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f7ff fed6 	bl	800d7d0 <tcp_free>
      }
      return ERR_OK;
 800da24:	2300      	movs	r3, #0
 800da26:	e050      	b.n	800daca <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	7d1b      	ldrb	r3, [r3, #20]
 800da2c:	2b02      	cmp	r3, #2
 800da2e:	d03b      	beq.n	800daa8 <tcp_close_shutdown+0x174>
 800da30:	2b02      	cmp	r3, #2
 800da32:	dc44      	bgt.n	800dabe <tcp_close_shutdown+0x18a>
 800da34:	2b00      	cmp	r3, #0
 800da36:	d002      	beq.n	800da3e <tcp_close_shutdown+0x10a>
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d02a      	beq.n	800da92 <tcp_close_shutdown+0x15e>
 800da3c:	e03f      	b.n	800dabe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	8adb      	ldrh	r3, [r3, #22]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d021      	beq.n	800da8a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800da46:	4b2a      	ldr	r3, [pc, #168]	; (800daf0 <tcp_close_shutdown+0x1bc>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d105      	bne.n	800da5c <tcp_close_shutdown+0x128>
 800da50:	4b27      	ldr	r3, [pc, #156]	; (800daf0 <tcp_close_shutdown+0x1bc>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	4a26      	ldr	r2, [pc, #152]	; (800daf0 <tcp_close_shutdown+0x1bc>)
 800da58:	6013      	str	r3, [r2, #0]
 800da5a:	e013      	b.n	800da84 <tcp_close_shutdown+0x150>
 800da5c:	4b24      	ldr	r3, [pc, #144]	; (800daf0 <tcp_close_shutdown+0x1bc>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	60bb      	str	r3, [r7, #8]
 800da62:	e00c      	b.n	800da7e <tcp_close_shutdown+0x14a>
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d104      	bne.n	800da78 <tcp_close_shutdown+0x144>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	68da      	ldr	r2, [r3, #12]
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	60da      	str	r2, [r3, #12]
 800da76:	e005      	b.n	800da84 <tcp_close_shutdown+0x150>
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	60bb      	str	r3, [r7, #8]
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d1ef      	bne.n	800da64 <tcp_close_shutdown+0x130>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2200      	movs	r2, #0
 800da88:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7ff fea0 	bl	800d7d0 <tcp_free>
      break;
 800da90:	e01a      	b.n	800dac8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7ff ff14 	bl	800d8c0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800da98:	6879      	ldr	r1, [r7, #4]
 800da9a:	4816      	ldr	r0, [pc, #88]	; (800daf4 <tcp_close_shutdown+0x1c0>)
 800da9c:	f001 fb7a 	bl	800f194 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f7ff feb1 	bl	800d808 <tcp_free_listen>
      break;
 800daa6:	e00f      	b.n	800dac8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800daa8:	6879      	ldr	r1, [r7, #4]
 800daaa:	480e      	ldr	r0, [pc, #56]	; (800dae4 <tcp_close_shutdown+0x1b0>)
 800daac:	f001 fb72 	bl	800f194 <tcp_pcb_remove>
 800dab0:	4b0d      	ldr	r3, [pc, #52]	; (800dae8 <tcp_close_shutdown+0x1b4>)
 800dab2:	2201      	movs	r2, #1
 800dab4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f7ff fe8a 	bl	800d7d0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dabc:	e004      	b.n	800dac8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f81a 	bl	800daf8 <tcp_close_shutdown_fin>
 800dac4:	4603      	mov	r3, r0
 800dac6:	e000      	b.n	800daca <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dac8:	2300      	movs	r3, #0
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3710      	adds	r7, #16
 800dace:	46bd      	mov	sp, r7
 800dad0:	bdb0      	pop	{r4, r5, r7, pc}
 800dad2:	bf00      	nop
 800dad4:	080192d8 	.word	0x080192d8
 800dad8:	080193ac 	.word	0x080193ac
 800dadc:	0801931c 	.word	0x0801931c
 800dae0:	080193cc 	.word	0x080193cc
 800dae4:	24007f98 	.word	0x24007f98
 800dae8:	24007f94 	.word	0x24007f94
 800daec:	24007fac 	.word	0x24007fac
 800daf0:	24007fa4 	.word	0x24007fa4
 800daf4:	24007fa0 	.word	0x24007fa0

0800daf8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d106      	bne.n	800db14 <tcp_close_shutdown_fin+0x1c>
 800db06:	4b2e      	ldr	r3, [pc, #184]	; (800dbc0 <tcp_close_shutdown_fin+0xc8>)
 800db08:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800db0c:	492d      	ldr	r1, [pc, #180]	; (800dbc4 <tcp_close_shutdown_fin+0xcc>)
 800db0e:	482e      	ldr	r0, [pc, #184]	; (800dbc8 <tcp_close_shutdown_fin+0xd0>)
 800db10:	f009 f980 	bl	8016e14 <iprintf>

  switch (pcb->state) {
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	7d1b      	ldrb	r3, [r3, #20]
 800db18:	2b07      	cmp	r3, #7
 800db1a:	d020      	beq.n	800db5e <tcp_close_shutdown_fin+0x66>
 800db1c:	2b07      	cmp	r3, #7
 800db1e:	dc2b      	bgt.n	800db78 <tcp_close_shutdown_fin+0x80>
 800db20:	2b03      	cmp	r3, #3
 800db22:	d002      	beq.n	800db2a <tcp_close_shutdown_fin+0x32>
 800db24:	2b04      	cmp	r3, #4
 800db26:	d00d      	beq.n	800db44 <tcp_close_shutdown_fin+0x4c>
 800db28:	e026      	b.n	800db78 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f004 fe0c 	bl	8012748 <tcp_send_fin>
 800db30:	4603      	mov	r3, r0
 800db32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d11f      	bne.n	800db7c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2205      	movs	r2, #5
 800db40:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db42:	e01b      	b.n	800db7c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f004 fdff 	bl	8012748 <tcp_send_fin>
 800db4a:	4603      	mov	r3, r0
 800db4c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d114      	bne.n	800db80 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2205      	movs	r2, #5
 800db5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db5c:	e010      	b.n	800db80 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f004 fdf2 	bl	8012748 <tcp_send_fin>
 800db64:	4603      	mov	r3, r0
 800db66:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d109      	bne.n	800db84 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2209      	movs	r2, #9
 800db74:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db76:	e005      	b.n	800db84 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800db78:	2300      	movs	r3, #0
 800db7a:	e01c      	b.n	800dbb6 <tcp_close_shutdown_fin+0xbe>
      break;
 800db7c:	bf00      	nop
 800db7e:	e002      	b.n	800db86 <tcp_close_shutdown_fin+0x8e>
      break;
 800db80:	bf00      	nop
 800db82:	e000      	b.n	800db86 <tcp_close_shutdown_fin+0x8e>
      break;
 800db84:	bf00      	nop
  }

  if (err == ERR_OK) {
 800db86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d103      	bne.n	800db96 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f004 ff18 	bl	80129c4 <tcp_output>
 800db94:	e00d      	b.n	800dbb2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800db96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db9e:	d108      	bne.n	800dbb2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	8b5b      	ldrh	r3, [r3, #26]
 800dba4:	f043 0308 	orr.w	r3, r3, #8
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	e001      	b.n	800dbb6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dbb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3710      	adds	r7, #16
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	080192d8 	.word	0x080192d8
 800dbc4:	08019388 	.word	0x08019388
 800dbc8:	0801931c 	.word	0x0801931c

0800dbcc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d109      	bne.n	800dbee <tcp_close+0x22>
 800dbda:	4b0f      	ldr	r3, [pc, #60]	; (800dc18 <tcp_close+0x4c>)
 800dbdc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800dbe0:	490e      	ldr	r1, [pc, #56]	; (800dc1c <tcp_close+0x50>)
 800dbe2:	480f      	ldr	r0, [pc, #60]	; (800dc20 <tcp_close+0x54>)
 800dbe4:	f009 f916 	bl	8016e14 <iprintf>
 800dbe8:	f06f 030f 	mvn.w	r3, #15
 800dbec:	e00f      	b.n	800dc0e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	7d1b      	ldrb	r3, [r3, #20]
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d006      	beq.n	800dc04 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	8b5b      	ldrh	r3, [r3, #26]
 800dbfa:	f043 0310 	orr.w	r3, r3, #16
 800dbfe:	b29a      	uxth	r2, r3
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dc04:	2101      	movs	r1, #1
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f7ff fe94 	bl	800d934 <tcp_close_shutdown>
 800dc0c:	4603      	mov	r3, r0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	080192d8 	.word	0x080192d8
 800dc1c:	080193e8 	.word	0x080193e8
 800dc20:	0801931c 	.word	0x0801931c

0800dc24 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d109      	bne.n	800dc4a <tcp_shutdown+0x26>
 800dc36:	4b26      	ldr	r3, [pc, #152]	; (800dcd0 <tcp_shutdown+0xac>)
 800dc38:	f240 2207 	movw	r2, #519	; 0x207
 800dc3c:	4925      	ldr	r1, [pc, #148]	; (800dcd4 <tcp_shutdown+0xb0>)
 800dc3e:	4826      	ldr	r0, [pc, #152]	; (800dcd8 <tcp_shutdown+0xb4>)
 800dc40:	f009 f8e8 	bl	8016e14 <iprintf>
 800dc44:	f06f 030f 	mvn.w	r3, #15
 800dc48:	e03d      	b.n	800dcc6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	7d1b      	ldrb	r3, [r3, #20]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d102      	bne.n	800dc58 <tcp_shutdown+0x34>
    return ERR_CONN;
 800dc52:	f06f 030a 	mvn.w	r3, #10
 800dc56:	e036      	b.n	800dcc6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d01b      	beq.n	800dc96 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	8b5b      	ldrh	r3, [r3, #26]
 800dc62:	f043 0310 	orr.w	r3, r3, #16
 800dc66:	b29a      	uxth	r2, r3
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d005      	beq.n	800dc7e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800dc72:	2101      	movs	r1, #1
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	f7ff fe5d 	bl	800d934 <tcp_close_shutdown>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	e023      	b.n	800dcc6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d007      	beq.n	800dc96 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7ff faf4 	bl	800d278 <pbuf_free>
      pcb->refused_data = NULL;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2200      	movs	r2, #0
 800dc94:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d013      	beq.n	800dcc4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	7d1b      	ldrb	r3, [r3, #20]
 800dca0:	2b04      	cmp	r3, #4
 800dca2:	dc02      	bgt.n	800dcaa <tcp_shutdown+0x86>
 800dca4:	2b03      	cmp	r3, #3
 800dca6:	da02      	bge.n	800dcae <tcp_shutdown+0x8a>
 800dca8:	e009      	b.n	800dcbe <tcp_shutdown+0x9a>
 800dcaa:	2b07      	cmp	r3, #7
 800dcac:	d107      	bne.n	800dcbe <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f7ff fe3d 	bl	800d934 <tcp_close_shutdown>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	e003      	b.n	800dcc6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800dcbe:	f06f 030a 	mvn.w	r3, #10
 800dcc2:	e000      	b.n	800dcc6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	080192d8 	.word	0x080192d8
 800dcd4:	08019400 	.word	0x08019400
 800dcd8:	0801931c 	.word	0x0801931c

0800dcdc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b08e      	sub	sp, #56	; 0x38
 800dce0:	af04      	add	r7, sp, #16
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d107      	bne.n	800dcfc <tcp_abandon+0x20>
 800dcec:	4b52      	ldr	r3, [pc, #328]	; (800de38 <tcp_abandon+0x15c>)
 800dcee:	f240 223d 	movw	r2, #573	; 0x23d
 800dcf2:	4952      	ldr	r1, [pc, #328]	; (800de3c <tcp_abandon+0x160>)
 800dcf4:	4852      	ldr	r0, [pc, #328]	; (800de40 <tcp_abandon+0x164>)
 800dcf6:	f009 f88d 	bl	8016e14 <iprintf>
 800dcfa:	e099      	b.n	800de30 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	7d1b      	ldrb	r3, [r3, #20]
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d106      	bne.n	800dd12 <tcp_abandon+0x36>
 800dd04:	4b4c      	ldr	r3, [pc, #304]	; (800de38 <tcp_abandon+0x15c>)
 800dd06:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dd0a:	494e      	ldr	r1, [pc, #312]	; (800de44 <tcp_abandon+0x168>)
 800dd0c:	484c      	ldr	r0, [pc, #304]	; (800de40 <tcp_abandon+0x164>)
 800dd0e:	f009 f881 	bl	8016e14 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	7d1b      	ldrb	r3, [r3, #20]
 800dd16:	2b0a      	cmp	r3, #10
 800dd18:	d107      	bne.n	800dd2a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dd1a:	6879      	ldr	r1, [r7, #4]
 800dd1c:	484a      	ldr	r0, [pc, #296]	; (800de48 <tcp_abandon+0x16c>)
 800dd1e:	f001 fa39 	bl	800f194 <tcp_pcb_remove>
    tcp_free(pcb);
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f7ff fd54 	bl	800d7d0 <tcp_free>
 800dd28:	e082      	b.n	800de30 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd36:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd3c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd44:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	691b      	ldr	r3, [r3, #16]
 800dd4a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	7d1b      	ldrb	r3, [r3, #20]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d126      	bne.n	800dda2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	8adb      	ldrh	r3, [r3, #22]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d02e      	beq.n	800ddba <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd5c:	4b3b      	ldr	r3, [pc, #236]	; (800de4c <tcp_abandon+0x170>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d105      	bne.n	800dd72 <tcp_abandon+0x96>
 800dd66:	4b39      	ldr	r3, [pc, #228]	; (800de4c <tcp_abandon+0x170>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	4a37      	ldr	r2, [pc, #220]	; (800de4c <tcp_abandon+0x170>)
 800dd6e:	6013      	str	r3, [r2, #0]
 800dd70:	e013      	b.n	800dd9a <tcp_abandon+0xbe>
 800dd72:	4b36      	ldr	r3, [pc, #216]	; (800de4c <tcp_abandon+0x170>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	61fb      	str	r3, [r7, #28]
 800dd78:	e00c      	b.n	800dd94 <tcp_abandon+0xb8>
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d104      	bne.n	800dd8e <tcp_abandon+0xb2>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	68da      	ldr	r2, [r3, #12]
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	60da      	str	r2, [r3, #12]
 800dd8c:	e005      	b.n	800dd9a <tcp_abandon+0xbe>
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	61fb      	str	r3, [r7, #28]
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d1ef      	bne.n	800dd7a <tcp_abandon+0x9e>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	60da      	str	r2, [r3, #12]
 800dda0:	e00b      	b.n	800ddba <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	8adb      	ldrh	r3, [r3, #22]
 800ddaa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ddac:	6879      	ldr	r1, [r7, #4]
 800ddae:	4828      	ldr	r0, [pc, #160]	; (800de50 <tcp_abandon+0x174>)
 800ddb0:	f001 f9f0 	bl	800f194 <tcp_pcb_remove>
 800ddb4:	4b27      	ldr	r3, [pc, #156]	; (800de54 <tcp_abandon+0x178>)
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d004      	beq.n	800ddcc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f000 fec4 	bl	800eb54 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d004      	beq.n	800ddde <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f000 febb 	bl	800eb54 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d004      	beq.n	800ddf0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddea:	4618      	mov	r0, r3
 800ddec:	f000 feb2 	bl	800eb54 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ddf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d00e      	beq.n	800de14 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ddf6:	6879      	ldr	r1, [r7, #4]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	3304      	adds	r3, #4
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	8b12      	ldrh	r2, [r2, #24]
 800de00:	9202      	str	r2, [sp, #8]
 800de02:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800de04:	9201      	str	r2, [sp, #4]
 800de06:	9300      	str	r3, [sp, #0]
 800de08:	460b      	mov	r3, r1
 800de0a:	697a      	ldr	r2, [r7, #20]
 800de0c:	69b9      	ldr	r1, [r7, #24]
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f005 fb8c 	bl	801352c <tcp_rst>
    }
    last_state = pcb->state;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	7d1b      	ldrb	r3, [r3, #20]
 800de18:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f7ff fcd8 	bl	800d7d0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d004      	beq.n	800de30 <tcp_abandon+0x154>
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	f06f 010c 	mvn.w	r1, #12
 800de2c:	68f8      	ldr	r0, [r7, #12]
 800de2e:	4798      	blx	r3
  }
}
 800de30:	3728      	adds	r7, #40	; 0x28
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	080192d8 	.word	0x080192d8
 800de3c:	0801941c 	.word	0x0801941c
 800de40:	0801931c 	.word	0x0801931c
 800de44:	08019438 	.word	0x08019438
 800de48:	24007fa8 	.word	0x24007fa8
 800de4c:	24007fa4 	.word	0x24007fa4
 800de50:	24007f98 	.word	0x24007f98
 800de54:	24007f94 	.word	0x24007f94

0800de58 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800de60:	2101      	movs	r1, #1
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f7ff ff3a 	bl	800dcdc <tcp_abandon>
}
 800de68:	bf00      	nop
 800de6a:	3708      	adds	r7, #8
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b088      	sub	sp, #32
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	4613      	mov	r3, r2
 800de7c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800de7e:	2304      	movs	r3, #4
 800de80:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d101      	bne.n	800de8c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800de88:	4b3e      	ldr	r3, [pc, #248]	; (800df84 <tcp_bind+0x114>)
 800de8a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d109      	bne.n	800dea6 <tcp_bind+0x36>
 800de92:	4b3d      	ldr	r3, [pc, #244]	; (800df88 <tcp_bind+0x118>)
 800de94:	f240 22a9 	movw	r2, #681	; 0x2a9
 800de98:	493c      	ldr	r1, [pc, #240]	; (800df8c <tcp_bind+0x11c>)
 800de9a:	483d      	ldr	r0, [pc, #244]	; (800df90 <tcp_bind+0x120>)
 800de9c:	f008 ffba 	bl	8016e14 <iprintf>
 800dea0:	f06f 030f 	mvn.w	r3, #15
 800dea4:	e06a      	b.n	800df7c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	7d1b      	ldrb	r3, [r3, #20]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d009      	beq.n	800dec2 <tcp_bind+0x52>
 800deae:	4b36      	ldr	r3, [pc, #216]	; (800df88 <tcp_bind+0x118>)
 800deb0:	f240 22ab 	movw	r2, #683	; 0x2ab
 800deb4:	4937      	ldr	r1, [pc, #220]	; (800df94 <tcp_bind+0x124>)
 800deb6:	4836      	ldr	r0, [pc, #216]	; (800df90 <tcp_bind+0x120>)
 800deb8:	f008 ffac 	bl	8016e14 <iprintf>
 800debc:	f06f 0305 	mvn.w	r3, #5
 800dec0:	e05c      	b.n	800df7c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800dec2:	88fb      	ldrh	r3, [r7, #6]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d109      	bne.n	800dedc <tcp_bind+0x6c>
    port = tcp_new_port();
 800dec8:	f000 f9de 	bl	800e288 <tcp_new_port>
 800decc:	4603      	mov	r3, r0
 800dece:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ded0:	88fb      	ldrh	r3, [r7, #6]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d135      	bne.n	800df42 <tcp_bind+0xd2>
      return ERR_BUF;
 800ded6:	f06f 0301 	mvn.w	r3, #1
 800deda:	e04f      	b.n	800df7c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dedc:	2300      	movs	r3, #0
 800dede:	61fb      	str	r3, [r7, #28]
 800dee0:	e02b      	b.n	800df3a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dee2:	4a2d      	ldr	r2, [pc, #180]	; (800df98 <tcp_bind+0x128>)
 800dee4:	69fb      	ldr	r3, [r7, #28]
 800dee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	61bb      	str	r3, [r7, #24]
 800deee:	e01e      	b.n	800df2e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800def0:	69bb      	ldr	r3, [r7, #24]
 800def2:	8adb      	ldrh	r3, [r3, #22]
 800def4:	88fa      	ldrh	r2, [r7, #6]
 800def6:	429a      	cmp	r2, r3
 800def8:	d116      	bne.n	800df28 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800defa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800defc:	2b00      	cmp	r3, #0
 800defe:	d010      	beq.n	800df22 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d00c      	beq.n	800df22 <tcp_bind+0xb2>
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d009      	beq.n	800df22 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d005      	beq.n	800df22 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800df1e:	429a      	cmp	r2, r3
 800df20:	d102      	bne.n	800df28 <tcp_bind+0xb8>
              return ERR_USE;
 800df22:	f06f 0307 	mvn.w	r3, #7
 800df26:	e029      	b.n	800df7c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	68db      	ldr	r3, [r3, #12]
 800df2c:	61bb      	str	r3, [r7, #24]
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1dd      	bne.n	800def0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	3301      	adds	r3, #1
 800df38:	61fb      	str	r3, [r7, #28]
 800df3a:	69fa      	ldr	r2, [r7, #28]
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	429a      	cmp	r2, r3
 800df40:	dbcf      	blt.n	800dee2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d00c      	beq.n	800df62 <tcp_bind+0xf2>
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d008      	beq.n	800df62 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d002      	beq.n	800df5c <tcp_bind+0xec>
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	e000      	b.n	800df5e <tcp_bind+0xee>
 800df5c:	2300      	movs	r3, #0
 800df5e:	68fa      	ldr	r2, [r7, #12]
 800df60:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	88fa      	ldrh	r2, [r7, #6]
 800df66:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800df68:	4b0c      	ldr	r3, [pc, #48]	; (800df9c <tcp_bind+0x12c>)
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	60da      	str	r2, [r3, #12]
 800df70:	4a0a      	ldr	r2, [pc, #40]	; (800df9c <tcp_bind+0x12c>)
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6013      	str	r3, [r2, #0]
 800df76:	f005 fc9b 	bl	80138b0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800df7a:	2300      	movs	r3, #0
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3720      	adds	r7, #32
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	0801b340 	.word	0x0801b340
 800df88:	080192d8 	.word	0x080192d8
 800df8c:	0801946c 	.word	0x0801946c
 800df90:	0801931c 	.word	0x0801931c
 800df94:	08019484 	.word	0x08019484
 800df98:	0801b318 	.word	0x0801b318
 800df9c:	24007fa4 	.word	0x24007fa4

0800dfa0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	4613      	mov	r3, r2
 800dfac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d106      	bne.n	800dfc2 <tcp_accept_null+0x22>
 800dfb4:	4b07      	ldr	r3, [pc, #28]	; (800dfd4 <tcp_accept_null+0x34>)
 800dfb6:	f240 320f 	movw	r2, #783	; 0x30f
 800dfba:	4907      	ldr	r1, [pc, #28]	; (800dfd8 <tcp_accept_null+0x38>)
 800dfbc:	4807      	ldr	r0, [pc, #28]	; (800dfdc <tcp_accept_null+0x3c>)
 800dfbe:	f008 ff29 	bl	8016e14 <iprintf>

  tcp_abort(pcb);
 800dfc2:	68b8      	ldr	r0, [r7, #8]
 800dfc4:	f7ff ff48 	bl	800de58 <tcp_abort>

  return ERR_ABRT;
 800dfc8:	f06f 030c 	mvn.w	r3, #12
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3710      	adds	r7, #16
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}
 800dfd4:	080192d8 	.word	0x080192d8
 800dfd8:	080194ac 	.word	0x080194ac
 800dfdc:	0801931c 	.word	0x0801931c

0800dfe0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b088      	sub	sp, #32
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	460b      	mov	r3, r1
 800dfea:	607a      	str	r2, [r7, #4]
 800dfec:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800dfee:	2300      	movs	r3, #0
 800dff0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d109      	bne.n	800e00c <tcp_listen_with_backlog_and_err+0x2c>
 800dff8:	4b47      	ldr	r3, [pc, #284]	; (800e118 <tcp_listen_with_backlog_and_err+0x138>)
 800dffa:	f240 3259 	movw	r2, #857	; 0x359
 800dffe:	4947      	ldr	r1, [pc, #284]	; (800e11c <tcp_listen_with_backlog_and_err+0x13c>)
 800e000:	4847      	ldr	r0, [pc, #284]	; (800e120 <tcp_listen_with_backlog_and_err+0x140>)
 800e002:	f008 ff07 	bl	8016e14 <iprintf>
 800e006:	23f0      	movs	r3, #240	; 0xf0
 800e008:	76fb      	strb	r3, [r7, #27]
 800e00a:	e079      	b.n	800e100 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	7d1b      	ldrb	r3, [r3, #20]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d009      	beq.n	800e028 <tcp_listen_with_backlog_and_err+0x48>
 800e014:	4b40      	ldr	r3, [pc, #256]	; (800e118 <tcp_listen_with_backlog_and_err+0x138>)
 800e016:	f240 325a 	movw	r2, #858	; 0x35a
 800e01a:	4942      	ldr	r1, [pc, #264]	; (800e124 <tcp_listen_with_backlog_and_err+0x144>)
 800e01c:	4840      	ldr	r0, [pc, #256]	; (800e120 <tcp_listen_with_backlog_and_err+0x140>)
 800e01e:	f008 fef9 	bl	8016e14 <iprintf>
 800e022:	23f1      	movs	r3, #241	; 0xf1
 800e024:	76fb      	strb	r3, [r7, #27]
 800e026:	e06b      	b.n	800e100 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	7d1b      	ldrb	r3, [r3, #20]
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d104      	bne.n	800e03a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e034:	23f7      	movs	r3, #247	; 0xf7
 800e036:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e038:	e062      	b.n	800e100 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e03a:	2002      	movs	r0, #2
 800e03c:	f7fe fa02 	bl	800c444 <memp_malloc>
 800e040:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e042:	69fb      	ldr	r3, [r7, #28]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d102      	bne.n	800e04e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e048:	23ff      	movs	r3, #255	; 0xff
 800e04a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e04c:	e058      	b.n	800e100 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	691a      	ldr	r2, [r3, #16]
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	8ada      	ldrh	r2, [r3, #22]
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e05e:	69fb      	ldr	r3, [r7, #28]
 800e060:	2201      	movs	r2, #1
 800e062:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	7d5a      	ldrb	r2, [r3, #21]
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	7a5a      	ldrb	r2, [r3, #9]
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	2200      	movs	r2, #0
 800e078:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	7ada      	ldrb	r2, [r3, #11]
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	7a9a      	ldrb	r2, [r3, #10]
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	8adb      	ldrh	r3, [r3, #22]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d021      	beq.n	800e0de <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e09a:	4b23      	ldr	r3, [pc, #140]	; (800e128 <tcp_listen_with_backlog_and_err+0x148>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	68fa      	ldr	r2, [r7, #12]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d105      	bne.n	800e0b0 <tcp_listen_with_backlog_and_err+0xd0>
 800e0a4:	4b20      	ldr	r3, [pc, #128]	; (800e128 <tcp_listen_with_backlog_and_err+0x148>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	4a1f      	ldr	r2, [pc, #124]	; (800e128 <tcp_listen_with_backlog_and_err+0x148>)
 800e0ac:	6013      	str	r3, [r2, #0]
 800e0ae:	e013      	b.n	800e0d8 <tcp_listen_with_backlog_and_err+0xf8>
 800e0b0:	4b1d      	ldr	r3, [pc, #116]	; (800e128 <tcp_listen_with_backlog_and_err+0x148>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	617b      	str	r3, [r7, #20]
 800e0b6:	e00c      	b.n	800e0d2 <tcp_listen_with_backlog_and_err+0xf2>
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	68db      	ldr	r3, [r3, #12]
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d104      	bne.n	800e0cc <tcp_listen_with_backlog_and_err+0xec>
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	68da      	ldr	r2, [r3, #12]
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	60da      	str	r2, [r3, #12]
 800e0ca:	e005      	b.n	800e0d8 <tcp_listen_with_backlog_and_err+0xf8>
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	617b      	str	r3, [r7, #20]
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d1ef      	bne.n	800e0b8 <tcp_listen_with_backlog_and_err+0xd8>
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e0de:	68f8      	ldr	r0, [r7, #12]
 800e0e0:	f7ff fb76 	bl	800d7d0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	4a11      	ldr	r2, [pc, #68]	; (800e12c <tcp_listen_with_backlog_and_err+0x14c>)
 800e0e8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e0ea:	4b11      	ldr	r3, [pc, #68]	; (800e130 <tcp_listen_with_backlog_and_err+0x150>)
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	60da      	str	r2, [r3, #12]
 800e0f2:	4a0f      	ldr	r2, [pc, #60]	; (800e130 <tcp_listen_with_backlog_and_err+0x150>)
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	6013      	str	r3, [r2, #0]
 800e0f8:	f005 fbda 	bl	80138b0 <tcp_timer_needed>
  res = ERR_OK;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d002      	beq.n	800e10c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	7efa      	ldrb	r2, [r7, #27]
 800e10a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e10c:	69fb      	ldr	r3, [r7, #28]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3720      	adds	r7, #32
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	080192d8 	.word	0x080192d8
 800e11c:	080194cc 	.word	0x080194cc
 800e120:	0801931c 	.word	0x0801931c
 800e124:	080194fc 	.word	0x080194fc
 800e128:	24007fa4 	.word	0x24007fa4
 800e12c:	0800dfa1 	.word	0x0800dfa1
 800e130:	24007fa0 	.word	0x24007fa0

0800e134 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d106      	bne.n	800e150 <tcp_update_rcv_ann_wnd+0x1c>
 800e142:	4b25      	ldr	r3, [pc, #148]	; (800e1d8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e144:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e148:	4924      	ldr	r1, [pc, #144]	; (800e1dc <tcp_update_rcv_ann_wnd+0xa8>)
 800e14a:	4825      	ldr	r0, [pc, #148]	; (800e1e0 <tcp_update_rcv_ann_wnd+0xac>)
 800e14c:	f008 fe62 	bl	8016e14 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e158:	4413      	add	r3, r2
 800e15a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e164:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e168:	bf28      	it	cs
 800e16a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e16e:	b292      	uxth	r2, r2
 800e170:	4413      	add	r3, r2
 800e172:	68fa      	ldr	r2, [r7, #12]
 800e174:	1ad3      	subs	r3, r2, r3
 800e176:	2b00      	cmp	r3, #0
 800e178:	db08      	blt.n	800e18c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e186:	68fa      	ldr	r2, [r7, #12]
 800e188:	1ad3      	subs	r3, r2, r3
 800e18a:	e020      	b.n	800e1ce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e194:	1ad3      	subs	r3, r2, r3
 800e196:	2b00      	cmp	r3, #0
 800e198:	dd03      	ble.n	800e1a2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2200      	movs	r2, #0
 800e19e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e1a0:	e014      	b.n	800e1cc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1aa:	1ad3      	subs	r3, r2, r3
 800e1ac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1b4:	d306      	bcc.n	800e1c4 <tcp_update_rcv_ann_wnd+0x90>
 800e1b6:	4b08      	ldr	r3, [pc, #32]	; (800e1d8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e1b8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e1bc:	4909      	ldr	r1, [pc, #36]	; (800e1e4 <tcp_update_rcv_ann_wnd+0xb0>)
 800e1be:	4808      	ldr	r0, [pc, #32]	; (800e1e0 <tcp_update_rcv_ann_wnd+0xac>)
 800e1c0:	f008 fe28 	bl	8016e14 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	b29a      	uxth	r2, r3
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e1cc:	2300      	movs	r3, #0
  }
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	080192d8 	.word	0x080192d8
 800e1dc:	08019534 	.word	0x08019534
 800e1e0:	0801931c 	.word	0x0801931c
 800e1e4:	08019558 	.word	0x08019558

0800e1e8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d107      	bne.n	800e20a <tcp_recved+0x22>
 800e1fa:	4b1f      	ldr	r3, [pc, #124]	; (800e278 <tcp_recved+0x90>)
 800e1fc:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e200:	491e      	ldr	r1, [pc, #120]	; (800e27c <tcp_recved+0x94>)
 800e202:	481f      	ldr	r0, [pc, #124]	; (800e280 <tcp_recved+0x98>)
 800e204:	f008 fe06 	bl	8016e14 <iprintf>
 800e208:	e032      	b.n	800e270 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	7d1b      	ldrb	r3, [r3, #20]
 800e20e:	2b01      	cmp	r3, #1
 800e210:	d106      	bne.n	800e220 <tcp_recved+0x38>
 800e212:	4b19      	ldr	r3, [pc, #100]	; (800e278 <tcp_recved+0x90>)
 800e214:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e218:	491a      	ldr	r1, [pc, #104]	; (800e284 <tcp_recved+0x9c>)
 800e21a:	4819      	ldr	r0, [pc, #100]	; (800e280 <tcp_recved+0x98>)
 800e21c:	f008 fdfa 	bl	8016e14 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e224:	887b      	ldrh	r3, [r7, #2]
 800e226:	4413      	add	r3, r2
 800e228:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e22a:	89fb      	ldrh	r3, [r7, #14]
 800e22c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e230:	d804      	bhi.n	800e23c <tcp_recved+0x54>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e236:	89fa      	ldrh	r2, [r7, #14]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d204      	bcs.n	800e246 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e242:	851a      	strh	r2, [r3, #40]	; 0x28
 800e244:	e002      	b.n	800e24c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	89fa      	ldrh	r2, [r7, #14]
 800e24a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f7ff ff71 	bl	800e134 <tcp_update_rcv_ann_wnd>
 800e252:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e25a:	d309      	bcc.n	800e270 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	8b5b      	ldrh	r3, [r3, #26]
 800e260:	f043 0302 	orr.w	r3, r3, #2
 800e264:	b29a      	uxth	r2, r3
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f004 fbaa 	bl	80129c4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	080192d8 	.word	0x080192d8
 800e27c:	08019574 	.word	0x08019574
 800e280:	0801931c 	.word	0x0801931c
 800e284:	0801958c 	.word	0x0801958c

0800e288 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e28e:	2300      	movs	r3, #0
 800e290:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e292:	4b1e      	ldr	r3, [pc, #120]	; (800e30c <tcp_new_port+0x84>)
 800e294:	881b      	ldrh	r3, [r3, #0]
 800e296:	3301      	adds	r3, #1
 800e298:	b29a      	uxth	r2, r3
 800e29a:	4b1c      	ldr	r3, [pc, #112]	; (800e30c <tcp_new_port+0x84>)
 800e29c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e29e:	4b1b      	ldr	r3, [pc, #108]	; (800e30c <tcp_new_port+0x84>)
 800e2a0:	881b      	ldrh	r3, [r3, #0]
 800e2a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d103      	bne.n	800e2b2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e2aa:	4b18      	ldr	r3, [pc, #96]	; (800e30c <tcp_new_port+0x84>)
 800e2ac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e2b0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	71fb      	strb	r3, [r7, #7]
 800e2b6:	e01e      	b.n	800e2f6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e2b8:	79fb      	ldrb	r3, [r7, #7]
 800e2ba:	4a15      	ldr	r2, [pc, #84]	; (800e310 <tcp_new_port+0x88>)
 800e2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	603b      	str	r3, [r7, #0]
 800e2c4:	e011      	b.n	800e2ea <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	8ada      	ldrh	r2, [r3, #22]
 800e2ca:	4b10      	ldr	r3, [pc, #64]	; (800e30c <tcp_new_port+0x84>)
 800e2cc:	881b      	ldrh	r3, [r3, #0]
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d108      	bne.n	800e2e4 <tcp_new_port+0x5c>
        n++;
 800e2d2:	88bb      	ldrh	r3, [r7, #4]
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e2d8:	88bb      	ldrh	r3, [r7, #4]
 800e2da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2de:	d3d8      	bcc.n	800e292 <tcp_new_port+0xa>
          return 0;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	e00d      	b.n	800e300 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	603b      	str	r3, [r7, #0]
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d1ea      	bne.n	800e2c6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e2f0:	79fb      	ldrb	r3, [r7, #7]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	71fb      	strb	r3, [r7, #7]
 800e2f6:	79fb      	ldrb	r3, [r7, #7]
 800e2f8:	2b03      	cmp	r3, #3
 800e2fa:	d9dd      	bls.n	800e2b8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e2fc:	4b03      	ldr	r3, [pc, #12]	; (800e30c <tcp_new_port+0x84>)
 800e2fe:	881b      	ldrh	r3, [r3, #0]
}
 800e300:	4618      	mov	r0, r3
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr
 800e30c:	24000028 	.word	0x24000028
 800e310:	0801b318 	.word	0x0801b318

0800e314 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e314:	b5b0      	push	{r4, r5, r7, lr}
 800e316:	b090      	sub	sp, #64	; 0x40
 800e318:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e31a:	2300      	movs	r3, #0
 800e31c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e320:	4b94      	ldr	r3, [pc, #592]	; (800e574 <tcp_slowtmr+0x260>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3301      	adds	r3, #1
 800e326:	4a93      	ldr	r2, [pc, #588]	; (800e574 <tcp_slowtmr+0x260>)
 800e328:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e32a:	4b93      	ldr	r3, [pc, #588]	; (800e578 <tcp_slowtmr+0x264>)
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	3301      	adds	r3, #1
 800e330:	b2da      	uxtb	r2, r3
 800e332:	4b91      	ldr	r3, [pc, #580]	; (800e578 <tcp_slowtmr+0x264>)
 800e334:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e336:	2300      	movs	r3, #0
 800e338:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e33a:	4b90      	ldr	r3, [pc, #576]	; (800e57c <tcp_slowtmr+0x268>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e340:	e29d      	b.n	800e87e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e344:	7d1b      	ldrb	r3, [r3, #20]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d106      	bne.n	800e358 <tcp_slowtmr+0x44>
 800e34a:	4b8d      	ldr	r3, [pc, #564]	; (800e580 <tcp_slowtmr+0x26c>)
 800e34c:	f240 42be 	movw	r2, #1214	; 0x4be
 800e350:	498c      	ldr	r1, [pc, #560]	; (800e584 <tcp_slowtmr+0x270>)
 800e352:	488d      	ldr	r0, [pc, #564]	; (800e588 <tcp_slowtmr+0x274>)
 800e354:	f008 fd5e 	bl	8016e14 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35a:	7d1b      	ldrb	r3, [r3, #20]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d106      	bne.n	800e36e <tcp_slowtmr+0x5a>
 800e360:	4b87      	ldr	r3, [pc, #540]	; (800e580 <tcp_slowtmr+0x26c>)
 800e362:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e366:	4989      	ldr	r1, [pc, #548]	; (800e58c <tcp_slowtmr+0x278>)
 800e368:	4887      	ldr	r0, [pc, #540]	; (800e588 <tcp_slowtmr+0x274>)
 800e36a:	f008 fd53 	bl	8016e14 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e370:	7d1b      	ldrb	r3, [r3, #20]
 800e372:	2b0a      	cmp	r3, #10
 800e374:	d106      	bne.n	800e384 <tcp_slowtmr+0x70>
 800e376:	4b82      	ldr	r3, [pc, #520]	; (800e580 <tcp_slowtmr+0x26c>)
 800e378:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e37c:	4984      	ldr	r1, [pc, #528]	; (800e590 <tcp_slowtmr+0x27c>)
 800e37e:	4882      	ldr	r0, [pc, #520]	; (800e588 <tcp_slowtmr+0x274>)
 800e380:	f008 fd48 	bl	8016e14 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e386:	7f9a      	ldrb	r2, [r3, #30]
 800e388:	4b7b      	ldr	r3, [pc, #492]	; (800e578 <tcp_slowtmr+0x264>)
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d105      	bne.n	800e39c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e392:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e39a:	e270      	b.n	800e87e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e39c:	4b76      	ldr	r3, [pc, #472]	; (800e578 <tcp_slowtmr+0x264>)
 800e39e:	781a      	ldrb	r2, [r3, #0]
 800e3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b2:	7d1b      	ldrb	r3, [r3, #20]
 800e3b4:	2b02      	cmp	r3, #2
 800e3b6:	d10a      	bne.n	800e3ce <tcp_slowtmr+0xba>
 800e3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e3be:	2b05      	cmp	r3, #5
 800e3c0:	d905      	bls.n	800e3ce <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e3c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3cc:	e11e      	b.n	800e60c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e3d4:	2b0b      	cmp	r3, #11
 800e3d6:	d905      	bls.n	800e3e4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3dc:	3301      	adds	r3, #1
 800e3de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3e2:	e113      	b.n	800e60c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d075      	beq.n	800e4da <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d006      	beq.n	800e404 <tcp_slowtmr+0xf0>
 800e3f6:	4b62      	ldr	r3, [pc, #392]	; (800e580 <tcp_slowtmr+0x26c>)
 800e3f8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e3fc:	4965      	ldr	r1, [pc, #404]	; (800e594 <tcp_slowtmr+0x280>)
 800e3fe:	4862      	ldr	r0, [pc, #392]	; (800e588 <tcp_slowtmr+0x274>)
 800e400:	f008 fd08 	bl	8016e14 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d106      	bne.n	800e41a <tcp_slowtmr+0x106>
 800e40c:	4b5c      	ldr	r3, [pc, #368]	; (800e580 <tcp_slowtmr+0x26c>)
 800e40e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e412:	4961      	ldr	r1, [pc, #388]	; (800e598 <tcp_slowtmr+0x284>)
 800e414:	485c      	ldr	r0, [pc, #368]	; (800e588 <tcp_slowtmr+0x274>)
 800e416:	f008 fcfd 	bl	8016e14 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e420:	2b0b      	cmp	r3, #11
 800e422:	d905      	bls.n	800e430 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e428:	3301      	adds	r3, #1
 800e42a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e42e:	e0ed      	b.n	800e60c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e432:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e436:	3b01      	subs	r3, #1
 800e438:	4a58      	ldr	r2, [pc, #352]	; (800e59c <tcp_slowtmr+0x288>)
 800e43a:	5cd3      	ldrb	r3, [r2, r3]
 800e43c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e440:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e444:	7c7a      	ldrb	r2, [r7, #17]
 800e446:	429a      	cmp	r2, r3
 800e448:	d907      	bls.n	800e45a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e450:	3301      	adds	r3, #1
 800e452:	b2da      	uxtb	r2, r3
 800e454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e456:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e460:	7c7a      	ldrb	r2, [r7, #17]
 800e462:	429a      	cmp	r2, r3
 800e464:	f200 80d2 	bhi.w	800e60c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e468:	2301      	movs	r3, #1
 800e46a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e472:	2b00      	cmp	r3, #0
 800e474:	d108      	bne.n	800e488 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e476:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e478:	f005 f94c 	bl	8013714 <tcp_zero_window_probe>
 800e47c:	4603      	mov	r3, r0
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d014      	beq.n	800e4ac <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e482:	2300      	movs	r3, #0
 800e484:	623b      	str	r3, [r7, #32]
 800e486:	e011      	b.n	800e4ac <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e48e:	4619      	mov	r1, r3
 800e490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e492:	f004 f811 	bl	80124b8 <tcp_split_unsent_seg>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d107      	bne.n	800e4ac <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e49c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e49e:	f004 fa91 	bl	80129c4 <tcp_output>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d101      	bne.n	800e4ac <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e4ac:	6a3b      	ldr	r3, [r7, #32]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f000 80ac 	beq.w	800e60c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e4c2:	2b06      	cmp	r3, #6
 800e4c4:	f200 80a2 	bhi.w	800e60c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	b2da      	uxtb	r2, r3
 800e4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e4d8:	e098      	b.n	800e60c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	db0f      	blt.n	800e504 <tcp_slowtmr+0x1f0>
 800e4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e4ea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d008      	beq.n	800e504 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	b21a      	sxth	r2, r3
 800e500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e502:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e506:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e510:	429a      	cmp	r2, r3
 800e512:	db7b      	blt.n	800e60c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e514:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e516:	f004 fd47 	bl	8012fa8 <tcp_rexmit_rto_prepare>
 800e51a:	4603      	mov	r3, r0
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d007      	beq.n	800e530 <tcp_slowtmr+0x21c>
 800e520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e524:	2b00      	cmp	r3, #0
 800e526:	d171      	bne.n	800e60c <tcp_slowtmr+0x2f8>
 800e528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d06d      	beq.n	800e60c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e532:	7d1b      	ldrb	r3, [r3, #20]
 800e534:	2b02      	cmp	r3, #2
 800e536:	d03a      	beq.n	800e5ae <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e53e:	2b0c      	cmp	r3, #12
 800e540:	bf28      	it	cs
 800e542:	230c      	movcs	r3, #12
 800e544:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e548:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e54c:	10db      	asrs	r3, r3, #3
 800e54e:	b21b      	sxth	r3, r3
 800e550:	461a      	mov	r2, r3
 800e552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e554:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e558:	4413      	add	r3, r2
 800e55a:	7efa      	ldrb	r2, [r7, #27]
 800e55c:	4910      	ldr	r1, [pc, #64]	; (800e5a0 <tcp_slowtmr+0x28c>)
 800e55e:	5c8a      	ldrb	r2, [r1, r2]
 800e560:	4093      	lsls	r3, r2
 800e562:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e56a:	4293      	cmp	r3, r2
 800e56c:	dc1a      	bgt.n	800e5a4 <tcp_slowtmr+0x290>
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	b21a      	sxth	r2, r3
 800e572:	e019      	b.n	800e5a8 <tcp_slowtmr+0x294>
 800e574:	24007f9c 	.word	0x24007f9c
 800e578:	24004ae2 	.word	0x24004ae2
 800e57c:	24007f98 	.word	0x24007f98
 800e580:	080192d8 	.word	0x080192d8
 800e584:	0801961c 	.word	0x0801961c
 800e588:	0801931c 	.word	0x0801931c
 800e58c:	08019648 	.word	0x08019648
 800e590:	08019674 	.word	0x08019674
 800e594:	080196a4 	.word	0x080196a4
 800e598:	080196d8 	.word	0x080196d8
 800e59c:	0801b310 	.word	0x0801b310
 800e5a0:	0801b300 	.word	0x0801b300
 800e5a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	bf28      	it	cs
 800e5c4:	4613      	movcs	r3, r2
 800e5c6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e5c8:	8a7b      	ldrh	r3, [r7, #18]
 800e5ca:	085b      	lsrs	r3, r3, #1
 800e5cc:	b29a      	uxth	r2, r3
 800e5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e5de:	005b      	lsls	r3, r3, #1
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d206      	bcs.n	800e5f4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e5ea:	005b      	lsls	r3, r3, #1
 800e5ec:	b29a      	uxth	r2, r3
 800e5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e600:	2200      	movs	r2, #0
 800e602:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e608:	f004 fd3e 	bl	8013088 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60e:	7d1b      	ldrb	r3, [r3, #20]
 800e610:	2b06      	cmp	r3, #6
 800e612:	d111      	bne.n	800e638 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e616:	8b5b      	ldrh	r3, [r3, #26]
 800e618:	f003 0310 	and.w	r3, r3, #16
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d00b      	beq.n	800e638 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e620:	4b9c      	ldr	r3, [pc, #624]	; (800e894 <tcp_slowtmr+0x580>)
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e626:	6a1b      	ldr	r3, [r3, #32]
 800e628:	1ad3      	subs	r3, r2, r3
 800e62a:	2b28      	cmp	r3, #40	; 0x28
 800e62c:	d904      	bls.n	800e638 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e62e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e632:	3301      	adds	r3, #1
 800e634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63a:	7a5b      	ldrb	r3, [r3, #9]
 800e63c:	f003 0308 	and.w	r3, r3, #8
 800e640:	2b00      	cmp	r3, #0
 800e642:	d04a      	beq.n	800e6da <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e646:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e648:	2b04      	cmp	r3, #4
 800e64a:	d003      	beq.n	800e654 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e650:	2b07      	cmp	r3, #7
 800e652:	d142      	bne.n	800e6da <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e654:	4b8f      	ldr	r3, [pc, #572]	; (800e894 <tcp_slowtmr+0x580>)
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65a:	6a1b      	ldr	r3, [r3, #32]
 800e65c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e660:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e664:	4b8c      	ldr	r3, [pc, #560]	; (800e898 <tcp_slowtmr+0x584>)
 800e666:	440b      	add	r3, r1
 800e668:	498c      	ldr	r1, [pc, #560]	; (800e89c <tcp_slowtmr+0x588>)
 800e66a:	fba1 1303 	umull	r1, r3, r1, r3
 800e66e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e670:	429a      	cmp	r2, r3
 800e672:	d90a      	bls.n	800e68a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e678:	3301      	adds	r3, #1
 800e67a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e67e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e682:	3301      	adds	r3, #1
 800e684:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e688:	e027      	b.n	800e6da <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e68a:	4b82      	ldr	r3, [pc, #520]	; (800e894 <tcp_slowtmr+0x580>)
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e690:	6a1b      	ldr	r3, [r3, #32]
 800e692:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e696:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	4b7f      	ldr	r3, [pc, #508]	; (800e8a0 <tcp_slowtmr+0x58c>)
 800e6a4:	fb03 f300 	mul.w	r3, r3, r0
 800e6a8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e6aa:	497c      	ldr	r1, [pc, #496]	; (800e89c <tcp_slowtmr+0x588>)
 800e6ac:	fba1 1303 	umull	r1, r3, r1, r3
 800e6b0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d911      	bls.n	800e6da <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e6b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6b8:	f004 ffec 	bl	8013694 <tcp_keepalive>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e6c2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d107      	bne.n	800e6da <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	b2da      	uxtb	r2, r3
 800e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d011      	beq.n	800e706 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e6e2:	4b6c      	ldr	r3, [pc, #432]	; (800e894 <tcp_slowtmr+0x580>)
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e8:	6a1b      	ldr	r3, [r3, #32]
 800e6ea:	1ad2      	subs	r2, r2, r3
 800e6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	005b      	lsls	r3, r3, #1
 800e6f8:	440b      	add	r3, r1
 800e6fa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d302      	bcc.n	800e706 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e700:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e702:	f000 feab 	bl	800f45c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e708:	7d1b      	ldrb	r3, [r3, #20]
 800e70a:	2b03      	cmp	r3, #3
 800e70c:	d10b      	bne.n	800e726 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e70e:	4b61      	ldr	r3, [pc, #388]	; (800e894 <tcp_slowtmr+0x580>)
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e714:	6a1b      	ldr	r3, [r3, #32]
 800e716:	1ad3      	subs	r3, r2, r3
 800e718:	2b28      	cmp	r3, #40	; 0x28
 800e71a:	d904      	bls.n	800e726 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e71c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e720:	3301      	adds	r3, #1
 800e722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e728:	7d1b      	ldrb	r3, [r3, #20]
 800e72a:	2b09      	cmp	r3, #9
 800e72c:	d10b      	bne.n	800e746 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e72e:	4b59      	ldr	r3, [pc, #356]	; (800e894 <tcp_slowtmr+0x580>)
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e734:	6a1b      	ldr	r3, [r3, #32]
 800e736:	1ad3      	subs	r3, r2, r3
 800e738:	2bf0      	cmp	r3, #240	; 0xf0
 800e73a:	d904      	bls.n	800e746 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e73c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e740:	3301      	adds	r3, #1
 800e742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d060      	beq.n	800e810 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e754:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e758:	f000 fccc 	bl	800f0f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d010      	beq.n	800e784 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e762:	4b50      	ldr	r3, [pc, #320]	; (800e8a4 <tcp_slowtmr+0x590>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e768:	429a      	cmp	r2, r3
 800e76a:	d106      	bne.n	800e77a <tcp_slowtmr+0x466>
 800e76c:	4b4e      	ldr	r3, [pc, #312]	; (800e8a8 <tcp_slowtmr+0x594>)
 800e76e:	f240 526d 	movw	r2, #1389	; 0x56d
 800e772:	494e      	ldr	r1, [pc, #312]	; (800e8ac <tcp_slowtmr+0x598>)
 800e774:	484e      	ldr	r0, [pc, #312]	; (800e8b0 <tcp_slowtmr+0x59c>)
 800e776:	f008 fb4d 	bl	8016e14 <iprintf>
        prev->next = pcb->next;
 800e77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77c:	68da      	ldr	r2, [r3, #12]
 800e77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e780:	60da      	str	r2, [r3, #12]
 800e782:	e00f      	b.n	800e7a4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e784:	4b47      	ldr	r3, [pc, #284]	; (800e8a4 <tcp_slowtmr+0x590>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d006      	beq.n	800e79c <tcp_slowtmr+0x488>
 800e78e:	4b46      	ldr	r3, [pc, #280]	; (800e8a8 <tcp_slowtmr+0x594>)
 800e790:	f240 5271 	movw	r2, #1393	; 0x571
 800e794:	4947      	ldr	r1, [pc, #284]	; (800e8b4 <tcp_slowtmr+0x5a0>)
 800e796:	4846      	ldr	r0, [pc, #280]	; (800e8b0 <tcp_slowtmr+0x59c>)
 800e798:	f008 fb3c 	bl	8016e14 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	4a40      	ldr	r2, [pc, #256]	; (800e8a4 <tcp_slowtmr+0x590>)
 800e7a2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e7a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d013      	beq.n	800e7d4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ae:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e7b4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b8:	3304      	adds	r3, #4
 800e7ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7bc:	8ad2      	ldrh	r2, [r2, #22]
 800e7be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7c0:	8b09      	ldrh	r1, [r1, #24]
 800e7c2:	9102      	str	r1, [sp, #8]
 800e7c4:	9201      	str	r2, [sp, #4]
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	462b      	mov	r3, r5
 800e7ca:	4622      	mov	r2, r4
 800e7cc:	4601      	mov	r1, r0
 800e7ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7d0:	f004 feac 	bl	801352c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d6:	691b      	ldr	r3, [r3, #16]
 800e7d8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7dc:	7d1b      	ldrb	r3, [r3, #20]
 800e7de:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e6:	68db      	ldr	r3, [r3, #12]
 800e7e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e7ea:	6838      	ldr	r0, [r7, #0]
 800e7ec:	f7fe fff0 	bl	800d7d0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e7f0:	4b31      	ldr	r3, [pc, #196]	; (800e8b8 <tcp_slowtmr+0x5a4>)
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d004      	beq.n	800e806 <tcp_slowtmr+0x4f2>
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f06f 010c 	mvn.w	r1, #12
 800e802:	68b8      	ldr	r0, [r7, #8]
 800e804:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e806:	4b2c      	ldr	r3, [pc, #176]	; (800e8b8 <tcp_slowtmr+0x5a4>)
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d037      	beq.n	800e87e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e80e:	e592      	b.n	800e336 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e816:	68db      	ldr	r3, [r3, #12]
 800e818:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81c:	7f1b      	ldrb	r3, [r3, #28]
 800e81e:	3301      	adds	r3, #1
 800e820:	b2da      	uxtb	r2, r3
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e828:	7f1a      	ldrb	r2, [r3, #28]
 800e82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82c:	7f5b      	ldrb	r3, [r3, #29]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d325      	bcc.n	800e87e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e834:	2200      	movs	r2, #0
 800e836:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e838:	4b1f      	ldr	r3, [pc, #124]	; (800e8b8 <tcp_slowtmr+0x5a4>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00b      	beq.n	800e860 <tcp_slowtmr+0x54c>
 800e848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e84e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e850:	6912      	ldr	r2, [r2, #16]
 800e852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e854:	4610      	mov	r0, r2
 800e856:	4798      	blx	r3
 800e858:	4603      	mov	r3, r0
 800e85a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e85e:	e002      	b.n	800e866 <tcp_slowtmr+0x552>
 800e860:	2300      	movs	r3, #0
 800e862:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e866:	4b14      	ldr	r3, [pc, #80]	; (800e8b8 <tcp_slowtmr+0x5a4>)
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d000      	beq.n	800e870 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e86e:	e562      	b.n	800e336 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e870:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e874:	2b00      	cmp	r3, #0
 800e876:	d102      	bne.n	800e87e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e87a:	f004 f8a3 	bl	80129c4 <tcp_output>
  while (pcb != NULL) {
 800e87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e880:	2b00      	cmp	r3, #0
 800e882:	f47f ad5e 	bne.w	800e342 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e886:	2300      	movs	r3, #0
 800e888:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e88a:	4b0c      	ldr	r3, [pc, #48]	; (800e8bc <tcp_slowtmr+0x5a8>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e890:	e069      	b.n	800e966 <tcp_slowtmr+0x652>
 800e892:	bf00      	nop
 800e894:	24007f9c 	.word	0x24007f9c
 800e898:	000a4cb8 	.word	0x000a4cb8
 800e89c:	10624dd3 	.word	0x10624dd3
 800e8a0:	000124f8 	.word	0x000124f8
 800e8a4:	24007f98 	.word	0x24007f98
 800e8a8:	080192d8 	.word	0x080192d8
 800e8ac:	08019710 	.word	0x08019710
 800e8b0:	0801931c 	.word	0x0801931c
 800e8b4:	0801973c 	.word	0x0801973c
 800e8b8:	24007f94 	.word	0x24007f94
 800e8bc:	24007fa8 	.word	0x24007fa8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c2:	7d1b      	ldrb	r3, [r3, #20]
 800e8c4:	2b0a      	cmp	r3, #10
 800e8c6:	d006      	beq.n	800e8d6 <tcp_slowtmr+0x5c2>
 800e8c8:	4b2b      	ldr	r3, [pc, #172]	; (800e978 <tcp_slowtmr+0x664>)
 800e8ca:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e8ce:	492b      	ldr	r1, [pc, #172]	; (800e97c <tcp_slowtmr+0x668>)
 800e8d0:	482b      	ldr	r0, [pc, #172]	; (800e980 <tcp_slowtmr+0x66c>)
 800e8d2:	f008 fa9f 	bl	8016e14 <iprintf>
    pcb_remove = 0;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e8dc:	4b29      	ldr	r3, [pc, #164]	; (800e984 <tcp_slowtmr+0x670>)
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e2:	6a1b      	ldr	r3, [r3, #32]
 800e8e4:	1ad3      	subs	r3, r2, r3
 800e8e6:	2bf0      	cmp	r3, #240	; 0xf0
 800e8e8:	d904      	bls.n	800e8f4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e8ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d02f      	beq.n	800e95c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e8fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8fe:	f000 fbf9 	bl	800f0f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e904:	2b00      	cmp	r3, #0
 800e906:	d010      	beq.n	800e92a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e908:	4b1f      	ldr	r3, [pc, #124]	; (800e988 <tcp_slowtmr+0x674>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e90e:	429a      	cmp	r2, r3
 800e910:	d106      	bne.n	800e920 <tcp_slowtmr+0x60c>
 800e912:	4b19      	ldr	r3, [pc, #100]	; (800e978 <tcp_slowtmr+0x664>)
 800e914:	f240 52af 	movw	r2, #1455	; 0x5af
 800e918:	491c      	ldr	r1, [pc, #112]	; (800e98c <tcp_slowtmr+0x678>)
 800e91a:	4819      	ldr	r0, [pc, #100]	; (800e980 <tcp_slowtmr+0x66c>)
 800e91c:	f008 fa7a 	bl	8016e14 <iprintf>
        prev->next = pcb->next;
 800e920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e922:	68da      	ldr	r2, [r3, #12]
 800e924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e926:	60da      	str	r2, [r3, #12]
 800e928:	e00f      	b.n	800e94a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e92a:	4b17      	ldr	r3, [pc, #92]	; (800e988 <tcp_slowtmr+0x674>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e930:	429a      	cmp	r2, r3
 800e932:	d006      	beq.n	800e942 <tcp_slowtmr+0x62e>
 800e934:	4b10      	ldr	r3, [pc, #64]	; (800e978 <tcp_slowtmr+0x664>)
 800e936:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e93a:	4915      	ldr	r1, [pc, #84]	; (800e990 <tcp_slowtmr+0x67c>)
 800e93c:	4810      	ldr	r0, [pc, #64]	; (800e980 <tcp_slowtmr+0x66c>)
 800e93e:	f008 fa69 	bl	8016e14 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e944:	68db      	ldr	r3, [r3, #12]
 800e946:	4a10      	ldr	r2, [pc, #64]	; (800e988 <tcp_slowtmr+0x674>)
 800e948:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e954:	69f8      	ldr	r0, [r7, #28]
 800e956:	f7fe ff3b 	bl	800d7d0 <tcp_free>
 800e95a:	e004      	b.n	800e966 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d1a9      	bne.n	800e8c0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e96c:	bf00      	nop
 800e96e:	bf00      	nop
 800e970:	3730      	adds	r7, #48	; 0x30
 800e972:	46bd      	mov	sp, r7
 800e974:	bdb0      	pop	{r4, r5, r7, pc}
 800e976:	bf00      	nop
 800e978:	080192d8 	.word	0x080192d8
 800e97c:	08019768 	.word	0x08019768
 800e980:	0801931c 	.word	0x0801931c
 800e984:	24007f9c 	.word	0x24007f9c
 800e988:	24007fa8 	.word	0x24007fa8
 800e98c:	08019798 	.word	0x08019798
 800e990:	080197c0 	.word	0x080197c0

0800e994 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e99a:	4b2d      	ldr	r3, [pc, #180]	; (800ea50 <tcp_fasttmr+0xbc>)
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	3301      	adds	r3, #1
 800e9a0:	b2da      	uxtb	r2, r3
 800e9a2:	4b2b      	ldr	r3, [pc, #172]	; (800ea50 <tcp_fasttmr+0xbc>)
 800e9a4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e9a6:	4b2b      	ldr	r3, [pc, #172]	; (800ea54 <tcp_fasttmr+0xc0>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e9ac:	e048      	b.n	800ea40 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	7f9a      	ldrb	r2, [r3, #30]
 800e9b2:	4b27      	ldr	r3, [pc, #156]	; (800ea50 <tcp_fasttmr+0xbc>)
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d03f      	beq.n	800ea3a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e9ba:	4b25      	ldr	r3, [pc, #148]	; (800ea50 <tcp_fasttmr+0xbc>)
 800e9bc:	781a      	ldrb	r2, [r3, #0]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	8b5b      	ldrh	r3, [r3, #26]
 800e9c6:	f003 0301 	and.w	r3, r3, #1
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d010      	beq.n	800e9f0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	8b5b      	ldrh	r3, [r3, #26]
 800e9d2:	f043 0302 	orr.w	r3, r3, #2
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f003 fff1 	bl	80129c4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	8b5b      	ldrh	r3, [r3, #26]
 800e9e6:	f023 0303 	bic.w	r3, r3, #3
 800e9ea:	b29a      	uxth	r2, r3
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	8b5b      	ldrh	r3, [r3, #26]
 800e9f4:	f003 0308 	and.w	r3, r3, #8
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d009      	beq.n	800ea10 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	8b5b      	ldrh	r3, [r3, #26]
 800ea00:	f023 0308 	bic.w	r3, r3, #8
 800ea04:	b29a      	uxth	r2, r3
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f7ff f874 	bl	800daf8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00a      	beq.n	800ea34 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ea1e:	4b0e      	ldr	r3, [pc, #56]	; (800ea58 <tcp_fasttmr+0xc4>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f000 f819 	bl	800ea5c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ea2a:	4b0b      	ldr	r3, [pc, #44]	; (800ea58 <tcp_fasttmr+0xc4>)
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d000      	beq.n	800ea34 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ea32:	e7b8      	b.n	800e9a6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	607b      	str	r3, [r7, #4]
 800ea38:	e002      	b.n	800ea40 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d1b3      	bne.n	800e9ae <tcp_fasttmr+0x1a>
    }
  }
}
 800ea46:	bf00      	nop
 800ea48:	bf00      	nop
 800ea4a:	3708      	adds	r7, #8
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	24004ae2 	.word	0x24004ae2
 800ea54:	24007f98 	.word	0x24007f98
 800ea58:	24007f94 	.word	0x24007f94

0800ea5c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ea5c:	b590      	push	{r4, r7, lr}
 800ea5e:	b085      	sub	sp, #20
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d109      	bne.n	800ea7e <tcp_process_refused_data+0x22>
 800ea6a:	4b37      	ldr	r3, [pc, #220]	; (800eb48 <tcp_process_refused_data+0xec>)
 800ea6c:	f240 6209 	movw	r2, #1545	; 0x609
 800ea70:	4936      	ldr	r1, [pc, #216]	; (800eb4c <tcp_process_refused_data+0xf0>)
 800ea72:	4837      	ldr	r0, [pc, #220]	; (800eb50 <tcp_process_refused_data+0xf4>)
 800ea74:	f008 f9ce 	bl	8016e14 <iprintf>
 800ea78:	f06f 030f 	mvn.w	r3, #15
 800ea7c:	e060      	b.n	800eb40 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea82:	7b5b      	ldrb	r3, [r3, #13]
 800ea84:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea8a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00b      	beq.n	800eab4 <tcp_process_refused_data+0x58>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6918      	ldr	r0, [r3, #16]
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	6879      	ldr	r1, [r7, #4]
 800eaac:	47a0      	blx	r4
 800eaae:	4603      	mov	r3, r0
 800eab0:	73fb      	strb	r3, [r7, #15]
 800eab2:	e007      	b.n	800eac4 <tcp_process_refused_data+0x68>
 800eab4:	2300      	movs	r3, #0
 800eab6:	68ba      	ldr	r2, [r7, #8]
 800eab8:	6879      	ldr	r1, [r7, #4]
 800eaba:	2000      	movs	r0, #0
 800eabc:	f000 f8a4 	bl	800ec08 <tcp_recv_null>
 800eac0:	4603      	mov	r3, r0
 800eac2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800eac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d12a      	bne.n	800eb22 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800eacc:	7bbb      	ldrb	r3, [r7, #14]
 800eace:	f003 0320 	and.w	r3, r3, #32
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d033      	beq.n	800eb3e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eada:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eade:	d005      	beq.n	800eaec <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eae4:	3301      	adds	r3, #1
 800eae6:	b29a      	uxth	r2, r3
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d00b      	beq.n	800eb0e <tcp_process_refused_data+0xb2>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6918      	ldr	r0, [r3, #16]
 800eb00:	2300      	movs	r3, #0
 800eb02:	2200      	movs	r2, #0
 800eb04:	6879      	ldr	r1, [r7, #4]
 800eb06:	47a0      	blx	r4
 800eb08:	4603      	mov	r3, r0
 800eb0a:	73fb      	strb	r3, [r7, #15]
 800eb0c:	e001      	b.n	800eb12 <tcp_process_refused_data+0xb6>
 800eb0e:	2300      	movs	r3, #0
 800eb10:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800eb12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb16:	f113 0f0d 	cmn.w	r3, #13
 800eb1a:	d110      	bne.n	800eb3e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800eb1c:	f06f 030c 	mvn.w	r3, #12
 800eb20:	e00e      	b.n	800eb40 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800eb22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb26:	f113 0f0d 	cmn.w	r3, #13
 800eb2a:	d102      	bne.n	800eb32 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800eb2c:	f06f 030c 	mvn.w	r3, #12
 800eb30:	e006      	b.n	800eb40 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	68ba      	ldr	r2, [r7, #8]
 800eb36:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800eb38:	f06f 0304 	mvn.w	r3, #4
 800eb3c:	e000      	b.n	800eb40 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800eb3e:	2300      	movs	r3, #0
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3714      	adds	r7, #20
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd90      	pop	{r4, r7, pc}
 800eb48:	080192d8 	.word	0x080192d8
 800eb4c:	080197e8 	.word	0x080197e8
 800eb50:	0801931c 	.word	0x0801931c

0800eb54 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800eb5c:	e007      	b.n	800eb6e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f000 f80a 	bl	800eb7e <tcp_seg_free>
    seg = next;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d1f4      	bne.n	800eb5e <tcp_segs_free+0xa>
  }
}
 800eb74:	bf00      	nop
 800eb76:	bf00      	nop
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800eb7e:	b580      	push	{r7, lr}
 800eb80:	b082      	sub	sp, #8
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d00c      	beq.n	800eba6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	685b      	ldr	r3, [r3, #4]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d004      	beq.n	800eb9e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	685b      	ldr	r3, [r3, #4]
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7fe fb6d 	bl	800d278 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800eb9e:	6879      	ldr	r1, [r7, #4]
 800eba0:	2003      	movs	r0, #3
 800eba2:	f7fd fcc5 	bl	800c530 <memp_free>
  }
}
 800eba6:	bf00      	nop
 800eba8:	3708      	adds	r7, #8
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
	...

0800ebb0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d106      	bne.n	800ebcc <tcp_seg_copy+0x1c>
 800ebbe:	4b0f      	ldr	r3, [pc, #60]	; (800ebfc <tcp_seg_copy+0x4c>)
 800ebc0:	f240 6282 	movw	r2, #1666	; 0x682
 800ebc4:	490e      	ldr	r1, [pc, #56]	; (800ec00 <tcp_seg_copy+0x50>)
 800ebc6:	480f      	ldr	r0, [pc, #60]	; (800ec04 <tcp_seg_copy+0x54>)
 800ebc8:	f008 f924 	bl	8016e14 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ebcc:	2003      	movs	r0, #3
 800ebce:	f7fd fc39 	bl	800c444 <memp_malloc>
 800ebd2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d101      	bne.n	800ebde <tcp_seg_copy+0x2e>
    return NULL;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	e00a      	b.n	800ebf4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ebde:	2210      	movs	r2, #16
 800ebe0:	6879      	ldr	r1, [r7, #4]
 800ebe2:	68f8      	ldr	r0, [r7, #12]
 800ebe4:	f008 f8a5 	bl	8016d32 <memcpy>
  pbuf_ref(cseg->p);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	4618      	mov	r0, r3
 800ebee:	f7fe fbe9 	bl	800d3c4 <pbuf_ref>
  return cseg;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3710      	adds	r7, #16
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	080192d8 	.word	0x080192d8
 800ec00:	0801982c 	.word	0x0801982c
 800ec04:	0801931c 	.word	0x0801931c

0800ec08 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	607a      	str	r2, [r7, #4]
 800ec14:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d109      	bne.n	800ec30 <tcp_recv_null+0x28>
 800ec1c:	4b12      	ldr	r3, [pc, #72]	; (800ec68 <tcp_recv_null+0x60>)
 800ec1e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ec22:	4912      	ldr	r1, [pc, #72]	; (800ec6c <tcp_recv_null+0x64>)
 800ec24:	4812      	ldr	r0, [pc, #72]	; (800ec70 <tcp_recv_null+0x68>)
 800ec26:	f008 f8f5 	bl	8016e14 <iprintf>
 800ec2a:	f06f 030f 	mvn.w	r3, #15
 800ec2e:	e016      	b.n	800ec5e <tcp_recv_null+0x56>

  if (p != NULL) {
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d009      	beq.n	800ec4a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	891b      	ldrh	r3, [r3, #8]
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	68b8      	ldr	r0, [r7, #8]
 800ec3e:	f7ff fad3 	bl	800e1e8 <tcp_recved>
    pbuf_free(p);
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f7fe fb18 	bl	800d278 <pbuf_free>
 800ec48:	e008      	b.n	800ec5c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ec4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d104      	bne.n	800ec5c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ec52:	68b8      	ldr	r0, [r7, #8]
 800ec54:	f7fe ffba 	bl	800dbcc <tcp_close>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	e000      	b.n	800ec5e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ec5c:	2300      	movs	r3, #0
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3710      	adds	r7, #16
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	080192d8 	.word	0x080192d8
 800ec6c:	08019848 	.word	0x08019848
 800ec70:	0801931c 	.word	0x0801931c

0800ec74 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b086      	sub	sp, #24
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ec7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	db01      	blt.n	800ec8a <tcp_kill_prio+0x16>
 800ec86:	79fb      	ldrb	r3, [r7, #7]
 800ec88:	e000      	b.n	800ec8c <tcp_kill_prio+0x18>
 800ec8a:	237f      	movs	r3, #127	; 0x7f
 800ec8c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ec8e:	7afb      	ldrb	r3, [r7, #11]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d034      	beq.n	800ecfe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ec94:	7afb      	ldrb	r3, [r7, #11]
 800ec96:	3b01      	subs	r3, #1
 800ec98:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eca2:	4b19      	ldr	r3, [pc, #100]	; (800ed08 <tcp_kill_prio+0x94>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	617b      	str	r3, [r7, #20]
 800eca8:	e01f      	b.n	800ecea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	7d5b      	ldrb	r3, [r3, #21]
 800ecae:	7afa      	ldrb	r2, [r7, #11]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d80c      	bhi.n	800ecce <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ecb8:	7afa      	ldrb	r2, [r7, #11]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d112      	bne.n	800ece4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ecbe:	4b13      	ldr	r3, [pc, #76]	; (800ed0c <tcp_kill_prio+0x98>)
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	6a1b      	ldr	r3, [r3, #32]
 800ecc6:	1ad3      	subs	r3, r2, r3
 800ecc8:	68fa      	ldr	r2, [r7, #12]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d80a      	bhi.n	800ece4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ecce:	4b0f      	ldr	r3, [pc, #60]	; (800ed0c <tcp_kill_prio+0x98>)
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	6a1b      	ldr	r3, [r3, #32]
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	7d5b      	ldrb	r3, [r3, #21]
 800ece2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	68db      	ldr	r3, [r3, #12]
 800ece8:	617b      	str	r3, [r7, #20]
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d1dc      	bne.n	800ecaa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d004      	beq.n	800ed00 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ecf6:	6938      	ldr	r0, [r7, #16]
 800ecf8:	f7ff f8ae 	bl	800de58 <tcp_abort>
 800ecfc:	e000      	b.n	800ed00 <tcp_kill_prio+0x8c>
    return;
 800ecfe:	bf00      	nop
  }
}
 800ed00:	3718      	adds	r7, #24
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	24007f98 	.word	0x24007f98
 800ed0c:	24007f9c 	.word	0x24007f9c

0800ed10 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	4603      	mov	r3, r0
 800ed18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ed1a:	79fb      	ldrb	r3, [r7, #7]
 800ed1c:	2b08      	cmp	r3, #8
 800ed1e:	d009      	beq.n	800ed34 <tcp_kill_state+0x24>
 800ed20:	79fb      	ldrb	r3, [r7, #7]
 800ed22:	2b09      	cmp	r3, #9
 800ed24:	d006      	beq.n	800ed34 <tcp_kill_state+0x24>
 800ed26:	4b1a      	ldr	r3, [pc, #104]	; (800ed90 <tcp_kill_state+0x80>)
 800ed28:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ed2c:	4919      	ldr	r1, [pc, #100]	; (800ed94 <tcp_kill_state+0x84>)
 800ed2e:	481a      	ldr	r0, [pc, #104]	; (800ed98 <tcp_kill_state+0x88>)
 800ed30:	f008 f870 	bl	8016e14 <iprintf>

  inactivity = 0;
 800ed34:	2300      	movs	r3, #0
 800ed36:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed3c:	4b17      	ldr	r3, [pc, #92]	; (800ed9c <tcp_kill_state+0x8c>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	617b      	str	r3, [r7, #20]
 800ed42:	e017      	b.n	800ed74 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	7d1b      	ldrb	r3, [r3, #20]
 800ed48:	79fa      	ldrb	r2, [r7, #7]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d10f      	bne.n	800ed6e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ed4e:	4b14      	ldr	r3, [pc, #80]	; (800eda0 <tcp_kill_state+0x90>)
 800ed50:	681a      	ldr	r2, [r3, #0]
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	6a1b      	ldr	r3, [r3, #32]
 800ed56:	1ad3      	subs	r3, r2, r3
 800ed58:	68fa      	ldr	r2, [r7, #12]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d807      	bhi.n	800ed6e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ed5e:	4b10      	ldr	r3, [pc, #64]	; (800eda0 <tcp_kill_state+0x90>)
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	6a1b      	ldr	r3, [r3, #32]
 800ed66:	1ad3      	subs	r3, r2, r3
 800ed68:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	617b      	str	r3, [r7, #20]
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d1e4      	bne.n	800ed44 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d003      	beq.n	800ed88 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ed80:	2100      	movs	r1, #0
 800ed82:	6938      	ldr	r0, [r7, #16]
 800ed84:	f7fe ffaa 	bl	800dcdc <tcp_abandon>
  }
}
 800ed88:	bf00      	nop
 800ed8a:	3718      	adds	r7, #24
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	080192d8 	.word	0x080192d8
 800ed94:	08019864 	.word	0x08019864
 800ed98:	0801931c 	.word	0x0801931c
 800ed9c:	24007f98 	.word	0x24007f98
 800eda0:	24007f9c 	.word	0x24007f9c

0800eda4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800edaa:	2300      	movs	r3, #0
 800edac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800edae:	2300      	movs	r3, #0
 800edb0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800edb2:	4b12      	ldr	r3, [pc, #72]	; (800edfc <tcp_kill_timewait+0x58>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	60fb      	str	r3, [r7, #12]
 800edb8:	e012      	b.n	800ede0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800edba:	4b11      	ldr	r3, [pc, #68]	; (800ee00 <tcp_kill_timewait+0x5c>)
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	6a1b      	ldr	r3, [r3, #32]
 800edc2:	1ad3      	subs	r3, r2, r3
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d807      	bhi.n	800edda <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800edca:	4b0d      	ldr	r3, [pc, #52]	; (800ee00 <tcp_kill_timewait+0x5c>)
 800edcc:	681a      	ldr	r2, [r3, #0]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	6a1b      	ldr	r3, [r3, #32]
 800edd2:	1ad3      	subs	r3, r2, r3
 800edd4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	68db      	ldr	r3, [r3, #12]
 800edde:	60fb      	str	r3, [r7, #12]
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1e9      	bne.n	800edba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d002      	beq.n	800edf2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800edec:	68b8      	ldr	r0, [r7, #8]
 800edee:	f7ff f833 	bl	800de58 <tcp_abort>
  }
}
 800edf2:	bf00      	nop
 800edf4:	3710      	adds	r7, #16
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	24007fa8 	.word	0x24007fa8
 800ee00:	24007f9c 	.word	0x24007f9c

0800ee04 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ee0a:	4b10      	ldr	r3, [pc, #64]	; (800ee4c <tcp_handle_closepend+0x48>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ee10:	e014      	b.n	800ee3c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	8b5b      	ldrh	r3, [r3, #26]
 800ee1c:	f003 0308 	and.w	r3, r3, #8
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d009      	beq.n	800ee38 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	8b5b      	ldrh	r3, [r3, #26]
 800ee28:	f023 0308 	bic.w	r3, r3, #8
 800ee2c:	b29a      	uxth	r2, r3
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f7fe fe60 	bl	800daf8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d1e7      	bne.n	800ee12 <tcp_handle_closepend+0xe>
  }
}
 800ee42:	bf00      	nop
 800ee44:	bf00      	nop
 800ee46:	3708      	adds	r7, #8
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	24007f98 	.word	0x24007f98

0800ee50 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	4603      	mov	r3, r0
 800ee58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee5a:	2001      	movs	r0, #1
 800ee5c:	f7fd faf2 	bl	800c444 <memp_malloc>
 800ee60:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d126      	bne.n	800eeb6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ee68:	f7ff ffcc 	bl	800ee04 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ee6c:	f7ff ff9a 	bl	800eda4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee70:	2001      	movs	r0, #1
 800ee72:	f7fd fae7 	bl	800c444 <memp_malloc>
 800ee76:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d11b      	bne.n	800eeb6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ee7e:	2009      	movs	r0, #9
 800ee80:	f7ff ff46 	bl	800ed10 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee84:	2001      	movs	r0, #1
 800ee86:	f7fd fadd 	bl	800c444 <memp_malloc>
 800ee8a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d111      	bne.n	800eeb6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ee92:	2008      	movs	r0, #8
 800ee94:	f7ff ff3c 	bl	800ed10 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee98:	2001      	movs	r0, #1
 800ee9a:	f7fd fad3 	bl	800c444 <memp_malloc>
 800ee9e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d107      	bne.n	800eeb6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800eea6:	79fb      	ldrb	r3, [r7, #7]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7ff fee3 	bl	800ec74 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eeae:	2001      	movs	r0, #1
 800eeb0:	f7fd fac8 	bl	800c444 <memp_malloc>
 800eeb4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d03f      	beq.n	800ef3c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800eebc:	229c      	movs	r2, #156	; 0x9c
 800eebe:	2100      	movs	r1, #0
 800eec0:	68f8      	ldr	r0, [r7, #12]
 800eec2:	f007 ff44 	bl	8016d4e <memset>
    pcb->prio = prio;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	79fa      	ldrb	r2, [r7, #7]
 800eeca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800eed2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800eedc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	22ff      	movs	r2, #255	; 0xff
 800eeea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f44f 7206 	mov.w	r2, #536	; 0x218
 800eef2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2206      	movs	r2, #6
 800eef8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2206      	movs	r2, #6
 800ef00:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef08:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ef12:	4b0d      	ldr	r3, [pc, #52]	; (800ef48 <tcp_alloc+0xf8>)
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ef1a:	4b0c      	ldr	r3, [pc, #48]	; (800ef4c <tcp_alloc+0xfc>)
 800ef1c:	781a      	ldrb	r2, [r3, #0]
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ef28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	4a08      	ldr	r2, [pc, #32]	; (800ef50 <tcp_alloc+0x100>)
 800ef30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	4a07      	ldr	r2, [pc, #28]	; (800ef54 <tcp_alloc+0x104>)
 800ef38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3710      	adds	r7, #16
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	24007f9c 	.word	0x24007f9c
 800ef4c:	24004ae2 	.word	0x24004ae2
 800ef50:	0800ec09 	.word	0x0800ec09
 800ef54:	006ddd00 	.word	0x006ddd00

0800ef58 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	4603      	mov	r3, r0
 800ef60:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ef62:	2040      	movs	r0, #64	; 0x40
 800ef64:	f7ff ff74 	bl	800ee50 <tcp_alloc>
 800ef68:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3710      	adds	r7, #16
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d002      	beq.n	800ef8a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	683a      	ldr	r2, [r7, #0]
 800ef88:	611a      	str	r2, [r3, #16]
  }
}
 800ef8a:	bf00      	nop
 800ef8c:	370c      	adds	r7, #12
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr
	...

0800ef98 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d00e      	beq.n	800efc6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	7d1b      	ldrb	r3, [r3, #20]
 800efac:	2b01      	cmp	r3, #1
 800efae:	d106      	bne.n	800efbe <tcp_recv+0x26>
 800efb0:	4b07      	ldr	r3, [pc, #28]	; (800efd0 <tcp_recv+0x38>)
 800efb2:	f240 72df 	movw	r2, #2015	; 0x7df
 800efb6:	4907      	ldr	r1, [pc, #28]	; (800efd4 <tcp_recv+0x3c>)
 800efb8:	4807      	ldr	r0, [pc, #28]	; (800efd8 <tcp_recv+0x40>)
 800efba:	f007 ff2b 	bl	8016e14 <iprintf>
    pcb->recv = recv;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	683a      	ldr	r2, [r7, #0]
 800efc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800efc6:	bf00      	nop
 800efc8:	3708      	adds	r7, #8
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	bf00      	nop
 800efd0:	080192d8 	.word	0x080192d8
 800efd4:	08019874 	.word	0x08019874
 800efd8:	0801931c 	.word	0x0801931c

0800efdc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d00e      	beq.n	800f00a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	7d1b      	ldrb	r3, [r3, #20]
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d106      	bne.n	800f002 <tcp_sent+0x26>
 800eff4:	4b07      	ldr	r3, [pc, #28]	; (800f014 <tcp_sent+0x38>)
 800eff6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800effa:	4907      	ldr	r1, [pc, #28]	; (800f018 <tcp_sent+0x3c>)
 800effc:	4807      	ldr	r0, [pc, #28]	; (800f01c <tcp_sent+0x40>)
 800effe:	f007 ff09 	bl	8016e14 <iprintf>
    pcb->sent = sent;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	683a      	ldr	r2, [r7, #0]
 800f006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f00a:	bf00      	nop
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	080192d8 	.word	0x080192d8
 800f018:	0801989c 	.word	0x0801989c
 800f01c:	0801931c 	.word	0x0801931c

0800f020 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d00e      	beq.n	800f04e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	7d1b      	ldrb	r3, [r3, #20]
 800f034:	2b01      	cmp	r3, #1
 800f036:	d106      	bne.n	800f046 <tcp_err+0x26>
 800f038:	4b07      	ldr	r3, [pc, #28]	; (800f058 <tcp_err+0x38>)
 800f03a:	f640 020d 	movw	r2, #2061	; 0x80d
 800f03e:	4907      	ldr	r1, [pc, #28]	; (800f05c <tcp_err+0x3c>)
 800f040:	4807      	ldr	r0, [pc, #28]	; (800f060 <tcp_err+0x40>)
 800f042:	f007 fee7 	bl	8016e14 <iprintf>
    pcb->errf = err;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	683a      	ldr	r2, [r7, #0]
 800f04a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f04e:	bf00      	nop
 800f050:	3708      	adds	r7, #8
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
 800f056:	bf00      	nop
 800f058:	080192d8 	.word	0x080192d8
 800f05c:	080198c4 	.word	0x080198c4
 800f060:	0801931c 	.word	0x0801931c

0800f064 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f064:	b480      	push	{r7}
 800f066:	b085      	sub	sp, #20
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d008      	beq.n	800f086 <tcp_accept+0x22>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	7d1b      	ldrb	r3, [r3, #20]
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d104      	bne.n	800f086 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	683a      	ldr	r2, [r7, #0]
 800f084:	619a      	str	r2, [r3, #24]
  }
}
 800f086:	bf00      	nop
 800f088:	3714      	adds	r7, #20
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr
	...

0800f094 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	60f8      	str	r0, [r7, #12]
 800f09c:	60b9      	str	r1, [r7, #8]
 800f09e:	4613      	mov	r3, r2
 800f0a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d107      	bne.n	800f0b8 <tcp_poll+0x24>
 800f0a8:	4b0e      	ldr	r3, [pc, #56]	; (800f0e4 <tcp_poll+0x50>)
 800f0aa:	f640 023d 	movw	r2, #2109	; 0x83d
 800f0ae:	490e      	ldr	r1, [pc, #56]	; (800f0e8 <tcp_poll+0x54>)
 800f0b0:	480e      	ldr	r0, [pc, #56]	; (800f0ec <tcp_poll+0x58>)
 800f0b2:	f007 feaf 	bl	8016e14 <iprintf>
 800f0b6:	e011      	b.n	800f0dc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	7d1b      	ldrb	r3, [r3, #20]
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	d106      	bne.n	800f0ce <tcp_poll+0x3a>
 800f0c0:	4b08      	ldr	r3, [pc, #32]	; (800f0e4 <tcp_poll+0x50>)
 800f0c2:	f640 023e 	movw	r2, #2110	; 0x83e
 800f0c6:	490a      	ldr	r1, [pc, #40]	; (800f0f0 <tcp_poll+0x5c>)
 800f0c8:	4808      	ldr	r0, [pc, #32]	; (800f0ec <tcp_poll+0x58>)
 800f0ca:	f007 fea3 	bl	8016e14 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	68ba      	ldr	r2, [r7, #8]
 800f0d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	79fa      	ldrb	r2, [r7, #7]
 800f0da:	775a      	strb	r2, [r3, #29]
}
 800f0dc:	3710      	adds	r7, #16
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	bf00      	nop
 800f0e4:	080192d8 	.word	0x080192d8
 800f0e8:	080198ec 	.word	0x080198ec
 800f0ec:	0801931c 	.word	0x0801931c
 800f0f0:	08019904 	.word	0x08019904

0800f0f4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d107      	bne.n	800f112 <tcp_pcb_purge+0x1e>
 800f102:	4b21      	ldr	r3, [pc, #132]	; (800f188 <tcp_pcb_purge+0x94>)
 800f104:	f640 0251 	movw	r2, #2129	; 0x851
 800f108:	4920      	ldr	r1, [pc, #128]	; (800f18c <tcp_pcb_purge+0x98>)
 800f10a:	4821      	ldr	r0, [pc, #132]	; (800f190 <tcp_pcb_purge+0x9c>)
 800f10c:	f007 fe82 	bl	8016e14 <iprintf>
 800f110:	e037      	b.n	800f182 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	7d1b      	ldrb	r3, [r3, #20]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d033      	beq.n	800f182 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f11e:	2b0a      	cmp	r3, #10
 800f120:	d02f      	beq.n	800f182 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f126:	2b01      	cmp	r3, #1
 800f128:	d02b      	beq.n	800f182 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d007      	beq.n	800f142 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f136:	4618      	mov	r0, r3
 800f138:	f7fe f89e 	bl	800d278 <pbuf_free>
      pcb->refused_data = NULL;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2200      	movs	r2, #0
 800f140:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f146:	2b00      	cmp	r3, #0
 800f148:	d002      	beq.n	800f150 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f000 f986 	bl	800f45c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f156:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7ff fcf9 	bl	800eb54 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f166:	4618      	mov	r0, r3
 800f168:	f7ff fcf4 	bl	800eb54 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2200      	movs	r2, #0
 800f170:	66da      	str	r2, [r3, #108]	; 0x6c
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2200      	movs	r2, #0
 800f17e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f182:	3708      	adds	r7, #8
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	080192d8 	.word	0x080192d8
 800f18c:	08019924 	.word	0x08019924
 800f190:	0801931c 	.word	0x0801931c

0800f194 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d106      	bne.n	800f1b2 <tcp_pcb_remove+0x1e>
 800f1a4:	4b3e      	ldr	r3, [pc, #248]	; (800f2a0 <tcp_pcb_remove+0x10c>)
 800f1a6:	f640 0283 	movw	r2, #2179	; 0x883
 800f1aa:	493e      	ldr	r1, [pc, #248]	; (800f2a4 <tcp_pcb_remove+0x110>)
 800f1ac:	483e      	ldr	r0, [pc, #248]	; (800f2a8 <tcp_pcb_remove+0x114>)
 800f1ae:	f007 fe31 	bl	8016e14 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d106      	bne.n	800f1c6 <tcp_pcb_remove+0x32>
 800f1b8:	4b39      	ldr	r3, [pc, #228]	; (800f2a0 <tcp_pcb_remove+0x10c>)
 800f1ba:	f640 0284 	movw	r2, #2180	; 0x884
 800f1be:	493b      	ldr	r1, [pc, #236]	; (800f2ac <tcp_pcb_remove+0x118>)
 800f1c0:	4839      	ldr	r0, [pc, #228]	; (800f2a8 <tcp_pcb_remove+0x114>)
 800f1c2:	f007 fe27 	bl	8016e14 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	683a      	ldr	r2, [r7, #0]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d105      	bne.n	800f1dc <tcp_pcb_remove+0x48>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	68da      	ldr	r2, [r3, #12]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	601a      	str	r2, [r3, #0]
 800f1da:	e013      	b.n	800f204 <tcp_pcb_remove+0x70>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	60fb      	str	r3, [r7, #12]
 800f1e2:	e00c      	b.n	800f1fe <tcp_pcb_remove+0x6a>
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	683a      	ldr	r2, [r7, #0]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d104      	bne.n	800f1f8 <tcp_pcb_remove+0x64>
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	68da      	ldr	r2, [r3, #12]
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	60da      	str	r2, [r3, #12]
 800f1f6:	e005      	b.n	800f204 <tcp_pcb_remove+0x70>
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	60fb      	str	r3, [r7, #12]
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1ef      	bne.n	800f1e4 <tcp_pcb_remove+0x50>
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	2200      	movs	r2, #0
 800f208:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f20a:	6838      	ldr	r0, [r7, #0]
 800f20c:	f7ff ff72 	bl	800f0f4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	7d1b      	ldrb	r3, [r3, #20]
 800f214:	2b0a      	cmp	r3, #10
 800f216:	d013      	beq.n	800f240 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d00f      	beq.n	800f240 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	8b5b      	ldrh	r3, [r3, #26]
 800f224:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d009      	beq.n	800f240 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	8b5b      	ldrh	r3, [r3, #26]
 800f230:	f043 0302 	orr.w	r3, r3, #2
 800f234:	b29a      	uxth	r2, r3
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f23a:	6838      	ldr	r0, [r7, #0]
 800f23c:	f003 fbc2 	bl	80129c4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	7d1b      	ldrb	r3, [r3, #20]
 800f244:	2b01      	cmp	r3, #1
 800f246:	d020      	beq.n	800f28a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d006      	beq.n	800f25e <tcp_pcb_remove+0xca>
 800f250:	4b13      	ldr	r3, [pc, #76]	; (800f2a0 <tcp_pcb_remove+0x10c>)
 800f252:	f640 0293 	movw	r2, #2195	; 0x893
 800f256:	4916      	ldr	r1, [pc, #88]	; (800f2b0 <tcp_pcb_remove+0x11c>)
 800f258:	4813      	ldr	r0, [pc, #76]	; (800f2a8 <tcp_pcb_remove+0x114>)
 800f25a:	f007 fddb 	bl	8016e14 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f262:	2b00      	cmp	r3, #0
 800f264:	d006      	beq.n	800f274 <tcp_pcb_remove+0xe0>
 800f266:	4b0e      	ldr	r3, [pc, #56]	; (800f2a0 <tcp_pcb_remove+0x10c>)
 800f268:	f640 0294 	movw	r2, #2196	; 0x894
 800f26c:	4911      	ldr	r1, [pc, #68]	; (800f2b4 <tcp_pcb_remove+0x120>)
 800f26e:	480e      	ldr	r0, [pc, #56]	; (800f2a8 <tcp_pcb_remove+0x114>)
 800f270:	f007 fdd0 	bl	8016e14 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d006      	beq.n	800f28a <tcp_pcb_remove+0xf6>
 800f27c:	4b08      	ldr	r3, [pc, #32]	; (800f2a0 <tcp_pcb_remove+0x10c>)
 800f27e:	f640 0296 	movw	r2, #2198	; 0x896
 800f282:	490d      	ldr	r1, [pc, #52]	; (800f2b8 <tcp_pcb_remove+0x124>)
 800f284:	4808      	ldr	r0, [pc, #32]	; (800f2a8 <tcp_pcb_remove+0x114>)
 800f286:	f007 fdc5 	bl	8016e14 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	2200      	movs	r2, #0
 800f28e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	2200      	movs	r2, #0
 800f294:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f296:	bf00      	nop
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	080192d8 	.word	0x080192d8
 800f2a4:	08019940 	.word	0x08019940
 800f2a8:	0801931c 	.word	0x0801931c
 800f2ac:	0801995c 	.word	0x0801995c
 800f2b0:	0801997c 	.word	0x0801997c
 800f2b4:	08019994 	.word	0x08019994
 800f2b8:	080199b0 	.word	0x080199b0

0800f2bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d106      	bne.n	800f2d8 <tcp_next_iss+0x1c>
 800f2ca:	4b0a      	ldr	r3, [pc, #40]	; (800f2f4 <tcp_next_iss+0x38>)
 800f2cc:	f640 02af 	movw	r2, #2223	; 0x8af
 800f2d0:	4909      	ldr	r1, [pc, #36]	; (800f2f8 <tcp_next_iss+0x3c>)
 800f2d2:	480a      	ldr	r0, [pc, #40]	; (800f2fc <tcp_next_iss+0x40>)
 800f2d4:	f007 fd9e 	bl	8016e14 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f2d8:	4b09      	ldr	r3, [pc, #36]	; (800f300 <tcp_next_iss+0x44>)
 800f2da:	681a      	ldr	r2, [r3, #0]
 800f2dc:	4b09      	ldr	r3, [pc, #36]	; (800f304 <tcp_next_iss+0x48>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	4413      	add	r3, r2
 800f2e2:	4a07      	ldr	r2, [pc, #28]	; (800f300 <tcp_next_iss+0x44>)
 800f2e4:	6013      	str	r3, [r2, #0]
  return iss;
 800f2e6:	4b06      	ldr	r3, [pc, #24]	; (800f300 <tcp_next_iss+0x44>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3708      	adds	r7, #8
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	080192d8 	.word	0x080192d8
 800f2f8:	080199c8 	.word	0x080199c8
 800f2fc:	0801931c 	.word	0x0801931c
 800f300:	2400002c 	.word	0x2400002c
 800f304:	24007f9c 	.word	0x24007f9c

0800f308 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b086      	sub	sp, #24
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	4603      	mov	r3, r0
 800f310:	60b9      	str	r1, [r7, #8]
 800f312:	607a      	str	r2, [r7, #4]
 800f314:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d106      	bne.n	800f32a <tcp_eff_send_mss_netif+0x22>
 800f31c:	4b14      	ldr	r3, [pc, #80]	; (800f370 <tcp_eff_send_mss_netif+0x68>)
 800f31e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f322:	4914      	ldr	r1, [pc, #80]	; (800f374 <tcp_eff_send_mss_netif+0x6c>)
 800f324:	4814      	ldr	r0, [pc, #80]	; (800f378 <tcp_eff_send_mss_netif+0x70>)
 800f326:	f007 fd75 	bl	8016e14 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d101      	bne.n	800f334 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f330:	89fb      	ldrh	r3, [r7, #14]
 800f332:	e019      	b.n	800f368 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f338:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f33a:	8afb      	ldrh	r3, [r7, #22]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d012      	beq.n	800f366 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f340:	2328      	movs	r3, #40	; 0x28
 800f342:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f344:	8afa      	ldrh	r2, [r7, #22]
 800f346:	8abb      	ldrh	r3, [r7, #20]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d904      	bls.n	800f356 <tcp_eff_send_mss_netif+0x4e>
 800f34c:	8afa      	ldrh	r2, [r7, #22]
 800f34e:	8abb      	ldrh	r3, [r7, #20]
 800f350:	1ad3      	subs	r3, r2, r3
 800f352:	b29b      	uxth	r3, r3
 800f354:	e000      	b.n	800f358 <tcp_eff_send_mss_netif+0x50>
 800f356:	2300      	movs	r3, #0
 800f358:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f35a:	8a7a      	ldrh	r2, [r7, #18]
 800f35c:	89fb      	ldrh	r3, [r7, #14]
 800f35e:	4293      	cmp	r3, r2
 800f360:	bf28      	it	cs
 800f362:	4613      	movcs	r3, r2
 800f364:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f366:	89fb      	ldrh	r3, [r7, #14]
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3718      	adds	r7, #24
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	080192d8 	.word	0x080192d8
 800f374:	080199e4 	.word	0x080199e4
 800f378:	0801931c 	.word	0x0801931c

0800f37c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d119      	bne.n	800f3c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f390:	4b10      	ldr	r3, [pc, #64]	; (800f3d4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f392:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f396:	4910      	ldr	r1, [pc, #64]	; (800f3d8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f398:	4810      	ldr	r0, [pc, #64]	; (800f3dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f39a:	f007 fd3b 	bl	8016e14 <iprintf>

  while (pcb != NULL) {
 800f39e:	e011      	b.n	800f3c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681a      	ldr	r2, [r3, #0]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d108      	bne.n	800f3be <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	68db      	ldr	r3, [r3, #12]
 800f3b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f3b2:	68f8      	ldr	r0, [r7, #12]
 800f3b4:	f7fe fd50 	bl	800de58 <tcp_abort>
      pcb = next;
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	60fb      	str	r3, [r7, #12]
 800f3bc:	e002      	b.n	800f3c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d1ea      	bne.n	800f3a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f3ca:	bf00      	nop
 800f3cc:	bf00      	nop
 800f3ce:	3710      	adds	r7, #16
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	080192d8 	.word	0x080192d8
 800f3d8:	08019a0c 	.word	0x08019a0c
 800f3dc:	0801931c 	.word	0x0801931c

0800f3e0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d02a      	beq.n	800f446 <tcp_netif_ip_addr_changed+0x66>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d026      	beq.n	800f446 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f3f8:	4b15      	ldr	r3, [pc, #84]	; (800f450 <tcp_netif_ip_addr_changed+0x70>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f7ff ffbc 	bl	800f37c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f404:	4b13      	ldr	r3, [pc, #76]	; (800f454 <tcp_netif_ip_addr_changed+0x74>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	4619      	mov	r1, r3
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f7ff ffb6 	bl	800f37c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d017      	beq.n	800f446 <tcp_netif_ip_addr_changed+0x66>
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d013      	beq.n	800f446 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f41e:	4b0e      	ldr	r3, [pc, #56]	; (800f458 <tcp_netif_ip_addr_changed+0x78>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	60fb      	str	r3, [r7, #12]
 800f424:	e00c      	b.n	800f440 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	429a      	cmp	r2, r3
 800f430:	d103      	bne.n	800f43a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	681a      	ldr	r2, [r3, #0]
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	60fb      	str	r3, [r7, #12]
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1ef      	bne.n	800f426 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f446:	bf00      	nop
 800f448:	3710      	adds	r7, #16
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	24007f98 	.word	0x24007f98
 800f454:	24007fa4 	.word	0x24007fa4
 800f458:	24007fa0 	.word	0x24007fa0

0800f45c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b082      	sub	sp, #8
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d007      	beq.n	800f47c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f470:	4618      	mov	r0, r3
 800f472:	f7ff fb6f 	bl	800eb54 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2200      	movs	r2, #0
 800f47a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f47c:	bf00      	nop
 800f47e:	3708      	adds	r7, #8
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}

0800f484 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f484:	b590      	push	{r4, r7, lr}
 800f486:	b08d      	sub	sp, #52	; 0x34
 800f488:	af04      	add	r7, sp, #16
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d105      	bne.n	800f4a0 <tcp_input+0x1c>
 800f494:	4b9b      	ldr	r3, [pc, #620]	; (800f704 <tcp_input+0x280>)
 800f496:	2283      	movs	r2, #131	; 0x83
 800f498:	499b      	ldr	r1, [pc, #620]	; (800f708 <tcp_input+0x284>)
 800f49a:	489c      	ldr	r0, [pc, #624]	; (800f70c <tcp_input+0x288>)
 800f49c:	f007 fcba 	bl	8016e14 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	4a9a      	ldr	r2, [pc, #616]	; (800f710 <tcp_input+0x28c>)
 800f4a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	895b      	ldrh	r3, [r3, #10]
 800f4ac:	2b13      	cmp	r3, #19
 800f4ae:	f240 83c4 	bls.w	800fc3a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f4b2:	4b98      	ldr	r3, [pc, #608]	; (800f714 <tcp_input+0x290>)
 800f4b4:	695b      	ldr	r3, [r3, #20]
 800f4b6:	4a97      	ldr	r2, [pc, #604]	; (800f714 <tcp_input+0x290>)
 800f4b8:	6812      	ldr	r2, [r2, #0]
 800f4ba:	4611      	mov	r1, r2
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f006 fa07 	bl	80158d0 <ip4_addr_isbroadcast_u32>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	f040 83ba 	bne.w	800fc3e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f4ca:	4b92      	ldr	r3, [pc, #584]	; (800f714 <tcp_input+0x290>)
 800f4cc:	695b      	ldr	r3, [r3, #20]
 800f4ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f4d2:	2be0      	cmp	r3, #224	; 0xe0
 800f4d4:	f000 83b3 	beq.w	800fc3e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f4d8:	4b8d      	ldr	r3, [pc, #564]	; (800f710 <tcp_input+0x28c>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	899b      	ldrh	r3, [r3, #12]
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7fc fa1f 	bl	800b924 <lwip_htons>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	0b1b      	lsrs	r3, r3, #12
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	b2db      	uxtb	r3, r3
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f4f2:	7cbb      	ldrb	r3, [r7, #18]
 800f4f4:	2b13      	cmp	r3, #19
 800f4f6:	f240 83a4 	bls.w	800fc42 <tcp_input+0x7be>
 800f4fa:	7cbb      	ldrb	r3, [r7, #18]
 800f4fc:	b29a      	uxth	r2, r3
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	891b      	ldrh	r3, [r3, #8]
 800f502:	429a      	cmp	r2, r3
 800f504:	f200 839d 	bhi.w	800fc42 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f508:	7cbb      	ldrb	r3, [r7, #18]
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	3b14      	subs	r3, #20
 800f50e:	b29a      	uxth	r2, r3
 800f510:	4b81      	ldr	r3, [pc, #516]	; (800f718 <tcp_input+0x294>)
 800f512:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f514:	4b81      	ldr	r3, [pc, #516]	; (800f71c <tcp_input+0x298>)
 800f516:	2200      	movs	r2, #0
 800f518:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	895a      	ldrh	r2, [r3, #10]
 800f51e:	7cbb      	ldrb	r3, [r7, #18]
 800f520:	b29b      	uxth	r3, r3
 800f522:	429a      	cmp	r2, r3
 800f524:	d309      	bcc.n	800f53a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f526:	4b7c      	ldr	r3, [pc, #496]	; (800f718 <tcp_input+0x294>)
 800f528:	881a      	ldrh	r2, [r3, #0]
 800f52a:	4b7d      	ldr	r3, [pc, #500]	; (800f720 <tcp_input+0x29c>)
 800f52c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f52e:	7cbb      	ldrb	r3, [r7, #18]
 800f530:	4619      	mov	r1, r3
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f7fd fe1a 	bl	800d16c <pbuf_remove_header>
 800f538:	e04e      	b.n	800f5d8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d105      	bne.n	800f54e <tcp_input+0xca>
 800f542:	4b70      	ldr	r3, [pc, #448]	; (800f704 <tcp_input+0x280>)
 800f544:	22c2      	movs	r2, #194	; 0xc2
 800f546:	4977      	ldr	r1, [pc, #476]	; (800f724 <tcp_input+0x2a0>)
 800f548:	4870      	ldr	r0, [pc, #448]	; (800f70c <tcp_input+0x288>)
 800f54a:	f007 fc63 	bl	8016e14 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f54e:	2114      	movs	r1, #20
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f7fd fe0b 	bl	800d16c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	895a      	ldrh	r2, [r3, #10]
 800f55a:	4b71      	ldr	r3, [pc, #452]	; (800f720 <tcp_input+0x29c>)
 800f55c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f55e:	4b6e      	ldr	r3, [pc, #440]	; (800f718 <tcp_input+0x294>)
 800f560:	881a      	ldrh	r2, [r3, #0]
 800f562:	4b6f      	ldr	r3, [pc, #444]	; (800f720 <tcp_input+0x29c>)
 800f564:	881b      	ldrh	r3, [r3, #0]
 800f566:	1ad3      	subs	r3, r2, r3
 800f568:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f56a:	4b6d      	ldr	r3, [pc, #436]	; (800f720 <tcp_input+0x29c>)
 800f56c:	881b      	ldrh	r3, [r3, #0]
 800f56e:	4619      	mov	r1, r3
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f7fd fdfb 	bl	800d16c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	895b      	ldrh	r3, [r3, #10]
 800f57c:	8a3a      	ldrh	r2, [r7, #16]
 800f57e:	429a      	cmp	r2, r3
 800f580:	f200 8361 	bhi.w	800fc46 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	4a64      	ldr	r2, [pc, #400]	; (800f71c <tcp_input+0x298>)
 800f58c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	8a3a      	ldrh	r2, [r7, #16]
 800f594:	4611      	mov	r1, r2
 800f596:	4618      	mov	r0, r3
 800f598:	f7fd fde8 	bl	800d16c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	891a      	ldrh	r2, [r3, #8]
 800f5a0:	8a3b      	ldrh	r3, [r7, #16]
 800f5a2:	1ad3      	subs	r3, r2, r3
 800f5a4:	b29a      	uxth	r2, r3
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	895b      	ldrh	r3, [r3, #10]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d005      	beq.n	800f5be <tcp_input+0x13a>
 800f5b2:	4b54      	ldr	r3, [pc, #336]	; (800f704 <tcp_input+0x280>)
 800f5b4:	22df      	movs	r2, #223	; 0xdf
 800f5b6:	495c      	ldr	r1, [pc, #368]	; (800f728 <tcp_input+0x2a4>)
 800f5b8:	4854      	ldr	r0, [pc, #336]	; (800f70c <tcp_input+0x288>)
 800f5ba:	f007 fc2b 	bl	8016e14 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	891a      	ldrh	r2, [r3, #8]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	891b      	ldrh	r3, [r3, #8]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d005      	beq.n	800f5d8 <tcp_input+0x154>
 800f5cc:	4b4d      	ldr	r3, [pc, #308]	; (800f704 <tcp_input+0x280>)
 800f5ce:	22e0      	movs	r2, #224	; 0xe0
 800f5d0:	4956      	ldr	r1, [pc, #344]	; (800f72c <tcp_input+0x2a8>)
 800f5d2:	484e      	ldr	r0, [pc, #312]	; (800f70c <tcp_input+0x288>)
 800f5d4:	f007 fc1e 	bl	8016e14 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f5d8:	4b4d      	ldr	r3, [pc, #308]	; (800f710 <tcp_input+0x28c>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	881b      	ldrh	r3, [r3, #0]
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	4a4b      	ldr	r2, [pc, #300]	; (800f710 <tcp_input+0x28c>)
 800f5e2:	6814      	ldr	r4, [r2, #0]
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7fc f99d 	bl	800b924 <lwip_htons>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f5ee:	4b48      	ldr	r3, [pc, #288]	; (800f710 <tcp_input+0x28c>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	885b      	ldrh	r3, [r3, #2]
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	4a46      	ldr	r2, [pc, #280]	; (800f710 <tcp_input+0x28c>)
 800f5f8:	6814      	ldr	r4, [r2, #0]
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7fc f992 	bl	800b924 <lwip_htons>
 800f600:	4603      	mov	r3, r0
 800f602:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f604:	4b42      	ldr	r3, [pc, #264]	; (800f710 <tcp_input+0x28c>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	4a41      	ldr	r2, [pc, #260]	; (800f710 <tcp_input+0x28c>)
 800f60c:	6814      	ldr	r4, [r2, #0]
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fc f99d 	bl	800b94e <lwip_htonl>
 800f614:	4603      	mov	r3, r0
 800f616:	6063      	str	r3, [r4, #4]
 800f618:	6863      	ldr	r3, [r4, #4]
 800f61a:	4a45      	ldr	r2, [pc, #276]	; (800f730 <tcp_input+0x2ac>)
 800f61c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f61e:	4b3c      	ldr	r3, [pc, #240]	; (800f710 <tcp_input+0x28c>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	689b      	ldr	r3, [r3, #8]
 800f624:	4a3a      	ldr	r2, [pc, #232]	; (800f710 <tcp_input+0x28c>)
 800f626:	6814      	ldr	r4, [r2, #0]
 800f628:	4618      	mov	r0, r3
 800f62a:	f7fc f990 	bl	800b94e <lwip_htonl>
 800f62e:	4603      	mov	r3, r0
 800f630:	60a3      	str	r3, [r4, #8]
 800f632:	68a3      	ldr	r3, [r4, #8]
 800f634:	4a3f      	ldr	r2, [pc, #252]	; (800f734 <tcp_input+0x2b0>)
 800f636:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f638:	4b35      	ldr	r3, [pc, #212]	; (800f710 <tcp_input+0x28c>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	89db      	ldrh	r3, [r3, #14]
 800f63e:	b29b      	uxth	r3, r3
 800f640:	4a33      	ldr	r2, [pc, #204]	; (800f710 <tcp_input+0x28c>)
 800f642:	6814      	ldr	r4, [r2, #0]
 800f644:	4618      	mov	r0, r3
 800f646:	f7fc f96d 	bl	800b924 <lwip_htons>
 800f64a:	4603      	mov	r3, r0
 800f64c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f64e:	4b30      	ldr	r3, [pc, #192]	; (800f710 <tcp_input+0x28c>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	899b      	ldrh	r3, [r3, #12]
 800f654:	b29b      	uxth	r3, r3
 800f656:	4618      	mov	r0, r3
 800f658:	f7fc f964 	bl	800b924 <lwip_htons>
 800f65c:	4603      	mov	r3, r0
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f664:	b2da      	uxtb	r2, r3
 800f666:	4b34      	ldr	r3, [pc, #208]	; (800f738 <tcp_input+0x2b4>)
 800f668:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	891a      	ldrh	r2, [r3, #8]
 800f66e:	4b33      	ldr	r3, [pc, #204]	; (800f73c <tcp_input+0x2b8>)
 800f670:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f672:	4b31      	ldr	r3, [pc, #196]	; (800f738 <tcp_input+0x2b4>)
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	f003 0303 	and.w	r3, r3, #3
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d00c      	beq.n	800f698 <tcp_input+0x214>
    tcplen++;
 800f67e:	4b2f      	ldr	r3, [pc, #188]	; (800f73c <tcp_input+0x2b8>)
 800f680:	881b      	ldrh	r3, [r3, #0]
 800f682:	3301      	adds	r3, #1
 800f684:	b29a      	uxth	r2, r3
 800f686:	4b2d      	ldr	r3, [pc, #180]	; (800f73c <tcp_input+0x2b8>)
 800f688:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	891a      	ldrh	r2, [r3, #8]
 800f68e:	4b2b      	ldr	r3, [pc, #172]	; (800f73c <tcp_input+0x2b8>)
 800f690:	881b      	ldrh	r3, [r3, #0]
 800f692:	429a      	cmp	r2, r3
 800f694:	f200 82d9 	bhi.w	800fc4a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f698:	2300      	movs	r3, #0
 800f69a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f69c:	4b28      	ldr	r3, [pc, #160]	; (800f740 <tcp_input+0x2bc>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	61fb      	str	r3, [r7, #28]
 800f6a2:	e09d      	b.n	800f7e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	7d1b      	ldrb	r3, [r3, #20]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d105      	bne.n	800f6b8 <tcp_input+0x234>
 800f6ac:	4b15      	ldr	r3, [pc, #84]	; (800f704 <tcp_input+0x280>)
 800f6ae:	22fb      	movs	r2, #251	; 0xfb
 800f6b0:	4924      	ldr	r1, [pc, #144]	; (800f744 <tcp_input+0x2c0>)
 800f6b2:	4816      	ldr	r0, [pc, #88]	; (800f70c <tcp_input+0x288>)
 800f6b4:	f007 fbae 	bl	8016e14 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f6b8:	69fb      	ldr	r3, [r7, #28]
 800f6ba:	7d1b      	ldrb	r3, [r3, #20]
 800f6bc:	2b0a      	cmp	r3, #10
 800f6be:	d105      	bne.n	800f6cc <tcp_input+0x248>
 800f6c0:	4b10      	ldr	r3, [pc, #64]	; (800f704 <tcp_input+0x280>)
 800f6c2:	22fc      	movs	r2, #252	; 0xfc
 800f6c4:	4920      	ldr	r1, [pc, #128]	; (800f748 <tcp_input+0x2c4>)
 800f6c6:	4811      	ldr	r0, [pc, #68]	; (800f70c <tcp_input+0x288>)
 800f6c8:	f007 fba4 	bl	8016e14 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	7d1b      	ldrb	r3, [r3, #20]
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d105      	bne.n	800f6e0 <tcp_input+0x25c>
 800f6d4:	4b0b      	ldr	r3, [pc, #44]	; (800f704 <tcp_input+0x280>)
 800f6d6:	22fd      	movs	r2, #253	; 0xfd
 800f6d8:	491c      	ldr	r1, [pc, #112]	; (800f74c <tcp_input+0x2c8>)
 800f6da:	480c      	ldr	r0, [pc, #48]	; (800f70c <tcp_input+0x288>)
 800f6dc:	f007 fb9a 	bl	8016e14 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	7a1b      	ldrb	r3, [r3, #8]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d033      	beq.n	800f750 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	7a1a      	ldrb	r2, [r3, #8]
 800f6ec:	4b09      	ldr	r3, [pc, #36]	; (800f714 <tcp_input+0x290>)
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d029      	beq.n	800f750 <tcp_input+0x2cc>
      prev = pcb;
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	61bb      	str	r3, [r7, #24]
      continue;
 800f700:	e06b      	b.n	800f7da <tcp_input+0x356>
 800f702:	bf00      	nop
 800f704:	08019a40 	.word	0x08019a40
 800f708:	08019a74 	.word	0x08019a74
 800f70c:	08019a8c 	.word	0x08019a8c
 800f710:	24004af4 	.word	0x24004af4
 800f714:	24004ed8 	.word	0x24004ed8
 800f718:	24004af8 	.word	0x24004af8
 800f71c:	24004afc 	.word	0x24004afc
 800f720:	24004afa 	.word	0x24004afa
 800f724:	08019ab4 	.word	0x08019ab4
 800f728:	08019ac4 	.word	0x08019ac4
 800f72c:	08019ad0 	.word	0x08019ad0
 800f730:	24004b04 	.word	0x24004b04
 800f734:	24004b08 	.word	0x24004b08
 800f738:	24004b10 	.word	0x24004b10
 800f73c:	24004b0e 	.word	0x24004b0e
 800f740:	24007f98 	.word	0x24007f98
 800f744:	08019af0 	.word	0x08019af0
 800f748:	08019b18 	.word	0x08019b18
 800f74c:	08019b44 	.word	0x08019b44
    }

    if (pcb->remote_port == tcphdr->src &&
 800f750:	69fb      	ldr	r3, [r7, #28]
 800f752:	8b1a      	ldrh	r2, [r3, #24]
 800f754:	4b94      	ldr	r3, [pc, #592]	; (800f9a8 <tcp_input+0x524>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	881b      	ldrh	r3, [r3, #0]
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	429a      	cmp	r2, r3
 800f75e:	d13a      	bne.n	800f7d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f760:	69fb      	ldr	r3, [r7, #28]
 800f762:	8ada      	ldrh	r2, [r3, #22]
 800f764:	4b90      	ldr	r3, [pc, #576]	; (800f9a8 <tcp_input+0x524>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	885b      	ldrh	r3, [r3, #2]
 800f76a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d132      	bne.n	800f7d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f770:	69fb      	ldr	r3, [r7, #28]
 800f772:	685a      	ldr	r2, [r3, #4]
 800f774:	4b8d      	ldr	r3, [pc, #564]	; (800f9ac <tcp_input+0x528>)
 800f776:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f778:	429a      	cmp	r2, r3
 800f77a:	d12c      	bne.n	800f7d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	681a      	ldr	r2, [r3, #0]
 800f780:	4b8a      	ldr	r3, [pc, #552]	; (800f9ac <tcp_input+0x528>)
 800f782:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f784:	429a      	cmp	r2, r3
 800f786:	d126      	bne.n	800f7d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	68db      	ldr	r3, [r3, #12]
 800f78c:	69fa      	ldr	r2, [r7, #28]
 800f78e:	429a      	cmp	r2, r3
 800f790:	d106      	bne.n	800f7a0 <tcp_input+0x31c>
 800f792:	4b87      	ldr	r3, [pc, #540]	; (800f9b0 <tcp_input+0x52c>)
 800f794:	f240 120d 	movw	r2, #269	; 0x10d
 800f798:	4986      	ldr	r1, [pc, #536]	; (800f9b4 <tcp_input+0x530>)
 800f79a:	4887      	ldr	r0, [pc, #540]	; (800f9b8 <tcp_input+0x534>)
 800f79c:	f007 fb3a 	bl	8016e14 <iprintf>
      if (prev != NULL) {
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00a      	beq.n	800f7bc <tcp_input+0x338>
        prev->next = pcb->next;
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	68da      	ldr	r2, [r3, #12]
 800f7aa:	69bb      	ldr	r3, [r7, #24]
 800f7ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f7ae:	4b83      	ldr	r3, [pc, #524]	; (800f9bc <tcp_input+0x538>)
 800f7b0:	681a      	ldr	r2, [r3, #0]
 800f7b2:	69fb      	ldr	r3, [r7, #28]
 800f7b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f7b6:	4a81      	ldr	r2, [pc, #516]	; (800f9bc <tcp_input+0x538>)
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	68db      	ldr	r3, [r3, #12]
 800f7c0:	69fa      	ldr	r2, [r7, #28]
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d111      	bne.n	800f7ea <tcp_input+0x366>
 800f7c6:	4b7a      	ldr	r3, [pc, #488]	; (800f9b0 <tcp_input+0x52c>)
 800f7c8:	f240 1215 	movw	r2, #277	; 0x115
 800f7cc:	497c      	ldr	r1, [pc, #496]	; (800f9c0 <tcp_input+0x53c>)
 800f7ce:	487a      	ldr	r0, [pc, #488]	; (800f9b8 <tcp_input+0x534>)
 800f7d0:	f007 fb20 	bl	8016e14 <iprintf>
      break;
 800f7d4:	e009      	b.n	800f7ea <tcp_input+0x366>
    }
    prev = pcb;
 800f7d6:	69fb      	ldr	r3, [r7, #28]
 800f7d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7da:	69fb      	ldr	r3, [r7, #28]
 800f7dc:	68db      	ldr	r3, [r3, #12]
 800f7de:	61fb      	str	r3, [r7, #28]
 800f7e0:	69fb      	ldr	r3, [r7, #28]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	f47f af5e 	bne.w	800f6a4 <tcp_input+0x220>
 800f7e8:	e000      	b.n	800f7ec <tcp_input+0x368>
      break;
 800f7ea:	bf00      	nop
  }

  if (pcb == NULL) {
 800f7ec:	69fb      	ldr	r3, [r7, #28]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	f040 8095 	bne.w	800f91e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7f4:	4b73      	ldr	r3, [pc, #460]	; (800f9c4 <tcp_input+0x540>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	61fb      	str	r3, [r7, #28]
 800f7fa:	e03f      	b.n	800f87c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	7d1b      	ldrb	r3, [r3, #20]
 800f800:	2b0a      	cmp	r3, #10
 800f802:	d006      	beq.n	800f812 <tcp_input+0x38e>
 800f804:	4b6a      	ldr	r3, [pc, #424]	; (800f9b0 <tcp_input+0x52c>)
 800f806:	f240 121f 	movw	r2, #287	; 0x11f
 800f80a:	496f      	ldr	r1, [pc, #444]	; (800f9c8 <tcp_input+0x544>)
 800f80c:	486a      	ldr	r0, [pc, #424]	; (800f9b8 <tcp_input+0x534>)
 800f80e:	f007 fb01 	bl	8016e14 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f812:	69fb      	ldr	r3, [r7, #28]
 800f814:	7a1b      	ldrb	r3, [r3, #8]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d009      	beq.n	800f82e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f81a:	69fb      	ldr	r3, [r7, #28]
 800f81c:	7a1a      	ldrb	r2, [r3, #8]
 800f81e:	4b63      	ldr	r3, [pc, #396]	; (800f9ac <tcp_input+0x528>)
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f826:	3301      	adds	r3, #1
 800f828:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d122      	bne.n	800f874 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	8b1a      	ldrh	r2, [r3, #24]
 800f832:	4b5d      	ldr	r3, [pc, #372]	; (800f9a8 <tcp_input+0x524>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	881b      	ldrh	r3, [r3, #0]
 800f838:	b29b      	uxth	r3, r3
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d11b      	bne.n	800f876 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	8ada      	ldrh	r2, [r3, #22]
 800f842:	4b59      	ldr	r3, [pc, #356]	; (800f9a8 <tcp_input+0x524>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	885b      	ldrh	r3, [r3, #2]
 800f848:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d113      	bne.n	800f876 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	685a      	ldr	r2, [r3, #4]
 800f852:	4b56      	ldr	r3, [pc, #344]	; (800f9ac <tcp_input+0x528>)
 800f854:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f856:	429a      	cmp	r2, r3
 800f858:	d10d      	bne.n	800f876 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f85a:	69fb      	ldr	r3, [r7, #28]
 800f85c:	681a      	ldr	r2, [r3, #0]
 800f85e:	4b53      	ldr	r3, [pc, #332]	; (800f9ac <tcp_input+0x528>)
 800f860:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f862:	429a      	cmp	r2, r3
 800f864:	d107      	bne.n	800f876 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f866:	69f8      	ldr	r0, [r7, #28]
 800f868:	f000 fb54 	bl	800ff14 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f7fd fd03 	bl	800d278 <pbuf_free>
        return;
 800f872:	e1f0      	b.n	800fc56 <tcp_input+0x7d2>
        continue;
 800f874:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	61fb      	str	r3, [r7, #28]
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d1bc      	bne.n	800f7fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f882:	2300      	movs	r3, #0
 800f884:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f886:	4b51      	ldr	r3, [pc, #324]	; (800f9cc <tcp_input+0x548>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	617b      	str	r3, [r7, #20]
 800f88c:	e02a      	b.n	800f8e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	7a1b      	ldrb	r3, [r3, #8]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d00c      	beq.n	800f8b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	7a1a      	ldrb	r2, [r3, #8]
 800f89a:	4b44      	ldr	r3, [pc, #272]	; (800f9ac <tcp_input+0x528>)
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d002      	beq.n	800f8b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	61bb      	str	r3, [r7, #24]
        continue;
 800f8ae:	e016      	b.n	800f8de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	8ada      	ldrh	r2, [r3, #22]
 800f8b4:	4b3c      	ldr	r3, [pc, #240]	; (800f9a8 <tcp_input+0x524>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	885b      	ldrh	r3, [r3, #2]
 800f8ba:	b29b      	uxth	r3, r3
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d10c      	bne.n	800f8da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	4b39      	ldr	r3, [pc, #228]	; (800f9ac <tcp_input+0x528>)
 800f8c6:	695b      	ldr	r3, [r3, #20]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d00f      	beq.n	800f8ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d00d      	beq.n	800f8ee <tcp_input+0x46a>
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d009      	beq.n	800f8ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	68db      	ldr	r3, [r3, #12]
 800f8e2:	617b      	str	r3, [r7, #20]
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d1d1      	bne.n	800f88e <tcp_input+0x40a>
 800f8ea:	e000      	b.n	800f8ee <tcp_input+0x46a>
            break;
 800f8ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d014      	beq.n	800f91e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f8f4:	69bb      	ldr	r3, [r7, #24]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d00a      	beq.n	800f910 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	68da      	ldr	r2, [r3, #12]
 800f8fe:	69bb      	ldr	r3, [r7, #24]
 800f900:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f902:	4b32      	ldr	r3, [pc, #200]	; (800f9cc <tcp_input+0x548>)
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f90a:	4a30      	ldr	r2, [pc, #192]	; (800f9cc <tcp_input+0x548>)
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f910:	6978      	ldr	r0, [r7, #20]
 800f912:	f000 fa01 	bl	800fd18 <tcp_listen_input>
      }
      pbuf_free(p);
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f7fd fcae 	bl	800d278 <pbuf_free>
      return;
 800f91c:	e19b      	b.n	800fc56 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f91e:	69fb      	ldr	r3, [r7, #28]
 800f920:	2b00      	cmp	r3, #0
 800f922:	f000 8160 	beq.w	800fbe6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f926:	4b2a      	ldr	r3, [pc, #168]	; (800f9d0 <tcp_input+0x54c>)
 800f928:	2200      	movs	r2, #0
 800f92a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	891a      	ldrh	r2, [r3, #8]
 800f930:	4b27      	ldr	r3, [pc, #156]	; (800f9d0 <tcp_input+0x54c>)
 800f932:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f934:	4a26      	ldr	r2, [pc, #152]	; (800f9d0 <tcp_input+0x54c>)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f93a:	4b1b      	ldr	r3, [pc, #108]	; (800f9a8 <tcp_input+0x524>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	4a24      	ldr	r2, [pc, #144]	; (800f9d0 <tcp_input+0x54c>)
 800f940:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f942:	4b24      	ldr	r3, [pc, #144]	; (800f9d4 <tcp_input+0x550>)
 800f944:	2200      	movs	r2, #0
 800f946:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f948:	4b23      	ldr	r3, [pc, #140]	; (800f9d8 <tcp_input+0x554>)
 800f94a:	2200      	movs	r2, #0
 800f94c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f94e:	4b23      	ldr	r3, [pc, #140]	; (800f9dc <tcp_input+0x558>)
 800f950:	2200      	movs	r2, #0
 800f952:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f954:	4b22      	ldr	r3, [pc, #136]	; (800f9e0 <tcp_input+0x55c>)
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	f003 0308 	and.w	r3, r3, #8
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d006      	beq.n	800f96e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	7b5b      	ldrb	r3, [r3, #13]
 800f964:	f043 0301 	orr.w	r3, r3, #1
 800f968:	b2da      	uxtb	r2, r3
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f96e:	69fb      	ldr	r3, [r7, #28]
 800f970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f972:	2b00      	cmp	r3, #0
 800f974:	d038      	beq.n	800f9e8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f976:	69f8      	ldr	r0, [r7, #28]
 800f978:	f7ff f870 	bl	800ea5c <tcp_process_refused_data>
 800f97c:	4603      	mov	r3, r0
 800f97e:	f113 0f0d 	cmn.w	r3, #13
 800f982:	d007      	beq.n	800f994 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d02d      	beq.n	800f9e8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f98c:	4b15      	ldr	r3, [pc, #84]	; (800f9e4 <tcp_input+0x560>)
 800f98e:	881b      	ldrh	r3, [r3, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d029      	beq.n	800f9e8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f994:	69fb      	ldr	r3, [r7, #28]
 800f996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f998:	2b00      	cmp	r3, #0
 800f99a:	f040 8104 	bne.w	800fba6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f99e:	69f8      	ldr	r0, [r7, #28]
 800f9a0:	f003 fe16 	bl	80135d0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f9a4:	e0ff      	b.n	800fba6 <tcp_input+0x722>
 800f9a6:	bf00      	nop
 800f9a8:	24004af4 	.word	0x24004af4
 800f9ac:	24004ed8 	.word	0x24004ed8
 800f9b0:	08019a40 	.word	0x08019a40
 800f9b4:	08019b6c 	.word	0x08019b6c
 800f9b8:	08019a8c 	.word	0x08019a8c
 800f9bc:	24007f98 	.word	0x24007f98
 800f9c0:	08019b98 	.word	0x08019b98
 800f9c4:	24007fa8 	.word	0x24007fa8
 800f9c8:	08019bc4 	.word	0x08019bc4
 800f9cc:	24007fa0 	.word	0x24007fa0
 800f9d0:	24004ae4 	.word	0x24004ae4
 800f9d4:	24004b14 	.word	0x24004b14
 800f9d8:	24004b11 	.word	0x24004b11
 800f9dc:	24004b0c 	.word	0x24004b0c
 800f9e0:	24004b10 	.word	0x24004b10
 800f9e4:	24004b0e 	.word	0x24004b0e
      }
    }
    tcp_input_pcb = pcb;
 800f9e8:	4a9c      	ldr	r2, [pc, #624]	; (800fc5c <tcp_input+0x7d8>)
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f9ee:	69f8      	ldr	r0, [r7, #28]
 800f9f0:	f000 fb0a 	bl	8010008 <tcp_process>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f9f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9fc:	f113 0f0d 	cmn.w	r3, #13
 800fa00:	f000 80d3 	beq.w	800fbaa <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800fa04:	4b96      	ldr	r3, [pc, #600]	; (800fc60 <tcp_input+0x7dc>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	f003 0308 	and.w	r3, r3, #8
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d015      	beq.n	800fa3c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fa10:	69fb      	ldr	r3, [r7, #28]
 800fa12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d008      	beq.n	800fa2c <tcp_input+0x5a8>
 800fa1a:	69fb      	ldr	r3, [r7, #28]
 800fa1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa20:	69fa      	ldr	r2, [r7, #28]
 800fa22:	6912      	ldr	r2, [r2, #16]
 800fa24:	f06f 010d 	mvn.w	r1, #13
 800fa28:	4610      	mov	r0, r2
 800fa2a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fa2c:	69f9      	ldr	r1, [r7, #28]
 800fa2e:	488d      	ldr	r0, [pc, #564]	; (800fc64 <tcp_input+0x7e0>)
 800fa30:	f7ff fbb0 	bl	800f194 <tcp_pcb_remove>
        tcp_free(pcb);
 800fa34:	69f8      	ldr	r0, [r7, #28]
 800fa36:	f7fd fecb 	bl	800d7d0 <tcp_free>
 800fa3a:	e0c1      	b.n	800fbc0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fa40:	4b89      	ldr	r3, [pc, #548]	; (800fc68 <tcp_input+0x7e4>)
 800fa42:	881b      	ldrh	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d01d      	beq.n	800fa84 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fa48:	4b87      	ldr	r3, [pc, #540]	; (800fc68 <tcp_input+0x7e4>)
 800fa4a:	881b      	ldrh	r3, [r3, #0]
 800fa4c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fa4e:	69fb      	ldr	r3, [r7, #28]
 800fa50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d00a      	beq.n	800fa6e <tcp_input+0x5ea>
 800fa58:	69fb      	ldr	r3, [r7, #28]
 800fa5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa5e:	69fa      	ldr	r2, [r7, #28]
 800fa60:	6910      	ldr	r0, [r2, #16]
 800fa62:	89fa      	ldrh	r2, [r7, #14]
 800fa64:	69f9      	ldr	r1, [r7, #28]
 800fa66:	4798      	blx	r3
 800fa68:	4603      	mov	r3, r0
 800fa6a:	74fb      	strb	r3, [r7, #19]
 800fa6c:	e001      	b.n	800fa72 <tcp_input+0x5ee>
 800fa6e:	2300      	movs	r3, #0
 800fa70:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fa72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa76:	f113 0f0d 	cmn.w	r3, #13
 800fa7a:	f000 8098 	beq.w	800fbae <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fa7e:	4b7a      	ldr	r3, [pc, #488]	; (800fc68 <tcp_input+0x7e4>)
 800fa80:	2200      	movs	r2, #0
 800fa82:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fa84:	69f8      	ldr	r0, [r7, #28]
 800fa86:	f000 f907 	bl	800fc98 <tcp_input_delayed_close>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	f040 8090 	bne.w	800fbb2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fa92:	4b76      	ldr	r3, [pc, #472]	; (800fc6c <tcp_input+0x7e8>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d041      	beq.n	800fb1e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d006      	beq.n	800fab0 <tcp_input+0x62c>
 800faa2:	4b73      	ldr	r3, [pc, #460]	; (800fc70 <tcp_input+0x7ec>)
 800faa4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800faa8:	4972      	ldr	r1, [pc, #456]	; (800fc74 <tcp_input+0x7f0>)
 800faaa:	4873      	ldr	r0, [pc, #460]	; (800fc78 <tcp_input+0x7f4>)
 800faac:	f007 f9b2 	bl	8016e14 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	8b5b      	ldrh	r3, [r3, #26]
 800fab4:	f003 0310 	and.w	r3, r3, #16
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d008      	beq.n	800face <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fabc:	4b6b      	ldr	r3, [pc, #428]	; (800fc6c <tcp_input+0x7e8>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7fd fbd9 	bl	800d278 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fac6:	69f8      	ldr	r0, [r7, #28]
 800fac8:	f7fe f9c6 	bl	800de58 <tcp_abort>
            goto aborted;
 800facc:	e078      	b.n	800fbc0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800face:	69fb      	ldr	r3, [r7, #28]
 800fad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d00c      	beq.n	800faf2 <tcp_input+0x66e>
 800fad8:	69fb      	ldr	r3, [r7, #28]
 800fada:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fade:	69fb      	ldr	r3, [r7, #28]
 800fae0:	6918      	ldr	r0, [r3, #16]
 800fae2:	4b62      	ldr	r3, [pc, #392]	; (800fc6c <tcp_input+0x7e8>)
 800fae4:	681a      	ldr	r2, [r3, #0]
 800fae6:	2300      	movs	r3, #0
 800fae8:	69f9      	ldr	r1, [r7, #28]
 800faea:	47a0      	blx	r4
 800faec:	4603      	mov	r3, r0
 800faee:	74fb      	strb	r3, [r7, #19]
 800faf0:	e008      	b.n	800fb04 <tcp_input+0x680>
 800faf2:	4b5e      	ldr	r3, [pc, #376]	; (800fc6c <tcp_input+0x7e8>)
 800faf4:	681a      	ldr	r2, [r3, #0]
 800faf6:	2300      	movs	r3, #0
 800faf8:	69f9      	ldr	r1, [r7, #28]
 800fafa:	2000      	movs	r0, #0
 800fafc:	f7ff f884 	bl	800ec08 <tcp_recv_null>
 800fb00:	4603      	mov	r3, r0
 800fb02:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fb04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb08:	f113 0f0d 	cmn.w	r3, #13
 800fb0c:	d053      	beq.n	800fbb6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fb0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d003      	beq.n	800fb1e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fb16:	4b55      	ldr	r3, [pc, #340]	; (800fc6c <tcp_input+0x7e8>)
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	69fb      	ldr	r3, [r7, #28]
 800fb1c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fb1e:	4b50      	ldr	r3, [pc, #320]	; (800fc60 <tcp_input+0x7dc>)
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	f003 0320 	and.w	r3, r3, #32
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d030      	beq.n	800fb8c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800fb2a:	69fb      	ldr	r3, [r7, #28]
 800fb2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d009      	beq.n	800fb46 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fb32:	69fb      	ldr	r3, [r7, #28]
 800fb34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb36:	7b5a      	ldrb	r2, [r3, #13]
 800fb38:	69fb      	ldr	r3, [r7, #28]
 800fb3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb3c:	f042 0220 	orr.w	r2, r2, #32
 800fb40:	b2d2      	uxtb	r2, r2
 800fb42:	735a      	strb	r2, [r3, #13]
 800fb44:	e022      	b.n	800fb8c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fb46:	69fb      	ldr	r3, [r7, #28]
 800fb48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fb4e:	d005      	beq.n	800fb5c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb54:	3301      	adds	r3, #1
 800fb56:	b29a      	uxth	r2, r3
 800fb58:	69fb      	ldr	r3, [r7, #28]
 800fb5a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d00b      	beq.n	800fb7e <tcp_input+0x6fa>
 800fb66:	69fb      	ldr	r3, [r7, #28]
 800fb68:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fb6c:	69fb      	ldr	r3, [r7, #28]
 800fb6e:	6918      	ldr	r0, [r3, #16]
 800fb70:	2300      	movs	r3, #0
 800fb72:	2200      	movs	r2, #0
 800fb74:	69f9      	ldr	r1, [r7, #28]
 800fb76:	47a0      	blx	r4
 800fb78:	4603      	mov	r3, r0
 800fb7a:	74fb      	strb	r3, [r7, #19]
 800fb7c:	e001      	b.n	800fb82 <tcp_input+0x6fe>
 800fb7e:	2300      	movs	r3, #0
 800fb80:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fb82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb86:	f113 0f0d 	cmn.w	r3, #13
 800fb8a:	d016      	beq.n	800fbba <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fb8c:	4b33      	ldr	r3, [pc, #204]	; (800fc5c <tcp_input+0x7d8>)
 800fb8e:	2200      	movs	r2, #0
 800fb90:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fb92:	69f8      	ldr	r0, [r7, #28]
 800fb94:	f000 f880 	bl	800fc98 <tcp_input_delayed_close>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d10f      	bne.n	800fbbe <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fb9e:	69f8      	ldr	r0, [r7, #28]
 800fba0:	f002 ff10 	bl	80129c4 <tcp_output>
 800fba4:	e00c      	b.n	800fbc0 <tcp_input+0x73c>
        goto aborted;
 800fba6:	bf00      	nop
 800fba8:	e00a      	b.n	800fbc0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fbaa:	bf00      	nop
 800fbac:	e008      	b.n	800fbc0 <tcp_input+0x73c>
              goto aborted;
 800fbae:	bf00      	nop
 800fbb0:	e006      	b.n	800fbc0 <tcp_input+0x73c>
          goto aborted;
 800fbb2:	bf00      	nop
 800fbb4:	e004      	b.n	800fbc0 <tcp_input+0x73c>
            goto aborted;
 800fbb6:	bf00      	nop
 800fbb8:	e002      	b.n	800fbc0 <tcp_input+0x73c>
              goto aborted;
 800fbba:	bf00      	nop
 800fbbc:	e000      	b.n	800fbc0 <tcp_input+0x73c>
          goto aborted;
 800fbbe:	bf00      	nop
    tcp_input_pcb = NULL;
 800fbc0:	4b26      	ldr	r3, [pc, #152]	; (800fc5c <tcp_input+0x7d8>)
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fbc6:	4b29      	ldr	r3, [pc, #164]	; (800fc6c <tcp_input+0x7e8>)
 800fbc8:	2200      	movs	r2, #0
 800fbca:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fbcc:	4b2b      	ldr	r3, [pc, #172]	; (800fc7c <tcp_input+0x7f8>)
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d03f      	beq.n	800fc54 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800fbd4:	4b29      	ldr	r3, [pc, #164]	; (800fc7c <tcp_input+0x7f8>)
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fd fb4d 	bl	800d278 <pbuf_free>
      inseg.p = NULL;
 800fbde:	4b27      	ldr	r3, [pc, #156]	; (800fc7c <tcp_input+0x7f8>)
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fbe4:	e036      	b.n	800fc54 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fbe6:	4b26      	ldr	r3, [pc, #152]	; (800fc80 <tcp_input+0x7fc>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	899b      	ldrh	r3, [r3, #12]
 800fbec:	b29b      	uxth	r3, r3
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7fb fe98 	bl	800b924 <lwip_htons>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	b2db      	uxtb	r3, r3
 800fbf8:	f003 0304 	and.w	r3, r3, #4
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d118      	bne.n	800fc32 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc00:	4b20      	ldr	r3, [pc, #128]	; (800fc84 <tcp_input+0x800>)
 800fc02:	6819      	ldr	r1, [r3, #0]
 800fc04:	4b20      	ldr	r3, [pc, #128]	; (800fc88 <tcp_input+0x804>)
 800fc06:	881b      	ldrh	r3, [r3, #0]
 800fc08:	461a      	mov	r2, r3
 800fc0a:	4b20      	ldr	r3, [pc, #128]	; (800fc8c <tcp_input+0x808>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc10:	4b1b      	ldr	r3, [pc, #108]	; (800fc80 <tcp_input+0x7fc>)
 800fc12:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc14:	885b      	ldrh	r3, [r3, #2]
 800fc16:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc18:	4a19      	ldr	r2, [pc, #100]	; (800fc80 <tcp_input+0x7fc>)
 800fc1a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc1c:	8812      	ldrh	r2, [r2, #0]
 800fc1e:	b292      	uxth	r2, r2
 800fc20:	9202      	str	r2, [sp, #8]
 800fc22:	9301      	str	r3, [sp, #4]
 800fc24:	4b1a      	ldr	r3, [pc, #104]	; (800fc90 <tcp_input+0x80c>)
 800fc26:	9300      	str	r3, [sp, #0]
 800fc28:	4b1a      	ldr	r3, [pc, #104]	; (800fc94 <tcp_input+0x810>)
 800fc2a:	4602      	mov	r2, r0
 800fc2c:	2000      	movs	r0, #0
 800fc2e:	f003 fc7d 	bl	801352c <tcp_rst>
    pbuf_free(p);
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f7fd fb20 	bl	800d278 <pbuf_free>
  return;
 800fc38:	e00c      	b.n	800fc54 <tcp_input+0x7d0>
    goto dropped;
 800fc3a:	bf00      	nop
 800fc3c:	e006      	b.n	800fc4c <tcp_input+0x7c8>
    goto dropped;
 800fc3e:	bf00      	nop
 800fc40:	e004      	b.n	800fc4c <tcp_input+0x7c8>
    goto dropped;
 800fc42:	bf00      	nop
 800fc44:	e002      	b.n	800fc4c <tcp_input+0x7c8>
      goto dropped;
 800fc46:	bf00      	nop
 800fc48:	e000      	b.n	800fc4c <tcp_input+0x7c8>
      goto dropped;
 800fc4a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f7fd fb13 	bl	800d278 <pbuf_free>
 800fc52:	e000      	b.n	800fc56 <tcp_input+0x7d2>
  return;
 800fc54:	bf00      	nop
}
 800fc56:	3724      	adds	r7, #36	; 0x24
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd90      	pop	{r4, r7, pc}
 800fc5c:	24007fac 	.word	0x24007fac
 800fc60:	24004b11 	.word	0x24004b11
 800fc64:	24007f98 	.word	0x24007f98
 800fc68:	24004b0c 	.word	0x24004b0c
 800fc6c:	24004b14 	.word	0x24004b14
 800fc70:	08019a40 	.word	0x08019a40
 800fc74:	08019bf4 	.word	0x08019bf4
 800fc78:	08019a8c 	.word	0x08019a8c
 800fc7c:	24004ae4 	.word	0x24004ae4
 800fc80:	24004af4 	.word	0x24004af4
 800fc84:	24004b08 	.word	0x24004b08
 800fc88:	24004b0e 	.word	0x24004b0e
 800fc8c:	24004b04 	.word	0x24004b04
 800fc90:	24004ee8 	.word	0x24004ee8
 800fc94:	24004eec 	.word	0x24004eec

0800fc98 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d106      	bne.n	800fcb4 <tcp_input_delayed_close+0x1c>
 800fca6:	4b17      	ldr	r3, [pc, #92]	; (800fd04 <tcp_input_delayed_close+0x6c>)
 800fca8:	f240 225a 	movw	r2, #602	; 0x25a
 800fcac:	4916      	ldr	r1, [pc, #88]	; (800fd08 <tcp_input_delayed_close+0x70>)
 800fcae:	4817      	ldr	r0, [pc, #92]	; (800fd0c <tcp_input_delayed_close+0x74>)
 800fcb0:	f007 f8b0 	bl	8016e14 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fcb4:	4b16      	ldr	r3, [pc, #88]	; (800fd10 <tcp_input_delayed_close+0x78>)
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	f003 0310 	and.w	r3, r3, #16
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d01c      	beq.n	800fcfa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	8b5b      	ldrh	r3, [r3, #26]
 800fcc4:	f003 0310 	and.w	r3, r3, #16
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d10d      	bne.n	800fce8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d008      	beq.n	800fce8 <tcp_input_delayed_close+0x50>
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcdc:	687a      	ldr	r2, [r7, #4]
 800fcde:	6912      	ldr	r2, [r2, #16]
 800fce0:	f06f 010e 	mvn.w	r1, #14
 800fce4:	4610      	mov	r0, r2
 800fce6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fce8:	6879      	ldr	r1, [r7, #4]
 800fcea:	480a      	ldr	r0, [pc, #40]	; (800fd14 <tcp_input_delayed_close+0x7c>)
 800fcec:	f7ff fa52 	bl	800f194 <tcp_pcb_remove>
    tcp_free(pcb);
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7fd fd6d 	bl	800d7d0 <tcp_free>
    return 1;
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	e000      	b.n	800fcfc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fcfa:	2300      	movs	r3, #0
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3708      	adds	r7, #8
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	08019a40 	.word	0x08019a40
 800fd08:	08019c10 	.word	0x08019c10
 800fd0c:	08019a8c 	.word	0x08019a8c
 800fd10:	24004b11 	.word	0x24004b11
 800fd14:	24007f98 	.word	0x24007f98

0800fd18 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fd18:	b590      	push	{r4, r7, lr}
 800fd1a:	b08b      	sub	sp, #44	; 0x2c
 800fd1c:	af04      	add	r7, sp, #16
 800fd1e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fd20:	4b6f      	ldr	r3, [pc, #444]	; (800fee0 <tcp_listen_input+0x1c8>)
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	f003 0304 	and.w	r3, r3, #4
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	f040 80d2 	bne.w	800fed2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d106      	bne.n	800fd42 <tcp_listen_input+0x2a>
 800fd34:	4b6b      	ldr	r3, [pc, #428]	; (800fee4 <tcp_listen_input+0x1cc>)
 800fd36:	f240 2281 	movw	r2, #641	; 0x281
 800fd3a:	496b      	ldr	r1, [pc, #428]	; (800fee8 <tcp_listen_input+0x1d0>)
 800fd3c:	486b      	ldr	r0, [pc, #428]	; (800feec <tcp_listen_input+0x1d4>)
 800fd3e:	f007 f869 	bl	8016e14 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fd42:	4b67      	ldr	r3, [pc, #412]	; (800fee0 <tcp_listen_input+0x1c8>)
 800fd44:	781b      	ldrb	r3, [r3, #0]
 800fd46:	f003 0310 	and.w	r3, r3, #16
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d019      	beq.n	800fd82 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd4e:	4b68      	ldr	r3, [pc, #416]	; (800fef0 <tcp_listen_input+0x1d8>)
 800fd50:	6819      	ldr	r1, [r3, #0]
 800fd52:	4b68      	ldr	r3, [pc, #416]	; (800fef4 <tcp_listen_input+0x1dc>)
 800fd54:	881b      	ldrh	r3, [r3, #0]
 800fd56:	461a      	mov	r2, r3
 800fd58:	4b67      	ldr	r3, [pc, #412]	; (800fef8 <tcp_listen_input+0x1e0>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd5e:	4b67      	ldr	r3, [pc, #412]	; (800fefc <tcp_listen_input+0x1e4>)
 800fd60:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd62:	885b      	ldrh	r3, [r3, #2]
 800fd64:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd66:	4a65      	ldr	r2, [pc, #404]	; (800fefc <tcp_listen_input+0x1e4>)
 800fd68:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd6a:	8812      	ldrh	r2, [r2, #0]
 800fd6c:	b292      	uxth	r2, r2
 800fd6e:	9202      	str	r2, [sp, #8]
 800fd70:	9301      	str	r3, [sp, #4]
 800fd72:	4b63      	ldr	r3, [pc, #396]	; (800ff00 <tcp_listen_input+0x1e8>)
 800fd74:	9300      	str	r3, [sp, #0]
 800fd76:	4b63      	ldr	r3, [pc, #396]	; (800ff04 <tcp_listen_input+0x1ec>)
 800fd78:	4602      	mov	r2, r0
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f003 fbd6 	bl	801352c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fd80:	e0a9      	b.n	800fed6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fd82:	4b57      	ldr	r3, [pc, #348]	; (800fee0 <tcp_listen_input+0x1c8>)
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	f003 0302 	and.w	r3, r3, #2
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	f000 80a3 	beq.w	800fed6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	7d5b      	ldrb	r3, [r3, #21]
 800fd94:	4618      	mov	r0, r3
 800fd96:	f7ff f85b 	bl	800ee50 <tcp_alloc>
 800fd9a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d111      	bne.n	800fdc6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	699b      	ldr	r3, [r3, #24]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d00a      	beq.n	800fdc0 <tcp_listen_input+0xa8>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	699b      	ldr	r3, [r3, #24]
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	6910      	ldr	r0, [r2, #16]
 800fdb2:	f04f 32ff 	mov.w	r2, #4294967295
 800fdb6:	2100      	movs	r1, #0
 800fdb8:	4798      	blx	r3
 800fdba:	4603      	mov	r3, r0
 800fdbc:	73bb      	strb	r3, [r7, #14]
      return;
 800fdbe:	e08b      	b.n	800fed8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fdc0:	23f0      	movs	r3, #240	; 0xf0
 800fdc2:	73bb      	strb	r3, [r7, #14]
      return;
 800fdc4:	e088      	b.n	800fed8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fdc6:	4b50      	ldr	r3, [pc, #320]	; (800ff08 <tcp_listen_input+0x1f0>)
 800fdc8:	695a      	ldr	r2, [r3, #20]
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fdce:	4b4e      	ldr	r3, [pc, #312]	; (800ff08 <tcp_listen_input+0x1f0>)
 800fdd0:	691a      	ldr	r2, [r3, #16]
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	8ada      	ldrh	r2, [r3, #22]
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fdde:	4b47      	ldr	r3, [pc, #284]	; (800fefc <tcp_listen_input+0x1e4>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	881b      	ldrh	r3, [r3, #0]
 800fde4:	b29a      	uxth	r2, r3
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	2203      	movs	r2, #3
 800fdee:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fdf0:	4b41      	ldr	r3, [pc, #260]	; (800fef8 <tcp_listen_input+0x1e0>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	1c5a      	adds	r2, r3, #1
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fe02:	6978      	ldr	r0, [r7, #20]
 800fe04:	f7ff fa5a 	bl	800f2bc <tcp_next_iss>
 800fe08:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	693a      	ldr	r2, [r7, #16]
 800fe0e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	693a      	ldr	r2, [r7, #16]
 800fe14:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	693a      	ldr	r2, [r7, #16]
 800fe1a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	693a      	ldr	r2, [r7, #16]
 800fe20:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fe22:	4b35      	ldr	r3, [pc, #212]	; (800fef8 <tcp_listen_input+0x1e0>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	1e5a      	subs	r2, r3, #1
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	691a      	ldr	r2, [r3, #16]
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	687a      	ldr	r2, [r7, #4]
 800fe38:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	7a5b      	ldrb	r3, [r3, #9]
 800fe3e:	f003 030c 	and.w	r3, r3, #12
 800fe42:	b2da      	uxtb	r2, r3
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	7a1a      	ldrb	r2, [r3, #8]
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fe50:	4b2e      	ldr	r3, [pc, #184]	; (800ff0c <tcp_listen_input+0x1f4>)
 800fe52:	681a      	ldr	r2, [r3, #0]
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	60da      	str	r2, [r3, #12]
 800fe58:	4a2c      	ldr	r2, [pc, #176]	; (800ff0c <tcp_listen_input+0x1f4>)
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	6013      	str	r3, [r2, #0]
 800fe5e:	f003 fd27 	bl	80138b0 <tcp_timer_needed>
 800fe62:	4b2b      	ldr	r3, [pc, #172]	; (800ff10 <tcp_listen_input+0x1f8>)
 800fe64:	2201      	movs	r2, #1
 800fe66:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fe68:	6978      	ldr	r0, [r7, #20]
 800fe6a:	f001 fd8d 	bl	8011988 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fe6e:	4b23      	ldr	r3, [pc, #140]	; (800fefc <tcp_listen_input+0x1e4>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	89db      	ldrh	r3, [r3, #14]
 800fe74:	b29a      	uxth	r2, r3
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	3304      	adds	r3, #4
 800fe90:	4618      	mov	r0, r3
 800fe92:	f005 fa87 	bl	80153a4 <ip4_route>
 800fe96:	4601      	mov	r1, r0
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	3304      	adds	r3, #4
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f7ff fa32 	bl	800f308 <tcp_eff_send_mss_netif>
 800fea4:	4603      	mov	r3, r0
 800fea6:	461a      	mov	r2, r3
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800feac:	2112      	movs	r1, #18
 800feae:	6978      	ldr	r0, [r7, #20]
 800feb0:	f002 fc9a 	bl	80127e8 <tcp_enqueue_flags>
 800feb4:	4603      	mov	r3, r0
 800feb6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800feb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d004      	beq.n	800feca <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fec0:	2100      	movs	r1, #0
 800fec2:	6978      	ldr	r0, [r7, #20]
 800fec4:	f7fd ff0a 	bl	800dcdc <tcp_abandon>
      return;
 800fec8:	e006      	b.n	800fed8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800feca:	6978      	ldr	r0, [r7, #20]
 800fecc:	f002 fd7a 	bl	80129c4 <tcp_output>
  return;
 800fed0:	e001      	b.n	800fed6 <tcp_listen_input+0x1be>
    return;
 800fed2:	bf00      	nop
 800fed4:	e000      	b.n	800fed8 <tcp_listen_input+0x1c0>
  return;
 800fed6:	bf00      	nop
}
 800fed8:	371c      	adds	r7, #28
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd90      	pop	{r4, r7, pc}
 800fede:	bf00      	nop
 800fee0:	24004b10 	.word	0x24004b10
 800fee4:	08019a40 	.word	0x08019a40
 800fee8:	08019c38 	.word	0x08019c38
 800feec:	08019a8c 	.word	0x08019a8c
 800fef0:	24004b08 	.word	0x24004b08
 800fef4:	24004b0e 	.word	0x24004b0e
 800fef8:	24004b04 	.word	0x24004b04
 800fefc:	24004af4 	.word	0x24004af4
 800ff00:	24004ee8 	.word	0x24004ee8
 800ff04:	24004eec 	.word	0x24004eec
 800ff08:	24004ed8 	.word	0x24004ed8
 800ff0c:	24007f98 	.word	0x24007f98
 800ff10:	24007f94 	.word	0x24007f94

0800ff14 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b086      	sub	sp, #24
 800ff18:	af04      	add	r7, sp, #16
 800ff1a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ff1c:	4b2f      	ldr	r3, [pc, #188]	; (800ffdc <tcp_timewait_input+0xc8>)
 800ff1e:	781b      	ldrb	r3, [r3, #0]
 800ff20:	f003 0304 	and.w	r3, r3, #4
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d153      	bne.n	800ffd0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d106      	bne.n	800ff3c <tcp_timewait_input+0x28>
 800ff2e:	4b2c      	ldr	r3, [pc, #176]	; (800ffe0 <tcp_timewait_input+0xcc>)
 800ff30:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ff34:	492b      	ldr	r1, [pc, #172]	; (800ffe4 <tcp_timewait_input+0xd0>)
 800ff36:	482c      	ldr	r0, [pc, #176]	; (800ffe8 <tcp_timewait_input+0xd4>)
 800ff38:	f006 ff6c 	bl	8016e14 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ff3c:	4b27      	ldr	r3, [pc, #156]	; (800ffdc <tcp_timewait_input+0xc8>)
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	f003 0302 	and.w	r3, r3, #2
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d02a      	beq.n	800ff9e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ff48:	4b28      	ldr	r3, [pc, #160]	; (800ffec <tcp_timewait_input+0xd8>)
 800ff4a:	681a      	ldr	r2, [r3, #0]
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff50:	1ad3      	subs	r3, r2, r3
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	db2d      	blt.n	800ffb2 <tcp_timewait_input+0x9e>
 800ff56:	4b25      	ldr	r3, [pc, #148]	; (800ffec <tcp_timewait_input+0xd8>)
 800ff58:	681a      	ldr	r2, [r3, #0]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff5e:	6879      	ldr	r1, [r7, #4]
 800ff60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff62:	440b      	add	r3, r1
 800ff64:	1ad3      	subs	r3, r2, r3
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	dc23      	bgt.n	800ffb2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff6a:	4b21      	ldr	r3, [pc, #132]	; (800fff0 <tcp_timewait_input+0xdc>)
 800ff6c:	6819      	ldr	r1, [r3, #0]
 800ff6e:	4b21      	ldr	r3, [pc, #132]	; (800fff4 <tcp_timewait_input+0xe0>)
 800ff70:	881b      	ldrh	r3, [r3, #0]
 800ff72:	461a      	mov	r2, r3
 800ff74:	4b1d      	ldr	r3, [pc, #116]	; (800ffec <tcp_timewait_input+0xd8>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff7a:	4b1f      	ldr	r3, [pc, #124]	; (800fff8 <tcp_timewait_input+0xe4>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff7e:	885b      	ldrh	r3, [r3, #2]
 800ff80:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff82:	4a1d      	ldr	r2, [pc, #116]	; (800fff8 <tcp_timewait_input+0xe4>)
 800ff84:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff86:	8812      	ldrh	r2, [r2, #0]
 800ff88:	b292      	uxth	r2, r2
 800ff8a:	9202      	str	r2, [sp, #8]
 800ff8c:	9301      	str	r3, [sp, #4]
 800ff8e:	4b1b      	ldr	r3, [pc, #108]	; (800fffc <tcp_timewait_input+0xe8>)
 800ff90:	9300      	str	r3, [sp, #0]
 800ff92:	4b1b      	ldr	r3, [pc, #108]	; (8010000 <tcp_timewait_input+0xec>)
 800ff94:	4602      	mov	r2, r0
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f003 fac8 	bl	801352c <tcp_rst>
      return;
 800ff9c:	e01b      	b.n	800ffd6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ff9e:	4b0f      	ldr	r3, [pc, #60]	; (800ffdc <tcp_timewait_input+0xc8>)
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	f003 0301 	and.w	r3, r3, #1
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d003      	beq.n	800ffb2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ffaa:	4b16      	ldr	r3, [pc, #88]	; (8010004 <tcp_timewait_input+0xf0>)
 800ffac:	681a      	ldr	r2, [r3, #0]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ffb2:	4b10      	ldr	r3, [pc, #64]	; (800fff4 <tcp_timewait_input+0xe0>)
 800ffb4:	881b      	ldrh	r3, [r3, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d00c      	beq.n	800ffd4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	8b5b      	ldrh	r3, [r3, #26]
 800ffbe:	f043 0302 	orr.w	r3, r3, #2
 800ffc2:	b29a      	uxth	r2, r3
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f002 fcfb 	bl	80129c4 <tcp_output>
  }
  return;
 800ffce:	e001      	b.n	800ffd4 <tcp_timewait_input+0xc0>
    return;
 800ffd0:	bf00      	nop
 800ffd2:	e000      	b.n	800ffd6 <tcp_timewait_input+0xc2>
  return;
 800ffd4:	bf00      	nop
}
 800ffd6:	3708      	adds	r7, #8
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}
 800ffdc:	24004b10 	.word	0x24004b10
 800ffe0:	08019a40 	.word	0x08019a40
 800ffe4:	08019c58 	.word	0x08019c58
 800ffe8:	08019a8c 	.word	0x08019a8c
 800ffec:	24004b04 	.word	0x24004b04
 800fff0:	24004b08 	.word	0x24004b08
 800fff4:	24004b0e 	.word	0x24004b0e
 800fff8:	24004af4 	.word	0x24004af4
 800fffc:	24004ee8 	.word	0x24004ee8
 8010000:	24004eec 	.word	0x24004eec
 8010004:	24007f9c 	.word	0x24007f9c

08010008 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010008:	b590      	push	{r4, r7, lr}
 801000a:	b08d      	sub	sp, #52	; 0x34
 801000c:	af04      	add	r7, sp, #16
 801000e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010010:	2300      	movs	r3, #0
 8010012:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010014:	2300      	movs	r3, #0
 8010016:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d106      	bne.n	801002c <tcp_process+0x24>
 801001e:	4ba5      	ldr	r3, [pc, #660]	; (80102b4 <tcp_process+0x2ac>)
 8010020:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010024:	49a4      	ldr	r1, [pc, #656]	; (80102b8 <tcp_process+0x2b0>)
 8010026:	48a5      	ldr	r0, [pc, #660]	; (80102bc <tcp_process+0x2b4>)
 8010028:	f006 fef4 	bl	8016e14 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801002c:	4ba4      	ldr	r3, [pc, #656]	; (80102c0 <tcp_process+0x2b8>)
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	f003 0304 	and.w	r3, r3, #4
 8010034:	2b00      	cmp	r3, #0
 8010036:	d04e      	beq.n	80100d6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	7d1b      	ldrb	r3, [r3, #20]
 801003c:	2b02      	cmp	r3, #2
 801003e:	d108      	bne.n	8010052 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010044:	4b9f      	ldr	r3, [pc, #636]	; (80102c4 <tcp_process+0x2bc>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	429a      	cmp	r2, r3
 801004a:	d123      	bne.n	8010094 <tcp_process+0x8c>
        acceptable = 1;
 801004c:	2301      	movs	r3, #1
 801004e:	76fb      	strb	r3, [r7, #27]
 8010050:	e020      	b.n	8010094 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010056:	4b9c      	ldr	r3, [pc, #624]	; (80102c8 <tcp_process+0x2c0>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	429a      	cmp	r2, r3
 801005c:	d102      	bne.n	8010064 <tcp_process+0x5c>
        acceptable = 1;
 801005e:	2301      	movs	r3, #1
 8010060:	76fb      	strb	r3, [r7, #27]
 8010062:	e017      	b.n	8010094 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010064:	4b98      	ldr	r3, [pc, #608]	; (80102c8 <tcp_process+0x2c0>)
 8010066:	681a      	ldr	r2, [r3, #0]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801006c:	1ad3      	subs	r3, r2, r3
 801006e:	2b00      	cmp	r3, #0
 8010070:	db10      	blt.n	8010094 <tcp_process+0x8c>
 8010072:	4b95      	ldr	r3, [pc, #596]	; (80102c8 <tcp_process+0x2c0>)
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801007a:	6879      	ldr	r1, [r7, #4]
 801007c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801007e:	440b      	add	r3, r1
 8010080:	1ad3      	subs	r3, r2, r3
 8010082:	2b00      	cmp	r3, #0
 8010084:	dc06      	bgt.n	8010094 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	8b5b      	ldrh	r3, [r3, #26]
 801008a:	f043 0302 	orr.w	r3, r3, #2
 801008e:	b29a      	uxth	r2, r3
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010094:	7efb      	ldrb	r3, [r7, #27]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d01b      	beq.n	80100d2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	7d1b      	ldrb	r3, [r3, #20]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d106      	bne.n	80100b0 <tcp_process+0xa8>
 80100a2:	4b84      	ldr	r3, [pc, #528]	; (80102b4 <tcp_process+0x2ac>)
 80100a4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80100a8:	4988      	ldr	r1, [pc, #544]	; (80102cc <tcp_process+0x2c4>)
 80100aa:	4884      	ldr	r0, [pc, #528]	; (80102bc <tcp_process+0x2b4>)
 80100ac:	f006 feb2 	bl	8016e14 <iprintf>
      recv_flags |= TF_RESET;
 80100b0:	4b87      	ldr	r3, [pc, #540]	; (80102d0 <tcp_process+0x2c8>)
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	f043 0308 	orr.w	r3, r3, #8
 80100b8:	b2da      	uxtb	r2, r3
 80100ba:	4b85      	ldr	r3, [pc, #532]	; (80102d0 <tcp_process+0x2c8>)
 80100bc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	8b5b      	ldrh	r3, [r3, #26]
 80100c2:	f023 0301 	bic.w	r3, r3, #1
 80100c6:	b29a      	uxth	r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80100cc:	f06f 030d 	mvn.w	r3, #13
 80100d0:	e37a      	b.n	80107c8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80100d2:	2300      	movs	r3, #0
 80100d4:	e378      	b.n	80107c8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80100d6:	4b7a      	ldr	r3, [pc, #488]	; (80102c0 <tcp_process+0x2b8>)
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	f003 0302 	and.w	r3, r3, #2
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d010      	beq.n	8010104 <tcp_process+0xfc>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	7d1b      	ldrb	r3, [r3, #20]
 80100e6:	2b02      	cmp	r3, #2
 80100e8:	d00c      	beq.n	8010104 <tcp_process+0xfc>
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	7d1b      	ldrb	r3, [r3, #20]
 80100ee:	2b03      	cmp	r3, #3
 80100f0:	d008      	beq.n	8010104 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	8b5b      	ldrh	r3, [r3, #26]
 80100f6:	f043 0302 	orr.w	r3, r3, #2
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010100:	2300      	movs	r3, #0
 8010102:	e361      	b.n	80107c8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	8b5b      	ldrh	r3, [r3, #26]
 8010108:	f003 0310 	and.w	r3, r3, #16
 801010c:	2b00      	cmp	r3, #0
 801010e:	d103      	bne.n	8010118 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010110:	4b70      	ldr	r3, [pc, #448]	; (80102d4 <tcp_process+0x2cc>)
 8010112:	681a      	ldr	r2, [r3, #0]
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2200      	movs	r2, #0
 801011c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2200      	movs	r2, #0
 8010124:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f001 fc2d 	bl	8011988 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	7d1b      	ldrb	r3, [r3, #20]
 8010132:	3b02      	subs	r3, #2
 8010134:	2b07      	cmp	r3, #7
 8010136:	f200 8337 	bhi.w	80107a8 <tcp_process+0x7a0>
 801013a:	a201      	add	r2, pc, #4	; (adr r2, 8010140 <tcp_process+0x138>)
 801013c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010140:	08010161 	.word	0x08010161
 8010144:	08010391 	.word	0x08010391
 8010148:	08010509 	.word	0x08010509
 801014c:	08010533 	.word	0x08010533
 8010150:	08010657 	.word	0x08010657
 8010154:	08010509 	.word	0x08010509
 8010158:	080106e3 	.word	0x080106e3
 801015c:	08010773 	.word	0x08010773
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010160:	4b57      	ldr	r3, [pc, #348]	; (80102c0 <tcp_process+0x2b8>)
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	f003 0310 	and.w	r3, r3, #16
 8010168:	2b00      	cmp	r3, #0
 801016a:	f000 80e4 	beq.w	8010336 <tcp_process+0x32e>
 801016e:	4b54      	ldr	r3, [pc, #336]	; (80102c0 <tcp_process+0x2b8>)
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	f003 0302 	and.w	r3, r3, #2
 8010176:	2b00      	cmp	r3, #0
 8010178:	f000 80dd 	beq.w	8010336 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010180:	1c5a      	adds	r2, r3, #1
 8010182:	4b50      	ldr	r3, [pc, #320]	; (80102c4 <tcp_process+0x2bc>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	429a      	cmp	r2, r3
 8010188:	f040 80d5 	bne.w	8010336 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801018c:	4b4e      	ldr	r3, [pc, #312]	; (80102c8 <tcp_process+0x2c0>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	1c5a      	adds	r2, r3, #1
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801019e:	4b49      	ldr	r3, [pc, #292]	; (80102c4 <tcp_process+0x2bc>)
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80101a6:	4b4c      	ldr	r3, [pc, #304]	; (80102d8 <tcp_process+0x2d0>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	89db      	ldrh	r3, [r3, #14]
 80101ac:	b29a      	uxth	r2, r3
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80101c0:	4b41      	ldr	r3, [pc, #260]	; (80102c8 <tcp_process+0x2c0>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	1e5a      	subs	r2, r3, #1
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2204      	movs	r2, #4
 80101ce:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	3304      	adds	r3, #4
 80101d8:	4618      	mov	r0, r3
 80101da:	f005 f8e3 	bl	80153a4 <ip4_route>
 80101de:	4601      	mov	r1, r0
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	3304      	adds	r3, #4
 80101e4:	461a      	mov	r2, r3
 80101e6:	4620      	mov	r0, r4
 80101e8:	f7ff f88e 	bl	800f308 <tcp_eff_send_mss_netif>
 80101ec:	4603      	mov	r3, r0
 80101ee:	461a      	mov	r2, r3
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101f8:	009a      	lsls	r2, r3, #2
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101fe:	005b      	lsls	r3, r3, #1
 8010200:	f241 111c 	movw	r1, #4380	; 0x111c
 8010204:	428b      	cmp	r3, r1
 8010206:	bf38      	it	cc
 8010208:	460b      	movcc	r3, r1
 801020a:	429a      	cmp	r2, r3
 801020c:	d204      	bcs.n	8010218 <tcp_process+0x210>
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010212:	009b      	lsls	r3, r3, #2
 8010214:	b29b      	uxth	r3, r3
 8010216:	e00d      	b.n	8010234 <tcp_process+0x22c>
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801021c:	005b      	lsls	r3, r3, #1
 801021e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010222:	4293      	cmp	r3, r2
 8010224:	d904      	bls.n	8010230 <tcp_process+0x228>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801022a:	005b      	lsls	r3, r3, #1
 801022c:	b29b      	uxth	r3, r3
 801022e:	e001      	b.n	8010234 <tcp_process+0x22c>
 8010230:	f241 131c 	movw	r3, #4380	; 0x111c
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010240:	2b00      	cmp	r3, #0
 8010242:	d106      	bne.n	8010252 <tcp_process+0x24a>
 8010244:	4b1b      	ldr	r3, [pc, #108]	; (80102b4 <tcp_process+0x2ac>)
 8010246:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801024a:	4924      	ldr	r1, [pc, #144]	; (80102dc <tcp_process+0x2d4>)
 801024c:	481b      	ldr	r0, [pc, #108]	; (80102bc <tcp_process+0x2b4>)
 801024e:	f006 fde1 	bl	8016e14 <iprintf>
        --pcb->snd_queuelen;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010258:	3b01      	subs	r3, #1
 801025a:	b29a      	uxth	r2, r3
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010266:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010268:	69fb      	ldr	r3, [r7, #28]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d111      	bne.n	8010292 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010272:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010274:	69fb      	ldr	r3, [r7, #28]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d106      	bne.n	8010288 <tcp_process+0x280>
 801027a:	4b0e      	ldr	r3, [pc, #56]	; (80102b4 <tcp_process+0x2ac>)
 801027c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010280:	4917      	ldr	r1, [pc, #92]	; (80102e0 <tcp_process+0x2d8>)
 8010282:	480e      	ldr	r0, [pc, #56]	; (80102bc <tcp_process+0x2b4>)
 8010284:	f006 fdc6 	bl	8016e14 <iprintf>
          pcb->unsent = rseg->next;
 8010288:	69fb      	ldr	r3, [r7, #28]
 801028a:	681a      	ldr	r2, [r3, #0]
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	66da      	str	r2, [r3, #108]	; 0x6c
 8010290:	e003      	b.n	801029a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010292:	69fb      	ldr	r3, [r7, #28]
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801029a:	69f8      	ldr	r0, [r7, #28]
 801029c:	f7fe fc6f 	bl	800eb7e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d11d      	bne.n	80102e4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102ae:	861a      	strh	r2, [r3, #48]	; 0x30
 80102b0:	e01f      	b.n	80102f2 <tcp_process+0x2ea>
 80102b2:	bf00      	nop
 80102b4:	08019a40 	.word	0x08019a40
 80102b8:	08019c78 	.word	0x08019c78
 80102bc:	08019a8c 	.word	0x08019a8c
 80102c0:	24004b10 	.word	0x24004b10
 80102c4:	24004b08 	.word	0x24004b08
 80102c8:	24004b04 	.word	0x24004b04
 80102cc:	08019c94 	.word	0x08019c94
 80102d0:	24004b11 	.word	0x24004b11
 80102d4:	24007f9c 	.word	0x24007f9c
 80102d8:	24004af4 	.word	0x24004af4
 80102dc:	08019cb4 	.word	0x08019cb4
 80102e0:	08019ccc 	.word	0x08019ccc
        } else {
          pcb->rtime = 0;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2200      	movs	r2, #0
 80102e8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2200      	movs	r2, #0
 80102ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d00a      	beq.n	8010312 <tcp_process+0x30a>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010302:	687a      	ldr	r2, [r7, #4]
 8010304:	6910      	ldr	r0, [r2, #16]
 8010306:	2200      	movs	r2, #0
 8010308:	6879      	ldr	r1, [r7, #4]
 801030a:	4798      	blx	r3
 801030c:	4603      	mov	r3, r0
 801030e:	76bb      	strb	r3, [r7, #26]
 8010310:	e001      	b.n	8010316 <tcp_process+0x30e>
 8010312:	2300      	movs	r3, #0
 8010314:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010316:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801031a:	f113 0f0d 	cmn.w	r3, #13
 801031e:	d102      	bne.n	8010326 <tcp_process+0x31e>
          return ERR_ABRT;
 8010320:	f06f 030c 	mvn.w	r3, #12
 8010324:	e250      	b.n	80107c8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	8b5b      	ldrh	r3, [r3, #26]
 801032a:	f043 0302 	orr.w	r3, r3, #2
 801032e:	b29a      	uxth	r2, r3
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010334:	e23a      	b.n	80107ac <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010336:	4b9d      	ldr	r3, [pc, #628]	; (80105ac <tcp_process+0x5a4>)
 8010338:	781b      	ldrb	r3, [r3, #0]
 801033a:	f003 0310 	and.w	r3, r3, #16
 801033e:	2b00      	cmp	r3, #0
 8010340:	f000 8234 	beq.w	80107ac <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010344:	4b9a      	ldr	r3, [pc, #616]	; (80105b0 <tcp_process+0x5a8>)
 8010346:	6819      	ldr	r1, [r3, #0]
 8010348:	4b9a      	ldr	r3, [pc, #616]	; (80105b4 <tcp_process+0x5ac>)
 801034a:	881b      	ldrh	r3, [r3, #0]
 801034c:	461a      	mov	r2, r3
 801034e:	4b9a      	ldr	r3, [pc, #616]	; (80105b8 <tcp_process+0x5b0>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010354:	4b99      	ldr	r3, [pc, #612]	; (80105bc <tcp_process+0x5b4>)
 8010356:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010358:	885b      	ldrh	r3, [r3, #2]
 801035a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801035c:	4a97      	ldr	r2, [pc, #604]	; (80105bc <tcp_process+0x5b4>)
 801035e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010360:	8812      	ldrh	r2, [r2, #0]
 8010362:	b292      	uxth	r2, r2
 8010364:	9202      	str	r2, [sp, #8]
 8010366:	9301      	str	r3, [sp, #4]
 8010368:	4b95      	ldr	r3, [pc, #596]	; (80105c0 <tcp_process+0x5b8>)
 801036a:	9300      	str	r3, [sp, #0]
 801036c:	4b95      	ldr	r3, [pc, #596]	; (80105c4 <tcp_process+0x5bc>)
 801036e:	4602      	mov	r2, r0
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f003 f8db 	bl	801352c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801037c:	2b05      	cmp	r3, #5
 801037e:	f200 8215 	bhi.w	80107ac <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2200      	movs	r2, #0
 8010386:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f002 fea5 	bl	80130d8 <tcp_rexmit_rto>
      break;
 801038e:	e20d      	b.n	80107ac <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010390:	4b86      	ldr	r3, [pc, #536]	; (80105ac <tcp_process+0x5a4>)
 8010392:	781b      	ldrb	r3, [r3, #0]
 8010394:	f003 0310 	and.w	r3, r3, #16
 8010398:	2b00      	cmp	r3, #0
 801039a:	f000 80a1 	beq.w	80104e0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801039e:	4b84      	ldr	r3, [pc, #528]	; (80105b0 <tcp_process+0x5a8>)
 80103a0:	681a      	ldr	r2, [r3, #0]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103a6:	1ad3      	subs	r3, r2, r3
 80103a8:	3b01      	subs	r3, #1
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	db7e      	blt.n	80104ac <tcp_process+0x4a4>
 80103ae:	4b80      	ldr	r3, [pc, #512]	; (80105b0 <tcp_process+0x5a8>)
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103b6:	1ad3      	subs	r3, r2, r3
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	dc77      	bgt.n	80104ac <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2204      	movs	r2, #4
 80103c0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d102      	bne.n	80103d0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80103ca:	23fa      	movs	r3, #250	; 0xfa
 80103cc:	76bb      	strb	r3, [r7, #26]
 80103ce:	e01d      	b.n	801040c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103d4:	699b      	ldr	r3, [r3, #24]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d106      	bne.n	80103e8 <tcp_process+0x3e0>
 80103da:	4b7b      	ldr	r3, [pc, #492]	; (80105c8 <tcp_process+0x5c0>)
 80103dc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80103e0:	497a      	ldr	r1, [pc, #488]	; (80105cc <tcp_process+0x5c4>)
 80103e2:	487b      	ldr	r0, [pc, #492]	; (80105d0 <tcp_process+0x5c8>)
 80103e4:	f006 fd16 	bl	8016e14 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103ec:	699b      	ldr	r3, [r3, #24]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d00a      	beq.n	8010408 <tcp_process+0x400>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103f6:	699b      	ldr	r3, [r3, #24]
 80103f8:	687a      	ldr	r2, [r7, #4]
 80103fa:	6910      	ldr	r0, [r2, #16]
 80103fc:	2200      	movs	r2, #0
 80103fe:	6879      	ldr	r1, [r7, #4]
 8010400:	4798      	blx	r3
 8010402:	4603      	mov	r3, r0
 8010404:	76bb      	strb	r3, [r7, #26]
 8010406:	e001      	b.n	801040c <tcp_process+0x404>
 8010408:	23f0      	movs	r3, #240	; 0xf0
 801040a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801040c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00a      	beq.n	801042a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010414:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010418:	f113 0f0d 	cmn.w	r3, #13
 801041c:	d002      	beq.n	8010424 <tcp_process+0x41c>
              tcp_abort(pcb);
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f7fd fd1a 	bl	800de58 <tcp_abort>
            }
            return ERR_ABRT;
 8010424:	f06f 030c 	mvn.w	r3, #12
 8010428:	e1ce      	b.n	80107c8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 fae0 	bl	80109f0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010430:	4b68      	ldr	r3, [pc, #416]	; (80105d4 <tcp_process+0x5cc>)
 8010432:	881b      	ldrh	r3, [r3, #0]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d005      	beq.n	8010444 <tcp_process+0x43c>
            recv_acked--;
 8010438:	4b66      	ldr	r3, [pc, #408]	; (80105d4 <tcp_process+0x5cc>)
 801043a:	881b      	ldrh	r3, [r3, #0]
 801043c:	3b01      	subs	r3, #1
 801043e:	b29a      	uxth	r2, r3
 8010440:	4b64      	ldr	r3, [pc, #400]	; (80105d4 <tcp_process+0x5cc>)
 8010442:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010448:	009a      	lsls	r2, r3, #2
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801044e:	005b      	lsls	r3, r3, #1
 8010450:	f241 111c 	movw	r1, #4380	; 0x111c
 8010454:	428b      	cmp	r3, r1
 8010456:	bf38      	it	cc
 8010458:	460b      	movcc	r3, r1
 801045a:	429a      	cmp	r2, r3
 801045c:	d204      	bcs.n	8010468 <tcp_process+0x460>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010462:	009b      	lsls	r3, r3, #2
 8010464:	b29b      	uxth	r3, r3
 8010466:	e00d      	b.n	8010484 <tcp_process+0x47c>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801046c:	005b      	lsls	r3, r3, #1
 801046e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010472:	4293      	cmp	r3, r2
 8010474:	d904      	bls.n	8010480 <tcp_process+0x478>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801047a:	005b      	lsls	r3, r3, #1
 801047c:	b29b      	uxth	r3, r3
 801047e:	e001      	b.n	8010484 <tcp_process+0x47c>
 8010480:	f241 131c 	movw	r3, #4380	; 0x111c
 8010484:	687a      	ldr	r2, [r7, #4]
 8010486:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801048a:	4b53      	ldr	r3, [pc, #332]	; (80105d8 <tcp_process+0x5d0>)
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	f003 0320 	and.w	r3, r3, #32
 8010492:	2b00      	cmp	r3, #0
 8010494:	d037      	beq.n	8010506 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	8b5b      	ldrh	r3, [r3, #26]
 801049a:	f043 0302 	orr.w	r3, r3, #2
 801049e:	b29a      	uxth	r2, r3
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2207      	movs	r2, #7
 80104a8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80104aa:	e02c      	b.n	8010506 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104ac:	4b40      	ldr	r3, [pc, #256]	; (80105b0 <tcp_process+0x5a8>)
 80104ae:	6819      	ldr	r1, [r3, #0]
 80104b0:	4b40      	ldr	r3, [pc, #256]	; (80105b4 <tcp_process+0x5ac>)
 80104b2:	881b      	ldrh	r3, [r3, #0]
 80104b4:	461a      	mov	r2, r3
 80104b6:	4b40      	ldr	r3, [pc, #256]	; (80105b8 <tcp_process+0x5b0>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104bc:	4b3f      	ldr	r3, [pc, #252]	; (80105bc <tcp_process+0x5b4>)
 80104be:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104c0:	885b      	ldrh	r3, [r3, #2]
 80104c2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104c4:	4a3d      	ldr	r2, [pc, #244]	; (80105bc <tcp_process+0x5b4>)
 80104c6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104c8:	8812      	ldrh	r2, [r2, #0]
 80104ca:	b292      	uxth	r2, r2
 80104cc:	9202      	str	r2, [sp, #8]
 80104ce:	9301      	str	r3, [sp, #4]
 80104d0:	4b3b      	ldr	r3, [pc, #236]	; (80105c0 <tcp_process+0x5b8>)
 80104d2:	9300      	str	r3, [sp, #0]
 80104d4:	4b3b      	ldr	r3, [pc, #236]	; (80105c4 <tcp_process+0x5bc>)
 80104d6:	4602      	mov	r2, r0
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f003 f827 	bl	801352c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80104de:	e167      	b.n	80107b0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80104e0:	4b32      	ldr	r3, [pc, #200]	; (80105ac <tcp_process+0x5a4>)
 80104e2:	781b      	ldrb	r3, [r3, #0]
 80104e4:	f003 0302 	and.w	r3, r3, #2
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	f000 8161 	beq.w	80107b0 <tcp_process+0x7a8>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104f2:	1e5a      	subs	r2, r3, #1
 80104f4:	4b30      	ldr	r3, [pc, #192]	; (80105b8 <tcp_process+0x5b0>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	f040 8159 	bne.w	80107b0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f002 fe0c 	bl	801311c <tcp_rexmit>
      break;
 8010504:	e154      	b.n	80107b0 <tcp_process+0x7a8>
 8010506:	e153      	b.n	80107b0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f000 fa71 	bl	80109f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801050e:	4b32      	ldr	r3, [pc, #200]	; (80105d8 <tcp_process+0x5d0>)
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	f003 0320 	and.w	r3, r3, #32
 8010516:	2b00      	cmp	r3, #0
 8010518:	f000 814c 	beq.w	80107b4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	8b5b      	ldrh	r3, [r3, #26]
 8010520:	f043 0302 	orr.w	r3, r3, #2
 8010524:	b29a      	uxth	r2, r3
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2207      	movs	r2, #7
 801052e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010530:	e140      	b.n	80107b4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f000 fa5c 	bl	80109f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010538:	4b27      	ldr	r3, [pc, #156]	; (80105d8 <tcp_process+0x5d0>)
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	f003 0320 	and.w	r3, r3, #32
 8010540:	2b00      	cmp	r3, #0
 8010542:	d071      	beq.n	8010628 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010544:	4b19      	ldr	r3, [pc, #100]	; (80105ac <tcp_process+0x5a4>)
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	f003 0310 	and.w	r3, r3, #16
 801054c:	2b00      	cmp	r3, #0
 801054e:	d060      	beq.n	8010612 <tcp_process+0x60a>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010554:	4b16      	ldr	r3, [pc, #88]	; (80105b0 <tcp_process+0x5a8>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	429a      	cmp	r2, r3
 801055a:	d15a      	bne.n	8010612 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010560:	2b00      	cmp	r3, #0
 8010562:	d156      	bne.n	8010612 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	8b5b      	ldrh	r3, [r3, #26]
 8010568:	f043 0302 	orr.w	r3, r3, #2
 801056c:	b29a      	uxth	r2, r3
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f7fe fdbe 	bl	800f0f4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010578:	4b18      	ldr	r3, [pc, #96]	; (80105dc <tcp_process+0x5d4>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	687a      	ldr	r2, [r7, #4]
 801057e:	429a      	cmp	r2, r3
 8010580:	d105      	bne.n	801058e <tcp_process+0x586>
 8010582:	4b16      	ldr	r3, [pc, #88]	; (80105dc <tcp_process+0x5d4>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	68db      	ldr	r3, [r3, #12]
 8010588:	4a14      	ldr	r2, [pc, #80]	; (80105dc <tcp_process+0x5d4>)
 801058a:	6013      	str	r3, [r2, #0]
 801058c:	e02e      	b.n	80105ec <tcp_process+0x5e4>
 801058e:	4b13      	ldr	r3, [pc, #76]	; (80105dc <tcp_process+0x5d4>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	617b      	str	r3, [r7, #20]
 8010594:	e027      	b.n	80105e6 <tcp_process+0x5de>
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	68db      	ldr	r3, [r3, #12]
 801059a:	687a      	ldr	r2, [r7, #4]
 801059c:	429a      	cmp	r2, r3
 801059e:	d11f      	bne.n	80105e0 <tcp_process+0x5d8>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	68da      	ldr	r2, [r3, #12]
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	60da      	str	r2, [r3, #12]
 80105a8:	e020      	b.n	80105ec <tcp_process+0x5e4>
 80105aa:	bf00      	nop
 80105ac:	24004b10 	.word	0x24004b10
 80105b0:	24004b08 	.word	0x24004b08
 80105b4:	24004b0e 	.word	0x24004b0e
 80105b8:	24004b04 	.word	0x24004b04
 80105bc:	24004af4 	.word	0x24004af4
 80105c0:	24004ee8 	.word	0x24004ee8
 80105c4:	24004eec 	.word	0x24004eec
 80105c8:	08019a40 	.word	0x08019a40
 80105cc:	08019ce0 	.word	0x08019ce0
 80105d0:	08019a8c 	.word	0x08019a8c
 80105d4:	24004b0c 	.word	0x24004b0c
 80105d8:	24004b11 	.word	0x24004b11
 80105dc:	24007f98 	.word	0x24007f98
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	68db      	ldr	r3, [r3, #12]
 80105e4:	617b      	str	r3, [r7, #20]
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d1d4      	bne.n	8010596 <tcp_process+0x58e>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2200      	movs	r2, #0
 80105f0:	60da      	str	r2, [r3, #12]
 80105f2:	4b77      	ldr	r3, [pc, #476]	; (80107d0 <tcp_process+0x7c8>)
 80105f4:	2201      	movs	r2, #1
 80105f6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	220a      	movs	r2, #10
 80105fc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80105fe:	4b75      	ldr	r3, [pc, #468]	; (80107d4 <tcp_process+0x7cc>)
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	60da      	str	r2, [r3, #12]
 8010606:	4a73      	ldr	r2, [pc, #460]	; (80107d4 <tcp_process+0x7cc>)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6013      	str	r3, [r2, #0]
 801060c:	f003 f950 	bl	80138b0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010610:	e0d2      	b.n	80107b8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	8b5b      	ldrh	r3, [r3, #26]
 8010616:	f043 0302 	orr.w	r3, r3, #2
 801061a:	b29a      	uxth	r2, r3
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2208      	movs	r2, #8
 8010624:	751a      	strb	r2, [r3, #20]
      break;
 8010626:	e0c7      	b.n	80107b8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010628:	4b6b      	ldr	r3, [pc, #428]	; (80107d8 <tcp_process+0x7d0>)
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	f003 0310 	and.w	r3, r3, #16
 8010630:	2b00      	cmp	r3, #0
 8010632:	f000 80c1 	beq.w	80107b8 <tcp_process+0x7b0>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801063a:	4b68      	ldr	r3, [pc, #416]	; (80107dc <tcp_process+0x7d4>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	429a      	cmp	r2, r3
 8010640:	f040 80ba 	bne.w	80107b8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010648:	2b00      	cmp	r3, #0
 801064a:	f040 80b5 	bne.w	80107b8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2206      	movs	r2, #6
 8010652:	751a      	strb	r2, [r3, #20]
      break;
 8010654:	e0b0      	b.n	80107b8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f000 f9ca 	bl	80109f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801065c:	4b60      	ldr	r3, [pc, #384]	; (80107e0 <tcp_process+0x7d8>)
 801065e:	781b      	ldrb	r3, [r3, #0]
 8010660:	f003 0320 	and.w	r3, r3, #32
 8010664:	2b00      	cmp	r3, #0
 8010666:	f000 80a9 	beq.w	80107bc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	8b5b      	ldrh	r3, [r3, #26]
 801066e:	f043 0302 	orr.w	r3, r3, #2
 8010672:	b29a      	uxth	r2, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f7fe fd3b 	bl	800f0f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801067e:	4b59      	ldr	r3, [pc, #356]	; (80107e4 <tcp_process+0x7dc>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	687a      	ldr	r2, [r7, #4]
 8010684:	429a      	cmp	r2, r3
 8010686:	d105      	bne.n	8010694 <tcp_process+0x68c>
 8010688:	4b56      	ldr	r3, [pc, #344]	; (80107e4 <tcp_process+0x7dc>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	68db      	ldr	r3, [r3, #12]
 801068e:	4a55      	ldr	r2, [pc, #340]	; (80107e4 <tcp_process+0x7dc>)
 8010690:	6013      	str	r3, [r2, #0]
 8010692:	e013      	b.n	80106bc <tcp_process+0x6b4>
 8010694:	4b53      	ldr	r3, [pc, #332]	; (80107e4 <tcp_process+0x7dc>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	613b      	str	r3, [r7, #16]
 801069a:	e00c      	b.n	80106b6 <tcp_process+0x6ae>
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	68db      	ldr	r3, [r3, #12]
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d104      	bne.n	80106b0 <tcp_process+0x6a8>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	68da      	ldr	r2, [r3, #12]
 80106aa:	693b      	ldr	r3, [r7, #16]
 80106ac:	60da      	str	r2, [r3, #12]
 80106ae:	e005      	b.n	80106bc <tcp_process+0x6b4>
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	68db      	ldr	r3, [r3, #12]
 80106b4:	613b      	str	r3, [r7, #16]
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d1ef      	bne.n	801069c <tcp_process+0x694>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2200      	movs	r2, #0
 80106c0:	60da      	str	r2, [r3, #12]
 80106c2:	4b43      	ldr	r3, [pc, #268]	; (80107d0 <tcp_process+0x7c8>)
 80106c4:	2201      	movs	r2, #1
 80106c6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	220a      	movs	r2, #10
 80106cc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80106ce:	4b41      	ldr	r3, [pc, #260]	; (80107d4 <tcp_process+0x7cc>)
 80106d0:	681a      	ldr	r2, [r3, #0]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	60da      	str	r2, [r3, #12]
 80106d6:	4a3f      	ldr	r2, [pc, #252]	; (80107d4 <tcp_process+0x7cc>)
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6013      	str	r3, [r2, #0]
 80106dc:	f003 f8e8 	bl	80138b0 <tcp_timer_needed>
      }
      break;
 80106e0:	e06c      	b.n	80107bc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f000 f984 	bl	80109f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80106e8:	4b3b      	ldr	r3, [pc, #236]	; (80107d8 <tcp_process+0x7d0>)
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	f003 0310 	and.w	r3, r3, #16
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d065      	beq.n	80107c0 <tcp_process+0x7b8>
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106f8:	4b38      	ldr	r3, [pc, #224]	; (80107dc <tcp_process+0x7d4>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	429a      	cmp	r2, r3
 80106fe:	d15f      	bne.n	80107c0 <tcp_process+0x7b8>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010704:	2b00      	cmp	r3, #0
 8010706:	d15b      	bne.n	80107c0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f7fe fcf3 	bl	800f0f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801070e:	4b35      	ldr	r3, [pc, #212]	; (80107e4 <tcp_process+0x7dc>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	687a      	ldr	r2, [r7, #4]
 8010714:	429a      	cmp	r2, r3
 8010716:	d105      	bne.n	8010724 <tcp_process+0x71c>
 8010718:	4b32      	ldr	r3, [pc, #200]	; (80107e4 <tcp_process+0x7dc>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	68db      	ldr	r3, [r3, #12]
 801071e:	4a31      	ldr	r2, [pc, #196]	; (80107e4 <tcp_process+0x7dc>)
 8010720:	6013      	str	r3, [r2, #0]
 8010722:	e013      	b.n	801074c <tcp_process+0x744>
 8010724:	4b2f      	ldr	r3, [pc, #188]	; (80107e4 <tcp_process+0x7dc>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	60fb      	str	r3, [r7, #12]
 801072a:	e00c      	b.n	8010746 <tcp_process+0x73e>
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	68db      	ldr	r3, [r3, #12]
 8010730:	687a      	ldr	r2, [r7, #4]
 8010732:	429a      	cmp	r2, r3
 8010734:	d104      	bne.n	8010740 <tcp_process+0x738>
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	68da      	ldr	r2, [r3, #12]
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	60da      	str	r2, [r3, #12]
 801073e:	e005      	b.n	801074c <tcp_process+0x744>
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	68db      	ldr	r3, [r3, #12]
 8010744:	60fb      	str	r3, [r7, #12]
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d1ef      	bne.n	801072c <tcp_process+0x724>
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2200      	movs	r2, #0
 8010750:	60da      	str	r2, [r3, #12]
 8010752:	4b1f      	ldr	r3, [pc, #124]	; (80107d0 <tcp_process+0x7c8>)
 8010754:	2201      	movs	r2, #1
 8010756:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	220a      	movs	r2, #10
 801075c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801075e:	4b1d      	ldr	r3, [pc, #116]	; (80107d4 <tcp_process+0x7cc>)
 8010760:	681a      	ldr	r2, [r3, #0]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	60da      	str	r2, [r3, #12]
 8010766:	4a1b      	ldr	r2, [pc, #108]	; (80107d4 <tcp_process+0x7cc>)
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6013      	str	r3, [r2, #0]
 801076c:	f003 f8a0 	bl	80138b0 <tcp_timer_needed>
      }
      break;
 8010770:	e026      	b.n	80107c0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010772:	6878      	ldr	r0, [r7, #4]
 8010774:	f000 f93c 	bl	80109f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010778:	4b17      	ldr	r3, [pc, #92]	; (80107d8 <tcp_process+0x7d0>)
 801077a:	781b      	ldrb	r3, [r3, #0]
 801077c:	f003 0310 	and.w	r3, r3, #16
 8010780:	2b00      	cmp	r3, #0
 8010782:	d01f      	beq.n	80107c4 <tcp_process+0x7bc>
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010788:	4b14      	ldr	r3, [pc, #80]	; (80107dc <tcp_process+0x7d4>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	429a      	cmp	r2, r3
 801078e:	d119      	bne.n	80107c4 <tcp_process+0x7bc>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010794:	2b00      	cmp	r3, #0
 8010796:	d115      	bne.n	80107c4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010798:	4b11      	ldr	r3, [pc, #68]	; (80107e0 <tcp_process+0x7d8>)
 801079a:	781b      	ldrb	r3, [r3, #0]
 801079c:	f043 0310 	orr.w	r3, r3, #16
 80107a0:	b2da      	uxtb	r2, r3
 80107a2:	4b0f      	ldr	r3, [pc, #60]	; (80107e0 <tcp_process+0x7d8>)
 80107a4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80107a6:	e00d      	b.n	80107c4 <tcp_process+0x7bc>
    default:
      break;
 80107a8:	bf00      	nop
 80107aa:	e00c      	b.n	80107c6 <tcp_process+0x7be>
      break;
 80107ac:	bf00      	nop
 80107ae:	e00a      	b.n	80107c6 <tcp_process+0x7be>
      break;
 80107b0:	bf00      	nop
 80107b2:	e008      	b.n	80107c6 <tcp_process+0x7be>
      break;
 80107b4:	bf00      	nop
 80107b6:	e006      	b.n	80107c6 <tcp_process+0x7be>
      break;
 80107b8:	bf00      	nop
 80107ba:	e004      	b.n	80107c6 <tcp_process+0x7be>
      break;
 80107bc:	bf00      	nop
 80107be:	e002      	b.n	80107c6 <tcp_process+0x7be>
      break;
 80107c0:	bf00      	nop
 80107c2:	e000      	b.n	80107c6 <tcp_process+0x7be>
      break;
 80107c4:	bf00      	nop
  }
  return ERR_OK;
 80107c6:	2300      	movs	r3, #0
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3724      	adds	r7, #36	; 0x24
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd90      	pop	{r4, r7, pc}
 80107d0:	24007f94 	.word	0x24007f94
 80107d4:	24007fa8 	.word	0x24007fa8
 80107d8:	24004b10 	.word	0x24004b10
 80107dc:	24004b08 	.word	0x24004b08
 80107e0:	24004b11 	.word	0x24004b11
 80107e4:	24007f98 	.word	0x24007f98

080107e8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80107e8:	b590      	push	{r4, r7, lr}
 80107ea:	b085      	sub	sp, #20
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d106      	bne.n	8010806 <tcp_oos_insert_segment+0x1e>
 80107f8:	4b3b      	ldr	r3, [pc, #236]	; (80108e8 <tcp_oos_insert_segment+0x100>)
 80107fa:	f240 421f 	movw	r2, #1055	; 0x41f
 80107fe:	493b      	ldr	r1, [pc, #236]	; (80108ec <tcp_oos_insert_segment+0x104>)
 8010800:	483b      	ldr	r0, [pc, #236]	; (80108f0 <tcp_oos_insert_segment+0x108>)
 8010802:	f006 fb07 	bl	8016e14 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	68db      	ldr	r3, [r3, #12]
 801080a:	899b      	ldrh	r3, [r3, #12]
 801080c:	b29b      	uxth	r3, r3
 801080e:	4618      	mov	r0, r3
 8010810:	f7fb f888 	bl	800b924 <lwip_htons>
 8010814:	4603      	mov	r3, r0
 8010816:	b2db      	uxtb	r3, r3
 8010818:	f003 0301 	and.w	r3, r3, #1
 801081c:	2b00      	cmp	r3, #0
 801081e:	d028      	beq.n	8010872 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010820:	6838      	ldr	r0, [r7, #0]
 8010822:	f7fe f997 	bl	800eb54 <tcp_segs_free>
    next = NULL;
 8010826:	2300      	movs	r3, #0
 8010828:	603b      	str	r3, [r7, #0]
 801082a:	e056      	b.n	80108da <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	899b      	ldrh	r3, [r3, #12]
 8010832:	b29b      	uxth	r3, r3
 8010834:	4618      	mov	r0, r3
 8010836:	f7fb f875 	bl	800b924 <lwip_htons>
 801083a:	4603      	mov	r3, r0
 801083c:	b2db      	uxtb	r3, r3
 801083e:	f003 0301 	and.w	r3, r3, #1
 8010842:	2b00      	cmp	r3, #0
 8010844:	d00d      	beq.n	8010862 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	68db      	ldr	r3, [r3, #12]
 801084a:	899b      	ldrh	r3, [r3, #12]
 801084c:	b29c      	uxth	r4, r3
 801084e:	2001      	movs	r0, #1
 8010850:	f7fb f868 	bl	800b924 <lwip_htons>
 8010854:	4603      	mov	r3, r0
 8010856:	461a      	mov	r2, r3
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	68db      	ldr	r3, [r3, #12]
 801085c:	4322      	orrs	r2, r4
 801085e:	b292      	uxth	r2, r2
 8010860:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801086c:	68f8      	ldr	r0, [r7, #12]
 801086e:	f7fe f986 	bl	800eb7e <tcp_seg_free>
    while (next &&
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d00e      	beq.n	8010896 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	891b      	ldrh	r3, [r3, #8]
 801087c:	461a      	mov	r2, r3
 801087e:	4b1d      	ldr	r3, [pc, #116]	; (80108f4 <tcp_oos_insert_segment+0x10c>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	441a      	add	r2, r3
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	68db      	ldr	r3, [r3, #12]
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	6839      	ldr	r1, [r7, #0]
 801088c:	8909      	ldrh	r1, [r1, #8]
 801088e:	440b      	add	r3, r1
 8010890:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010892:	2b00      	cmp	r3, #0
 8010894:	daca      	bge.n	801082c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d01e      	beq.n	80108da <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	891b      	ldrh	r3, [r3, #8]
 80108a0:	461a      	mov	r2, r3
 80108a2:	4b14      	ldr	r3, [pc, #80]	; (80108f4 <tcp_oos_insert_segment+0x10c>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	441a      	add	r2, r3
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	68db      	ldr	r3, [r3, #12]
 80108ac:	685b      	ldr	r3, [r3, #4]
 80108ae:	1ad3      	subs	r3, r2, r3
    if (next &&
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	dd12      	ble.n	80108da <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	b29a      	uxth	r2, r3
 80108bc:	4b0d      	ldr	r3, [pc, #52]	; (80108f4 <tcp_oos_insert_segment+0x10c>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	1ad3      	subs	r3, r2, r3
 80108c4:	b29a      	uxth	r2, r3
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	685a      	ldr	r2, [r3, #4]
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	891b      	ldrh	r3, [r3, #8]
 80108d2:	4619      	mov	r1, r3
 80108d4:	4610      	mov	r0, r2
 80108d6:	f7fc fb49 	bl	800cf6c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	683a      	ldr	r2, [r7, #0]
 80108de:	601a      	str	r2, [r3, #0]
}
 80108e0:	bf00      	nop
 80108e2:	3714      	adds	r7, #20
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd90      	pop	{r4, r7, pc}
 80108e8:	08019a40 	.word	0x08019a40
 80108ec:	08019d00 	.word	0x08019d00
 80108f0:	08019a8c 	.word	0x08019a8c
 80108f4:	24004b04 	.word	0x24004b04

080108f8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80108f8:	b5b0      	push	{r4, r5, r7, lr}
 80108fa:	b086      	sub	sp, #24
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	60f8      	str	r0, [r7, #12]
 8010900:	60b9      	str	r1, [r7, #8]
 8010902:	607a      	str	r2, [r7, #4]
 8010904:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010906:	e03e      	b.n	8010986 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	4618      	mov	r0, r3
 8010918:	f7fc fd3c 	bl	800d394 <pbuf_clen>
 801091c:	4603      	mov	r3, r0
 801091e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010926:	8a7a      	ldrh	r2, [r7, #18]
 8010928:	429a      	cmp	r2, r3
 801092a:	d906      	bls.n	801093a <tcp_free_acked_segments+0x42>
 801092c:	4b2a      	ldr	r3, [pc, #168]	; (80109d8 <tcp_free_acked_segments+0xe0>)
 801092e:	f240 4257 	movw	r2, #1111	; 0x457
 8010932:	492a      	ldr	r1, [pc, #168]	; (80109dc <tcp_free_acked_segments+0xe4>)
 8010934:	482a      	ldr	r0, [pc, #168]	; (80109e0 <tcp_free_acked_segments+0xe8>)
 8010936:	f006 fa6d 	bl	8016e14 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010940:	8a7b      	ldrh	r3, [r7, #18]
 8010942:	1ad3      	subs	r3, r2, r3
 8010944:	b29a      	uxth	r2, r3
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	891a      	ldrh	r2, [r3, #8]
 8010950:	4b24      	ldr	r3, [pc, #144]	; (80109e4 <tcp_free_acked_segments+0xec>)
 8010952:	881b      	ldrh	r3, [r3, #0]
 8010954:	4413      	add	r3, r2
 8010956:	b29a      	uxth	r2, r3
 8010958:	4b22      	ldr	r3, [pc, #136]	; (80109e4 <tcp_free_acked_segments+0xec>)
 801095a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801095c:	6978      	ldr	r0, [r7, #20]
 801095e:	f7fe f90e 	bl	800eb7e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010968:	2b00      	cmp	r3, #0
 801096a:	d00c      	beq.n	8010986 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d109      	bne.n	8010986 <tcp_free_acked_segments+0x8e>
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d106      	bne.n	8010986 <tcp_free_acked_segments+0x8e>
 8010978:	4b17      	ldr	r3, [pc, #92]	; (80109d8 <tcp_free_acked_segments+0xe0>)
 801097a:	f240 4261 	movw	r2, #1121	; 0x461
 801097e:	491a      	ldr	r1, [pc, #104]	; (80109e8 <tcp_free_acked_segments+0xf0>)
 8010980:	4817      	ldr	r0, [pc, #92]	; (80109e0 <tcp_free_acked_segments+0xe8>)
 8010982:	f006 fa47 	bl	8016e14 <iprintf>
  while (seg_list != NULL &&
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d020      	beq.n	80109ce <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	68db      	ldr	r3, [r3, #12]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	4618      	mov	r0, r3
 8010994:	f7fa ffdb 	bl	800b94e <lwip_htonl>
 8010998:	4604      	mov	r4, r0
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	891b      	ldrh	r3, [r3, #8]
 801099e:	461d      	mov	r5, r3
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	899b      	ldrh	r3, [r3, #12]
 80109a6:	b29b      	uxth	r3, r3
 80109a8:	4618      	mov	r0, r3
 80109aa:	f7fa ffbb 	bl	800b924 <lwip_htons>
 80109ae:	4603      	mov	r3, r0
 80109b0:	b2db      	uxtb	r3, r3
 80109b2:	f003 0303 	and.w	r3, r3, #3
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d001      	beq.n	80109be <tcp_free_acked_segments+0xc6>
 80109ba:	2301      	movs	r3, #1
 80109bc:	e000      	b.n	80109c0 <tcp_free_acked_segments+0xc8>
 80109be:	2300      	movs	r3, #0
 80109c0:	442b      	add	r3, r5
 80109c2:	18e2      	adds	r2, r4, r3
 80109c4:	4b09      	ldr	r3, [pc, #36]	; (80109ec <tcp_free_acked_segments+0xf4>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	dd9c      	ble.n	8010908 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80109ce:	68bb      	ldr	r3, [r7, #8]
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3718      	adds	r7, #24
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bdb0      	pop	{r4, r5, r7, pc}
 80109d8:	08019a40 	.word	0x08019a40
 80109dc:	08019d28 	.word	0x08019d28
 80109e0:	08019a8c 	.word	0x08019a8c
 80109e4:	24004b0c 	.word	0x24004b0c
 80109e8:	08019d50 	.word	0x08019d50
 80109ec:	24004b08 	.word	0x24004b08

080109f0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80109f0:	b5b0      	push	{r4, r5, r7, lr}
 80109f2:	b094      	sub	sp, #80	; 0x50
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80109f8:	2300      	movs	r3, #0
 80109fa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d106      	bne.n	8010a10 <tcp_receive+0x20>
 8010a02:	4ba6      	ldr	r3, [pc, #664]	; (8010c9c <tcp_receive+0x2ac>)
 8010a04:	f240 427b 	movw	r2, #1147	; 0x47b
 8010a08:	49a5      	ldr	r1, [pc, #660]	; (8010ca0 <tcp_receive+0x2b0>)
 8010a0a:	48a6      	ldr	r0, [pc, #664]	; (8010ca4 <tcp_receive+0x2b4>)
 8010a0c:	f006 fa02 	bl	8016e14 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	7d1b      	ldrb	r3, [r3, #20]
 8010a14:	2b03      	cmp	r3, #3
 8010a16:	d806      	bhi.n	8010a26 <tcp_receive+0x36>
 8010a18:	4ba0      	ldr	r3, [pc, #640]	; (8010c9c <tcp_receive+0x2ac>)
 8010a1a:	f240 427c 	movw	r2, #1148	; 0x47c
 8010a1e:	49a2      	ldr	r1, [pc, #648]	; (8010ca8 <tcp_receive+0x2b8>)
 8010a20:	48a0      	ldr	r0, [pc, #640]	; (8010ca4 <tcp_receive+0x2b4>)
 8010a22:	f006 f9f7 	bl	8016e14 <iprintf>

  if (flags & TCP_ACK) {
 8010a26:	4ba1      	ldr	r3, [pc, #644]	; (8010cac <tcp_receive+0x2bc>)
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	f003 0310 	and.w	r3, r3, #16
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	f000 8263 	beq.w	8010efa <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a40:	4413      	add	r3, r2
 8010a42:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a48:	4b99      	ldr	r3, [pc, #612]	; (8010cb0 <tcp_receive+0x2c0>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	1ad3      	subs	r3, r2, r3
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	db1b      	blt.n	8010a8a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a56:	4b96      	ldr	r3, [pc, #600]	; (8010cb0 <tcp_receive+0x2c0>)
 8010a58:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d106      	bne.n	8010a6c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010a62:	4b94      	ldr	r3, [pc, #592]	; (8010cb4 <tcp_receive+0x2c4>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	1ad3      	subs	r3, r2, r3
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	db0e      	blt.n	8010a8a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010a70:	4b90      	ldr	r3, [pc, #576]	; (8010cb4 <tcp_receive+0x2c4>)
 8010a72:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d125      	bne.n	8010ac4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010a78:	4b8f      	ldr	r3, [pc, #572]	; (8010cb8 <tcp_receive+0x2c8>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	89db      	ldrh	r3, [r3, #14]
 8010a7e:	b29a      	uxth	r2, r3
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d91c      	bls.n	8010ac4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010a8a:	4b8b      	ldr	r3, [pc, #556]	; (8010cb8 <tcp_receive+0x2c8>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	89db      	ldrh	r3, [r3, #14]
 8010a90:	b29a      	uxth	r2, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010aa4:	429a      	cmp	r2, r3
 8010aa6:	d205      	bcs.n	8010ab4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010ab4:	4b7e      	ldr	r3, [pc, #504]	; (8010cb0 <tcp_receive+0x2c0>)
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010abc:	4b7d      	ldr	r3, [pc, #500]	; (8010cb4 <tcp_receive+0x2c4>)
 8010abe:	681a      	ldr	r2, [r3, #0]
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010ac4:	4b7b      	ldr	r3, [pc, #492]	; (8010cb4 <tcp_receive+0x2c4>)
 8010ac6:	681a      	ldr	r2, [r3, #0]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010acc:	1ad3      	subs	r3, r2, r3
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	dc58      	bgt.n	8010b84 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010ad2:	4b7a      	ldr	r3, [pc, #488]	; (8010cbc <tcp_receive+0x2cc>)
 8010ad4:	881b      	ldrh	r3, [r3, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d14b      	bne.n	8010b72 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010ae4:	4413      	add	r3, r2
 8010ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d142      	bne.n	8010b72 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	db3d      	blt.n	8010b72 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010afa:	4b6e      	ldr	r3, [pc, #440]	; (8010cb4 <tcp_receive+0x2c4>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d137      	bne.n	8010b72 <tcp_receive+0x182>
              found_dupack = 1;
 8010b02:	2301      	movs	r3, #1
 8010b04:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010b0c:	2bff      	cmp	r3, #255	; 0xff
 8010b0e:	d007      	beq.n	8010b20 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010b16:	3301      	adds	r3, #1
 8010b18:	b2da      	uxtb	r2, r3
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010b26:	2b03      	cmp	r3, #3
 8010b28:	d91b      	bls.n	8010b62 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b34:	4413      	add	r3, r2
 8010b36:	b29a      	uxth	r2, r3
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d30a      	bcc.n	8010b58 <tcp_receive+0x168>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b4c:	4413      	add	r3, r2
 8010b4e:	b29a      	uxth	r2, r3
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010b56:	e004      	b.n	8010b62 <tcp_receive+0x172>
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010b68:	2b02      	cmp	r3, #2
 8010b6a:	d902      	bls.n	8010b72 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f002 fb41 	bl	80131f4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	f040 8160 	bne.w	8010e3a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010b82:	e15a      	b.n	8010e3a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b84:	4b4b      	ldr	r3, [pc, #300]	; (8010cb4 <tcp_receive+0x2c4>)
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b8c:	1ad3      	subs	r3, r2, r3
 8010b8e:	3b01      	subs	r3, #1
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	f2c0 814d 	blt.w	8010e30 <tcp_receive+0x440>
 8010b96:	4b47      	ldr	r3, [pc, #284]	; (8010cb4 <tcp_receive+0x2c4>)
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b9e:	1ad3      	subs	r3, r2, r3
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	f300 8145 	bgt.w	8010e30 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	8b5b      	ldrh	r3, [r3, #26]
 8010baa:	f003 0304 	and.w	r3, r3, #4
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d010      	beq.n	8010bd4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	8b5b      	ldrh	r3, [r3, #26]
 8010bb6:	f023 0304 	bic.w	r3, r3, #4
 8010bba:	b29a      	uxth	r2, r3
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010be2:	10db      	asrs	r3, r3, #3
 8010be4:	b21b      	sxth	r3, r3
 8010be6:	b29a      	uxth	r2, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	4413      	add	r3, r2
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	b21a      	sxth	r2, r3
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010bfc:	4b2d      	ldr	r3, [pc, #180]	; (8010cb4 <tcp_receive+0x2c4>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	b29a      	uxth	r2, r3
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	1ad3      	subs	r3, r2, r3
 8010c0a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010c14:	4b27      	ldr	r3, [pc, #156]	; (8010cb4 <tcp_receive+0x2c4>)
 8010c16:	681a      	ldr	r2, [r3, #0]
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	7d1b      	ldrb	r3, [r3, #20]
 8010c20:	2b03      	cmp	r3, #3
 8010c22:	f240 8096 	bls.w	8010d52 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d244      	bcs.n	8010cc0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	8b5b      	ldrh	r3, [r3, #26]
 8010c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d001      	beq.n	8010c46 <tcp_receive+0x256>
 8010c42:	2301      	movs	r3, #1
 8010c44:	e000      	b.n	8010c48 <tcp_receive+0x258>
 8010c46:	2302      	movs	r3, #2
 8010c48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010c4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010c50:	b29a      	uxth	r2, r3
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c56:	fb12 f303 	smulbb	r3, r2, r3
 8010c5a:	b29b      	uxth	r3, r3
 8010c5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	bf28      	it	cs
 8010c62:	4613      	movcs	r3, r2
 8010c64:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c6e:	4413      	add	r3, r2
 8010c70:	b29a      	uxth	r2, r3
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d309      	bcc.n	8010c90 <tcp_receive+0x2a0>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c84:	4413      	add	r3, r2
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c8e:	e060      	b.n	8010d52 <tcp_receive+0x362>
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c9a:	e05a      	b.n	8010d52 <tcp_receive+0x362>
 8010c9c:	08019a40 	.word	0x08019a40
 8010ca0:	08019d70 	.word	0x08019d70
 8010ca4:	08019a8c 	.word	0x08019a8c
 8010ca8:	08019d8c 	.word	0x08019d8c
 8010cac:	24004b10 	.word	0x24004b10
 8010cb0:	24004b04 	.word	0x24004b04
 8010cb4:	24004b08 	.word	0x24004b08
 8010cb8:	24004af4 	.word	0x24004af4
 8010cbc:	24004b0e 	.word	0x24004b0e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010cc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010cc8:	4413      	add	r3, r2
 8010cca:	b29a      	uxth	r2, r3
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d309      	bcc.n	8010cea <tcp_receive+0x2fa>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010cdc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010cde:	4413      	add	r3, r2
 8010ce0:	b29a      	uxth	r2, r3
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010ce8:	e004      	b.n	8010cf4 <tcp_receive+0x304>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d00:	429a      	cmp	r2, r3
 8010d02:	d326      	bcc.n	8010d52 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d10:	1ad3      	subs	r3, r2, r3
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d24:	4413      	add	r3, r2
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d30a      	bcc.n	8010d48 <tcp_receive+0x358>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d3c:	4413      	add	r3, r2
 8010d3e:	b29a      	uxth	r2, r3
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010d46:	e004      	b.n	8010d52 <tcp_receive+0x362>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d5a:	4a98      	ldr	r2, [pc, #608]	; (8010fbc <tcp_receive+0x5cc>)
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f7ff fdcb 	bl	80108f8 <tcp_free_acked_segments>
 8010d62:	4602      	mov	r2, r0
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d70:	4a93      	ldr	r2, [pc, #588]	; (8010fc0 <tcp_receive+0x5d0>)
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f7ff fdc0 	bl	80108f8 <tcp_free_acked_segments>
 8010d78:	4602      	mov	r2, r0
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d104      	bne.n	8010d90 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d8c:	861a      	strh	r2, [r3, #48]	; 0x30
 8010d8e:	e002      	b.n	8010d96 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2200      	movs	r2, #0
 8010d94:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d103      	bne.n	8010dac <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2200      	movs	r2, #0
 8010da8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010db2:	4b84      	ldr	r3, [pc, #528]	; (8010fc4 <tcp_receive+0x5d4>)
 8010db4:	881b      	ldrh	r3, [r3, #0]
 8010db6:	4413      	add	r3, r2
 8010db8:	b29a      	uxth	r2, r3
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	8b5b      	ldrh	r3, [r3, #26]
 8010dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d035      	beq.n	8010e38 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d118      	bne.n	8010e06 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d00c      	beq.n	8010df6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010de4:	68db      	ldr	r3, [r3, #12]
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7fa fdb0 	bl	800b94e <lwip_htonl>
 8010dee:	4603      	mov	r3, r0
 8010df0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	dc20      	bgt.n	8010e38 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	8b5b      	ldrh	r3, [r3, #26]
 8010dfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010dfe:	b29a      	uxth	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e04:	e018      	b.n	8010e38 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e0e:	68db      	ldr	r3, [r3, #12]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7fa fd9b 	bl	800b94e <lwip_htonl>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	1ae3      	subs	r3, r4, r3
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	dc0b      	bgt.n	8010e38 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	8b5b      	ldrh	r3, [r3, #26]
 8010e24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010e28:	b29a      	uxth	r2, r3
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e2e:	e003      	b.n	8010e38 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f002 fbcd 	bl	80135d0 <tcp_send_empty_ack>
 8010e36:	e000      	b.n	8010e3a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e38:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d05b      	beq.n	8010efa <tcp_receive+0x50a>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e46:	4b60      	ldr	r3, [pc, #384]	; (8010fc8 <tcp_receive+0x5d8>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	1ad3      	subs	r3, r2, r3
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	da54      	bge.n	8010efa <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010e50:	4b5e      	ldr	r3, [pc, #376]	; (8010fcc <tcp_receive+0x5dc>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	b29a      	uxth	r2, r3
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	1ad3      	subs	r3, r2, r3
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010e64:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e6e:	10db      	asrs	r3, r3, #3
 8010e70:	b21b      	sxth	r3, r3
 8010e72:	b29b      	uxth	r3, r3
 8010e74:	1ad3      	subs	r3, r2, r3
 8010e76:	b29b      	uxth	r3, r3
 8010e78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e82:	b29a      	uxth	r2, r3
 8010e84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e88:	4413      	add	r3, r2
 8010e8a:	b29b      	uxth	r3, r3
 8010e8c:	b21a      	sxth	r2, r3
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010e92:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	da05      	bge.n	8010ea6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8010e9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e9e:	425b      	negs	r3, r3
 8010ea0:	b29b      	uxth	r3, r3
 8010ea2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010ea6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010eb0:	109b      	asrs	r3, r3, #2
 8010eb2:	b21b      	sxth	r3, r3
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	1ad3      	subs	r3, r2, r3
 8010eb8:	b29b      	uxth	r3, r3
 8010eba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010ec4:	b29a      	uxth	r2, r3
 8010ec6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010eca:	4413      	add	r3, r2
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	b21a      	sxth	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010eda:	10db      	asrs	r3, r3, #3
 8010edc:	b21b      	sxth	r3, r3
 8010ede:	b29a      	uxth	r2, r3
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	4413      	add	r3, r2
 8010eea:	b29b      	uxth	r3, r3
 8010eec:	b21a      	sxth	r2, r3
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010efa:	4b35      	ldr	r3, [pc, #212]	; (8010fd0 <tcp_receive+0x5e0>)
 8010efc:	881b      	ldrh	r3, [r3, #0]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	f000 84e1 	beq.w	80118c6 <tcp_receive+0xed6>
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	7d1b      	ldrb	r3, [r3, #20]
 8010f08:	2b06      	cmp	r3, #6
 8010f0a:	f200 84dc 	bhi.w	80118c6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f12:	4b30      	ldr	r3, [pc, #192]	; (8010fd4 <tcp_receive+0x5e4>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	1ad3      	subs	r3, r2, r3
 8010f18:	3b01      	subs	r3, #1
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	f2c0 808e 	blt.w	801103c <tcp_receive+0x64c>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f24:	4b2a      	ldr	r3, [pc, #168]	; (8010fd0 <tcp_receive+0x5e0>)
 8010f26:	881b      	ldrh	r3, [r3, #0]
 8010f28:	4619      	mov	r1, r3
 8010f2a:	4b2a      	ldr	r3, [pc, #168]	; (8010fd4 <tcp_receive+0x5e4>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	440b      	add	r3, r1
 8010f30:	1ad3      	subs	r3, r2, r3
 8010f32:	3301      	adds	r3, #1
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	f300 8081 	bgt.w	801103c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010f3a:	4b27      	ldr	r3, [pc, #156]	; (8010fd8 <tcp_receive+0x5e8>)
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f44:	4b23      	ldr	r3, [pc, #140]	; (8010fd4 <tcp_receive+0x5e4>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	1ad3      	subs	r3, r2, r3
 8010f4a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010f4c:	4b22      	ldr	r3, [pc, #136]	; (8010fd8 <tcp_receive+0x5e8>)
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d106      	bne.n	8010f62 <tcp_receive+0x572>
 8010f54:	4b21      	ldr	r3, [pc, #132]	; (8010fdc <tcp_receive+0x5ec>)
 8010f56:	f240 5294 	movw	r2, #1428	; 0x594
 8010f5a:	4921      	ldr	r1, [pc, #132]	; (8010fe0 <tcp_receive+0x5f0>)
 8010f5c:	4821      	ldr	r0, [pc, #132]	; (8010fe4 <tcp_receive+0x5f4>)
 8010f5e:	f005 ff59 	bl	8016e14 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010f68:	4293      	cmp	r3, r2
 8010f6a:	d906      	bls.n	8010f7a <tcp_receive+0x58a>
 8010f6c:	4b1b      	ldr	r3, [pc, #108]	; (8010fdc <tcp_receive+0x5ec>)
 8010f6e:	f240 5295 	movw	r2, #1429	; 0x595
 8010f72:	491d      	ldr	r1, [pc, #116]	; (8010fe8 <tcp_receive+0x5f8>)
 8010f74:	481b      	ldr	r0, [pc, #108]	; (8010fe4 <tcp_receive+0x5f4>)
 8010f76:	f005 ff4d 	bl	8016e14 <iprintf>
      off = (u16_t)off32;
 8010f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010f80:	4b15      	ldr	r3, [pc, #84]	; (8010fd8 <tcp_receive+0x5e8>)
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	891b      	ldrh	r3, [r3, #8]
 8010f86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d906      	bls.n	8010f9c <tcp_receive+0x5ac>
 8010f8e:	4b13      	ldr	r3, [pc, #76]	; (8010fdc <tcp_receive+0x5ec>)
 8010f90:	f240 5297 	movw	r2, #1431	; 0x597
 8010f94:	4915      	ldr	r1, [pc, #84]	; (8010fec <tcp_receive+0x5fc>)
 8010f96:	4813      	ldr	r0, [pc, #76]	; (8010fe4 <tcp_receive+0x5f4>)
 8010f98:	f005 ff3c 	bl	8016e14 <iprintf>
      inseg.len -= off;
 8010f9c:	4b0e      	ldr	r3, [pc, #56]	; (8010fd8 <tcp_receive+0x5e8>)
 8010f9e:	891a      	ldrh	r2, [r3, #8]
 8010fa0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fa4:	1ad3      	subs	r3, r2, r3
 8010fa6:	b29a      	uxth	r2, r3
 8010fa8:	4b0b      	ldr	r3, [pc, #44]	; (8010fd8 <tcp_receive+0x5e8>)
 8010faa:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010fac:	4b0a      	ldr	r3, [pc, #40]	; (8010fd8 <tcp_receive+0x5e8>)
 8010fae:	685b      	ldr	r3, [r3, #4]
 8010fb0:	891a      	ldrh	r2, [r3, #8]
 8010fb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fb6:	1ad3      	subs	r3, r2, r3
 8010fb8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010fba:	e029      	b.n	8011010 <tcp_receive+0x620>
 8010fbc:	08019da8 	.word	0x08019da8
 8010fc0:	08019db0 	.word	0x08019db0
 8010fc4:	24004b0c 	.word	0x24004b0c
 8010fc8:	24004b08 	.word	0x24004b08
 8010fcc:	24007f9c 	.word	0x24007f9c
 8010fd0:	24004b0e 	.word	0x24004b0e
 8010fd4:	24004b04 	.word	0x24004b04
 8010fd8:	24004ae4 	.word	0x24004ae4
 8010fdc:	08019a40 	.word	0x08019a40
 8010fe0:	08019db8 	.word	0x08019db8
 8010fe4:	08019a8c 	.word	0x08019a8c
 8010fe8:	08019dc8 	.word	0x08019dc8
 8010fec:	08019dd8 	.word	0x08019dd8
        off -= p->len;
 8010ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ff2:	895b      	ldrh	r3, [r3, #10]
 8010ff4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ff8:	1ad3      	subs	r3, r2, r3
 8010ffa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011000:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011002:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011006:	2200      	movs	r2, #0
 8011008:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801100a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011012:	895b      	ldrh	r3, [r3, #10]
 8011014:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011018:	429a      	cmp	r2, r3
 801101a:	d8e9      	bhi.n	8010ff0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801101c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011020:	4619      	mov	r1, r3
 8011022:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011024:	f7fc f8a2 	bl	800d16c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801102c:	4a91      	ldr	r2, [pc, #580]	; (8011274 <tcp_receive+0x884>)
 801102e:	6013      	str	r3, [r2, #0]
 8011030:	4b91      	ldr	r3, [pc, #580]	; (8011278 <tcp_receive+0x888>)
 8011032:	68db      	ldr	r3, [r3, #12]
 8011034:	4a8f      	ldr	r2, [pc, #572]	; (8011274 <tcp_receive+0x884>)
 8011036:	6812      	ldr	r2, [r2, #0]
 8011038:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801103a:	e00d      	b.n	8011058 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801103c:	4b8d      	ldr	r3, [pc, #564]	; (8011274 <tcp_receive+0x884>)
 801103e:	681a      	ldr	r2, [r3, #0]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011044:	1ad3      	subs	r3, r2, r3
 8011046:	2b00      	cmp	r3, #0
 8011048:	da06      	bge.n	8011058 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	8b5b      	ldrh	r3, [r3, #26]
 801104e:	f043 0302 	orr.w	r3, r3, #2
 8011052:	b29a      	uxth	r2, r3
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011058:	4b86      	ldr	r3, [pc, #536]	; (8011274 <tcp_receive+0x884>)
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011060:	1ad3      	subs	r3, r2, r3
 8011062:	2b00      	cmp	r3, #0
 8011064:	f2c0 842a 	blt.w	80118bc <tcp_receive+0xecc>
 8011068:	4b82      	ldr	r3, [pc, #520]	; (8011274 <tcp_receive+0x884>)
 801106a:	681a      	ldr	r2, [r3, #0]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011070:	6879      	ldr	r1, [r7, #4]
 8011072:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011074:	440b      	add	r3, r1
 8011076:	1ad3      	subs	r3, r2, r3
 8011078:	3301      	adds	r3, #1
 801107a:	2b00      	cmp	r3, #0
 801107c:	f300 841e 	bgt.w	80118bc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011084:	4b7b      	ldr	r3, [pc, #492]	; (8011274 <tcp_receive+0x884>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	429a      	cmp	r2, r3
 801108a:	f040 829a 	bne.w	80115c2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801108e:	4b7a      	ldr	r3, [pc, #488]	; (8011278 <tcp_receive+0x888>)
 8011090:	891c      	ldrh	r4, [r3, #8]
 8011092:	4b79      	ldr	r3, [pc, #484]	; (8011278 <tcp_receive+0x888>)
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	899b      	ldrh	r3, [r3, #12]
 8011098:	b29b      	uxth	r3, r3
 801109a:	4618      	mov	r0, r3
 801109c:	f7fa fc42 	bl	800b924 <lwip_htons>
 80110a0:	4603      	mov	r3, r0
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	f003 0303 	and.w	r3, r3, #3
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d001      	beq.n	80110b0 <tcp_receive+0x6c0>
 80110ac:	2301      	movs	r3, #1
 80110ae:	e000      	b.n	80110b2 <tcp_receive+0x6c2>
 80110b0:	2300      	movs	r3, #0
 80110b2:	4423      	add	r3, r4
 80110b4:	b29a      	uxth	r2, r3
 80110b6:	4b71      	ldr	r3, [pc, #452]	; (801127c <tcp_receive+0x88c>)
 80110b8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80110be:	4b6f      	ldr	r3, [pc, #444]	; (801127c <tcp_receive+0x88c>)
 80110c0:	881b      	ldrh	r3, [r3, #0]
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d275      	bcs.n	80111b2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80110c6:	4b6c      	ldr	r3, [pc, #432]	; (8011278 <tcp_receive+0x888>)
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	899b      	ldrh	r3, [r3, #12]
 80110cc:	b29b      	uxth	r3, r3
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7fa fc28 	bl	800b924 <lwip_htons>
 80110d4:	4603      	mov	r3, r0
 80110d6:	b2db      	uxtb	r3, r3
 80110d8:	f003 0301 	and.w	r3, r3, #1
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d01f      	beq.n	8011120 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80110e0:	4b65      	ldr	r3, [pc, #404]	; (8011278 <tcp_receive+0x888>)
 80110e2:	68db      	ldr	r3, [r3, #12]
 80110e4:	899b      	ldrh	r3, [r3, #12]
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	b21b      	sxth	r3, r3
 80110ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80110ee:	b21c      	sxth	r4, r3
 80110f0:	4b61      	ldr	r3, [pc, #388]	; (8011278 <tcp_receive+0x888>)
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	899b      	ldrh	r3, [r3, #12]
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7fa fc13 	bl	800b924 <lwip_htons>
 80110fe:	4603      	mov	r3, r0
 8011100:	b2db      	uxtb	r3, r3
 8011102:	b29b      	uxth	r3, r3
 8011104:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011108:	b29b      	uxth	r3, r3
 801110a:	4618      	mov	r0, r3
 801110c:	f7fa fc0a 	bl	800b924 <lwip_htons>
 8011110:	4603      	mov	r3, r0
 8011112:	b21b      	sxth	r3, r3
 8011114:	4323      	orrs	r3, r4
 8011116:	b21a      	sxth	r2, r3
 8011118:	4b57      	ldr	r3, [pc, #348]	; (8011278 <tcp_receive+0x888>)
 801111a:	68db      	ldr	r3, [r3, #12]
 801111c:	b292      	uxth	r2, r2
 801111e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011124:	4b54      	ldr	r3, [pc, #336]	; (8011278 <tcp_receive+0x888>)
 8011126:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011128:	4b53      	ldr	r3, [pc, #332]	; (8011278 <tcp_receive+0x888>)
 801112a:	68db      	ldr	r3, [r3, #12]
 801112c:	899b      	ldrh	r3, [r3, #12]
 801112e:	b29b      	uxth	r3, r3
 8011130:	4618      	mov	r0, r3
 8011132:	f7fa fbf7 	bl	800b924 <lwip_htons>
 8011136:	4603      	mov	r3, r0
 8011138:	b2db      	uxtb	r3, r3
 801113a:	f003 0302 	and.w	r3, r3, #2
 801113e:	2b00      	cmp	r3, #0
 8011140:	d005      	beq.n	801114e <tcp_receive+0x75e>
            inseg.len -= 1;
 8011142:	4b4d      	ldr	r3, [pc, #308]	; (8011278 <tcp_receive+0x888>)
 8011144:	891b      	ldrh	r3, [r3, #8]
 8011146:	3b01      	subs	r3, #1
 8011148:	b29a      	uxth	r2, r3
 801114a:	4b4b      	ldr	r3, [pc, #300]	; (8011278 <tcp_receive+0x888>)
 801114c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801114e:	4b4a      	ldr	r3, [pc, #296]	; (8011278 <tcp_receive+0x888>)
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	4a49      	ldr	r2, [pc, #292]	; (8011278 <tcp_receive+0x888>)
 8011154:	8912      	ldrh	r2, [r2, #8]
 8011156:	4611      	mov	r1, r2
 8011158:	4618      	mov	r0, r3
 801115a:	f7fb ff07 	bl	800cf6c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801115e:	4b46      	ldr	r3, [pc, #280]	; (8011278 <tcp_receive+0x888>)
 8011160:	891c      	ldrh	r4, [r3, #8]
 8011162:	4b45      	ldr	r3, [pc, #276]	; (8011278 <tcp_receive+0x888>)
 8011164:	68db      	ldr	r3, [r3, #12]
 8011166:	899b      	ldrh	r3, [r3, #12]
 8011168:	b29b      	uxth	r3, r3
 801116a:	4618      	mov	r0, r3
 801116c:	f7fa fbda 	bl	800b924 <lwip_htons>
 8011170:	4603      	mov	r3, r0
 8011172:	b2db      	uxtb	r3, r3
 8011174:	f003 0303 	and.w	r3, r3, #3
 8011178:	2b00      	cmp	r3, #0
 801117a:	d001      	beq.n	8011180 <tcp_receive+0x790>
 801117c:	2301      	movs	r3, #1
 801117e:	e000      	b.n	8011182 <tcp_receive+0x792>
 8011180:	2300      	movs	r3, #0
 8011182:	4423      	add	r3, r4
 8011184:	b29a      	uxth	r2, r3
 8011186:	4b3d      	ldr	r3, [pc, #244]	; (801127c <tcp_receive+0x88c>)
 8011188:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801118a:	4b3c      	ldr	r3, [pc, #240]	; (801127c <tcp_receive+0x88c>)
 801118c:	881b      	ldrh	r3, [r3, #0]
 801118e:	461a      	mov	r2, r3
 8011190:	4b38      	ldr	r3, [pc, #224]	; (8011274 <tcp_receive+0x884>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	441a      	add	r2, r3
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801119a:	6879      	ldr	r1, [r7, #4]
 801119c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801119e:	440b      	add	r3, r1
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d006      	beq.n	80111b2 <tcp_receive+0x7c2>
 80111a4:	4b36      	ldr	r3, [pc, #216]	; (8011280 <tcp_receive+0x890>)
 80111a6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80111aa:	4936      	ldr	r1, [pc, #216]	; (8011284 <tcp_receive+0x894>)
 80111ac:	4836      	ldr	r0, [pc, #216]	; (8011288 <tcp_receive+0x898>)
 80111ae:	f005 fe31 	bl	8016e14 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	f000 80e7 	beq.w	801138a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80111bc:	4b2e      	ldr	r3, [pc, #184]	; (8011278 <tcp_receive+0x888>)
 80111be:	68db      	ldr	r3, [r3, #12]
 80111c0:	899b      	ldrh	r3, [r3, #12]
 80111c2:	b29b      	uxth	r3, r3
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7fa fbad 	bl	800b924 <lwip_htons>
 80111ca:	4603      	mov	r3, r0
 80111cc:	b2db      	uxtb	r3, r3
 80111ce:	f003 0301 	and.w	r3, r3, #1
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d010      	beq.n	80111f8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80111d6:	e00a      	b.n	80111ee <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111dc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111e2:	681a      	ldr	r2, [r3, #0]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80111e8:	68f8      	ldr	r0, [r7, #12]
 80111ea:	f7fd fcc8 	bl	800eb7e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d1f0      	bne.n	80111d8 <tcp_receive+0x7e8>
 80111f6:	e0c8      	b.n	801138a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111fc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80111fe:	e052      	b.n	80112a6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011202:	68db      	ldr	r3, [r3, #12]
 8011204:	899b      	ldrh	r3, [r3, #12]
 8011206:	b29b      	uxth	r3, r3
 8011208:	4618      	mov	r0, r3
 801120a:	f7fa fb8b 	bl	800b924 <lwip_htons>
 801120e:	4603      	mov	r3, r0
 8011210:	b2db      	uxtb	r3, r3
 8011212:	f003 0301 	and.w	r3, r3, #1
 8011216:	2b00      	cmp	r3, #0
 8011218:	d03d      	beq.n	8011296 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801121a:	4b17      	ldr	r3, [pc, #92]	; (8011278 <tcp_receive+0x888>)
 801121c:	68db      	ldr	r3, [r3, #12]
 801121e:	899b      	ldrh	r3, [r3, #12]
 8011220:	b29b      	uxth	r3, r3
 8011222:	4618      	mov	r0, r3
 8011224:	f7fa fb7e 	bl	800b924 <lwip_htons>
 8011228:	4603      	mov	r3, r0
 801122a:	b2db      	uxtb	r3, r3
 801122c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011230:	2b00      	cmp	r3, #0
 8011232:	d130      	bne.n	8011296 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011234:	4b10      	ldr	r3, [pc, #64]	; (8011278 <tcp_receive+0x888>)
 8011236:	68db      	ldr	r3, [r3, #12]
 8011238:	899b      	ldrh	r3, [r3, #12]
 801123a:	b29c      	uxth	r4, r3
 801123c:	2001      	movs	r0, #1
 801123e:	f7fa fb71 	bl	800b924 <lwip_htons>
 8011242:	4603      	mov	r3, r0
 8011244:	461a      	mov	r2, r3
 8011246:	4b0c      	ldr	r3, [pc, #48]	; (8011278 <tcp_receive+0x888>)
 8011248:	68db      	ldr	r3, [r3, #12]
 801124a:	4322      	orrs	r2, r4
 801124c:	b292      	uxth	r2, r2
 801124e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011250:	4b09      	ldr	r3, [pc, #36]	; (8011278 <tcp_receive+0x888>)
 8011252:	891c      	ldrh	r4, [r3, #8]
 8011254:	4b08      	ldr	r3, [pc, #32]	; (8011278 <tcp_receive+0x888>)
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	899b      	ldrh	r3, [r3, #12]
 801125a:	b29b      	uxth	r3, r3
 801125c:	4618      	mov	r0, r3
 801125e:	f7fa fb61 	bl	800b924 <lwip_htons>
 8011262:	4603      	mov	r3, r0
 8011264:	b2db      	uxtb	r3, r3
 8011266:	f003 0303 	and.w	r3, r3, #3
 801126a:	2b00      	cmp	r3, #0
 801126c:	d00e      	beq.n	801128c <tcp_receive+0x89c>
 801126e:	2301      	movs	r3, #1
 8011270:	e00d      	b.n	801128e <tcp_receive+0x89e>
 8011272:	bf00      	nop
 8011274:	24004b04 	.word	0x24004b04
 8011278:	24004ae4 	.word	0x24004ae4
 801127c:	24004b0e 	.word	0x24004b0e
 8011280:	08019a40 	.word	0x08019a40
 8011284:	08019de8 	.word	0x08019de8
 8011288:	08019a8c 	.word	0x08019a8c
 801128c:	2300      	movs	r3, #0
 801128e:	4423      	add	r3, r4
 8011290:	b29a      	uxth	r2, r3
 8011292:	4b98      	ldr	r3, [pc, #608]	; (80114f4 <tcp_receive+0xb04>)
 8011294:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011298:	613b      	str	r3, [r7, #16]
              next = next->next;
 801129a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80112a0:	6938      	ldr	r0, [r7, #16]
 80112a2:	f7fd fc6c 	bl	800eb7e <tcp_seg_free>
            while (next &&
 80112a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d00e      	beq.n	80112ca <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80112ac:	4b91      	ldr	r3, [pc, #580]	; (80114f4 <tcp_receive+0xb04>)
 80112ae:	881b      	ldrh	r3, [r3, #0]
 80112b0:	461a      	mov	r2, r3
 80112b2:	4b91      	ldr	r3, [pc, #580]	; (80114f8 <tcp_receive+0xb08>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	441a      	add	r2, r3
 80112b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112ba:	68db      	ldr	r3, [r3, #12]
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80112c0:	8909      	ldrh	r1, [r1, #8]
 80112c2:	440b      	add	r3, r1
 80112c4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	da9a      	bge.n	8011200 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80112ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d059      	beq.n	8011384 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80112d0:	4b88      	ldr	r3, [pc, #544]	; (80114f4 <tcp_receive+0xb04>)
 80112d2:	881b      	ldrh	r3, [r3, #0]
 80112d4:	461a      	mov	r2, r3
 80112d6:	4b88      	ldr	r3, [pc, #544]	; (80114f8 <tcp_receive+0xb08>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	441a      	add	r2, r3
 80112dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112de:	68db      	ldr	r3, [r3, #12]
 80112e0:	685b      	ldr	r3, [r3, #4]
 80112e2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	dd4d      	ble.n	8011384 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80112e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	685b      	ldr	r3, [r3, #4]
 80112ee:	b29a      	uxth	r2, r3
 80112f0:	4b81      	ldr	r3, [pc, #516]	; (80114f8 <tcp_receive+0xb08>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	b29b      	uxth	r3, r3
 80112f6:	1ad3      	subs	r3, r2, r3
 80112f8:	b29a      	uxth	r2, r3
 80112fa:	4b80      	ldr	r3, [pc, #512]	; (80114fc <tcp_receive+0xb0c>)
 80112fc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80112fe:	4b7f      	ldr	r3, [pc, #508]	; (80114fc <tcp_receive+0xb0c>)
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	899b      	ldrh	r3, [r3, #12]
 8011304:	b29b      	uxth	r3, r3
 8011306:	4618      	mov	r0, r3
 8011308:	f7fa fb0c 	bl	800b924 <lwip_htons>
 801130c:	4603      	mov	r3, r0
 801130e:	b2db      	uxtb	r3, r3
 8011310:	f003 0302 	and.w	r3, r3, #2
 8011314:	2b00      	cmp	r3, #0
 8011316:	d005      	beq.n	8011324 <tcp_receive+0x934>
                inseg.len -= 1;
 8011318:	4b78      	ldr	r3, [pc, #480]	; (80114fc <tcp_receive+0xb0c>)
 801131a:	891b      	ldrh	r3, [r3, #8]
 801131c:	3b01      	subs	r3, #1
 801131e:	b29a      	uxth	r2, r3
 8011320:	4b76      	ldr	r3, [pc, #472]	; (80114fc <tcp_receive+0xb0c>)
 8011322:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011324:	4b75      	ldr	r3, [pc, #468]	; (80114fc <tcp_receive+0xb0c>)
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	4a74      	ldr	r2, [pc, #464]	; (80114fc <tcp_receive+0xb0c>)
 801132a:	8912      	ldrh	r2, [r2, #8]
 801132c:	4611      	mov	r1, r2
 801132e:	4618      	mov	r0, r3
 8011330:	f7fb fe1c 	bl	800cf6c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011334:	4b71      	ldr	r3, [pc, #452]	; (80114fc <tcp_receive+0xb0c>)
 8011336:	891c      	ldrh	r4, [r3, #8]
 8011338:	4b70      	ldr	r3, [pc, #448]	; (80114fc <tcp_receive+0xb0c>)
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	899b      	ldrh	r3, [r3, #12]
 801133e:	b29b      	uxth	r3, r3
 8011340:	4618      	mov	r0, r3
 8011342:	f7fa faef 	bl	800b924 <lwip_htons>
 8011346:	4603      	mov	r3, r0
 8011348:	b2db      	uxtb	r3, r3
 801134a:	f003 0303 	and.w	r3, r3, #3
 801134e:	2b00      	cmp	r3, #0
 8011350:	d001      	beq.n	8011356 <tcp_receive+0x966>
 8011352:	2301      	movs	r3, #1
 8011354:	e000      	b.n	8011358 <tcp_receive+0x968>
 8011356:	2300      	movs	r3, #0
 8011358:	4423      	add	r3, r4
 801135a:	b29a      	uxth	r2, r3
 801135c:	4b65      	ldr	r3, [pc, #404]	; (80114f4 <tcp_receive+0xb04>)
 801135e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011360:	4b64      	ldr	r3, [pc, #400]	; (80114f4 <tcp_receive+0xb04>)
 8011362:	881b      	ldrh	r3, [r3, #0]
 8011364:	461a      	mov	r2, r3
 8011366:	4b64      	ldr	r3, [pc, #400]	; (80114f8 <tcp_receive+0xb08>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	441a      	add	r2, r3
 801136c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	429a      	cmp	r2, r3
 8011374:	d006      	beq.n	8011384 <tcp_receive+0x994>
 8011376:	4b62      	ldr	r3, [pc, #392]	; (8011500 <tcp_receive+0xb10>)
 8011378:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801137c:	4961      	ldr	r1, [pc, #388]	; (8011504 <tcp_receive+0xb14>)
 801137e:	4862      	ldr	r0, [pc, #392]	; (8011508 <tcp_receive+0xb18>)
 8011380:	f005 fd48 	bl	8016e14 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011388:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801138a:	4b5a      	ldr	r3, [pc, #360]	; (80114f4 <tcp_receive+0xb04>)
 801138c:	881b      	ldrh	r3, [r3, #0]
 801138e:	461a      	mov	r2, r3
 8011390:	4b59      	ldr	r3, [pc, #356]	; (80114f8 <tcp_receive+0xb08>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	441a      	add	r2, r3
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801139e:	4b55      	ldr	r3, [pc, #340]	; (80114f4 <tcp_receive+0xb04>)
 80113a0:	881b      	ldrh	r3, [r3, #0]
 80113a2:	429a      	cmp	r2, r3
 80113a4:	d206      	bcs.n	80113b4 <tcp_receive+0x9c4>
 80113a6:	4b56      	ldr	r3, [pc, #344]	; (8011500 <tcp_receive+0xb10>)
 80113a8:	f240 6207 	movw	r2, #1543	; 0x607
 80113ac:	4957      	ldr	r1, [pc, #348]	; (801150c <tcp_receive+0xb1c>)
 80113ae:	4856      	ldr	r0, [pc, #344]	; (8011508 <tcp_receive+0xb18>)
 80113b0:	f005 fd30 	bl	8016e14 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80113b8:	4b4e      	ldr	r3, [pc, #312]	; (80114f4 <tcp_receive+0xb04>)
 80113ba:	881b      	ldrh	r3, [r3, #0]
 80113bc:	1ad3      	subs	r3, r2, r3
 80113be:	b29a      	uxth	r2, r3
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f7fc feb5 	bl	800e134 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80113ca:	4b4c      	ldr	r3, [pc, #304]	; (80114fc <tcp_receive+0xb0c>)
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	891b      	ldrh	r3, [r3, #8]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d006      	beq.n	80113e2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80113d4:	4b49      	ldr	r3, [pc, #292]	; (80114fc <tcp_receive+0xb0c>)
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	4a4d      	ldr	r2, [pc, #308]	; (8011510 <tcp_receive+0xb20>)
 80113da:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80113dc:	4b47      	ldr	r3, [pc, #284]	; (80114fc <tcp_receive+0xb0c>)
 80113de:	2200      	movs	r2, #0
 80113e0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80113e2:	4b46      	ldr	r3, [pc, #280]	; (80114fc <tcp_receive+0xb0c>)
 80113e4:	68db      	ldr	r3, [r3, #12]
 80113e6:	899b      	ldrh	r3, [r3, #12]
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7fa fa9a 	bl	800b924 <lwip_htons>
 80113f0:	4603      	mov	r3, r0
 80113f2:	b2db      	uxtb	r3, r3
 80113f4:	f003 0301 	and.w	r3, r3, #1
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	f000 80b8 	beq.w	801156e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80113fe:	4b45      	ldr	r3, [pc, #276]	; (8011514 <tcp_receive+0xb24>)
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	f043 0320 	orr.w	r3, r3, #32
 8011406:	b2da      	uxtb	r2, r3
 8011408:	4b42      	ldr	r3, [pc, #264]	; (8011514 <tcp_receive+0xb24>)
 801140a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801140c:	e0af      	b.n	801156e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011412:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011418:	68db      	ldr	r3, [r3, #12]
 801141a:	685b      	ldr	r3, [r3, #4]
 801141c:	4a36      	ldr	r2, [pc, #216]	; (80114f8 <tcp_receive+0xb08>)
 801141e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	891b      	ldrh	r3, [r3, #8]
 8011424:	461c      	mov	r4, r3
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	68db      	ldr	r3, [r3, #12]
 801142a:	899b      	ldrh	r3, [r3, #12]
 801142c:	b29b      	uxth	r3, r3
 801142e:	4618      	mov	r0, r3
 8011430:	f7fa fa78 	bl	800b924 <lwip_htons>
 8011434:	4603      	mov	r3, r0
 8011436:	b2db      	uxtb	r3, r3
 8011438:	f003 0303 	and.w	r3, r3, #3
 801143c:	2b00      	cmp	r3, #0
 801143e:	d001      	beq.n	8011444 <tcp_receive+0xa54>
 8011440:	2301      	movs	r3, #1
 8011442:	e000      	b.n	8011446 <tcp_receive+0xa56>
 8011444:	2300      	movs	r3, #0
 8011446:	191a      	adds	r2, r3, r4
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801144c:	441a      	add	r2, r3
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011456:	461c      	mov	r4, r3
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	891b      	ldrh	r3, [r3, #8]
 801145c:	461d      	mov	r5, r3
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	68db      	ldr	r3, [r3, #12]
 8011462:	899b      	ldrh	r3, [r3, #12]
 8011464:	b29b      	uxth	r3, r3
 8011466:	4618      	mov	r0, r3
 8011468:	f7fa fa5c 	bl	800b924 <lwip_htons>
 801146c:	4603      	mov	r3, r0
 801146e:	b2db      	uxtb	r3, r3
 8011470:	f003 0303 	and.w	r3, r3, #3
 8011474:	2b00      	cmp	r3, #0
 8011476:	d001      	beq.n	801147c <tcp_receive+0xa8c>
 8011478:	2301      	movs	r3, #1
 801147a:	e000      	b.n	801147e <tcp_receive+0xa8e>
 801147c:	2300      	movs	r3, #0
 801147e:	442b      	add	r3, r5
 8011480:	429c      	cmp	r4, r3
 8011482:	d206      	bcs.n	8011492 <tcp_receive+0xaa2>
 8011484:	4b1e      	ldr	r3, [pc, #120]	; (8011500 <tcp_receive+0xb10>)
 8011486:	f240 622b 	movw	r2, #1579	; 0x62b
 801148a:	4923      	ldr	r1, [pc, #140]	; (8011518 <tcp_receive+0xb28>)
 801148c:	481e      	ldr	r0, [pc, #120]	; (8011508 <tcp_receive+0xb18>)
 801148e:	f005 fcc1 	bl	8016e14 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	891b      	ldrh	r3, [r3, #8]
 8011496:	461c      	mov	r4, r3
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	68db      	ldr	r3, [r3, #12]
 801149c:	899b      	ldrh	r3, [r3, #12]
 801149e:	b29b      	uxth	r3, r3
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7fa fa3f 	bl	800b924 <lwip_htons>
 80114a6:	4603      	mov	r3, r0
 80114a8:	b2db      	uxtb	r3, r3
 80114aa:	f003 0303 	and.w	r3, r3, #3
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d001      	beq.n	80114b6 <tcp_receive+0xac6>
 80114b2:	2301      	movs	r3, #1
 80114b4:	e000      	b.n	80114b8 <tcp_receive+0xac8>
 80114b6:	2300      	movs	r3, #0
 80114b8:	1919      	adds	r1, r3, r4
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80114be:	b28b      	uxth	r3, r1
 80114c0:	1ad3      	subs	r3, r2, r3
 80114c2:	b29a      	uxth	r2, r3
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f7fc fe33 	bl	800e134 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	891b      	ldrh	r3, [r3, #8]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d028      	beq.n	801152a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80114d8:	4b0d      	ldr	r3, [pc, #52]	; (8011510 <tcp_receive+0xb20>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d01d      	beq.n	801151c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80114e0:	4b0b      	ldr	r3, [pc, #44]	; (8011510 <tcp_receive+0xb20>)
 80114e2:	681a      	ldr	r2, [r3, #0]
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	4619      	mov	r1, r3
 80114ea:	4610      	mov	r0, r2
 80114ec:	f7fb ff92 	bl	800d414 <pbuf_cat>
 80114f0:	e018      	b.n	8011524 <tcp_receive+0xb34>
 80114f2:	bf00      	nop
 80114f4:	24004b0e 	.word	0x24004b0e
 80114f8:	24004b04 	.word	0x24004b04
 80114fc:	24004ae4 	.word	0x24004ae4
 8011500:	08019a40 	.word	0x08019a40
 8011504:	08019e20 	.word	0x08019e20
 8011508:	08019a8c 	.word	0x08019a8c
 801150c:	08019e5c 	.word	0x08019e5c
 8011510:	24004b14 	.word	0x24004b14
 8011514:	24004b11 	.word	0x24004b11
 8011518:	08019e7c 	.word	0x08019e7c
            } else {
              recv_data = cseg->p;
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	4a70      	ldr	r2, [pc, #448]	; (80116e4 <tcp_receive+0xcf4>)
 8011522:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	2200      	movs	r2, #0
 8011528:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	68db      	ldr	r3, [r3, #12]
 801152e:	899b      	ldrh	r3, [r3, #12]
 8011530:	b29b      	uxth	r3, r3
 8011532:	4618      	mov	r0, r3
 8011534:	f7fa f9f6 	bl	800b924 <lwip_htons>
 8011538:	4603      	mov	r3, r0
 801153a:	b2db      	uxtb	r3, r3
 801153c:	f003 0301 	and.w	r3, r3, #1
 8011540:	2b00      	cmp	r3, #0
 8011542:	d00d      	beq.n	8011560 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011544:	4b68      	ldr	r3, [pc, #416]	; (80116e8 <tcp_receive+0xcf8>)
 8011546:	781b      	ldrb	r3, [r3, #0]
 8011548:	f043 0320 	orr.w	r3, r3, #32
 801154c:	b2da      	uxtb	r2, r3
 801154e:	4b66      	ldr	r3, [pc, #408]	; (80116e8 <tcp_receive+0xcf8>)
 8011550:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	7d1b      	ldrb	r3, [r3, #20]
 8011556:	2b04      	cmp	r3, #4
 8011558:	d102      	bne.n	8011560 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	2207      	movs	r2, #7
 801155e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	681a      	ldr	r2, [r3, #0]
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011568:	68b8      	ldr	r0, [r7, #8]
 801156a:	f7fd fb08 	bl	800eb7e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011572:	2b00      	cmp	r3, #0
 8011574:	d008      	beq.n	8011588 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	685a      	ldr	r2, [r3, #4]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011582:	429a      	cmp	r2, r3
 8011584:	f43f af43 	beq.w	801140e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	8b5b      	ldrh	r3, [r3, #26]
 801158c:	f003 0301 	and.w	r3, r3, #1
 8011590:	2b00      	cmp	r3, #0
 8011592:	d00e      	beq.n	80115b2 <tcp_receive+0xbc2>
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	8b5b      	ldrh	r3, [r3, #26]
 8011598:	f023 0301 	bic.w	r3, r3, #1
 801159c:	b29a      	uxth	r2, r3
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	835a      	strh	r2, [r3, #26]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	8b5b      	ldrh	r3, [r3, #26]
 80115a6:	f043 0302 	orr.w	r3, r3, #2
 80115aa:	b29a      	uxth	r2, r3
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80115b0:	e188      	b.n	80118c4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	8b5b      	ldrh	r3, [r3, #26]
 80115b6:	f043 0301 	orr.w	r3, r3, #1
 80115ba:	b29a      	uxth	r2, r3
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80115c0:	e180      	b.n	80118c4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d106      	bne.n	80115d8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80115ca:	4848      	ldr	r0, [pc, #288]	; (80116ec <tcp_receive+0xcfc>)
 80115cc:	f7fd faf0 	bl	800ebb0 <tcp_seg_copy>
 80115d0:	4602      	mov	r2, r0
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	675a      	str	r2, [r3, #116]	; 0x74
 80115d6:	e16d      	b.n	80118b4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80115d8:	2300      	movs	r3, #0
 80115da:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80115e2:	e157      	b.n	8011894 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80115e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	685a      	ldr	r2, [r3, #4]
 80115ea:	4b41      	ldr	r3, [pc, #260]	; (80116f0 <tcp_receive+0xd00>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d11d      	bne.n	801162e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80115f2:	4b3e      	ldr	r3, [pc, #248]	; (80116ec <tcp_receive+0xcfc>)
 80115f4:	891a      	ldrh	r2, [r3, #8]
 80115f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f8:	891b      	ldrh	r3, [r3, #8]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	f240 814f 	bls.w	801189e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011600:	483a      	ldr	r0, [pc, #232]	; (80116ec <tcp_receive+0xcfc>)
 8011602:	f7fd fad5 	bl	800ebb0 <tcp_seg_copy>
 8011606:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	2b00      	cmp	r3, #0
 801160c:	f000 8149 	beq.w	80118a2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8011610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011612:	2b00      	cmp	r3, #0
 8011614:	d003      	beq.n	801161e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011618:	697a      	ldr	r2, [r7, #20]
 801161a:	601a      	str	r2, [r3, #0]
 801161c:	e002      	b.n	8011624 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	697a      	ldr	r2, [r7, #20]
 8011622:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011624:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011626:	6978      	ldr	r0, [r7, #20]
 8011628:	f7ff f8de 	bl	80107e8 <tcp_oos_insert_segment>
                }
                break;
 801162c:	e139      	b.n	80118a2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801162e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011630:	2b00      	cmp	r3, #0
 8011632:	d117      	bne.n	8011664 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011634:	4b2e      	ldr	r3, [pc, #184]	; (80116f0 <tcp_receive+0xd00>)
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801163a:	68db      	ldr	r3, [r3, #12]
 801163c:	685b      	ldr	r3, [r3, #4]
 801163e:	1ad3      	subs	r3, r2, r3
 8011640:	2b00      	cmp	r3, #0
 8011642:	da57      	bge.n	80116f4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011644:	4829      	ldr	r0, [pc, #164]	; (80116ec <tcp_receive+0xcfc>)
 8011646:	f7fd fab3 	bl	800ebb0 <tcp_seg_copy>
 801164a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801164c:	69bb      	ldr	r3, [r7, #24]
 801164e:	2b00      	cmp	r3, #0
 8011650:	f000 8129 	beq.w	80118a6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	69ba      	ldr	r2, [r7, #24]
 8011658:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801165a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801165c:	69b8      	ldr	r0, [r7, #24]
 801165e:	f7ff f8c3 	bl	80107e8 <tcp_oos_insert_segment>
                  }
                  break;
 8011662:	e120      	b.n	80118a6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011664:	4b22      	ldr	r3, [pc, #136]	; (80116f0 <tcp_receive+0xd00>)
 8011666:	681a      	ldr	r2, [r3, #0]
 8011668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	685b      	ldr	r3, [r3, #4]
 801166e:	1ad3      	subs	r3, r2, r3
 8011670:	3b01      	subs	r3, #1
 8011672:	2b00      	cmp	r3, #0
 8011674:	db3e      	blt.n	80116f4 <tcp_receive+0xd04>
 8011676:	4b1e      	ldr	r3, [pc, #120]	; (80116f0 <tcp_receive+0xd00>)
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801167c:	68db      	ldr	r3, [r3, #12]
 801167e:	685b      	ldr	r3, [r3, #4]
 8011680:	1ad3      	subs	r3, r2, r3
 8011682:	3301      	adds	r3, #1
 8011684:	2b00      	cmp	r3, #0
 8011686:	dc35      	bgt.n	80116f4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011688:	4818      	ldr	r0, [pc, #96]	; (80116ec <tcp_receive+0xcfc>)
 801168a:	f7fd fa91 	bl	800ebb0 <tcp_seg_copy>
 801168e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011690:	69fb      	ldr	r3, [r7, #28]
 8011692:	2b00      	cmp	r3, #0
 8011694:	f000 8109 	beq.w	80118aa <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801169a:	68db      	ldr	r3, [r3, #12]
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116a0:	8912      	ldrh	r2, [r2, #8]
 80116a2:	441a      	add	r2, r3
 80116a4:	4b12      	ldr	r3, [pc, #72]	; (80116f0 <tcp_receive+0xd00>)
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	1ad3      	subs	r3, r2, r3
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	dd12      	ble.n	80116d4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80116ae:	4b10      	ldr	r3, [pc, #64]	; (80116f0 <tcp_receive+0xd00>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	b29a      	uxth	r2, r3
 80116b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b6:	68db      	ldr	r3, [r3, #12]
 80116b8:	685b      	ldr	r3, [r3, #4]
 80116ba:	b29b      	uxth	r3, r3
 80116bc:	1ad3      	subs	r3, r2, r3
 80116be:	b29a      	uxth	r2, r3
 80116c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116c2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80116c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116c6:	685a      	ldr	r2, [r3, #4]
 80116c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ca:	891b      	ldrh	r3, [r3, #8]
 80116cc:	4619      	mov	r1, r3
 80116ce:	4610      	mov	r0, r2
 80116d0:	f7fb fc4c 	bl	800cf6c <pbuf_realloc>
                    }
                    prev->next = cseg;
 80116d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116d6:	69fa      	ldr	r2, [r7, #28]
 80116d8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80116da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116dc:	69f8      	ldr	r0, [r7, #28]
 80116de:	f7ff f883 	bl	80107e8 <tcp_oos_insert_segment>
                  }
                  break;
 80116e2:	e0e2      	b.n	80118aa <tcp_receive+0xeba>
 80116e4:	24004b14 	.word	0x24004b14
 80116e8:	24004b11 	.word	0x24004b11
 80116ec:	24004ae4 	.word	0x24004ae4
 80116f0:	24004b04 	.word	0x24004b04
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80116f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80116f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	f040 80c6 	bne.w	801188e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011702:	4b80      	ldr	r3, [pc, #512]	; (8011904 <tcp_receive+0xf14>)
 8011704:	681a      	ldr	r2, [r3, #0]
 8011706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801170e:	2b00      	cmp	r3, #0
 8011710:	f340 80bd 	ble.w	801188e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011716:	68db      	ldr	r3, [r3, #12]
 8011718:	899b      	ldrh	r3, [r3, #12]
 801171a:	b29b      	uxth	r3, r3
 801171c:	4618      	mov	r0, r3
 801171e:	f7fa f901 	bl	800b924 <lwip_htons>
 8011722:	4603      	mov	r3, r0
 8011724:	b2db      	uxtb	r3, r3
 8011726:	f003 0301 	and.w	r3, r3, #1
 801172a:	2b00      	cmp	r3, #0
 801172c:	f040 80bf 	bne.w	80118ae <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011730:	4875      	ldr	r0, [pc, #468]	; (8011908 <tcp_receive+0xf18>)
 8011732:	f7fd fa3d 	bl	800ebb0 <tcp_seg_copy>
 8011736:	4602      	mov	r2, r0
 8011738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801173a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801173c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	f000 80b6 	beq.w	80118b2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011748:	68db      	ldr	r3, [r3, #12]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801174e:	8912      	ldrh	r2, [r2, #8]
 8011750:	441a      	add	r2, r3
 8011752:	4b6c      	ldr	r3, [pc, #432]	; (8011904 <tcp_receive+0xf14>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	1ad3      	subs	r3, r2, r3
 8011758:	2b00      	cmp	r3, #0
 801175a:	dd12      	ble.n	8011782 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801175c:	4b69      	ldr	r3, [pc, #420]	; (8011904 <tcp_receive+0xf14>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	b29a      	uxth	r2, r3
 8011762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011764:	68db      	ldr	r3, [r3, #12]
 8011766:	685b      	ldr	r3, [r3, #4]
 8011768:	b29b      	uxth	r3, r3
 801176a:	1ad3      	subs	r3, r2, r3
 801176c:	b29a      	uxth	r2, r3
 801176e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011770:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011774:	685a      	ldr	r2, [r3, #4]
 8011776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011778:	891b      	ldrh	r3, [r3, #8]
 801177a:	4619      	mov	r1, r3
 801177c:	4610      	mov	r0, r2
 801177e:	f7fb fbf5 	bl	800cf6c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011782:	4b62      	ldr	r3, [pc, #392]	; (801190c <tcp_receive+0xf1c>)
 8011784:	881b      	ldrh	r3, [r3, #0]
 8011786:	461a      	mov	r2, r3
 8011788:	4b5e      	ldr	r3, [pc, #376]	; (8011904 <tcp_receive+0xf14>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	441a      	add	r2, r3
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011792:	6879      	ldr	r1, [r7, #4]
 8011794:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011796:	440b      	add	r3, r1
 8011798:	1ad3      	subs	r3, r2, r3
 801179a:	2b00      	cmp	r3, #0
 801179c:	f340 8089 	ble.w	80118b2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80117a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	899b      	ldrh	r3, [r3, #12]
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7fa f8ba 	bl	800b924 <lwip_htons>
 80117b0:	4603      	mov	r3, r0
 80117b2:	b2db      	uxtb	r3, r3
 80117b4:	f003 0301 	and.w	r3, r3, #1
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d022      	beq.n	8011802 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80117bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	68db      	ldr	r3, [r3, #12]
 80117c2:	899b      	ldrh	r3, [r3, #12]
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	b21b      	sxth	r3, r3
 80117c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80117cc:	b21c      	sxth	r4, r3
 80117ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	899b      	ldrh	r3, [r3, #12]
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	4618      	mov	r0, r3
 80117da:	f7fa f8a3 	bl	800b924 <lwip_htons>
 80117de:	4603      	mov	r3, r0
 80117e0:	b2db      	uxtb	r3, r3
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80117e8:	b29b      	uxth	r3, r3
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7fa f89a 	bl	800b924 <lwip_htons>
 80117f0:	4603      	mov	r3, r0
 80117f2:	b21b      	sxth	r3, r3
 80117f4:	4323      	orrs	r3, r4
 80117f6:	b21a      	sxth	r2, r3
 80117f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	68db      	ldr	r3, [r3, #12]
 80117fe:	b292      	uxth	r2, r2
 8011800:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011806:	b29a      	uxth	r2, r3
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801180c:	4413      	add	r3, r2
 801180e:	b299      	uxth	r1, r3
 8011810:	4b3c      	ldr	r3, [pc, #240]	; (8011904 <tcp_receive+0xf14>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	b29a      	uxth	r2, r3
 8011816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	1a8a      	subs	r2, r1, r2
 801181c:	b292      	uxth	r2, r2
 801181e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	685a      	ldr	r2, [r3, #4]
 8011826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	891b      	ldrh	r3, [r3, #8]
 801182c:	4619      	mov	r1, r3
 801182e:	4610      	mov	r0, r2
 8011830:	f7fb fb9c 	bl	800cf6c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	891c      	ldrh	r4, [r3, #8]
 801183a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	68db      	ldr	r3, [r3, #12]
 8011840:	899b      	ldrh	r3, [r3, #12]
 8011842:	b29b      	uxth	r3, r3
 8011844:	4618      	mov	r0, r3
 8011846:	f7fa f86d 	bl	800b924 <lwip_htons>
 801184a:	4603      	mov	r3, r0
 801184c:	b2db      	uxtb	r3, r3
 801184e:	f003 0303 	and.w	r3, r3, #3
 8011852:	2b00      	cmp	r3, #0
 8011854:	d001      	beq.n	801185a <tcp_receive+0xe6a>
 8011856:	2301      	movs	r3, #1
 8011858:	e000      	b.n	801185c <tcp_receive+0xe6c>
 801185a:	2300      	movs	r3, #0
 801185c:	4423      	add	r3, r4
 801185e:	b29a      	uxth	r2, r3
 8011860:	4b2a      	ldr	r3, [pc, #168]	; (801190c <tcp_receive+0xf1c>)
 8011862:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011864:	4b29      	ldr	r3, [pc, #164]	; (801190c <tcp_receive+0xf1c>)
 8011866:	881b      	ldrh	r3, [r3, #0]
 8011868:	461a      	mov	r2, r3
 801186a:	4b26      	ldr	r3, [pc, #152]	; (8011904 <tcp_receive+0xf14>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	441a      	add	r2, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011874:	6879      	ldr	r1, [r7, #4]
 8011876:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011878:	440b      	add	r3, r1
 801187a:	429a      	cmp	r2, r3
 801187c:	d019      	beq.n	80118b2 <tcp_receive+0xec2>
 801187e:	4b24      	ldr	r3, [pc, #144]	; (8011910 <tcp_receive+0xf20>)
 8011880:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011884:	4923      	ldr	r1, [pc, #140]	; (8011914 <tcp_receive+0xf24>)
 8011886:	4824      	ldr	r0, [pc, #144]	; (8011918 <tcp_receive+0xf28>)
 8011888:	f005 fac4 	bl	8016e14 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801188c:	e011      	b.n	80118b2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801188e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	63bb      	str	r3, [r7, #56]	; 0x38
 8011894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011896:	2b00      	cmp	r3, #0
 8011898:	f47f aea4 	bne.w	80115e4 <tcp_receive+0xbf4>
 801189c:	e00a      	b.n	80118b4 <tcp_receive+0xec4>
                break;
 801189e:	bf00      	nop
 80118a0:	e008      	b.n	80118b4 <tcp_receive+0xec4>
                break;
 80118a2:	bf00      	nop
 80118a4:	e006      	b.n	80118b4 <tcp_receive+0xec4>
                  break;
 80118a6:	bf00      	nop
 80118a8:	e004      	b.n	80118b4 <tcp_receive+0xec4>
                  break;
 80118aa:	bf00      	nop
 80118ac:	e002      	b.n	80118b4 <tcp_receive+0xec4>
                  break;
 80118ae:	bf00      	nop
 80118b0:	e000      	b.n	80118b4 <tcp_receive+0xec4>
                break;
 80118b2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f001 fe8b 	bl	80135d0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80118ba:	e003      	b.n	80118c4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f001 fe87 	bl	80135d0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80118c2:	e01a      	b.n	80118fa <tcp_receive+0xf0a>
 80118c4:	e019      	b.n	80118fa <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80118c6:	4b0f      	ldr	r3, [pc, #60]	; (8011904 <tcp_receive+0xf14>)
 80118c8:	681a      	ldr	r2, [r3, #0]
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118ce:	1ad3      	subs	r3, r2, r3
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	db0a      	blt.n	80118ea <tcp_receive+0xefa>
 80118d4:	4b0b      	ldr	r3, [pc, #44]	; (8011904 <tcp_receive+0xf14>)
 80118d6:	681a      	ldr	r2, [r3, #0]
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118dc:	6879      	ldr	r1, [r7, #4]
 80118de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80118e0:	440b      	add	r3, r1
 80118e2:	1ad3      	subs	r3, r2, r3
 80118e4:	3301      	adds	r3, #1
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	dd07      	ble.n	80118fa <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	8b5b      	ldrh	r3, [r3, #26]
 80118ee:	f043 0302 	orr.w	r3, r3, #2
 80118f2:	b29a      	uxth	r2, r3
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80118f8:	e7ff      	b.n	80118fa <tcp_receive+0xf0a>
 80118fa:	bf00      	nop
 80118fc:	3750      	adds	r7, #80	; 0x50
 80118fe:	46bd      	mov	sp, r7
 8011900:	bdb0      	pop	{r4, r5, r7, pc}
 8011902:	bf00      	nop
 8011904:	24004b04 	.word	0x24004b04
 8011908:	24004ae4 	.word	0x24004ae4
 801190c:	24004b0e 	.word	0x24004b0e
 8011910:	08019a40 	.word	0x08019a40
 8011914:	08019de8 	.word	0x08019de8
 8011918:	08019a8c 	.word	0x08019a8c

0801191c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801191c:	b480      	push	{r7}
 801191e:	b083      	sub	sp, #12
 8011920:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011922:	4b15      	ldr	r3, [pc, #84]	; (8011978 <tcp_get_next_optbyte+0x5c>)
 8011924:	881b      	ldrh	r3, [r3, #0]
 8011926:	1c5a      	adds	r2, r3, #1
 8011928:	b291      	uxth	r1, r2
 801192a:	4a13      	ldr	r2, [pc, #76]	; (8011978 <tcp_get_next_optbyte+0x5c>)
 801192c:	8011      	strh	r1, [r2, #0]
 801192e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011930:	4b12      	ldr	r3, [pc, #72]	; (801197c <tcp_get_next_optbyte+0x60>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d004      	beq.n	8011942 <tcp_get_next_optbyte+0x26>
 8011938:	4b11      	ldr	r3, [pc, #68]	; (8011980 <tcp_get_next_optbyte+0x64>)
 801193a:	881b      	ldrh	r3, [r3, #0]
 801193c:	88fa      	ldrh	r2, [r7, #6]
 801193e:	429a      	cmp	r2, r3
 8011940:	d208      	bcs.n	8011954 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011942:	4b10      	ldr	r3, [pc, #64]	; (8011984 <tcp_get_next_optbyte+0x68>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	3314      	adds	r3, #20
 8011948:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801194a:	88fb      	ldrh	r3, [r7, #6]
 801194c:	683a      	ldr	r2, [r7, #0]
 801194e:	4413      	add	r3, r2
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	e00b      	b.n	801196c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011954:	88fb      	ldrh	r3, [r7, #6]
 8011956:	b2da      	uxtb	r2, r3
 8011958:	4b09      	ldr	r3, [pc, #36]	; (8011980 <tcp_get_next_optbyte+0x64>)
 801195a:	881b      	ldrh	r3, [r3, #0]
 801195c:	b2db      	uxtb	r3, r3
 801195e:	1ad3      	subs	r3, r2, r3
 8011960:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011962:	4b06      	ldr	r3, [pc, #24]	; (801197c <tcp_get_next_optbyte+0x60>)
 8011964:	681a      	ldr	r2, [r3, #0]
 8011966:	797b      	ldrb	r3, [r7, #5]
 8011968:	4413      	add	r3, r2
 801196a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801196c:	4618      	mov	r0, r3
 801196e:	370c      	adds	r7, #12
 8011970:	46bd      	mov	sp, r7
 8011972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011976:	4770      	bx	lr
 8011978:	24004b00 	.word	0x24004b00
 801197c:	24004afc 	.word	0x24004afc
 8011980:	24004afa 	.word	0x24004afa
 8011984:	24004af4 	.word	0x24004af4

08011988 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b084      	sub	sp, #16
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d106      	bne.n	80119a4 <tcp_parseopt+0x1c>
 8011996:	4b32      	ldr	r3, [pc, #200]	; (8011a60 <tcp_parseopt+0xd8>)
 8011998:	f240 727d 	movw	r2, #1917	; 0x77d
 801199c:	4931      	ldr	r1, [pc, #196]	; (8011a64 <tcp_parseopt+0xdc>)
 801199e:	4832      	ldr	r0, [pc, #200]	; (8011a68 <tcp_parseopt+0xe0>)
 80119a0:	f005 fa38 	bl	8016e14 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80119a4:	4b31      	ldr	r3, [pc, #196]	; (8011a6c <tcp_parseopt+0xe4>)
 80119a6:	881b      	ldrh	r3, [r3, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d055      	beq.n	8011a58 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80119ac:	4b30      	ldr	r3, [pc, #192]	; (8011a70 <tcp_parseopt+0xe8>)
 80119ae:	2200      	movs	r2, #0
 80119b0:	801a      	strh	r2, [r3, #0]
 80119b2:	e045      	b.n	8011a40 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80119b4:	f7ff ffb2 	bl	801191c <tcp_get_next_optbyte>
 80119b8:	4603      	mov	r3, r0
 80119ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80119bc:	7bfb      	ldrb	r3, [r7, #15]
 80119be:	2b02      	cmp	r3, #2
 80119c0:	d006      	beq.n	80119d0 <tcp_parseopt+0x48>
 80119c2:	2b02      	cmp	r3, #2
 80119c4:	dc2b      	bgt.n	8011a1e <tcp_parseopt+0x96>
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d041      	beq.n	8011a4e <tcp_parseopt+0xc6>
 80119ca:	2b01      	cmp	r3, #1
 80119cc:	d127      	bne.n	8011a1e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80119ce:	e037      	b.n	8011a40 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80119d0:	f7ff ffa4 	bl	801191c <tcp_get_next_optbyte>
 80119d4:	4603      	mov	r3, r0
 80119d6:	2b04      	cmp	r3, #4
 80119d8:	d13b      	bne.n	8011a52 <tcp_parseopt+0xca>
 80119da:	4b25      	ldr	r3, [pc, #148]	; (8011a70 <tcp_parseopt+0xe8>)
 80119dc:	881b      	ldrh	r3, [r3, #0]
 80119de:	3301      	adds	r3, #1
 80119e0:	4a22      	ldr	r2, [pc, #136]	; (8011a6c <tcp_parseopt+0xe4>)
 80119e2:	8812      	ldrh	r2, [r2, #0]
 80119e4:	4293      	cmp	r3, r2
 80119e6:	da34      	bge.n	8011a52 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80119e8:	f7ff ff98 	bl	801191c <tcp_get_next_optbyte>
 80119ec:	4603      	mov	r3, r0
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	021b      	lsls	r3, r3, #8
 80119f2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80119f4:	f7ff ff92 	bl	801191c <tcp_get_next_optbyte>
 80119f8:	4603      	mov	r3, r0
 80119fa:	b29a      	uxth	r2, r3
 80119fc:	89bb      	ldrh	r3, [r7, #12]
 80119fe:	4313      	orrs	r3, r2
 8011a00:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011a02:	89bb      	ldrh	r3, [r7, #12]
 8011a04:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011a08:	d804      	bhi.n	8011a14 <tcp_parseopt+0x8c>
 8011a0a:	89bb      	ldrh	r3, [r7, #12]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d001      	beq.n	8011a14 <tcp_parseopt+0x8c>
 8011a10:	89ba      	ldrh	r2, [r7, #12]
 8011a12:	e001      	b.n	8011a18 <tcp_parseopt+0x90>
 8011a14:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011a1c:	e010      	b.n	8011a40 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011a1e:	f7ff ff7d 	bl	801191c <tcp_get_next_optbyte>
 8011a22:	4603      	mov	r3, r0
 8011a24:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011a26:	7afb      	ldrb	r3, [r7, #11]
 8011a28:	2b01      	cmp	r3, #1
 8011a2a:	d914      	bls.n	8011a56 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011a2c:	7afb      	ldrb	r3, [r7, #11]
 8011a2e:	b29a      	uxth	r2, r3
 8011a30:	4b0f      	ldr	r3, [pc, #60]	; (8011a70 <tcp_parseopt+0xe8>)
 8011a32:	881b      	ldrh	r3, [r3, #0]
 8011a34:	4413      	add	r3, r2
 8011a36:	b29b      	uxth	r3, r3
 8011a38:	3b02      	subs	r3, #2
 8011a3a:	b29a      	uxth	r2, r3
 8011a3c:	4b0c      	ldr	r3, [pc, #48]	; (8011a70 <tcp_parseopt+0xe8>)
 8011a3e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011a40:	4b0b      	ldr	r3, [pc, #44]	; (8011a70 <tcp_parseopt+0xe8>)
 8011a42:	881a      	ldrh	r2, [r3, #0]
 8011a44:	4b09      	ldr	r3, [pc, #36]	; (8011a6c <tcp_parseopt+0xe4>)
 8011a46:	881b      	ldrh	r3, [r3, #0]
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d3b3      	bcc.n	80119b4 <tcp_parseopt+0x2c>
 8011a4c:	e004      	b.n	8011a58 <tcp_parseopt+0xd0>
          return;
 8011a4e:	bf00      	nop
 8011a50:	e002      	b.n	8011a58 <tcp_parseopt+0xd0>
            return;
 8011a52:	bf00      	nop
 8011a54:	e000      	b.n	8011a58 <tcp_parseopt+0xd0>
            return;
 8011a56:	bf00      	nop
      }
    }
  }
}
 8011a58:	3710      	adds	r7, #16
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}
 8011a5e:	bf00      	nop
 8011a60:	08019a40 	.word	0x08019a40
 8011a64:	08019ea4 	.word	0x08019ea4
 8011a68:	08019a8c 	.word	0x08019a8c
 8011a6c:	24004af8 	.word	0x24004af8
 8011a70:	24004b00 	.word	0x24004b00

08011a74 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011a74:	b480      	push	{r7}
 8011a76:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011a78:	4b05      	ldr	r3, [pc, #20]	; (8011a90 <tcp_trigger_input_pcb_close+0x1c>)
 8011a7a:	781b      	ldrb	r3, [r3, #0]
 8011a7c:	f043 0310 	orr.w	r3, r3, #16
 8011a80:	b2da      	uxtb	r2, r3
 8011a82:	4b03      	ldr	r3, [pc, #12]	; (8011a90 <tcp_trigger_input_pcb_close+0x1c>)
 8011a84:	701a      	strb	r2, [r3, #0]
}
 8011a86:	bf00      	nop
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8e:	4770      	bx	lr
 8011a90:	24004b11 	.word	0x24004b11

08011a94 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b084      	sub	sp, #16
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	60f8      	str	r0, [r7, #12]
 8011a9c:	60b9      	str	r1, [r7, #8]
 8011a9e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d00a      	beq.n	8011abc <tcp_route+0x28>
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	7a1b      	ldrb	r3, [r3, #8]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d006      	beq.n	8011abc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	7a1b      	ldrb	r3, [r3, #8]
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f7fb f852 	bl	800cb5c <netif_get_by_index>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	e003      	b.n	8011ac4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f003 fc71 	bl	80153a4 <ip4_route>
 8011ac2:	4603      	mov	r3, r0
  }
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3710      	adds	r7, #16
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}

08011acc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011acc:	b590      	push	{r4, r7, lr}
 8011ace:	b087      	sub	sp, #28
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	60b9      	str	r1, [r7, #8]
 8011ad6:	603b      	str	r3, [r7, #0]
 8011ad8:	4613      	mov	r3, r2
 8011ada:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d105      	bne.n	8011aee <tcp_create_segment+0x22>
 8011ae2:	4b44      	ldr	r3, [pc, #272]	; (8011bf4 <tcp_create_segment+0x128>)
 8011ae4:	22a3      	movs	r2, #163	; 0xa3
 8011ae6:	4944      	ldr	r1, [pc, #272]	; (8011bf8 <tcp_create_segment+0x12c>)
 8011ae8:	4844      	ldr	r0, [pc, #272]	; (8011bfc <tcp_create_segment+0x130>)
 8011aea:	f005 f993 	bl	8016e14 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d105      	bne.n	8011b00 <tcp_create_segment+0x34>
 8011af4:	4b3f      	ldr	r3, [pc, #252]	; (8011bf4 <tcp_create_segment+0x128>)
 8011af6:	22a4      	movs	r2, #164	; 0xa4
 8011af8:	4941      	ldr	r1, [pc, #260]	; (8011c00 <tcp_create_segment+0x134>)
 8011afa:	4840      	ldr	r0, [pc, #256]	; (8011bfc <tcp_create_segment+0x130>)
 8011afc:	f005 f98a 	bl	8016e14 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011b00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011b04:	009b      	lsls	r3, r3, #2
 8011b06:	b2db      	uxtb	r3, r3
 8011b08:	f003 0304 	and.w	r3, r3, #4
 8011b0c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011b0e:	2003      	movs	r0, #3
 8011b10:	f7fa fc98 	bl	800c444 <memp_malloc>
 8011b14:	6138      	str	r0, [r7, #16]
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d104      	bne.n	8011b26 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011b1c:	68b8      	ldr	r0, [r7, #8]
 8011b1e:	f7fb fbab 	bl	800d278 <pbuf_free>
    return NULL;
 8011b22:	2300      	movs	r3, #0
 8011b24:	e061      	b.n	8011bea <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011b2c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011b2e:	693b      	ldr	r3, [r7, #16]
 8011b30:	2200      	movs	r2, #0
 8011b32:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011b34:	693b      	ldr	r3, [r7, #16]
 8011b36:	68ba      	ldr	r2, [r7, #8]
 8011b38:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	891a      	ldrh	r2, [r3, #8]
 8011b3e:	7dfb      	ldrb	r3, [r7, #23]
 8011b40:	b29b      	uxth	r3, r3
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d205      	bcs.n	8011b52 <tcp_create_segment+0x86>
 8011b46:	4b2b      	ldr	r3, [pc, #172]	; (8011bf4 <tcp_create_segment+0x128>)
 8011b48:	22b0      	movs	r2, #176	; 0xb0
 8011b4a:	492e      	ldr	r1, [pc, #184]	; (8011c04 <tcp_create_segment+0x138>)
 8011b4c:	482b      	ldr	r0, [pc, #172]	; (8011bfc <tcp_create_segment+0x130>)
 8011b4e:	f005 f961 	bl	8016e14 <iprintf>
  seg->len = p->tot_len - optlen;
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	891a      	ldrh	r2, [r3, #8]
 8011b56:	7dfb      	ldrb	r3, [r7, #23]
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	1ad3      	subs	r3, r2, r3
 8011b5c:	b29a      	uxth	r2, r3
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011b62:	2114      	movs	r1, #20
 8011b64:	68b8      	ldr	r0, [r7, #8]
 8011b66:	f7fb faf1 	bl	800d14c <pbuf_add_header>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d004      	beq.n	8011b7a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011b70:	6938      	ldr	r0, [r7, #16]
 8011b72:	f7fd f804 	bl	800eb7e <tcp_seg_free>
    return NULL;
 8011b76:	2300      	movs	r3, #0
 8011b78:	e037      	b.n	8011bea <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	685b      	ldr	r3, [r3, #4]
 8011b7e:	685a      	ldr	r2, [r3, #4]
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	8ada      	ldrh	r2, [r3, #22]
 8011b88:	693b      	ldr	r3, [r7, #16]
 8011b8a:	68dc      	ldr	r4, [r3, #12]
 8011b8c:	4610      	mov	r0, r2
 8011b8e:	f7f9 fec9 	bl	800b924 <lwip_htons>
 8011b92:	4603      	mov	r3, r0
 8011b94:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	8b1a      	ldrh	r2, [r3, #24]
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	68dc      	ldr	r4, [r3, #12]
 8011b9e:	4610      	mov	r0, r2
 8011ba0:	f7f9 fec0 	bl	800b924 <lwip_htons>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	68dc      	ldr	r4, [r3, #12]
 8011bac:	6838      	ldr	r0, [r7, #0]
 8011bae:	f7f9 fece 	bl	800b94e <lwip_htonl>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011bb6:	7dfb      	ldrb	r3, [r7, #23]
 8011bb8:	089b      	lsrs	r3, r3, #2
 8011bba:	b2db      	uxtb	r3, r3
 8011bbc:	b29b      	uxth	r3, r3
 8011bbe:	3305      	adds	r3, #5
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	031b      	lsls	r3, r3, #12
 8011bc4:	b29a      	uxth	r2, r3
 8011bc6:	79fb      	ldrb	r3, [r7, #7]
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	4313      	orrs	r3, r2
 8011bcc:	b29a      	uxth	r2, r3
 8011bce:	693b      	ldr	r3, [r7, #16]
 8011bd0:	68dc      	ldr	r4, [r3, #12]
 8011bd2:	4610      	mov	r0, r2
 8011bd4:	f7f9 fea6 	bl	800b924 <lwip_htons>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	68db      	ldr	r3, [r3, #12]
 8011be0:	2200      	movs	r2, #0
 8011be2:	749a      	strb	r2, [r3, #18]
 8011be4:	2200      	movs	r2, #0
 8011be6:	74da      	strb	r2, [r3, #19]
  return seg;
 8011be8:	693b      	ldr	r3, [r7, #16]
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	371c      	adds	r7, #28
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd90      	pop	{r4, r7, pc}
 8011bf2:	bf00      	nop
 8011bf4:	08019ec0 	.word	0x08019ec0
 8011bf8:	08019ef4 	.word	0x08019ef4
 8011bfc:	08019f14 	.word	0x08019f14
 8011c00:	08019f3c 	.word	0x08019f3c
 8011c04:	08019f60 	.word	0x08019f60

08011c08 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b086      	sub	sp, #24
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	607b      	str	r3, [r7, #4]
 8011c10:	4603      	mov	r3, r0
 8011c12:	73fb      	strb	r3, [r7, #15]
 8011c14:	460b      	mov	r3, r1
 8011c16:	81bb      	strh	r3, [r7, #12]
 8011c18:	4613      	mov	r3, r2
 8011c1a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011c1c:	89bb      	ldrh	r3, [r7, #12]
 8011c1e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d105      	bne.n	8011c32 <tcp_pbuf_prealloc+0x2a>
 8011c26:	4b30      	ldr	r3, [pc, #192]	; (8011ce8 <tcp_pbuf_prealloc+0xe0>)
 8011c28:	22e8      	movs	r2, #232	; 0xe8
 8011c2a:	4930      	ldr	r1, [pc, #192]	; (8011cec <tcp_pbuf_prealloc+0xe4>)
 8011c2c:	4830      	ldr	r0, [pc, #192]	; (8011cf0 <tcp_pbuf_prealloc+0xe8>)
 8011c2e:	f005 f8f1 	bl	8016e14 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011c32:	6a3b      	ldr	r3, [r7, #32]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d105      	bne.n	8011c44 <tcp_pbuf_prealloc+0x3c>
 8011c38:	4b2b      	ldr	r3, [pc, #172]	; (8011ce8 <tcp_pbuf_prealloc+0xe0>)
 8011c3a:	22e9      	movs	r2, #233	; 0xe9
 8011c3c:	492d      	ldr	r1, [pc, #180]	; (8011cf4 <tcp_pbuf_prealloc+0xec>)
 8011c3e:	482c      	ldr	r0, [pc, #176]	; (8011cf0 <tcp_pbuf_prealloc+0xe8>)
 8011c40:	f005 f8e8 	bl	8016e14 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011c44:	89ba      	ldrh	r2, [r7, #12]
 8011c46:	897b      	ldrh	r3, [r7, #10]
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d221      	bcs.n	8011c90 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011c4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011c50:	f003 0302 	and.w	r3, r3, #2
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d111      	bne.n	8011c7c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011c58:	6a3b      	ldr	r3, [r7, #32]
 8011c5a:	8b5b      	ldrh	r3, [r3, #26]
 8011c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d115      	bne.n	8011c90 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011c64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d007      	beq.n	8011c7c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011c6c:	6a3b      	ldr	r3, [r7, #32]
 8011c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d103      	bne.n	8011c7c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011c74:	6a3b      	ldr	r3, [r7, #32]
 8011c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d009      	beq.n	8011c90 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011c7c:	89bb      	ldrh	r3, [r7, #12]
 8011c7e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011c82:	f023 0203 	bic.w	r2, r3, #3
 8011c86:	897b      	ldrh	r3, [r7, #10]
 8011c88:	4293      	cmp	r3, r2
 8011c8a:	bf28      	it	cs
 8011c8c:	4613      	movcs	r3, r2
 8011c8e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011c90:	8af9      	ldrh	r1, [r7, #22]
 8011c92:	7bfb      	ldrb	r3, [r7, #15]
 8011c94:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7fb f809 	bl	800ccb0 <pbuf_alloc>
 8011c9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d101      	bne.n	8011caa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	e019      	b.n	8011cde <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d006      	beq.n	8011cc0 <tcp_pbuf_prealloc+0xb8>
 8011cb2:	4b0d      	ldr	r3, [pc, #52]	; (8011ce8 <tcp_pbuf_prealloc+0xe0>)
 8011cb4:	f240 120b 	movw	r2, #267	; 0x10b
 8011cb8:	490f      	ldr	r1, [pc, #60]	; (8011cf8 <tcp_pbuf_prealloc+0xf0>)
 8011cba:	480d      	ldr	r0, [pc, #52]	; (8011cf0 <tcp_pbuf_prealloc+0xe8>)
 8011cbc:	f005 f8aa 	bl	8016e14 <iprintf>
  *oversize = p->len - length;
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	895a      	ldrh	r2, [r3, #10]
 8011cc4:	89bb      	ldrh	r3, [r7, #12]
 8011cc6:	1ad3      	subs	r3, r2, r3
 8011cc8:	b29a      	uxth	r2, r3
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	89ba      	ldrh	r2, [r7, #12]
 8011cd2:	811a      	strh	r2, [r3, #8]
 8011cd4:	693b      	ldr	r3, [r7, #16]
 8011cd6:	891a      	ldrh	r2, [r3, #8]
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	815a      	strh	r2, [r3, #10]
  return p;
 8011cdc:	693b      	ldr	r3, [r7, #16]
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3718      	adds	r7, #24
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}
 8011ce6:	bf00      	nop
 8011ce8:	08019ec0 	.word	0x08019ec0
 8011cec:	08019f78 	.word	0x08019f78
 8011cf0:	08019f14 	.word	0x08019f14
 8011cf4:	08019f9c 	.word	0x08019f9c
 8011cf8:	08019fbc 	.word	0x08019fbc

08011cfc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b082      	sub	sp, #8
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	460b      	mov	r3, r1
 8011d06:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d106      	bne.n	8011d1c <tcp_write_checks+0x20>
 8011d0e:	4b33      	ldr	r3, [pc, #204]	; (8011ddc <tcp_write_checks+0xe0>)
 8011d10:	f240 1233 	movw	r2, #307	; 0x133
 8011d14:	4932      	ldr	r1, [pc, #200]	; (8011de0 <tcp_write_checks+0xe4>)
 8011d16:	4833      	ldr	r0, [pc, #204]	; (8011de4 <tcp_write_checks+0xe8>)
 8011d18:	f005 f87c 	bl	8016e14 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	7d1b      	ldrb	r3, [r3, #20]
 8011d20:	2b04      	cmp	r3, #4
 8011d22:	d00e      	beq.n	8011d42 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011d28:	2b07      	cmp	r3, #7
 8011d2a:	d00a      	beq.n	8011d42 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011d30:	2b02      	cmp	r3, #2
 8011d32:	d006      	beq.n	8011d42 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011d38:	2b03      	cmp	r3, #3
 8011d3a:	d002      	beq.n	8011d42 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011d3c:	f06f 030a 	mvn.w	r3, #10
 8011d40:	e048      	b.n	8011dd4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011d42:	887b      	ldrh	r3, [r7, #2]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d101      	bne.n	8011d4c <tcp_write_checks+0x50>
    return ERR_OK;
 8011d48:	2300      	movs	r3, #0
 8011d4a:	e043      	b.n	8011dd4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011d52:	887a      	ldrh	r2, [r7, #2]
 8011d54:	429a      	cmp	r2, r3
 8011d56:	d909      	bls.n	8011d6c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	8b5b      	ldrh	r3, [r3, #26]
 8011d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d60:	b29a      	uxth	r2, r3
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011d66:	f04f 33ff 	mov.w	r3, #4294967295
 8011d6a:	e033      	b.n	8011dd4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d72:	2b08      	cmp	r3, #8
 8011d74:	d909      	bls.n	8011d8a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	8b5b      	ldrh	r3, [r3, #26]
 8011d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d7e:	b29a      	uxth	r2, r3
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011d84:	f04f 33ff 	mov.w	r3, #4294967295
 8011d88:	e024      	b.n	8011dd4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d00f      	beq.n	8011db4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d11a      	bne.n	8011dd2 <tcp_write_checks+0xd6>
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d116      	bne.n	8011dd2 <tcp_write_checks+0xd6>
 8011da4:	4b0d      	ldr	r3, [pc, #52]	; (8011ddc <tcp_write_checks+0xe0>)
 8011da6:	f240 1255 	movw	r2, #341	; 0x155
 8011daa:	490f      	ldr	r1, [pc, #60]	; (8011de8 <tcp_write_checks+0xec>)
 8011dac:	480d      	ldr	r0, [pc, #52]	; (8011de4 <tcp_write_checks+0xe8>)
 8011dae:	f005 f831 	bl	8016e14 <iprintf>
 8011db2:	e00e      	b.n	8011dd2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d103      	bne.n	8011dc4 <tcp_write_checks+0xc8>
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d006      	beq.n	8011dd2 <tcp_write_checks+0xd6>
 8011dc4:	4b05      	ldr	r3, [pc, #20]	; (8011ddc <tcp_write_checks+0xe0>)
 8011dc6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011dca:	4908      	ldr	r1, [pc, #32]	; (8011dec <tcp_write_checks+0xf0>)
 8011dcc:	4805      	ldr	r0, [pc, #20]	; (8011de4 <tcp_write_checks+0xe8>)
 8011dce:	f005 f821 	bl	8016e14 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011dd2:	2300      	movs	r3, #0
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3708      	adds	r7, #8
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}
 8011ddc:	08019ec0 	.word	0x08019ec0
 8011de0:	08019fd0 	.word	0x08019fd0
 8011de4:	08019f14 	.word	0x08019f14
 8011de8:	08019ff0 	.word	0x08019ff0
 8011dec:	0801a02c 	.word	0x0801a02c

08011df0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011df0:	b590      	push	{r4, r7, lr}
 8011df2:	b09b      	sub	sp, #108	; 0x6c
 8011df4:	af04      	add	r7, sp, #16
 8011df6:	60f8      	str	r0, [r7, #12]
 8011df8:	60b9      	str	r1, [r7, #8]
 8011dfa:	4611      	mov	r1, r2
 8011dfc:	461a      	mov	r2, r3
 8011dfe:	460b      	mov	r3, r1
 8011e00:	80fb      	strh	r3, [r7, #6]
 8011e02:	4613      	mov	r3, r2
 8011e04:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011e06:	2300      	movs	r3, #0
 8011e08:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	653b      	str	r3, [r7, #80]	; 0x50
 8011e0e:	2300      	movs	r3, #0
 8011e10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011e12:	2300      	movs	r3, #0
 8011e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e16:	2300      	movs	r3, #0
 8011e18:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011e20:	2300      	movs	r3, #0
 8011e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011e26:	2300      	movs	r3, #0
 8011e28:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d109      	bne.n	8011e4c <tcp_write+0x5c>
 8011e38:	4ba4      	ldr	r3, [pc, #656]	; (80120cc <tcp_write+0x2dc>)
 8011e3a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011e3e:	49a4      	ldr	r1, [pc, #656]	; (80120d0 <tcp_write+0x2e0>)
 8011e40:	48a4      	ldr	r0, [pc, #656]	; (80120d4 <tcp_write+0x2e4>)
 8011e42:	f004 ffe7 	bl	8016e14 <iprintf>
 8011e46:	f06f 030f 	mvn.w	r3, #15
 8011e4a:	e32a      	b.n	80124a2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011e52:	085b      	lsrs	r3, r3, #1
 8011e54:	b29a      	uxth	r2, r3
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e5a:	4293      	cmp	r3, r2
 8011e5c:	bf28      	it	cs
 8011e5e:	4613      	movcs	r3, r2
 8011e60:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011e62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d102      	bne.n	8011e6e <tcp_write+0x7e>
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e6c:	e000      	b.n	8011e70 <tcp_write+0x80>
 8011e6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e70:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d109      	bne.n	8011e8c <tcp_write+0x9c>
 8011e78:	4b94      	ldr	r3, [pc, #592]	; (80120cc <tcp_write+0x2dc>)
 8011e7a:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011e7e:	4996      	ldr	r1, [pc, #600]	; (80120d8 <tcp_write+0x2e8>)
 8011e80:	4894      	ldr	r0, [pc, #592]	; (80120d4 <tcp_write+0x2e4>)
 8011e82:	f004 ffc7 	bl	8016e14 <iprintf>
 8011e86:	f06f 030f 	mvn.w	r3, #15
 8011e8a:	e30a      	b.n	80124a2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011e8c:	88fb      	ldrh	r3, [r7, #6]
 8011e8e:	4619      	mov	r1, r3
 8011e90:	68f8      	ldr	r0, [r7, #12]
 8011e92:	f7ff ff33 	bl	8011cfc <tcp_write_checks>
 8011e96:	4603      	mov	r3, r0
 8011e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011e9c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d002      	beq.n	8011eaa <tcp_write+0xba>
    return err;
 8011ea4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011ea8:	e2fb      	b.n	80124a2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011eb0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	f000 80f6 	beq.w	80120b0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ec8:	653b      	str	r3, [r7, #80]	; 0x50
 8011eca:	e002      	b.n	8011ed2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d1f8      	bne.n	8011ecc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011edc:	7a9b      	ldrb	r3, [r3, #10]
 8011ede:	009b      	lsls	r3, r3, #2
 8011ee0:	b29b      	uxth	r3, r3
 8011ee2:	f003 0304 	and.w	r3, r3, #4
 8011ee6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011ee8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011eec:	891b      	ldrh	r3, [r3, #8]
 8011eee:	4619      	mov	r1, r3
 8011ef0:	8c3b      	ldrh	r3, [r7, #32]
 8011ef2:	440b      	add	r3, r1
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	da06      	bge.n	8011f06 <tcp_write+0x116>
 8011ef8:	4b74      	ldr	r3, [pc, #464]	; (80120cc <tcp_write+0x2dc>)
 8011efa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011efe:	4977      	ldr	r1, [pc, #476]	; (80120dc <tcp_write+0x2ec>)
 8011f00:	4874      	ldr	r0, [pc, #464]	; (80120d4 <tcp_write+0x2e4>)
 8011f02:	f004 ff87 	bl	8016e14 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f08:	891a      	ldrh	r2, [r3, #8]
 8011f0a:	8c3b      	ldrh	r3, [r7, #32]
 8011f0c:	4413      	add	r3, r2
 8011f0e:	b29b      	uxth	r3, r3
 8011f10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f12:	1ad3      	subs	r3, r2, r3
 8011f14:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011f1c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011f1e:	8a7b      	ldrh	r3, [r7, #18]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d026      	beq.n	8011f72 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011f24:	8a7b      	ldrh	r3, [r7, #18]
 8011f26:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	d206      	bcs.n	8011f3a <tcp_write+0x14a>
 8011f2c:	4b67      	ldr	r3, [pc, #412]	; (80120cc <tcp_write+0x2dc>)
 8011f2e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011f32:	496b      	ldr	r1, [pc, #428]	; (80120e0 <tcp_write+0x2f0>)
 8011f34:	4867      	ldr	r0, [pc, #412]	; (80120d4 <tcp_write+0x2e4>)
 8011f36:	f004 ff6d 	bl	8016e14 <iprintf>
      seg = last_unsent;
 8011f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011f3e:	8a7b      	ldrh	r3, [r7, #18]
 8011f40:	88fa      	ldrh	r2, [r7, #6]
 8011f42:	4293      	cmp	r3, r2
 8011f44:	bf28      	it	cs
 8011f46:	4613      	movcs	r3, r2
 8011f48:	b29b      	uxth	r3, r3
 8011f4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011f4c:	4293      	cmp	r3, r2
 8011f4e:	bf28      	it	cs
 8011f50:	4613      	movcs	r3, r2
 8011f52:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011f54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011f58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011f5a:	4413      	add	r3, r2
 8011f5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011f60:	8a7a      	ldrh	r2, [r7, #18]
 8011f62:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011f64:	1ad3      	subs	r3, r2, r3
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011f6a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011f6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011f6e:	1ad3      	subs	r3, r2, r3
 8011f70:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011f72:	8a7b      	ldrh	r3, [r7, #18]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d00b      	beq.n	8011f90 <tcp_write+0x1a0>
 8011f78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011f7c:	88fb      	ldrh	r3, [r7, #6]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d006      	beq.n	8011f90 <tcp_write+0x1a0>
 8011f82:	4b52      	ldr	r3, [pc, #328]	; (80120cc <tcp_write+0x2dc>)
 8011f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011f88:	4956      	ldr	r1, [pc, #344]	; (80120e4 <tcp_write+0x2f4>)
 8011f8a:	4852      	ldr	r0, [pc, #328]	; (80120d4 <tcp_write+0x2e4>)
 8011f8c:	f004 ff42 	bl	8016e14 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011f90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011f94:	88fb      	ldrh	r3, [r7, #6]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	f080 8167 	bcs.w	801226a <tcp_write+0x47a>
 8011f9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	f000 8163 	beq.w	801226a <tcp_write+0x47a>
 8011fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fa6:	891b      	ldrh	r3, [r3, #8]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	f000 815e 	beq.w	801226a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011fae:	88fa      	ldrh	r2, [r7, #6]
 8011fb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fb4:	1ad2      	subs	r2, r2, r3
 8011fb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011fb8:	4293      	cmp	r3, r2
 8011fba:	bfa8      	it	ge
 8011fbc:	4613      	movge	r3, r2
 8011fbe:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fc2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011fc4:	797b      	ldrb	r3, [r7, #5]
 8011fc6:	f003 0301 	and.w	r3, r3, #1
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d027      	beq.n	801201e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011fce:	f107 0012 	add.w	r0, r7, #18
 8011fd2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011fd4:	8bf9      	ldrh	r1, [r7, #30]
 8011fd6:	2301      	movs	r3, #1
 8011fd8:	9302      	str	r3, [sp, #8]
 8011fda:	797b      	ldrb	r3, [r7, #5]
 8011fdc:	9301      	str	r3, [sp, #4]
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	9300      	str	r3, [sp, #0]
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	2000      	movs	r0, #0
 8011fe6:	f7ff fe0f 	bl	8011c08 <tcp_pbuf_prealloc>
 8011fea:	6578      	str	r0, [r7, #84]	; 0x54
 8011fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	f000 8225 	beq.w	801243e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ff6:	6858      	ldr	r0, [r3, #4]
 8011ff8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ffc:	68ba      	ldr	r2, [r7, #8]
 8011ffe:	4413      	add	r3, r2
 8012000:	8bfa      	ldrh	r2, [r7, #30]
 8012002:	4619      	mov	r1, r3
 8012004:	f004 fe95 	bl	8016d32 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012008:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801200a:	f7fb f9c3 	bl	800d394 <pbuf_clen>
 801200e:	4603      	mov	r3, r0
 8012010:	461a      	mov	r2, r3
 8012012:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012016:	4413      	add	r3, r2
 8012018:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801201c:	e041      	b.n	80120a2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801201e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012020:	685b      	ldr	r3, [r3, #4]
 8012022:	637b      	str	r3, [r7, #52]	; 0x34
 8012024:	e002      	b.n	801202c <tcp_write+0x23c>
 8012026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	637b      	str	r3, [r7, #52]	; 0x34
 801202c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d1f8      	bne.n	8012026 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012036:	7b1b      	ldrb	r3, [r3, #12]
 8012038:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801203c:	2b00      	cmp	r3, #0
 801203e:	d115      	bne.n	801206c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012042:	685b      	ldr	r3, [r3, #4]
 8012044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012046:	8952      	ldrh	r2, [r2, #10]
 8012048:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801204a:	68ba      	ldr	r2, [r7, #8]
 801204c:	429a      	cmp	r2, r3
 801204e:	d10d      	bne.n	801206c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012050:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012054:	2b00      	cmp	r3, #0
 8012056:	d006      	beq.n	8012066 <tcp_write+0x276>
 8012058:	4b1c      	ldr	r3, [pc, #112]	; (80120cc <tcp_write+0x2dc>)
 801205a:	f240 2231 	movw	r2, #561	; 0x231
 801205e:	4922      	ldr	r1, [pc, #136]	; (80120e8 <tcp_write+0x2f8>)
 8012060:	481c      	ldr	r0, [pc, #112]	; (80120d4 <tcp_write+0x2e4>)
 8012062:	f004 fed7 	bl	8016e14 <iprintf>
          extendlen = seglen;
 8012066:	8bfb      	ldrh	r3, [r7, #30]
 8012068:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801206a:	e01a      	b.n	80120a2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801206c:	8bfb      	ldrh	r3, [r7, #30]
 801206e:	2201      	movs	r2, #1
 8012070:	4619      	mov	r1, r3
 8012072:	2000      	movs	r0, #0
 8012074:	f7fa fe1c 	bl	800ccb0 <pbuf_alloc>
 8012078:	6578      	str	r0, [r7, #84]	; 0x54
 801207a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801207c:	2b00      	cmp	r3, #0
 801207e:	f000 81e0 	beq.w	8012442 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012082:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012086:	68ba      	ldr	r2, [r7, #8]
 8012088:	441a      	add	r2, r3
 801208a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801208c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801208e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012090:	f7fb f980 	bl	800d394 <pbuf_clen>
 8012094:	4603      	mov	r3, r0
 8012096:	461a      	mov	r2, r3
 8012098:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801209c:	4413      	add	r3, r2
 801209e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80120a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80120a6:	8bfb      	ldrh	r3, [r7, #30]
 80120a8:	4413      	add	r3, r2
 80120aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80120ae:	e0dc      	b.n	801226a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	f000 80d7 	beq.w	801226a <tcp_write+0x47a>
 80120bc:	4b03      	ldr	r3, [pc, #12]	; (80120cc <tcp_write+0x2dc>)
 80120be:	f240 224a 	movw	r2, #586	; 0x24a
 80120c2:	490a      	ldr	r1, [pc, #40]	; (80120ec <tcp_write+0x2fc>)
 80120c4:	4803      	ldr	r0, [pc, #12]	; (80120d4 <tcp_write+0x2e4>)
 80120c6:	f004 fea5 	bl	8016e14 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80120ca:	e0ce      	b.n	801226a <tcp_write+0x47a>
 80120cc:	08019ec0 	.word	0x08019ec0
 80120d0:	0801a060 	.word	0x0801a060
 80120d4:	08019f14 	.word	0x08019f14
 80120d8:	0801a078 	.word	0x0801a078
 80120dc:	0801a0ac 	.word	0x0801a0ac
 80120e0:	0801a0c4 	.word	0x0801a0c4
 80120e4:	0801a0e4 	.word	0x0801a0e4
 80120e8:	0801a104 	.word	0x0801a104
 80120ec:	0801a130 	.word	0x0801a130
    struct pbuf *p;
    u16_t left = len - pos;
 80120f0:	88fa      	ldrh	r2, [r7, #6]
 80120f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120f6:	1ad3      	subs	r3, r2, r3
 80120f8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80120fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80120fe:	b29b      	uxth	r3, r3
 8012100:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012102:	1ad3      	subs	r3, r2, r3
 8012104:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012106:	8b7a      	ldrh	r2, [r7, #26]
 8012108:	8bbb      	ldrh	r3, [r7, #28]
 801210a:	4293      	cmp	r3, r2
 801210c:	bf28      	it	cs
 801210e:	4613      	movcs	r3, r2
 8012110:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012112:	797b      	ldrb	r3, [r7, #5]
 8012114:	f003 0301 	and.w	r3, r3, #1
 8012118:	2b00      	cmp	r3, #0
 801211a:	d036      	beq.n	801218a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801211c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012120:	b29a      	uxth	r2, r3
 8012122:	8b3b      	ldrh	r3, [r7, #24]
 8012124:	4413      	add	r3, r2
 8012126:	b299      	uxth	r1, r3
 8012128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801212a:	2b00      	cmp	r3, #0
 801212c:	bf0c      	ite	eq
 801212e:	2301      	moveq	r3, #1
 8012130:	2300      	movne	r3, #0
 8012132:	b2db      	uxtb	r3, r3
 8012134:	f107 0012 	add.w	r0, r7, #18
 8012138:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801213a:	9302      	str	r3, [sp, #8]
 801213c:	797b      	ldrb	r3, [r7, #5]
 801213e:	9301      	str	r3, [sp, #4]
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	9300      	str	r3, [sp, #0]
 8012144:	4603      	mov	r3, r0
 8012146:	2036      	movs	r0, #54	; 0x36
 8012148:	f7ff fd5e 	bl	8011c08 <tcp_pbuf_prealloc>
 801214c:	6338      	str	r0, [r7, #48]	; 0x30
 801214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012150:	2b00      	cmp	r3, #0
 8012152:	f000 8178 	beq.w	8012446 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012158:	895b      	ldrh	r3, [r3, #10]
 801215a:	8b3a      	ldrh	r2, [r7, #24]
 801215c:	429a      	cmp	r2, r3
 801215e:	d906      	bls.n	801216e <tcp_write+0x37e>
 8012160:	4b8c      	ldr	r3, [pc, #560]	; (8012394 <tcp_write+0x5a4>)
 8012162:	f240 2266 	movw	r2, #614	; 0x266
 8012166:	498c      	ldr	r1, [pc, #560]	; (8012398 <tcp_write+0x5a8>)
 8012168:	488c      	ldr	r0, [pc, #560]	; (801239c <tcp_write+0x5ac>)
 801216a:	f004 fe53 	bl	8016e14 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012170:	685a      	ldr	r2, [r3, #4]
 8012172:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012176:	18d0      	adds	r0, r2, r3
 8012178:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801217c:	68ba      	ldr	r2, [r7, #8]
 801217e:	4413      	add	r3, r2
 8012180:	8b3a      	ldrh	r2, [r7, #24]
 8012182:	4619      	mov	r1, r3
 8012184:	f004 fdd5 	bl	8016d32 <memcpy>
 8012188:	e02f      	b.n	80121ea <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801218a:	8a7b      	ldrh	r3, [r7, #18]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d006      	beq.n	801219e <tcp_write+0x3ae>
 8012190:	4b80      	ldr	r3, [pc, #512]	; (8012394 <tcp_write+0x5a4>)
 8012192:	f240 2271 	movw	r2, #625	; 0x271
 8012196:	4982      	ldr	r1, [pc, #520]	; (80123a0 <tcp_write+0x5b0>)
 8012198:	4880      	ldr	r0, [pc, #512]	; (801239c <tcp_write+0x5ac>)
 801219a:	f004 fe3b 	bl	8016e14 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801219e:	8b3b      	ldrh	r3, [r7, #24]
 80121a0:	2201      	movs	r2, #1
 80121a2:	4619      	mov	r1, r3
 80121a4:	2036      	movs	r0, #54	; 0x36
 80121a6:	f7fa fd83 	bl	800ccb0 <pbuf_alloc>
 80121aa:	6178      	str	r0, [r7, #20]
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	f000 814b 	beq.w	801244a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80121b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121b8:	68ba      	ldr	r2, [r7, #8]
 80121ba:	441a      	add	r2, r3
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80121c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80121c4:	b29b      	uxth	r3, r3
 80121c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80121ca:	4619      	mov	r1, r3
 80121cc:	2036      	movs	r0, #54	; 0x36
 80121ce:	f7fa fd6f 	bl	800ccb0 <pbuf_alloc>
 80121d2:	6338      	str	r0, [r7, #48]	; 0x30
 80121d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d103      	bne.n	80121e2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80121da:	6978      	ldr	r0, [r7, #20]
 80121dc:	f7fb f84c 	bl	800d278 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80121e0:	e136      	b.n	8012450 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80121e2:	6979      	ldr	r1, [r7, #20]
 80121e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121e6:	f7fb f915 	bl	800d414 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80121ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121ec:	f7fb f8d2 	bl	800d394 <pbuf_clen>
 80121f0:	4603      	mov	r3, r0
 80121f2:	461a      	mov	r2, r3
 80121f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80121f8:	4413      	add	r3, r2
 80121fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80121fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012202:	2b09      	cmp	r3, #9
 8012204:	d903      	bls.n	801220e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012208:	f7fb f836 	bl	800d278 <pbuf_free>
      goto memerr;
 801220c:	e120      	b.n	8012450 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012212:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012216:	441a      	add	r2, r3
 8012218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801221c:	9300      	str	r3, [sp, #0]
 801221e:	4613      	mov	r3, r2
 8012220:	2200      	movs	r2, #0
 8012222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012224:	68f8      	ldr	r0, [r7, #12]
 8012226:	f7ff fc51 	bl	8011acc <tcp_create_segment>
 801222a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801222c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801222e:	2b00      	cmp	r3, #0
 8012230:	f000 810d 	beq.w	801244e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012236:	2b00      	cmp	r3, #0
 8012238:	d102      	bne.n	8012240 <tcp_write+0x450>
      queue = seg;
 801223a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801223c:	647b      	str	r3, [r7, #68]	; 0x44
 801223e:	e00c      	b.n	801225a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012242:	2b00      	cmp	r3, #0
 8012244:	d106      	bne.n	8012254 <tcp_write+0x464>
 8012246:	4b53      	ldr	r3, [pc, #332]	; (8012394 <tcp_write+0x5a4>)
 8012248:	f240 22ab 	movw	r2, #683	; 0x2ab
 801224c:	4955      	ldr	r1, [pc, #340]	; (80123a4 <tcp_write+0x5b4>)
 801224e:	4853      	ldr	r0, [pc, #332]	; (801239c <tcp_write+0x5ac>)
 8012250:	f004 fde0 	bl	8016e14 <iprintf>
      prev_seg->next = seg;
 8012254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012256:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012258:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801225a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801225c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801225e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012262:	8b3b      	ldrh	r3, [r7, #24]
 8012264:	4413      	add	r3, r2
 8012266:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801226a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801226e:	88fb      	ldrh	r3, [r7, #6]
 8012270:	429a      	cmp	r2, r3
 8012272:	f4ff af3d 	bcc.w	80120f0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012276:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012278:	2b00      	cmp	r3, #0
 801227a:	d02c      	beq.n	80122d6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801227c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801227e:	685b      	ldr	r3, [r3, #4]
 8012280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012282:	e01e      	b.n	80122c2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012286:	891a      	ldrh	r2, [r3, #8]
 8012288:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801228a:	4413      	add	r3, r2
 801228c:	b29a      	uxth	r2, r3
 801228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012290:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d110      	bne.n	80122bc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801229c:	685b      	ldr	r3, [r3, #4]
 801229e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122a0:	8952      	ldrh	r2, [r2, #10]
 80122a2:	4413      	add	r3, r2
 80122a4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80122a6:	68b9      	ldr	r1, [r7, #8]
 80122a8:	4618      	mov	r0, r3
 80122aa:	f004 fd42 	bl	8016d32 <memcpy>
        p->len += oversize_used;
 80122ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122b0:	895a      	ldrh	r2, [r3, #10]
 80122b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80122b4:	4413      	add	r3, r2
 80122b6:	b29a      	uxth	r2, r3
 80122b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ba:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80122bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d1dd      	bne.n	8012284 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80122c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122ca:	891a      	ldrh	r2, [r3, #8]
 80122cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80122ce:	4413      	add	r3, r2
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122d4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80122d6:	8a7a      	ldrh	r2, [r7, #18]
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80122de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d018      	beq.n	8012316 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80122e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d106      	bne.n	80122f8 <tcp_write+0x508>
 80122ea:	4b2a      	ldr	r3, [pc, #168]	; (8012394 <tcp_write+0x5a4>)
 80122ec:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80122f0:	492d      	ldr	r1, [pc, #180]	; (80123a8 <tcp_write+0x5b8>)
 80122f2:	482a      	ldr	r0, [pc, #168]	; (801239c <tcp_write+0x5ac>)
 80122f4:	f004 fd8e 	bl	8016e14 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80122f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122fa:	685b      	ldr	r3, [r3, #4]
 80122fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80122fe:	4618      	mov	r0, r3
 8012300:	f7fb f888 	bl	800d414 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012306:	891a      	ldrh	r2, [r3, #8]
 8012308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801230a:	891b      	ldrh	r3, [r3, #8]
 801230c:	4413      	add	r3, r2
 801230e:	b29a      	uxth	r2, r3
 8012310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012312:	811a      	strh	r2, [r3, #8]
 8012314:	e037      	b.n	8012386 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012316:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012318:	2b00      	cmp	r3, #0
 801231a:	d034      	beq.n	8012386 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801231c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801231e:	2b00      	cmp	r3, #0
 8012320:	d003      	beq.n	801232a <tcp_write+0x53a>
 8012322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d106      	bne.n	8012338 <tcp_write+0x548>
 801232a:	4b1a      	ldr	r3, [pc, #104]	; (8012394 <tcp_write+0x5a4>)
 801232c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012330:	491e      	ldr	r1, [pc, #120]	; (80123ac <tcp_write+0x5bc>)
 8012332:	481a      	ldr	r0, [pc, #104]	; (801239c <tcp_write+0x5ac>)
 8012334:	f004 fd6e 	bl	8016e14 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801233a:	685b      	ldr	r3, [r3, #4]
 801233c:	62bb      	str	r3, [r7, #40]	; 0x28
 801233e:	e009      	b.n	8012354 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012342:	891a      	ldrh	r2, [r3, #8]
 8012344:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012346:	4413      	add	r3, r2
 8012348:	b29a      	uxth	r2, r3
 801234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801234c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	62bb      	str	r3, [r7, #40]	; 0x28
 8012354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d1f1      	bne.n	8012340 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801235e:	891a      	ldrh	r2, [r3, #8]
 8012360:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012362:	4413      	add	r3, r2
 8012364:	b29a      	uxth	r2, r3
 8012366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012368:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801236c:	895a      	ldrh	r2, [r3, #10]
 801236e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012370:	4413      	add	r3, r2
 8012372:	b29a      	uxth	r2, r3
 8012374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012376:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801237a:	891a      	ldrh	r2, [r3, #8]
 801237c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801237e:	4413      	add	r3, r2
 8012380:	b29a      	uxth	r2, r3
 8012382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012384:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012388:	2b00      	cmp	r3, #0
 801238a:	d111      	bne.n	80123b0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012390:	66da      	str	r2, [r3, #108]	; 0x6c
 8012392:	e010      	b.n	80123b6 <tcp_write+0x5c6>
 8012394:	08019ec0 	.word	0x08019ec0
 8012398:	0801a160 	.word	0x0801a160
 801239c:	08019f14 	.word	0x08019f14
 80123a0:	0801a1a0 	.word	0x0801a1a0
 80123a4:	0801a1b0 	.word	0x0801a1b0
 80123a8:	0801a1c4 	.word	0x0801a1c4
 80123ac:	0801a1fc 	.word	0x0801a1fc
  } else {
    last_unsent->next = queue;
 80123b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123b4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80123ba:	88fb      	ldrh	r3, [r7, #6]
 80123bc:	441a      	add	r2, r3
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80123c8:	88fb      	ldrh	r3, [r7, #6]
 80123ca:	1ad3      	subs	r3, r2, r3
 80123cc:	b29a      	uxth	r2, r3
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80123da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d00e      	beq.n	8012406 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d10a      	bne.n	8012406 <tcp_write+0x616>
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d106      	bne.n	8012406 <tcp_write+0x616>
 80123f8:	4b2c      	ldr	r3, [pc, #176]	; (80124ac <tcp_write+0x6bc>)
 80123fa:	f240 3212 	movw	r2, #786	; 0x312
 80123fe:	492c      	ldr	r1, [pc, #176]	; (80124b0 <tcp_write+0x6c0>)
 8012400:	482c      	ldr	r0, [pc, #176]	; (80124b4 <tcp_write+0x6c4>)
 8012402:	f004 fd07 	bl	8016e14 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012408:	2b00      	cmp	r3, #0
 801240a:	d016      	beq.n	801243a <tcp_write+0x64a>
 801240c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801240e:	68db      	ldr	r3, [r3, #12]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d012      	beq.n	801243a <tcp_write+0x64a>
 8012414:	797b      	ldrb	r3, [r7, #5]
 8012416:	f003 0302 	and.w	r3, r3, #2
 801241a:	2b00      	cmp	r3, #0
 801241c:	d10d      	bne.n	801243a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801241e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012420:	68db      	ldr	r3, [r3, #12]
 8012422:	899b      	ldrh	r3, [r3, #12]
 8012424:	b29c      	uxth	r4, r3
 8012426:	2008      	movs	r0, #8
 8012428:	f7f9 fa7c 	bl	800b924 <lwip_htons>
 801242c:	4603      	mov	r3, r0
 801242e:	461a      	mov	r2, r3
 8012430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012432:	68db      	ldr	r3, [r3, #12]
 8012434:	4322      	orrs	r2, r4
 8012436:	b292      	uxth	r2, r2
 8012438:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801243a:	2300      	movs	r3, #0
 801243c:	e031      	b.n	80124a2 <tcp_write+0x6b2>
          goto memerr;
 801243e:	bf00      	nop
 8012440:	e006      	b.n	8012450 <tcp_write+0x660>
            goto memerr;
 8012442:	bf00      	nop
 8012444:	e004      	b.n	8012450 <tcp_write+0x660>
        goto memerr;
 8012446:	bf00      	nop
 8012448:	e002      	b.n	8012450 <tcp_write+0x660>
        goto memerr;
 801244a:	bf00      	nop
 801244c:	e000      	b.n	8012450 <tcp_write+0x660>
      goto memerr;
 801244e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	8b5b      	ldrh	r3, [r3, #26]
 8012454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012458:	b29a      	uxth	r2, r3
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801245e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012460:	2b00      	cmp	r3, #0
 8012462:	d002      	beq.n	801246a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012464:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012466:	f7fa ff07 	bl	800d278 <pbuf_free>
  }
  if (queue != NULL) {
 801246a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801246c:	2b00      	cmp	r3, #0
 801246e:	d002      	beq.n	8012476 <tcp_write+0x686>
    tcp_segs_free(queue);
 8012470:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012472:	f7fc fb6f 	bl	800eb54 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801247c:	2b00      	cmp	r3, #0
 801247e:	d00e      	beq.n	801249e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012484:	2b00      	cmp	r3, #0
 8012486:	d10a      	bne.n	801249e <tcp_write+0x6ae>
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801248c:	2b00      	cmp	r3, #0
 801248e:	d106      	bne.n	801249e <tcp_write+0x6ae>
 8012490:	4b06      	ldr	r3, [pc, #24]	; (80124ac <tcp_write+0x6bc>)
 8012492:	f240 3227 	movw	r2, #807	; 0x327
 8012496:	4906      	ldr	r1, [pc, #24]	; (80124b0 <tcp_write+0x6c0>)
 8012498:	4806      	ldr	r0, [pc, #24]	; (80124b4 <tcp_write+0x6c4>)
 801249a:	f004 fcbb 	bl	8016e14 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801249e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	375c      	adds	r7, #92	; 0x5c
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd90      	pop	{r4, r7, pc}
 80124aa:	bf00      	nop
 80124ac:	08019ec0 	.word	0x08019ec0
 80124b0:	0801a234 	.word	0x0801a234
 80124b4:	08019f14 	.word	0x08019f14

080124b8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80124b8:	b590      	push	{r4, r7, lr}
 80124ba:	b08b      	sub	sp, #44	; 0x2c
 80124bc:	af02      	add	r7, sp, #8
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	460b      	mov	r3, r1
 80124c2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80124c4:	2300      	movs	r3, #0
 80124c6:	61fb      	str	r3, [r7, #28]
 80124c8:	2300      	movs	r3, #0
 80124ca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80124cc:	2300      	movs	r3, #0
 80124ce:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d106      	bne.n	80124e4 <tcp_split_unsent_seg+0x2c>
 80124d6:	4b95      	ldr	r3, [pc, #596]	; (801272c <tcp_split_unsent_seg+0x274>)
 80124d8:	f240 324b 	movw	r2, #843	; 0x34b
 80124dc:	4994      	ldr	r1, [pc, #592]	; (8012730 <tcp_split_unsent_seg+0x278>)
 80124de:	4895      	ldr	r0, [pc, #596]	; (8012734 <tcp_split_unsent_seg+0x27c>)
 80124e0:	f004 fc98 	bl	8016e14 <iprintf>

  useg = pcb->unsent;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124e8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d102      	bne.n	80124f6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80124f0:	f04f 33ff 	mov.w	r3, #4294967295
 80124f4:	e116      	b.n	8012724 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80124f6:	887b      	ldrh	r3, [r7, #2]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d109      	bne.n	8012510 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80124fc:	4b8b      	ldr	r3, [pc, #556]	; (801272c <tcp_split_unsent_seg+0x274>)
 80124fe:	f240 3253 	movw	r2, #851	; 0x353
 8012502:	498d      	ldr	r1, [pc, #564]	; (8012738 <tcp_split_unsent_seg+0x280>)
 8012504:	488b      	ldr	r0, [pc, #556]	; (8012734 <tcp_split_unsent_seg+0x27c>)
 8012506:	f004 fc85 	bl	8016e14 <iprintf>
    return ERR_VAL;
 801250a:	f06f 0305 	mvn.w	r3, #5
 801250e:	e109      	b.n	8012724 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012510:	697b      	ldr	r3, [r7, #20]
 8012512:	891b      	ldrh	r3, [r3, #8]
 8012514:	887a      	ldrh	r2, [r7, #2]
 8012516:	429a      	cmp	r2, r3
 8012518:	d301      	bcc.n	801251e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801251a:	2300      	movs	r3, #0
 801251c:	e102      	b.n	8012724 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012522:	887a      	ldrh	r2, [r7, #2]
 8012524:	429a      	cmp	r2, r3
 8012526:	d906      	bls.n	8012536 <tcp_split_unsent_seg+0x7e>
 8012528:	4b80      	ldr	r3, [pc, #512]	; (801272c <tcp_split_unsent_seg+0x274>)
 801252a:	f240 325b 	movw	r2, #859	; 0x35b
 801252e:	4983      	ldr	r1, [pc, #524]	; (801273c <tcp_split_unsent_seg+0x284>)
 8012530:	4880      	ldr	r0, [pc, #512]	; (8012734 <tcp_split_unsent_seg+0x27c>)
 8012532:	f004 fc6f 	bl	8016e14 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	891b      	ldrh	r3, [r3, #8]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d106      	bne.n	801254c <tcp_split_unsent_seg+0x94>
 801253e:	4b7b      	ldr	r3, [pc, #492]	; (801272c <tcp_split_unsent_seg+0x274>)
 8012540:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012544:	497e      	ldr	r1, [pc, #504]	; (8012740 <tcp_split_unsent_seg+0x288>)
 8012546:	487b      	ldr	r0, [pc, #492]	; (8012734 <tcp_split_unsent_seg+0x27c>)
 8012548:	f004 fc64 	bl	8016e14 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801254c:	697b      	ldr	r3, [r7, #20]
 801254e:	7a9b      	ldrb	r3, [r3, #10]
 8012550:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012552:	7bfb      	ldrb	r3, [r7, #15]
 8012554:	009b      	lsls	r3, r3, #2
 8012556:	b2db      	uxtb	r3, r3
 8012558:	f003 0304 	and.w	r3, r3, #4
 801255c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	891a      	ldrh	r2, [r3, #8]
 8012562:	887b      	ldrh	r3, [r7, #2]
 8012564:	1ad3      	subs	r3, r2, r3
 8012566:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012568:	7bbb      	ldrb	r3, [r7, #14]
 801256a:	b29a      	uxth	r2, r3
 801256c:	89bb      	ldrh	r3, [r7, #12]
 801256e:	4413      	add	r3, r2
 8012570:	b29b      	uxth	r3, r3
 8012572:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012576:	4619      	mov	r1, r3
 8012578:	2036      	movs	r0, #54	; 0x36
 801257a:	f7fa fb99 	bl	800ccb0 <pbuf_alloc>
 801257e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012580:	693b      	ldr	r3, [r7, #16]
 8012582:	2b00      	cmp	r3, #0
 8012584:	f000 80b7 	beq.w	80126f6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	685b      	ldr	r3, [r3, #4]
 801258c:	891a      	ldrh	r2, [r3, #8]
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	891b      	ldrh	r3, [r3, #8]
 8012592:	1ad3      	subs	r3, r2, r3
 8012594:	b29a      	uxth	r2, r3
 8012596:	887b      	ldrh	r3, [r7, #2]
 8012598:	4413      	add	r3, r2
 801259a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	6858      	ldr	r0, [r3, #4]
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	685a      	ldr	r2, [r3, #4]
 80125a4:	7bbb      	ldrb	r3, [r7, #14]
 80125a6:	18d1      	adds	r1, r2, r3
 80125a8:	897b      	ldrh	r3, [r7, #10]
 80125aa:	89ba      	ldrh	r2, [r7, #12]
 80125ac:	f7fb f85a 	bl	800d664 <pbuf_copy_partial>
 80125b0:	4603      	mov	r3, r0
 80125b2:	461a      	mov	r2, r3
 80125b4:	89bb      	ldrh	r3, [r7, #12]
 80125b6:	4293      	cmp	r3, r2
 80125b8:	f040 809f 	bne.w	80126fa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	68db      	ldr	r3, [r3, #12]
 80125c0:	899b      	ldrh	r3, [r3, #12]
 80125c2:	b29b      	uxth	r3, r3
 80125c4:	4618      	mov	r0, r3
 80125c6:	f7f9 f9ad 	bl	800b924 <lwip_htons>
 80125ca:	4603      	mov	r3, r0
 80125cc:	b2db      	uxtb	r3, r3
 80125ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80125d2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80125d4:	2300      	movs	r3, #0
 80125d6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80125d8:	7efb      	ldrb	r3, [r7, #27]
 80125da:	f003 0308 	and.w	r3, r3, #8
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d007      	beq.n	80125f2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80125e2:	7efb      	ldrb	r3, [r7, #27]
 80125e4:	f023 0308 	bic.w	r3, r3, #8
 80125e8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80125ea:	7ebb      	ldrb	r3, [r7, #26]
 80125ec:	f043 0308 	orr.w	r3, r3, #8
 80125f0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80125f2:	7efb      	ldrb	r3, [r7, #27]
 80125f4:	f003 0301 	and.w	r3, r3, #1
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d007      	beq.n	801260c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80125fc:	7efb      	ldrb	r3, [r7, #27]
 80125fe:	f023 0301 	bic.w	r3, r3, #1
 8012602:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012604:	7ebb      	ldrb	r3, [r7, #26]
 8012606:	f043 0301 	orr.w	r3, r3, #1
 801260a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	68db      	ldr	r3, [r3, #12]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	4618      	mov	r0, r3
 8012614:	f7f9 f99b 	bl	800b94e <lwip_htonl>
 8012618:	4602      	mov	r2, r0
 801261a:	887b      	ldrh	r3, [r7, #2]
 801261c:	18d1      	adds	r1, r2, r3
 801261e:	7eba      	ldrb	r2, [r7, #26]
 8012620:	7bfb      	ldrb	r3, [r7, #15]
 8012622:	9300      	str	r3, [sp, #0]
 8012624:	460b      	mov	r3, r1
 8012626:	6939      	ldr	r1, [r7, #16]
 8012628:	6878      	ldr	r0, [r7, #4]
 801262a:	f7ff fa4f 	bl	8011acc <tcp_create_segment>
 801262e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012630:	69fb      	ldr	r3, [r7, #28]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d063      	beq.n	80126fe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	685b      	ldr	r3, [r3, #4]
 801263a:	4618      	mov	r0, r3
 801263c:	f7fa feaa 	bl	800d394 <pbuf_clen>
 8012640:	4603      	mov	r3, r0
 8012642:	461a      	mov	r2, r3
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801264a:	1a9b      	subs	r3, r3, r2
 801264c:	b29a      	uxth	r2, r3
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	6858      	ldr	r0, [r3, #4]
 8012658:	697b      	ldr	r3, [r7, #20]
 801265a:	685b      	ldr	r3, [r3, #4]
 801265c:	891a      	ldrh	r2, [r3, #8]
 801265e:	89bb      	ldrh	r3, [r7, #12]
 8012660:	1ad3      	subs	r3, r2, r3
 8012662:	b29b      	uxth	r3, r3
 8012664:	4619      	mov	r1, r3
 8012666:	f7fa fc81 	bl	800cf6c <pbuf_realloc>
  useg->len -= remainder;
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	891a      	ldrh	r2, [r3, #8]
 801266e:	89bb      	ldrh	r3, [r7, #12]
 8012670:	1ad3      	subs	r3, r2, r3
 8012672:	b29a      	uxth	r2, r3
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	68db      	ldr	r3, [r3, #12]
 801267c:	899b      	ldrh	r3, [r3, #12]
 801267e:	b29c      	uxth	r4, r3
 8012680:	7efb      	ldrb	r3, [r7, #27]
 8012682:	b29b      	uxth	r3, r3
 8012684:	4618      	mov	r0, r3
 8012686:	f7f9 f94d 	bl	800b924 <lwip_htons>
 801268a:	4603      	mov	r3, r0
 801268c:	461a      	mov	r2, r3
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	68db      	ldr	r3, [r3, #12]
 8012692:	4322      	orrs	r2, r4
 8012694:	b292      	uxth	r2, r2
 8012696:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	685b      	ldr	r3, [r3, #4]
 801269c:	4618      	mov	r0, r3
 801269e:	f7fa fe79 	bl	800d394 <pbuf_clen>
 80126a2:	4603      	mov	r3, r0
 80126a4:	461a      	mov	r2, r3
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126ac:	4413      	add	r3, r2
 80126ae:	b29a      	uxth	r2, r3
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80126b6:	69fb      	ldr	r3, [r7, #28]
 80126b8:	685b      	ldr	r3, [r3, #4]
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7fa fe6a 	bl	800d394 <pbuf_clen>
 80126c0:	4603      	mov	r3, r0
 80126c2:	461a      	mov	r2, r3
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126ca:	4413      	add	r3, r2
 80126cc:	b29a      	uxth	r2, r3
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	681a      	ldr	r2, [r3, #0]
 80126d8:	69fb      	ldr	r3, [r7, #28]
 80126da:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	69fa      	ldr	r2, [r7, #28]
 80126e0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80126e2:	69fb      	ldr	r3, [r7, #28]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d103      	bne.n	80126f2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	2200      	movs	r2, #0
 80126ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80126f2:	2300      	movs	r3, #0
 80126f4:	e016      	b.n	8012724 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80126f6:	bf00      	nop
 80126f8:	e002      	b.n	8012700 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80126fa:	bf00      	nop
 80126fc:	e000      	b.n	8012700 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80126fe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012700:	69fb      	ldr	r3, [r7, #28]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d006      	beq.n	8012714 <tcp_split_unsent_seg+0x25c>
 8012706:	4b09      	ldr	r3, [pc, #36]	; (801272c <tcp_split_unsent_seg+0x274>)
 8012708:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801270c:	490d      	ldr	r1, [pc, #52]	; (8012744 <tcp_split_unsent_seg+0x28c>)
 801270e:	4809      	ldr	r0, [pc, #36]	; (8012734 <tcp_split_unsent_seg+0x27c>)
 8012710:	f004 fb80 	bl	8016e14 <iprintf>
  if (p != NULL) {
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d002      	beq.n	8012720 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801271a:	6938      	ldr	r0, [r7, #16]
 801271c:	f7fa fdac 	bl	800d278 <pbuf_free>
  }

  return ERR_MEM;
 8012720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012724:	4618      	mov	r0, r3
 8012726:	3724      	adds	r7, #36	; 0x24
 8012728:	46bd      	mov	sp, r7
 801272a:	bd90      	pop	{r4, r7, pc}
 801272c:	08019ec0 	.word	0x08019ec0
 8012730:	0801a254 	.word	0x0801a254
 8012734:	08019f14 	.word	0x08019f14
 8012738:	0801a278 	.word	0x0801a278
 801273c:	0801a29c 	.word	0x0801a29c
 8012740:	0801a2ac 	.word	0x0801a2ac
 8012744:	0801a2bc 	.word	0x0801a2bc

08012748 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012748:	b590      	push	{r4, r7, lr}
 801274a:	b085      	sub	sp, #20
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d106      	bne.n	8012764 <tcp_send_fin+0x1c>
 8012756:	4b21      	ldr	r3, [pc, #132]	; (80127dc <tcp_send_fin+0x94>)
 8012758:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801275c:	4920      	ldr	r1, [pc, #128]	; (80127e0 <tcp_send_fin+0x98>)
 801275e:	4821      	ldr	r0, [pc, #132]	; (80127e4 <tcp_send_fin+0x9c>)
 8012760:	f004 fb58 	bl	8016e14 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012768:	2b00      	cmp	r3, #0
 801276a:	d02e      	beq.n	80127ca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012770:	60fb      	str	r3, [r7, #12]
 8012772:	e002      	b.n	801277a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d1f8      	bne.n	8012774 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	68db      	ldr	r3, [r3, #12]
 8012786:	899b      	ldrh	r3, [r3, #12]
 8012788:	b29b      	uxth	r3, r3
 801278a:	4618      	mov	r0, r3
 801278c:	f7f9 f8ca 	bl	800b924 <lwip_htons>
 8012790:	4603      	mov	r3, r0
 8012792:	b2db      	uxtb	r3, r3
 8012794:	f003 0307 	and.w	r3, r3, #7
 8012798:	2b00      	cmp	r3, #0
 801279a:	d116      	bne.n	80127ca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	68db      	ldr	r3, [r3, #12]
 80127a0:	899b      	ldrh	r3, [r3, #12]
 80127a2:	b29c      	uxth	r4, r3
 80127a4:	2001      	movs	r0, #1
 80127a6:	f7f9 f8bd 	bl	800b924 <lwip_htons>
 80127aa:	4603      	mov	r3, r0
 80127ac:	461a      	mov	r2, r3
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	68db      	ldr	r3, [r3, #12]
 80127b2:	4322      	orrs	r2, r4
 80127b4:	b292      	uxth	r2, r2
 80127b6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	8b5b      	ldrh	r3, [r3, #26]
 80127bc:	f043 0320 	orr.w	r3, r3, #32
 80127c0:	b29a      	uxth	r2, r3
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80127c6:	2300      	movs	r3, #0
 80127c8:	e004      	b.n	80127d4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80127ca:	2101      	movs	r1, #1
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f000 f80b 	bl	80127e8 <tcp_enqueue_flags>
 80127d2:	4603      	mov	r3, r0
}
 80127d4:	4618      	mov	r0, r3
 80127d6:	3714      	adds	r7, #20
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd90      	pop	{r4, r7, pc}
 80127dc:	08019ec0 	.word	0x08019ec0
 80127e0:	0801a2c8 	.word	0x0801a2c8
 80127e4:	08019f14 	.word	0x08019f14

080127e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b08a      	sub	sp, #40	; 0x28
 80127ec:	af02      	add	r7, sp, #8
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	460b      	mov	r3, r1
 80127f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80127f4:	2300      	movs	r3, #0
 80127f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80127f8:	2300      	movs	r3, #0
 80127fa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80127fc:	78fb      	ldrb	r3, [r7, #3]
 80127fe:	f003 0303 	and.w	r3, r3, #3
 8012802:	2b00      	cmp	r3, #0
 8012804:	d106      	bne.n	8012814 <tcp_enqueue_flags+0x2c>
 8012806:	4b67      	ldr	r3, [pc, #412]	; (80129a4 <tcp_enqueue_flags+0x1bc>)
 8012808:	f240 4211 	movw	r2, #1041	; 0x411
 801280c:	4966      	ldr	r1, [pc, #408]	; (80129a8 <tcp_enqueue_flags+0x1c0>)
 801280e:	4867      	ldr	r0, [pc, #412]	; (80129ac <tcp_enqueue_flags+0x1c4>)
 8012810:	f004 fb00 	bl	8016e14 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d106      	bne.n	8012828 <tcp_enqueue_flags+0x40>
 801281a:	4b62      	ldr	r3, [pc, #392]	; (80129a4 <tcp_enqueue_flags+0x1bc>)
 801281c:	f240 4213 	movw	r2, #1043	; 0x413
 8012820:	4963      	ldr	r1, [pc, #396]	; (80129b0 <tcp_enqueue_flags+0x1c8>)
 8012822:	4862      	ldr	r0, [pc, #392]	; (80129ac <tcp_enqueue_flags+0x1c4>)
 8012824:	f004 faf6 	bl	8016e14 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012828:	78fb      	ldrb	r3, [r7, #3]
 801282a:	f003 0302 	and.w	r3, r3, #2
 801282e:	2b00      	cmp	r3, #0
 8012830:	d001      	beq.n	8012836 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012832:	2301      	movs	r3, #1
 8012834:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012836:	7ffb      	ldrb	r3, [r7, #31]
 8012838:	009b      	lsls	r3, r3, #2
 801283a:	b2db      	uxtb	r3, r3
 801283c:	f003 0304 	and.w	r3, r3, #4
 8012840:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012842:	7dfb      	ldrb	r3, [r7, #23]
 8012844:	b29b      	uxth	r3, r3
 8012846:	f44f 7220 	mov.w	r2, #640	; 0x280
 801284a:	4619      	mov	r1, r3
 801284c:	2036      	movs	r0, #54	; 0x36
 801284e:	f7fa fa2f 	bl	800ccb0 <pbuf_alloc>
 8012852:	6138      	str	r0, [r7, #16]
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d109      	bne.n	801286e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	8b5b      	ldrh	r3, [r3, #26]
 801285e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012862:	b29a      	uxth	r2, r3
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012868:	f04f 33ff 	mov.w	r3, #4294967295
 801286c:	e095      	b.n	801299a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	895a      	ldrh	r2, [r3, #10]
 8012872:	7dfb      	ldrb	r3, [r7, #23]
 8012874:	b29b      	uxth	r3, r3
 8012876:	429a      	cmp	r2, r3
 8012878:	d206      	bcs.n	8012888 <tcp_enqueue_flags+0xa0>
 801287a:	4b4a      	ldr	r3, [pc, #296]	; (80129a4 <tcp_enqueue_flags+0x1bc>)
 801287c:	f240 4239 	movw	r2, #1081	; 0x439
 8012880:	494c      	ldr	r1, [pc, #304]	; (80129b4 <tcp_enqueue_flags+0x1cc>)
 8012882:	484a      	ldr	r0, [pc, #296]	; (80129ac <tcp_enqueue_flags+0x1c4>)
 8012884:	f004 fac6 	bl	8016e14 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801288c:	78fa      	ldrb	r2, [r7, #3]
 801288e:	7ffb      	ldrb	r3, [r7, #31]
 8012890:	9300      	str	r3, [sp, #0]
 8012892:	460b      	mov	r3, r1
 8012894:	6939      	ldr	r1, [r7, #16]
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	f7ff f918 	bl	8011acc <tcp_create_segment>
 801289c:	60f8      	str	r0, [r7, #12]
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d109      	bne.n	80128b8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	8b5b      	ldrh	r3, [r3, #26]
 80128a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128ac:	b29a      	uxth	r2, r3
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80128b2:	f04f 33ff 	mov.w	r3, #4294967295
 80128b6:	e070      	b.n	801299a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	68db      	ldr	r3, [r3, #12]
 80128bc:	f003 0303 	and.w	r3, r3, #3
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d006      	beq.n	80128d2 <tcp_enqueue_flags+0xea>
 80128c4:	4b37      	ldr	r3, [pc, #220]	; (80129a4 <tcp_enqueue_flags+0x1bc>)
 80128c6:	f240 4242 	movw	r2, #1090	; 0x442
 80128ca:	493b      	ldr	r1, [pc, #236]	; (80129b8 <tcp_enqueue_flags+0x1d0>)
 80128cc:	4837      	ldr	r0, [pc, #220]	; (80129ac <tcp_enqueue_flags+0x1c4>)
 80128ce:	f004 faa1 	bl	8016e14 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	891b      	ldrh	r3, [r3, #8]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d006      	beq.n	80128e8 <tcp_enqueue_flags+0x100>
 80128da:	4b32      	ldr	r3, [pc, #200]	; (80129a4 <tcp_enqueue_flags+0x1bc>)
 80128dc:	f240 4243 	movw	r2, #1091	; 0x443
 80128e0:	4936      	ldr	r1, [pc, #216]	; (80129bc <tcp_enqueue_flags+0x1d4>)
 80128e2:	4832      	ldr	r0, [pc, #200]	; (80129ac <tcp_enqueue_flags+0x1c4>)
 80128e4:	f004 fa96 	bl	8016e14 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d103      	bne.n	80128f8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	68fa      	ldr	r2, [r7, #12]
 80128f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80128f6:	e00d      	b.n	8012914 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128fc:	61bb      	str	r3, [r7, #24]
 80128fe:	e002      	b.n	8012906 <tcp_enqueue_flags+0x11e>
 8012900:	69bb      	ldr	r3, [r7, #24]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	61bb      	str	r3, [r7, #24]
 8012906:	69bb      	ldr	r3, [r7, #24]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d1f8      	bne.n	8012900 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801290e:	69bb      	ldr	r3, [r7, #24]
 8012910:	68fa      	ldr	r2, [r7, #12]
 8012912:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2200      	movs	r2, #0
 8012918:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801291c:	78fb      	ldrb	r3, [r7, #3]
 801291e:	f003 0302 	and.w	r3, r3, #2
 8012922:	2b00      	cmp	r3, #0
 8012924:	d104      	bne.n	8012930 <tcp_enqueue_flags+0x148>
 8012926:	78fb      	ldrb	r3, [r7, #3]
 8012928:	f003 0301 	and.w	r3, r3, #1
 801292c:	2b00      	cmp	r3, #0
 801292e:	d004      	beq.n	801293a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012934:	1c5a      	adds	r2, r3, #1
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801293a:	78fb      	ldrb	r3, [r7, #3]
 801293c:	f003 0301 	and.w	r3, r3, #1
 8012940:	2b00      	cmp	r3, #0
 8012942:	d006      	beq.n	8012952 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	8b5b      	ldrh	r3, [r3, #26]
 8012948:	f043 0320 	orr.w	r3, r3, #32
 801294c:	b29a      	uxth	r2, r3
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	4618      	mov	r0, r3
 8012958:	f7fa fd1c 	bl	800d394 <pbuf_clen>
 801295c:	4603      	mov	r3, r0
 801295e:	461a      	mov	r2, r3
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012966:	4413      	add	r3, r2
 8012968:	b29a      	uxth	r2, r3
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012976:	2b00      	cmp	r3, #0
 8012978:	d00e      	beq.n	8012998 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801297e:	2b00      	cmp	r3, #0
 8012980:	d10a      	bne.n	8012998 <tcp_enqueue_flags+0x1b0>
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012986:	2b00      	cmp	r3, #0
 8012988:	d106      	bne.n	8012998 <tcp_enqueue_flags+0x1b0>
 801298a:	4b06      	ldr	r3, [pc, #24]	; (80129a4 <tcp_enqueue_flags+0x1bc>)
 801298c:	f240 4265 	movw	r2, #1125	; 0x465
 8012990:	490b      	ldr	r1, [pc, #44]	; (80129c0 <tcp_enqueue_flags+0x1d8>)
 8012992:	4806      	ldr	r0, [pc, #24]	; (80129ac <tcp_enqueue_flags+0x1c4>)
 8012994:	f004 fa3e 	bl	8016e14 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012998:	2300      	movs	r3, #0
}
 801299a:	4618      	mov	r0, r3
 801299c:	3720      	adds	r7, #32
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}
 80129a2:	bf00      	nop
 80129a4:	08019ec0 	.word	0x08019ec0
 80129a8:	0801a2e4 	.word	0x0801a2e4
 80129ac:	08019f14 	.word	0x08019f14
 80129b0:	0801a33c 	.word	0x0801a33c
 80129b4:	0801a35c 	.word	0x0801a35c
 80129b8:	0801a398 	.word	0x0801a398
 80129bc:	0801a3b0 	.word	0x0801a3b0
 80129c0:	0801a3dc 	.word	0x0801a3dc

080129c4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80129c4:	b5b0      	push	{r4, r5, r7, lr}
 80129c6:	b08a      	sub	sp, #40	; 0x28
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d106      	bne.n	80129e0 <tcp_output+0x1c>
 80129d2:	4b9e      	ldr	r3, [pc, #632]	; (8012c4c <tcp_output+0x288>)
 80129d4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80129d8:	499d      	ldr	r1, [pc, #628]	; (8012c50 <tcp_output+0x28c>)
 80129da:	489e      	ldr	r0, [pc, #632]	; (8012c54 <tcp_output+0x290>)
 80129dc:	f004 fa1a 	bl	8016e14 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	7d1b      	ldrb	r3, [r3, #20]
 80129e4:	2b01      	cmp	r3, #1
 80129e6:	d106      	bne.n	80129f6 <tcp_output+0x32>
 80129e8:	4b98      	ldr	r3, [pc, #608]	; (8012c4c <tcp_output+0x288>)
 80129ea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80129ee:	499a      	ldr	r1, [pc, #616]	; (8012c58 <tcp_output+0x294>)
 80129f0:	4898      	ldr	r0, [pc, #608]	; (8012c54 <tcp_output+0x290>)
 80129f2:	f004 fa0f 	bl	8016e14 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80129f6:	4b99      	ldr	r3, [pc, #612]	; (8012c5c <tcp_output+0x298>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	687a      	ldr	r2, [r7, #4]
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d101      	bne.n	8012a04 <tcp_output+0x40>
    return ERR_OK;
 8012a00:	2300      	movs	r3, #0
 8012a02:	e1ce      	b.n	8012da2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012a10:	4293      	cmp	r3, r2
 8012a12:	bf28      	it	cs
 8012a14:	4613      	movcs	r3, r2
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d10b      	bne.n	8012a3e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	8b5b      	ldrh	r3, [r3, #26]
 8012a2a:	f003 0302 	and.w	r3, r3, #2
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	f000 81aa 	beq.w	8012d88 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f000 fdcb 	bl	80135d0 <tcp_send_empty_ack>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	e1b1      	b.n	8012da2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012a3e:	6879      	ldr	r1, [r7, #4]
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	3304      	adds	r3, #4
 8012a44:	461a      	mov	r2, r3
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f7ff f824 	bl	8011a94 <tcp_route>
 8012a4c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d102      	bne.n	8012a5a <tcp_output+0x96>
    return ERR_RTE;
 8012a54:	f06f 0303 	mvn.w	r3, #3
 8012a58:	e1a3      	b.n	8012da2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d003      	beq.n	8012a68 <tcp_output+0xa4>
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d111      	bne.n	8012a8c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d002      	beq.n	8012a74 <tcp_output+0xb0>
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	3304      	adds	r3, #4
 8012a72:	e000      	b.n	8012a76 <tcp_output+0xb2>
 8012a74:	2300      	movs	r3, #0
 8012a76:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d102      	bne.n	8012a84 <tcp_output+0xc0>
      return ERR_RTE;
 8012a7e:	f06f 0303 	mvn.w	r3, #3
 8012a82:	e18e      	b.n	8012da2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	681a      	ldr	r2, [r3, #0]
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8e:	68db      	ldr	r3, [r3, #12]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7f8 ff5b 	bl	800b94e <lwip_htonl>
 8012a98:	4602      	mov	r2, r0
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a9e:	1ad3      	subs	r3, r2, r3
 8012aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012aa2:	8912      	ldrh	r2, [r2, #8]
 8012aa4:	4413      	add	r3, r2
 8012aa6:	69ba      	ldr	r2, [r7, #24]
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d227      	bcs.n	8012afc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ab2:	461a      	mov	r2, r3
 8012ab4:	69bb      	ldr	r3, [r7, #24]
 8012ab6:	4293      	cmp	r3, r2
 8012ab8:	d114      	bne.n	8012ae4 <tcp_output+0x120>
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d110      	bne.n	8012ae4 <tcp_output+0x120>
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d10b      	bne.n	8012ae4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2201      	movs	r2, #1
 8012ad8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	8b5b      	ldrh	r3, [r3, #26]
 8012ae8:	f003 0302 	and.w	r3, r3, #2
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	f000 814d 	beq.w	8012d8c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f000 fd6c 	bl	80135d0 <tcp_send_empty_ack>
 8012af8:	4603      	mov	r3, r0
 8012afa:	e152      	b.n	8012da2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2200      	movs	r2, #0
 8012b00:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b08:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012b0a:	6a3b      	ldr	r3, [r7, #32]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	f000 811c 	beq.w	8012d4a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012b12:	e002      	b.n	8012b1a <tcp_output+0x156>
 8012b14:	6a3b      	ldr	r3, [r7, #32]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	623b      	str	r3, [r7, #32]
 8012b1a:	6a3b      	ldr	r3, [r7, #32]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d1f8      	bne.n	8012b14 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012b22:	e112      	b.n	8012d4a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b26:	68db      	ldr	r3, [r3, #12]
 8012b28:	899b      	ldrh	r3, [r3, #12]
 8012b2a:	b29b      	uxth	r3, r3
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7f8 fef9 	bl	800b924 <lwip_htons>
 8012b32:	4603      	mov	r3, r0
 8012b34:	b2db      	uxtb	r3, r3
 8012b36:	f003 0304 	and.w	r3, r3, #4
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d006      	beq.n	8012b4c <tcp_output+0x188>
 8012b3e:	4b43      	ldr	r3, [pc, #268]	; (8012c4c <tcp_output+0x288>)
 8012b40:	f240 5236 	movw	r2, #1334	; 0x536
 8012b44:	4946      	ldr	r1, [pc, #280]	; (8012c60 <tcp_output+0x29c>)
 8012b46:	4843      	ldr	r0, [pc, #268]	; (8012c54 <tcp_output+0x290>)
 8012b48:	f004 f964 	bl	8016e14 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d01f      	beq.n	8012b94 <tcp_output+0x1d0>
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	8b5b      	ldrh	r3, [r3, #26]
 8012b58:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d119      	bne.n	8012b94 <tcp_output+0x1d0>
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d00b      	beq.n	8012b80 <tcp_output+0x1bc>
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d110      	bne.n	8012b94 <tcp_output+0x1d0>
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b76:	891a      	ldrh	r2, [r3, #8]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	d209      	bcs.n	8012b94 <tcp_output+0x1d0>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d004      	beq.n	8012b94 <tcp_output+0x1d0>
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b90:	2b08      	cmp	r3, #8
 8012b92:	d901      	bls.n	8012b98 <tcp_output+0x1d4>
 8012b94:	2301      	movs	r3, #1
 8012b96:	e000      	b.n	8012b9a <tcp_output+0x1d6>
 8012b98:	2300      	movs	r3, #0
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d106      	bne.n	8012bac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	8b5b      	ldrh	r3, [r3, #26]
 8012ba2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	f000 80e4 	beq.w	8012d74 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	7d1b      	ldrb	r3, [r3, #20]
 8012bb0:	2b02      	cmp	r3, #2
 8012bb2:	d00d      	beq.n	8012bd0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb6:	68db      	ldr	r3, [r3, #12]
 8012bb8:	899b      	ldrh	r3, [r3, #12]
 8012bba:	b29c      	uxth	r4, r3
 8012bbc:	2010      	movs	r0, #16
 8012bbe:	f7f8 feb1 	bl	800b924 <lwip_htons>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	461a      	mov	r2, r3
 8012bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc8:	68db      	ldr	r3, [r3, #12]
 8012bca:	4322      	orrs	r2, r4
 8012bcc:	b292      	uxth	r2, r2
 8012bce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012bd0:	697a      	ldr	r2, [r7, #20]
 8012bd2:	6879      	ldr	r1, [r7, #4]
 8012bd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bd6:	f000 f909 	bl	8012dec <tcp_output_segment>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d009      	beq.n	8012bfa <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	8b5b      	ldrh	r3, [r3, #26]
 8012bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bee:	b29a      	uxth	r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	835a      	strh	r2, [r3, #26]
      return err;
 8012bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012bf8:	e0d3      	b.n	8012da2 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfc:	681a      	ldr	r2, [r3, #0]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	7d1b      	ldrb	r3, [r3, #20]
 8012c06:	2b02      	cmp	r3, #2
 8012c08:	d006      	beq.n	8012c18 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	8b5b      	ldrh	r3, [r3, #26]
 8012c0e:	f023 0303 	bic.w	r3, r3, #3
 8012c12:	b29a      	uxth	r2, r3
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1a:	68db      	ldr	r3, [r3, #12]
 8012c1c:	685b      	ldr	r3, [r3, #4]
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7f8 fe95 	bl	800b94e <lwip_htonl>
 8012c24:	4604      	mov	r4, r0
 8012c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c28:	891b      	ldrh	r3, [r3, #8]
 8012c2a:	461d      	mov	r5, r3
 8012c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2e:	68db      	ldr	r3, [r3, #12]
 8012c30:	899b      	ldrh	r3, [r3, #12]
 8012c32:	b29b      	uxth	r3, r3
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7f8 fe75 	bl	800b924 <lwip_htons>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	f003 0303 	and.w	r3, r3, #3
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d00e      	beq.n	8012c64 <tcp_output+0x2a0>
 8012c46:	2301      	movs	r3, #1
 8012c48:	e00d      	b.n	8012c66 <tcp_output+0x2a2>
 8012c4a:	bf00      	nop
 8012c4c:	08019ec0 	.word	0x08019ec0
 8012c50:	0801a404 	.word	0x0801a404
 8012c54:	08019f14 	.word	0x08019f14
 8012c58:	0801a41c 	.word	0x0801a41c
 8012c5c:	24007fac 	.word	0x24007fac
 8012c60:	0801a444 	.word	0x0801a444
 8012c64:	2300      	movs	r3, #0
 8012c66:	442b      	add	r3, r5
 8012c68:	4423      	add	r3, r4
 8012c6a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	1ad3      	subs	r3, r2, r3
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	da02      	bge.n	8012c7e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	68ba      	ldr	r2, [r7, #8]
 8012c7c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c80:	891b      	ldrh	r3, [r3, #8]
 8012c82:	461c      	mov	r4, r3
 8012c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c86:	68db      	ldr	r3, [r3, #12]
 8012c88:	899b      	ldrh	r3, [r3, #12]
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f7f8 fe49 	bl	800b924 <lwip_htons>
 8012c92:	4603      	mov	r3, r0
 8012c94:	b2db      	uxtb	r3, r3
 8012c96:	f003 0303 	and.w	r3, r3, #3
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d001      	beq.n	8012ca2 <tcp_output+0x2de>
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	e000      	b.n	8012ca4 <tcp_output+0x2e0>
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	4423      	add	r3, r4
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d049      	beq.n	8012d3e <tcp_output+0x37a>
      seg->next = NULL;
 8012caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cac:	2200      	movs	r2, #0
 8012cae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d105      	bne.n	8012cc4 <tcp_output+0x300>
        pcb->unacked = seg;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cbc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc0:	623b      	str	r3, [r7, #32]
 8012cc2:	e03f      	b.n	8012d44 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	685b      	ldr	r3, [r3, #4]
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f7f8 fe3f 	bl	800b94e <lwip_htonl>
 8012cd0:	4604      	mov	r4, r0
 8012cd2:	6a3b      	ldr	r3, [r7, #32]
 8012cd4:	68db      	ldr	r3, [r3, #12]
 8012cd6:	685b      	ldr	r3, [r3, #4]
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f7f8 fe38 	bl	800b94e <lwip_htonl>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	1ae3      	subs	r3, r4, r3
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	da24      	bge.n	8012d30 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	3370      	adds	r3, #112	; 0x70
 8012cea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012cec:	e002      	b.n	8012cf4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012cee:	69fb      	ldr	r3, [r7, #28]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012cf4:	69fb      	ldr	r3, [r7, #28]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d011      	beq.n	8012d20 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012cfc:	69fb      	ldr	r3, [r7, #28]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	68db      	ldr	r3, [r3, #12]
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7f8 fe22 	bl	800b94e <lwip_htonl>
 8012d0a:	4604      	mov	r4, r0
 8012d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0e:	68db      	ldr	r3, [r3, #12]
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7f8 fe1b 	bl	800b94e <lwip_htonl>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	dbe6      	blt.n	8012cee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012d20:	69fb      	ldr	r3, [r7, #28]
 8012d22:	681a      	ldr	r2, [r3, #0]
 8012d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d26:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012d28:	69fb      	ldr	r3, [r7, #28]
 8012d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d2c:	601a      	str	r2, [r3, #0]
 8012d2e:	e009      	b.n	8012d44 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012d30:	6a3b      	ldr	r3, [r7, #32]
 8012d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d34:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012d36:	6a3b      	ldr	r3, [r7, #32]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	623b      	str	r3, [r7, #32]
 8012d3c:	e002      	b.n	8012d44 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012d3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d40:	f7fb ff1d 	bl	800eb7e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d48:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d012      	beq.n	8012d76 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d52:	68db      	ldr	r3, [r3, #12]
 8012d54:	685b      	ldr	r3, [r3, #4]
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7f8 fdf9 	bl	800b94e <lwip_htonl>
 8012d5c:	4602      	mov	r2, r0
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d62:	1ad3      	subs	r3, r2, r3
 8012d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d66:	8912      	ldrh	r2, [r2, #8]
 8012d68:	4413      	add	r3, r2
  while (seg != NULL &&
 8012d6a:	69ba      	ldr	r2, [r7, #24]
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	f4bf aed9 	bcs.w	8012b24 <tcp_output+0x160>
 8012d72:	e000      	b.n	8012d76 <tcp_output+0x3b2>
      break;
 8012d74:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d108      	bne.n	8012d90 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2200      	movs	r2, #0
 8012d82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012d86:	e004      	b.n	8012d92 <tcp_output+0x3ce>
    goto output_done;
 8012d88:	bf00      	nop
 8012d8a:	e002      	b.n	8012d92 <tcp_output+0x3ce>
    goto output_done;
 8012d8c:	bf00      	nop
 8012d8e:	e000      	b.n	8012d92 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012d90:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	8b5b      	ldrh	r3, [r3, #26]
 8012d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012d9a:	b29a      	uxth	r2, r3
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012da0:	2300      	movs	r3, #0
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3728      	adds	r7, #40	; 0x28
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bdb0      	pop	{r4, r5, r7, pc}
 8012daa:	bf00      	nop

08012dac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b082      	sub	sp, #8
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d106      	bne.n	8012dc8 <tcp_output_segment_busy+0x1c>
 8012dba:	4b09      	ldr	r3, [pc, #36]	; (8012de0 <tcp_output_segment_busy+0x34>)
 8012dbc:	f240 529a 	movw	r2, #1434	; 0x59a
 8012dc0:	4908      	ldr	r1, [pc, #32]	; (8012de4 <tcp_output_segment_busy+0x38>)
 8012dc2:	4809      	ldr	r0, [pc, #36]	; (8012de8 <tcp_output_segment_busy+0x3c>)
 8012dc4:	f004 f826 	bl	8016e14 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	7b9b      	ldrb	r3, [r3, #14]
 8012dce:	2b01      	cmp	r3, #1
 8012dd0:	d001      	beq.n	8012dd6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	e000      	b.n	8012dd8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012dd6:	2300      	movs	r3, #0
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3708      	adds	r7, #8
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}
 8012de0:	08019ec0 	.word	0x08019ec0
 8012de4:	0801a45c 	.word	0x0801a45c
 8012de8:	08019f14 	.word	0x08019f14

08012dec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012dec:	b5b0      	push	{r4, r5, r7, lr}
 8012dee:	b08c      	sub	sp, #48	; 0x30
 8012df0:	af04      	add	r7, sp, #16
 8012df2:	60f8      	str	r0, [r7, #12]
 8012df4:	60b9      	str	r1, [r7, #8]
 8012df6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d106      	bne.n	8012e0c <tcp_output_segment+0x20>
 8012dfe:	4b63      	ldr	r3, [pc, #396]	; (8012f8c <tcp_output_segment+0x1a0>)
 8012e00:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012e04:	4962      	ldr	r1, [pc, #392]	; (8012f90 <tcp_output_segment+0x1a4>)
 8012e06:	4863      	ldr	r0, [pc, #396]	; (8012f94 <tcp_output_segment+0x1a8>)
 8012e08:	f004 f804 	bl	8016e14 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d106      	bne.n	8012e20 <tcp_output_segment+0x34>
 8012e12:	4b5e      	ldr	r3, [pc, #376]	; (8012f8c <tcp_output_segment+0x1a0>)
 8012e14:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012e18:	495f      	ldr	r1, [pc, #380]	; (8012f98 <tcp_output_segment+0x1ac>)
 8012e1a:	485e      	ldr	r0, [pc, #376]	; (8012f94 <tcp_output_segment+0x1a8>)
 8012e1c:	f003 fffa 	bl	8016e14 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d106      	bne.n	8012e34 <tcp_output_segment+0x48>
 8012e26:	4b59      	ldr	r3, [pc, #356]	; (8012f8c <tcp_output_segment+0x1a0>)
 8012e28:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012e2c:	495b      	ldr	r1, [pc, #364]	; (8012f9c <tcp_output_segment+0x1b0>)
 8012e2e:	4859      	ldr	r0, [pc, #356]	; (8012f94 <tcp_output_segment+0x1a8>)
 8012e30:	f003 fff0 	bl	8016e14 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012e34:	68f8      	ldr	r0, [r7, #12]
 8012e36:	f7ff ffb9 	bl	8012dac <tcp_output_segment_busy>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d001      	beq.n	8012e44 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012e40:	2300      	movs	r3, #0
 8012e42:	e09f      	b.n	8012f84 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012e44:	68bb      	ldr	r3, [r7, #8]
 8012e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	68dc      	ldr	r4, [r3, #12]
 8012e4c:	4610      	mov	r0, r2
 8012e4e:	f7f8 fd7e 	bl	800b94e <lwip_htonl>
 8012e52:	4603      	mov	r3, r0
 8012e54:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	68dc      	ldr	r4, [r3, #12]
 8012e5e:	4610      	mov	r0, r2
 8012e60:	f7f8 fd60 	bl	800b924 <lwip_htons>
 8012e64:	4603      	mov	r3, r0
 8012e66:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e6c:	68ba      	ldr	r2, [r7, #8]
 8012e6e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012e70:	441a      	add	r2, r3
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	68db      	ldr	r3, [r3, #12]
 8012e7a:	3314      	adds	r3, #20
 8012e7c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	7a9b      	ldrb	r3, [r3, #10]
 8012e82:	f003 0301 	and.w	r3, r3, #1
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d015      	beq.n	8012eb6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	3304      	adds	r3, #4
 8012e8e:	461a      	mov	r2, r3
 8012e90:	6879      	ldr	r1, [r7, #4]
 8012e92:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012e96:	f7fc fa37 	bl	800f308 <tcp_eff_send_mss_netif>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012e9e:	8b7b      	ldrh	r3, [r7, #26]
 8012ea0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7f8 fd52 	bl	800b94e <lwip_htonl>
 8012eaa:	4602      	mov	r2, r0
 8012eac:	69fb      	ldr	r3, [r7, #28]
 8012eae:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012eb0:	69fb      	ldr	r3, [r7, #28]
 8012eb2:	3304      	adds	r3, #4
 8012eb4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012eb6:	68bb      	ldr	r3, [r7, #8]
 8012eb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	da02      	bge.n	8012ec6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d10c      	bne.n	8012ee8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012ece:	4b34      	ldr	r3, [pc, #208]	; (8012fa0 <tcp_output_segment+0x1b4>)
 8012ed0:	681a      	ldr	r2, [r3, #0]
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	68db      	ldr	r3, [r3, #12]
 8012eda:	685b      	ldr	r3, [r3, #4]
 8012edc:	4618      	mov	r0, r3
 8012ede:	f7f8 fd36 	bl	800b94e <lwip_htonl>
 8012ee2:	4602      	mov	r2, r0
 8012ee4:	68bb      	ldr	r3, [r7, #8]
 8012ee6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	68da      	ldr	r2, [r3, #12]
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	685b      	ldr	r3, [r3, #4]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	1ad3      	subs	r3, r2, r3
 8012ef4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	8959      	ldrh	r1, [r3, #10]
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	685b      	ldr	r3, [r3, #4]
 8012f00:	8b3a      	ldrh	r2, [r7, #24]
 8012f02:	1a8a      	subs	r2, r1, r2
 8012f04:	b292      	uxth	r2, r2
 8012f06:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	685b      	ldr	r3, [r3, #4]
 8012f0c:	8919      	ldrh	r1, [r3, #8]
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	685b      	ldr	r3, [r3, #4]
 8012f12:	8b3a      	ldrh	r2, [r7, #24]
 8012f14:	1a8a      	subs	r2, r1, r2
 8012f16:	b292      	uxth	r2, r2
 8012f18:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	685b      	ldr	r3, [r3, #4]
 8012f1e:	68fa      	ldr	r2, [r7, #12]
 8012f20:	68d2      	ldr	r2, [r2, #12]
 8012f22:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	68db      	ldr	r3, [r3, #12]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	741a      	strb	r2, [r3, #16]
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	68db      	ldr	r3, [r3, #12]
 8012f34:	f103 0214 	add.w	r2, r3, #20
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	7a9b      	ldrb	r3, [r3, #10]
 8012f3c:	009b      	lsls	r3, r3, #2
 8012f3e:	f003 0304 	and.w	r3, r3, #4
 8012f42:	4413      	add	r3, r2
 8012f44:	69fa      	ldr	r2, [r7, #28]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d006      	beq.n	8012f58 <tcp_output_segment+0x16c>
 8012f4a:	4b10      	ldr	r3, [pc, #64]	; (8012f8c <tcp_output_segment+0x1a0>)
 8012f4c:	f240 621c 	movw	r2, #1564	; 0x61c
 8012f50:	4914      	ldr	r1, [pc, #80]	; (8012fa4 <tcp_output_segment+0x1b8>)
 8012f52:	4810      	ldr	r0, [pc, #64]	; (8012f94 <tcp_output_segment+0x1a8>)
 8012f54:	f003 ff5e 	bl	8016e14 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	6858      	ldr	r0, [r3, #4]
 8012f5c:	68b9      	ldr	r1, [r7, #8]
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	1d1c      	adds	r4, r3, #4
 8012f62:	68bb      	ldr	r3, [r7, #8]
 8012f64:	7add      	ldrb	r5, [r3, #11]
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	7a9b      	ldrb	r3, [r3, #10]
 8012f6a:	687a      	ldr	r2, [r7, #4]
 8012f6c:	9202      	str	r2, [sp, #8]
 8012f6e:	2206      	movs	r2, #6
 8012f70:	9201      	str	r2, [sp, #4]
 8012f72:	9300      	str	r3, [sp, #0]
 8012f74:	462b      	mov	r3, r5
 8012f76:	4622      	mov	r2, r4
 8012f78:	f002 fbd2 	bl	8015720 <ip4_output_if>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f84:	4618      	mov	r0, r3
 8012f86:	3720      	adds	r7, #32
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8012f8c:	08019ec0 	.word	0x08019ec0
 8012f90:	0801a484 	.word	0x0801a484
 8012f94:	08019f14 	.word	0x08019f14
 8012f98:	0801a4a4 	.word	0x0801a4a4
 8012f9c:	0801a4c4 	.word	0x0801a4c4
 8012fa0:	24007f9c 	.word	0x24007f9c
 8012fa4:	0801a4e8 	.word	0x0801a4e8

08012fa8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012fa8:	b5b0      	push	{r4, r5, r7, lr}
 8012faa:	b084      	sub	sp, #16
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d106      	bne.n	8012fc4 <tcp_rexmit_rto_prepare+0x1c>
 8012fb6:	4b31      	ldr	r3, [pc, #196]	; (801307c <tcp_rexmit_rto_prepare+0xd4>)
 8012fb8:	f240 6263 	movw	r2, #1635	; 0x663
 8012fbc:	4930      	ldr	r1, [pc, #192]	; (8013080 <tcp_rexmit_rto_prepare+0xd8>)
 8012fbe:	4831      	ldr	r0, [pc, #196]	; (8013084 <tcp_rexmit_rto_prepare+0xdc>)
 8012fc0:	f003 ff28 	bl	8016e14 <iprintf>

  if (pcb->unacked == NULL) {
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d102      	bne.n	8012fd2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012fcc:	f06f 0305 	mvn.w	r3, #5
 8012fd0:	e050      	b.n	8013074 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fd6:	60fb      	str	r3, [r7, #12]
 8012fd8:	e00b      	b.n	8012ff2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012fda:	68f8      	ldr	r0, [r7, #12]
 8012fdc:	f7ff fee6 	bl	8012dac <tcp_output_segment_busy>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d002      	beq.n	8012fec <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012fe6:	f06f 0305 	mvn.w	r3, #5
 8012fea:	e043      	b.n	8013074 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	60fb      	str	r3, [r7, #12]
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d1ef      	bne.n	8012fda <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012ffa:	68f8      	ldr	r0, [r7, #12]
 8012ffc:	f7ff fed6 	bl	8012dac <tcp_output_segment_busy>
 8013000:	4603      	mov	r3, r0
 8013002:	2b00      	cmp	r3, #0
 8013004:	d002      	beq.n	801300c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013006:	f06f 0305 	mvn.w	r3, #5
 801300a:	e033      	b.n	8013074 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2200      	movs	r2, #0
 8013020:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	8b5b      	ldrh	r3, [r3, #26]
 8013026:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801302a:	b29a      	uxth	r2, r3
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	68db      	ldr	r3, [r3, #12]
 8013034:	685b      	ldr	r3, [r3, #4]
 8013036:	4618      	mov	r0, r3
 8013038:	f7f8 fc89 	bl	800b94e <lwip_htonl>
 801303c:	4604      	mov	r4, r0
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	891b      	ldrh	r3, [r3, #8]
 8013042:	461d      	mov	r5, r3
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	68db      	ldr	r3, [r3, #12]
 8013048:	899b      	ldrh	r3, [r3, #12]
 801304a:	b29b      	uxth	r3, r3
 801304c:	4618      	mov	r0, r3
 801304e:	f7f8 fc69 	bl	800b924 <lwip_htons>
 8013052:	4603      	mov	r3, r0
 8013054:	b2db      	uxtb	r3, r3
 8013056:	f003 0303 	and.w	r3, r3, #3
 801305a:	2b00      	cmp	r3, #0
 801305c:	d001      	beq.n	8013062 <tcp_rexmit_rto_prepare+0xba>
 801305e:	2301      	movs	r3, #1
 8013060:	e000      	b.n	8013064 <tcp_rexmit_rto_prepare+0xbc>
 8013062:	2300      	movs	r3, #0
 8013064:	442b      	add	r3, r5
 8013066:	18e2      	adds	r2, r4, r3
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2200      	movs	r2, #0
 8013070:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013072:	2300      	movs	r3, #0
}
 8013074:	4618      	mov	r0, r3
 8013076:	3710      	adds	r7, #16
 8013078:	46bd      	mov	sp, r7
 801307a:	bdb0      	pop	{r4, r5, r7, pc}
 801307c:	08019ec0 	.word	0x08019ec0
 8013080:	0801a4fc 	.word	0x0801a4fc
 8013084:	08019f14 	.word	0x08019f14

08013088 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b082      	sub	sp, #8
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d106      	bne.n	80130a4 <tcp_rexmit_rto_commit+0x1c>
 8013096:	4b0d      	ldr	r3, [pc, #52]	; (80130cc <tcp_rexmit_rto_commit+0x44>)
 8013098:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801309c:	490c      	ldr	r1, [pc, #48]	; (80130d0 <tcp_rexmit_rto_commit+0x48>)
 801309e:	480d      	ldr	r0, [pc, #52]	; (80130d4 <tcp_rexmit_rto_commit+0x4c>)
 80130a0:	f003 feb8 	bl	8016e14 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80130aa:	2bff      	cmp	r3, #255	; 0xff
 80130ac:	d007      	beq.n	80130be <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80130b4:	3301      	adds	r3, #1
 80130b6:	b2da      	uxtb	r2, r3
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f7ff fc80 	bl	80129c4 <tcp_output>
}
 80130c4:	bf00      	nop
 80130c6:	3708      	adds	r7, #8
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}
 80130cc:	08019ec0 	.word	0x08019ec0
 80130d0:	0801a520 	.word	0x0801a520
 80130d4:	08019f14 	.word	0x08019f14

080130d8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b082      	sub	sp, #8
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d106      	bne.n	80130f4 <tcp_rexmit_rto+0x1c>
 80130e6:	4b0a      	ldr	r3, [pc, #40]	; (8013110 <tcp_rexmit_rto+0x38>)
 80130e8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80130ec:	4909      	ldr	r1, [pc, #36]	; (8013114 <tcp_rexmit_rto+0x3c>)
 80130ee:	480a      	ldr	r0, [pc, #40]	; (8013118 <tcp_rexmit_rto+0x40>)
 80130f0:	f003 fe90 	bl	8016e14 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f7ff ff57 	bl	8012fa8 <tcp_rexmit_rto_prepare>
 80130fa:	4603      	mov	r3, r0
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d102      	bne.n	8013106 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013100:	6878      	ldr	r0, [r7, #4]
 8013102:	f7ff ffc1 	bl	8013088 <tcp_rexmit_rto_commit>
  }
}
 8013106:	bf00      	nop
 8013108:	3708      	adds	r7, #8
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}
 801310e:	bf00      	nop
 8013110:	08019ec0 	.word	0x08019ec0
 8013114:	0801a544 	.word	0x0801a544
 8013118:	08019f14 	.word	0x08019f14

0801311c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801311c:	b590      	push	{r4, r7, lr}
 801311e:	b085      	sub	sp, #20
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d106      	bne.n	8013138 <tcp_rexmit+0x1c>
 801312a:	4b2f      	ldr	r3, [pc, #188]	; (80131e8 <tcp_rexmit+0xcc>)
 801312c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013130:	492e      	ldr	r1, [pc, #184]	; (80131ec <tcp_rexmit+0xd0>)
 8013132:	482f      	ldr	r0, [pc, #188]	; (80131f0 <tcp_rexmit+0xd4>)
 8013134:	f003 fe6e 	bl	8016e14 <iprintf>

  if (pcb->unacked == NULL) {
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801313c:	2b00      	cmp	r3, #0
 801313e:	d102      	bne.n	8013146 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013140:	f06f 0305 	mvn.w	r3, #5
 8013144:	e04c      	b.n	80131e0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801314a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801314c:	68b8      	ldr	r0, [r7, #8]
 801314e:	f7ff fe2d 	bl	8012dac <tcp_output_segment_busy>
 8013152:	4603      	mov	r3, r0
 8013154:	2b00      	cmp	r3, #0
 8013156:	d002      	beq.n	801315e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013158:	f06f 0305 	mvn.w	r3, #5
 801315c:	e040      	b.n	80131e0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	681a      	ldr	r2, [r3, #0]
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	336c      	adds	r3, #108	; 0x6c
 801316a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801316c:	e002      	b.n	8013174 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d011      	beq.n	80131a0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	68db      	ldr	r3, [r3, #12]
 8013182:	685b      	ldr	r3, [r3, #4]
 8013184:	4618      	mov	r0, r3
 8013186:	f7f8 fbe2 	bl	800b94e <lwip_htonl>
 801318a:	4604      	mov	r4, r0
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	68db      	ldr	r3, [r3, #12]
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	4618      	mov	r0, r3
 8013194:	f7f8 fbdb 	bl	800b94e <lwip_htonl>
 8013198:	4603      	mov	r3, r0
 801319a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801319c:	2b00      	cmp	r3, #0
 801319e:	dbe6      	blt.n	801316e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	681a      	ldr	r2, [r3, #0]
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	68ba      	ldr	r2, [r7, #8]
 80131ac:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80131ae:	68bb      	ldr	r3, [r7, #8]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d103      	bne.n	80131be <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2200      	movs	r2, #0
 80131ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80131c4:	2bff      	cmp	r3, #255	; 0xff
 80131c6:	d007      	beq.n	80131d8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80131ce:	3301      	adds	r3, #1
 80131d0:	b2da      	uxtb	r2, r3
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2200      	movs	r2, #0
 80131dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80131de:	2300      	movs	r3, #0
}
 80131e0:	4618      	mov	r0, r3
 80131e2:	3714      	adds	r7, #20
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd90      	pop	{r4, r7, pc}
 80131e8:	08019ec0 	.word	0x08019ec0
 80131ec:	0801a560 	.word	0x0801a560
 80131f0:	08019f14 	.word	0x08019f14

080131f4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b082      	sub	sp, #8
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d106      	bne.n	8013210 <tcp_rexmit_fast+0x1c>
 8013202:	4b2a      	ldr	r3, [pc, #168]	; (80132ac <tcp_rexmit_fast+0xb8>)
 8013204:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013208:	4929      	ldr	r1, [pc, #164]	; (80132b0 <tcp_rexmit_fast+0xbc>)
 801320a:	482a      	ldr	r0, [pc, #168]	; (80132b4 <tcp_rexmit_fast+0xc0>)
 801320c:	f003 fe02 	bl	8016e14 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013214:	2b00      	cmp	r3, #0
 8013216:	d045      	beq.n	80132a4 <tcp_rexmit_fast+0xb0>
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	8b5b      	ldrh	r3, [r3, #26]
 801321c:	f003 0304 	and.w	r3, r3, #4
 8013220:	2b00      	cmp	r3, #0
 8013222:	d13f      	bne.n	80132a4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f7ff ff79 	bl	801311c <tcp_rexmit>
 801322a:	4603      	mov	r3, r0
 801322c:	2b00      	cmp	r3, #0
 801322e:	d139      	bne.n	80132a4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801323c:	4293      	cmp	r3, r2
 801323e:	bf28      	it	cs
 8013240:	4613      	movcs	r3, r2
 8013242:	b29b      	uxth	r3, r3
 8013244:	2b00      	cmp	r3, #0
 8013246:	da00      	bge.n	801324a <tcp_rexmit_fast+0x56>
 8013248:	3301      	adds	r3, #1
 801324a:	105b      	asrs	r3, r3, #1
 801324c:	b29a      	uxth	r2, r3
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801325a:	461a      	mov	r2, r3
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013260:	005b      	lsls	r3, r3, #1
 8013262:	429a      	cmp	r2, r3
 8013264:	d206      	bcs.n	8013274 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801326a:	005b      	lsls	r3, r3, #1
 801326c:	b29a      	uxth	r2, r3
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801327e:	4619      	mov	r1, r3
 8013280:	0049      	lsls	r1, r1, #1
 8013282:	440b      	add	r3, r1
 8013284:	b29b      	uxth	r3, r3
 8013286:	4413      	add	r3, r2
 8013288:	b29a      	uxth	r2, r3
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	8b5b      	ldrh	r3, [r3, #26]
 8013294:	f043 0304 	orr.w	r3, r3, #4
 8013298:	b29a      	uxth	r2, r3
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2200      	movs	r2, #0
 80132a2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80132a4:	bf00      	nop
 80132a6:	3708      	adds	r7, #8
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	08019ec0 	.word	0x08019ec0
 80132b0:	0801a578 	.word	0x0801a578
 80132b4:	08019f14 	.word	0x08019f14

080132b8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b086      	sub	sp, #24
 80132bc:	af00      	add	r7, sp, #0
 80132be:	60f8      	str	r0, [r7, #12]
 80132c0:	607b      	str	r3, [r7, #4]
 80132c2:	460b      	mov	r3, r1
 80132c4:	817b      	strh	r3, [r7, #10]
 80132c6:	4613      	mov	r3, r2
 80132c8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80132ca:	897a      	ldrh	r2, [r7, #10]
 80132cc:	893b      	ldrh	r3, [r7, #8]
 80132ce:	4413      	add	r3, r2
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	3314      	adds	r3, #20
 80132d4:	b29b      	uxth	r3, r3
 80132d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80132da:	4619      	mov	r1, r3
 80132dc:	2022      	movs	r0, #34	; 0x22
 80132de:	f7f9 fce7 	bl	800ccb0 <pbuf_alloc>
 80132e2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80132e4:	697b      	ldr	r3, [r7, #20]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d04d      	beq.n	8013386 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80132ea:	897b      	ldrh	r3, [r7, #10]
 80132ec:	3313      	adds	r3, #19
 80132ee:	697a      	ldr	r2, [r7, #20]
 80132f0:	8952      	ldrh	r2, [r2, #10]
 80132f2:	4293      	cmp	r3, r2
 80132f4:	db06      	blt.n	8013304 <tcp_output_alloc_header_common+0x4c>
 80132f6:	4b26      	ldr	r3, [pc, #152]	; (8013390 <tcp_output_alloc_header_common+0xd8>)
 80132f8:	f240 7223 	movw	r2, #1827	; 0x723
 80132fc:	4925      	ldr	r1, [pc, #148]	; (8013394 <tcp_output_alloc_header_common+0xdc>)
 80132fe:	4826      	ldr	r0, [pc, #152]	; (8013398 <tcp_output_alloc_header_common+0xe0>)
 8013300:	f003 fd88 	bl	8016e14 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013304:	697b      	ldr	r3, [r7, #20]
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801330a:	8c3b      	ldrh	r3, [r7, #32]
 801330c:	4618      	mov	r0, r3
 801330e:	f7f8 fb09 	bl	800b924 <lwip_htons>
 8013312:	4603      	mov	r3, r0
 8013314:	461a      	mov	r2, r3
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801331a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801331c:	4618      	mov	r0, r3
 801331e:	f7f8 fb01 	bl	800b924 <lwip_htons>
 8013322:	4603      	mov	r3, r0
 8013324:	461a      	mov	r2, r3
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	687a      	ldr	r2, [r7, #4]
 801332e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013330:	68f8      	ldr	r0, [r7, #12]
 8013332:	f7f8 fb0c 	bl	800b94e <lwip_htonl>
 8013336:	4602      	mov	r2, r0
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801333c:	897b      	ldrh	r3, [r7, #10]
 801333e:	089b      	lsrs	r3, r3, #2
 8013340:	b29b      	uxth	r3, r3
 8013342:	3305      	adds	r3, #5
 8013344:	b29b      	uxth	r3, r3
 8013346:	031b      	lsls	r3, r3, #12
 8013348:	b29a      	uxth	r2, r3
 801334a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801334e:	b29b      	uxth	r3, r3
 8013350:	4313      	orrs	r3, r2
 8013352:	b29b      	uxth	r3, r3
 8013354:	4618      	mov	r0, r3
 8013356:	f7f8 fae5 	bl	800b924 <lwip_htons>
 801335a:	4603      	mov	r3, r0
 801335c:	461a      	mov	r2, r3
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013362:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013364:	4618      	mov	r0, r3
 8013366:	f7f8 fadd 	bl	800b924 <lwip_htons>
 801336a:	4603      	mov	r3, r0
 801336c:	461a      	mov	r2, r3
 801336e:	693b      	ldr	r3, [r7, #16]
 8013370:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	2200      	movs	r2, #0
 8013376:	741a      	strb	r2, [r3, #16]
 8013378:	2200      	movs	r2, #0
 801337a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	2200      	movs	r2, #0
 8013380:	749a      	strb	r2, [r3, #18]
 8013382:	2200      	movs	r2, #0
 8013384:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013386:	697b      	ldr	r3, [r7, #20]
}
 8013388:	4618      	mov	r0, r3
 801338a:	3718      	adds	r7, #24
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}
 8013390:	08019ec0 	.word	0x08019ec0
 8013394:	0801a598 	.word	0x0801a598
 8013398:	08019f14 	.word	0x08019f14

0801339c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801339c:	b5b0      	push	{r4, r5, r7, lr}
 801339e:	b08a      	sub	sp, #40	; 0x28
 80133a0:	af04      	add	r7, sp, #16
 80133a2:	60f8      	str	r0, [r7, #12]
 80133a4:	607b      	str	r3, [r7, #4]
 80133a6:	460b      	mov	r3, r1
 80133a8:	817b      	strh	r3, [r7, #10]
 80133aa:	4613      	mov	r3, r2
 80133ac:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d106      	bne.n	80133c2 <tcp_output_alloc_header+0x26>
 80133b4:	4b15      	ldr	r3, [pc, #84]	; (801340c <tcp_output_alloc_header+0x70>)
 80133b6:	f240 7242 	movw	r2, #1858	; 0x742
 80133ba:	4915      	ldr	r1, [pc, #84]	; (8013410 <tcp_output_alloc_header+0x74>)
 80133bc:	4815      	ldr	r0, [pc, #84]	; (8013414 <tcp_output_alloc_header+0x78>)
 80133be:	f003 fd29 	bl	8016e14 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	8adb      	ldrh	r3, [r3, #22]
 80133ca:	68fa      	ldr	r2, [r7, #12]
 80133cc:	8b12      	ldrh	r2, [r2, #24]
 80133ce:	68f9      	ldr	r1, [r7, #12]
 80133d0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80133d2:	893d      	ldrh	r5, [r7, #8]
 80133d4:	897c      	ldrh	r4, [r7, #10]
 80133d6:	9103      	str	r1, [sp, #12]
 80133d8:	2110      	movs	r1, #16
 80133da:	9102      	str	r1, [sp, #8]
 80133dc:	9201      	str	r2, [sp, #4]
 80133de:	9300      	str	r3, [sp, #0]
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	462a      	mov	r2, r5
 80133e4:	4621      	mov	r1, r4
 80133e6:	f7ff ff67 	bl	80132b8 <tcp_output_alloc_header_common>
 80133ea:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80133ec:	697b      	ldr	r3, [r7, #20]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d006      	beq.n	8013400 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133f6:	68fa      	ldr	r2, [r7, #12]
 80133f8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80133fa:	441a      	add	r2, r3
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013400:	697b      	ldr	r3, [r7, #20]
}
 8013402:	4618      	mov	r0, r3
 8013404:	3718      	adds	r7, #24
 8013406:	46bd      	mov	sp, r7
 8013408:	bdb0      	pop	{r4, r5, r7, pc}
 801340a:	bf00      	nop
 801340c:	08019ec0 	.word	0x08019ec0
 8013410:	0801a5c8 	.word	0x0801a5c8
 8013414:	08019f14 	.word	0x08019f14

08013418 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b088      	sub	sp, #32
 801341c:	af00      	add	r7, sp, #0
 801341e:	60f8      	str	r0, [r7, #12]
 8013420:	60b9      	str	r1, [r7, #8]
 8013422:	4611      	mov	r1, r2
 8013424:	461a      	mov	r2, r3
 8013426:	460b      	mov	r3, r1
 8013428:	71fb      	strb	r3, [r7, #7]
 801342a:	4613      	mov	r3, r2
 801342c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801342e:	2300      	movs	r3, #0
 8013430:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d106      	bne.n	8013446 <tcp_output_fill_options+0x2e>
 8013438:	4b13      	ldr	r3, [pc, #76]	; (8013488 <tcp_output_fill_options+0x70>)
 801343a:	f240 7256 	movw	r2, #1878	; 0x756
 801343e:	4913      	ldr	r1, [pc, #76]	; (801348c <tcp_output_fill_options+0x74>)
 8013440:	4813      	ldr	r0, [pc, #76]	; (8013490 <tcp_output_fill_options+0x78>)
 8013442:	f003 fce7 	bl	8016e14 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	685b      	ldr	r3, [r3, #4]
 801344a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801344c:	69bb      	ldr	r3, [r7, #24]
 801344e:	3314      	adds	r3, #20
 8013450:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013452:	69bb      	ldr	r3, [r7, #24]
 8013454:	f103 0214 	add.w	r2, r3, #20
 8013458:	8bfb      	ldrh	r3, [r7, #30]
 801345a:	009b      	lsls	r3, r3, #2
 801345c:	4619      	mov	r1, r3
 801345e:	79fb      	ldrb	r3, [r7, #7]
 8013460:	009b      	lsls	r3, r3, #2
 8013462:	f003 0304 	and.w	r3, r3, #4
 8013466:	440b      	add	r3, r1
 8013468:	4413      	add	r3, r2
 801346a:	697a      	ldr	r2, [r7, #20]
 801346c:	429a      	cmp	r2, r3
 801346e:	d006      	beq.n	801347e <tcp_output_fill_options+0x66>
 8013470:	4b05      	ldr	r3, [pc, #20]	; (8013488 <tcp_output_fill_options+0x70>)
 8013472:	f240 7275 	movw	r2, #1909	; 0x775
 8013476:	4907      	ldr	r1, [pc, #28]	; (8013494 <tcp_output_fill_options+0x7c>)
 8013478:	4805      	ldr	r0, [pc, #20]	; (8013490 <tcp_output_fill_options+0x78>)
 801347a:	f003 fccb 	bl	8016e14 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801347e:	bf00      	nop
 8013480:	3720      	adds	r7, #32
 8013482:	46bd      	mov	sp, r7
 8013484:	bd80      	pop	{r7, pc}
 8013486:	bf00      	nop
 8013488:	08019ec0 	.word	0x08019ec0
 801348c:	0801a5f0 	.word	0x0801a5f0
 8013490:	08019f14 	.word	0x08019f14
 8013494:	0801a4e8 	.word	0x0801a4e8

08013498 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b08a      	sub	sp, #40	; 0x28
 801349c:	af04      	add	r7, sp, #16
 801349e:	60f8      	str	r0, [r7, #12]
 80134a0:	60b9      	str	r1, [r7, #8]
 80134a2:	607a      	str	r2, [r7, #4]
 80134a4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d106      	bne.n	80134ba <tcp_output_control_segment+0x22>
 80134ac:	4b1c      	ldr	r3, [pc, #112]	; (8013520 <tcp_output_control_segment+0x88>)
 80134ae:	f240 7287 	movw	r2, #1927	; 0x787
 80134b2:	491c      	ldr	r1, [pc, #112]	; (8013524 <tcp_output_control_segment+0x8c>)
 80134b4:	481c      	ldr	r0, [pc, #112]	; (8013528 <tcp_output_control_segment+0x90>)
 80134b6:	f003 fcad 	bl	8016e14 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80134ba:	683a      	ldr	r2, [r7, #0]
 80134bc:	6879      	ldr	r1, [r7, #4]
 80134be:	68f8      	ldr	r0, [r7, #12]
 80134c0:	f7fe fae8 	bl	8011a94 <tcp_route>
 80134c4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d102      	bne.n	80134d2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80134cc:	23fc      	movs	r3, #252	; 0xfc
 80134ce:	75fb      	strb	r3, [r7, #23]
 80134d0:	e01c      	b.n	801350c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d006      	beq.n	80134e6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	7adb      	ldrb	r3, [r3, #11]
 80134dc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	7a9b      	ldrb	r3, [r3, #10]
 80134e2:	757b      	strb	r3, [r7, #21]
 80134e4:	e003      	b.n	80134ee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80134e6:	23ff      	movs	r3, #255	; 0xff
 80134e8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80134ea:	2300      	movs	r3, #0
 80134ec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80134ee:	7dba      	ldrb	r2, [r7, #22]
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	9302      	str	r3, [sp, #8]
 80134f4:	2306      	movs	r3, #6
 80134f6:	9301      	str	r3, [sp, #4]
 80134f8:	7d7b      	ldrb	r3, [r7, #21]
 80134fa:	9300      	str	r3, [sp, #0]
 80134fc:	4613      	mov	r3, r2
 80134fe:	683a      	ldr	r2, [r7, #0]
 8013500:	6879      	ldr	r1, [r7, #4]
 8013502:	68b8      	ldr	r0, [r7, #8]
 8013504:	f002 f90c 	bl	8015720 <ip4_output_if>
 8013508:	4603      	mov	r3, r0
 801350a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801350c:	68b8      	ldr	r0, [r7, #8]
 801350e:	f7f9 feb3 	bl	800d278 <pbuf_free>
  return err;
 8013512:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013516:	4618      	mov	r0, r3
 8013518:	3718      	adds	r7, #24
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}
 801351e:	bf00      	nop
 8013520:	08019ec0 	.word	0x08019ec0
 8013524:	0801a618 	.word	0x0801a618
 8013528:	08019f14 	.word	0x08019f14

0801352c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801352c:	b590      	push	{r4, r7, lr}
 801352e:	b08b      	sub	sp, #44	; 0x2c
 8013530:	af04      	add	r7, sp, #16
 8013532:	60f8      	str	r0, [r7, #12]
 8013534:	60b9      	str	r1, [r7, #8]
 8013536:	607a      	str	r2, [r7, #4]
 8013538:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d106      	bne.n	801354e <tcp_rst+0x22>
 8013540:	4b1f      	ldr	r3, [pc, #124]	; (80135c0 <tcp_rst+0x94>)
 8013542:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013546:	491f      	ldr	r1, [pc, #124]	; (80135c4 <tcp_rst+0x98>)
 8013548:	481f      	ldr	r0, [pc, #124]	; (80135c8 <tcp_rst+0x9c>)
 801354a:	f003 fc63 	bl	8016e14 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013550:	2b00      	cmp	r3, #0
 8013552:	d106      	bne.n	8013562 <tcp_rst+0x36>
 8013554:	4b1a      	ldr	r3, [pc, #104]	; (80135c0 <tcp_rst+0x94>)
 8013556:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801355a:	491c      	ldr	r1, [pc, #112]	; (80135cc <tcp_rst+0xa0>)
 801355c:	481a      	ldr	r0, [pc, #104]	; (80135c8 <tcp_rst+0x9c>)
 801355e:	f003 fc59 	bl	8016e14 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013562:	2300      	movs	r3, #0
 8013564:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013566:	f246 0308 	movw	r3, #24584	; 0x6008
 801356a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801356c:	7dfb      	ldrb	r3, [r7, #23]
 801356e:	b29c      	uxth	r4, r3
 8013570:	68b8      	ldr	r0, [r7, #8]
 8013572:	f7f8 f9ec 	bl	800b94e <lwip_htonl>
 8013576:	4602      	mov	r2, r0
 8013578:	8abb      	ldrh	r3, [r7, #20]
 801357a:	9303      	str	r3, [sp, #12]
 801357c:	2314      	movs	r3, #20
 801357e:	9302      	str	r3, [sp, #8]
 8013580:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013582:	9301      	str	r3, [sp, #4]
 8013584:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013586:	9300      	str	r3, [sp, #0]
 8013588:	4613      	mov	r3, r2
 801358a:	2200      	movs	r2, #0
 801358c:	4621      	mov	r1, r4
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f7ff fe92 	bl	80132b8 <tcp_output_alloc_header_common>
 8013594:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d00c      	beq.n	80135b6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801359c:	7dfb      	ldrb	r3, [r7, #23]
 801359e:	2200      	movs	r2, #0
 80135a0:	6939      	ldr	r1, [r7, #16]
 80135a2:	68f8      	ldr	r0, [r7, #12]
 80135a4:	f7ff ff38 	bl	8013418 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80135a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135aa:	683a      	ldr	r2, [r7, #0]
 80135ac:	6939      	ldr	r1, [r7, #16]
 80135ae:	68f8      	ldr	r0, [r7, #12]
 80135b0:	f7ff ff72 	bl	8013498 <tcp_output_control_segment>
 80135b4:	e000      	b.n	80135b8 <tcp_rst+0x8c>
    return;
 80135b6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80135b8:	371c      	adds	r7, #28
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd90      	pop	{r4, r7, pc}
 80135be:	bf00      	nop
 80135c0:	08019ec0 	.word	0x08019ec0
 80135c4:	0801a644 	.word	0x0801a644
 80135c8:	08019f14 	.word	0x08019f14
 80135cc:	0801a660 	.word	0x0801a660

080135d0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80135d0:	b590      	push	{r4, r7, lr}
 80135d2:	b087      	sub	sp, #28
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80135d8:	2300      	movs	r3, #0
 80135da:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80135dc:	2300      	movs	r3, #0
 80135de:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d106      	bne.n	80135f4 <tcp_send_empty_ack+0x24>
 80135e6:	4b28      	ldr	r3, [pc, #160]	; (8013688 <tcp_send_empty_ack+0xb8>)
 80135e8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80135ec:	4927      	ldr	r1, [pc, #156]	; (801368c <tcp_send_empty_ack+0xbc>)
 80135ee:	4828      	ldr	r0, [pc, #160]	; (8013690 <tcp_send_empty_ack+0xc0>)
 80135f0:	f003 fc10 	bl	8016e14 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80135f4:	7dfb      	ldrb	r3, [r7, #23]
 80135f6:	009b      	lsls	r3, r3, #2
 80135f8:	b2db      	uxtb	r3, r3
 80135fa:	f003 0304 	and.w	r3, r3, #4
 80135fe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013600:	7d7b      	ldrb	r3, [r7, #21]
 8013602:	b29c      	uxth	r4, r3
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013608:	4618      	mov	r0, r3
 801360a:	f7f8 f9a0 	bl	800b94e <lwip_htonl>
 801360e:	4603      	mov	r3, r0
 8013610:	2200      	movs	r2, #0
 8013612:	4621      	mov	r1, r4
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f7ff fec1 	bl	801339c <tcp_output_alloc_header>
 801361a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801361c:	693b      	ldr	r3, [r7, #16]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d109      	bne.n	8013636 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	8b5b      	ldrh	r3, [r3, #26]
 8013626:	f043 0303 	orr.w	r3, r3, #3
 801362a:	b29a      	uxth	r2, r3
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013630:	f06f 0301 	mvn.w	r3, #1
 8013634:	e023      	b.n	801367e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013636:	7dbb      	ldrb	r3, [r7, #22]
 8013638:	7dfa      	ldrb	r2, [r7, #23]
 801363a:	6939      	ldr	r1, [r7, #16]
 801363c:	6878      	ldr	r0, [r7, #4]
 801363e:	f7ff feeb 	bl	8013418 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013642:	687a      	ldr	r2, [r7, #4]
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	3304      	adds	r3, #4
 8013648:	6939      	ldr	r1, [r7, #16]
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	f7ff ff24 	bl	8013498 <tcp_output_control_segment>
 8013650:	4603      	mov	r3, r0
 8013652:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d007      	beq.n	801366c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	8b5b      	ldrh	r3, [r3, #26]
 8013660:	f043 0303 	orr.w	r3, r3, #3
 8013664:	b29a      	uxth	r2, r3
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	835a      	strh	r2, [r3, #26]
 801366a:	e006      	b.n	801367a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	8b5b      	ldrh	r3, [r3, #26]
 8013670:	f023 0303 	bic.w	r3, r3, #3
 8013674:	b29a      	uxth	r2, r3
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801367a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801367e:	4618      	mov	r0, r3
 8013680:	371c      	adds	r7, #28
 8013682:	46bd      	mov	sp, r7
 8013684:	bd90      	pop	{r4, r7, pc}
 8013686:	bf00      	nop
 8013688:	08019ec0 	.word	0x08019ec0
 801368c:	0801a67c 	.word	0x0801a67c
 8013690:	08019f14 	.word	0x08019f14

08013694 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013694:	b590      	push	{r4, r7, lr}
 8013696:	b087      	sub	sp, #28
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801369c:	2300      	movs	r3, #0
 801369e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d106      	bne.n	80136b4 <tcp_keepalive+0x20>
 80136a6:	4b18      	ldr	r3, [pc, #96]	; (8013708 <tcp_keepalive+0x74>)
 80136a8:	f640 0224 	movw	r2, #2084	; 0x824
 80136ac:	4917      	ldr	r1, [pc, #92]	; (801370c <tcp_keepalive+0x78>)
 80136ae:	4818      	ldr	r0, [pc, #96]	; (8013710 <tcp_keepalive+0x7c>)
 80136b0:	f003 fbb0 	bl	8016e14 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80136b4:	7dfb      	ldrb	r3, [r7, #23]
 80136b6:	b29c      	uxth	r4, r3
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136bc:	3b01      	subs	r3, #1
 80136be:	4618      	mov	r0, r3
 80136c0:	f7f8 f945 	bl	800b94e <lwip_htonl>
 80136c4:	4603      	mov	r3, r0
 80136c6:	2200      	movs	r2, #0
 80136c8:	4621      	mov	r1, r4
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f7ff fe66 	bl	801339c <tcp_output_alloc_header>
 80136d0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d102      	bne.n	80136de <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80136d8:	f04f 33ff 	mov.w	r3, #4294967295
 80136dc:	e010      	b.n	8013700 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80136de:	7dfb      	ldrb	r3, [r7, #23]
 80136e0:	2200      	movs	r2, #0
 80136e2:	6939      	ldr	r1, [r7, #16]
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f7ff fe97 	bl	8013418 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80136ea:	687a      	ldr	r2, [r7, #4]
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	3304      	adds	r3, #4
 80136f0:	6939      	ldr	r1, [r7, #16]
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f7ff fed0 	bl	8013498 <tcp_output_control_segment>
 80136f8:	4603      	mov	r3, r0
 80136fa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80136fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013700:	4618      	mov	r0, r3
 8013702:	371c      	adds	r7, #28
 8013704:	46bd      	mov	sp, r7
 8013706:	bd90      	pop	{r4, r7, pc}
 8013708:	08019ec0 	.word	0x08019ec0
 801370c:	0801a69c 	.word	0x0801a69c
 8013710:	08019f14 	.word	0x08019f14

08013714 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013714:	b590      	push	{r4, r7, lr}
 8013716:	b08b      	sub	sp, #44	; 0x2c
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801371c:	2300      	movs	r3, #0
 801371e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d106      	bne.n	8013736 <tcp_zero_window_probe+0x22>
 8013728:	4b4c      	ldr	r3, [pc, #304]	; (801385c <tcp_zero_window_probe+0x148>)
 801372a:	f640 024f 	movw	r2, #2127	; 0x84f
 801372e:	494c      	ldr	r1, [pc, #304]	; (8013860 <tcp_zero_window_probe+0x14c>)
 8013730:	484c      	ldr	r0, [pc, #304]	; (8013864 <tcp_zero_window_probe+0x150>)
 8013732:	f003 fb6f 	bl	8016e14 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801373a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801373c:	6a3b      	ldr	r3, [r7, #32]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d101      	bne.n	8013746 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013742:	2300      	movs	r3, #0
 8013744:	e086      	b.n	8013854 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801374c:	2bff      	cmp	r3, #255	; 0xff
 801374e:	d007      	beq.n	8013760 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013756:	3301      	adds	r3, #1
 8013758:	b2da      	uxtb	r2, r3
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013760:	6a3b      	ldr	r3, [r7, #32]
 8013762:	68db      	ldr	r3, [r3, #12]
 8013764:	899b      	ldrh	r3, [r3, #12]
 8013766:	b29b      	uxth	r3, r3
 8013768:	4618      	mov	r0, r3
 801376a:	f7f8 f8db 	bl	800b924 <lwip_htons>
 801376e:	4603      	mov	r3, r0
 8013770:	b2db      	uxtb	r3, r3
 8013772:	f003 0301 	and.w	r3, r3, #1
 8013776:	2b00      	cmp	r3, #0
 8013778:	d005      	beq.n	8013786 <tcp_zero_window_probe+0x72>
 801377a:	6a3b      	ldr	r3, [r7, #32]
 801377c:	891b      	ldrh	r3, [r3, #8]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d101      	bne.n	8013786 <tcp_zero_window_probe+0x72>
 8013782:	2301      	movs	r3, #1
 8013784:	e000      	b.n	8013788 <tcp_zero_window_probe+0x74>
 8013786:	2300      	movs	r3, #0
 8013788:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801378a:	7ffb      	ldrb	r3, [r7, #31]
 801378c:	2b00      	cmp	r3, #0
 801378e:	bf0c      	ite	eq
 8013790:	2301      	moveq	r3, #1
 8013792:	2300      	movne	r3, #0
 8013794:	b2db      	uxtb	r3, r3
 8013796:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801379c:	b299      	uxth	r1, r3
 801379e:	6a3b      	ldr	r3, [r7, #32]
 80137a0:	68db      	ldr	r3, [r3, #12]
 80137a2:	685b      	ldr	r3, [r3, #4]
 80137a4:	8bba      	ldrh	r2, [r7, #28]
 80137a6:	6878      	ldr	r0, [r7, #4]
 80137a8:	f7ff fdf8 	bl	801339c <tcp_output_alloc_header>
 80137ac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80137ae:	69bb      	ldr	r3, [r7, #24]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d102      	bne.n	80137ba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80137b4:	f04f 33ff 	mov.w	r3, #4294967295
 80137b8:	e04c      	b.n	8013854 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80137ba:	69bb      	ldr	r3, [r7, #24]
 80137bc:	685b      	ldr	r3, [r3, #4]
 80137be:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80137c0:	7ffb      	ldrb	r3, [r7, #31]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d011      	beq.n	80137ea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	899b      	ldrh	r3, [r3, #12]
 80137ca:	b29b      	uxth	r3, r3
 80137cc:	b21b      	sxth	r3, r3
 80137ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80137d2:	b21c      	sxth	r4, r3
 80137d4:	2011      	movs	r0, #17
 80137d6:	f7f8 f8a5 	bl	800b924 <lwip_htons>
 80137da:	4603      	mov	r3, r0
 80137dc:	b21b      	sxth	r3, r3
 80137de:	4323      	orrs	r3, r4
 80137e0:	b21b      	sxth	r3, r3
 80137e2:	b29a      	uxth	r2, r3
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	819a      	strh	r2, [r3, #12]
 80137e8:	e010      	b.n	801380c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80137ea:	69bb      	ldr	r3, [r7, #24]
 80137ec:	685b      	ldr	r3, [r3, #4]
 80137ee:	3314      	adds	r3, #20
 80137f0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80137f2:	6a3b      	ldr	r3, [r7, #32]
 80137f4:	6858      	ldr	r0, [r3, #4]
 80137f6:	6a3b      	ldr	r3, [r7, #32]
 80137f8:	685b      	ldr	r3, [r3, #4]
 80137fa:	891a      	ldrh	r2, [r3, #8]
 80137fc:	6a3b      	ldr	r3, [r7, #32]
 80137fe:	891b      	ldrh	r3, [r3, #8]
 8013800:	1ad3      	subs	r3, r2, r3
 8013802:	b29b      	uxth	r3, r3
 8013804:	2201      	movs	r2, #1
 8013806:	6939      	ldr	r1, [r7, #16]
 8013808:	f7f9 ff2c 	bl	800d664 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801380c:	6a3b      	ldr	r3, [r7, #32]
 801380e:	68db      	ldr	r3, [r3, #12]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	4618      	mov	r0, r3
 8013814:	f7f8 f89b 	bl	800b94e <lwip_htonl>
 8013818:	4603      	mov	r3, r0
 801381a:	3301      	adds	r3, #1
 801381c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	1ad3      	subs	r3, r2, r3
 8013826:	2b00      	cmp	r3, #0
 8013828:	da02      	bge.n	8013830 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	68fa      	ldr	r2, [r7, #12]
 801382e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013834:	2200      	movs	r2, #0
 8013836:	69b9      	ldr	r1, [r7, #24]
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f7ff fded 	bl	8013418 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801383e:	687a      	ldr	r2, [r7, #4]
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	3304      	adds	r3, #4
 8013844:	69b9      	ldr	r1, [r7, #24]
 8013846:	6878      	ldr	r0, [r7, #4]
 8013848:	f7ff fe26 	bl	8013498 <tcp_output_control_segment>
 801384c:	4603      	mov	r3, r0
 801384e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013850:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013854:	4618      	mov	r0, r3
 8013856:	372c      	adds	r7, #44	; 0x2c
 8013858:	46bd      	mov	sp, r7
 801385a:	bd90      	pop	{r4, r7, pc}
 801385c:	08019ec0 	.word	0x08019ec0
 8013860:	0801a6b8 	.word	0x0801a6b8
 8013864:	08019f14 	.word	0x08019f14

08013868 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013870:	f7f9 ffe6 	bl	800d840 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013874:	4b0a      	ldr	r3, [pc, #40]	; (80138a0 <tcpip_tcp_timer+0x38>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d103      	bne.n	8013884 <tcpip_tcp_timer+0x1c>
 801387c:	4b09      	ldr	r3, [pc, #36]	; (80138a4 <tcpip_tcp_timer+0x3c>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d005      	beq.n	8013890 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013884:	2200      	movs	r2, #0
 8013886:	4908      	ldr	r1, [pc, #32]	; (80138a8 <tcpip_tcp_timer+0x40>)
 8013888:	20fa      	movs	r0, #250	; 0xfa
 801388a:	f000 f8f3 	bl	8013a74 <sys_timeout>
 801388e:	e003      	b.n	8013898 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013890:	4b06      	ldr	r3, [pc, #24]	; (80138ac <tcpip_tcp_timer+0x44>)
 8013892:	2200      	movs	r2, #0
 8013894:	601a      	str	r2, [r3, #0]
  }
}
 8013896:	bf00      	nop
 8013898:	bf00      	nop
 801389a:	3708      	adds	r7, #8
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}
 80138a0:	24007f98 	.word	0x24007f98
 80138a4:	24007fa8 	.word	0x24007fa8
 80138a8:	08013869 	.word	0x08013869
 80138ac:	24004b20 	.word	0x24004b20

080138b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80138b4:	4b0a      	ldr	r3, [pc, #40]	; (80138e0 <tcp_timer_needed+0x30>)
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d10f      	bne.n	80138dc <tcp_timer_needed+0x2c>
 80138bc:	4b09      	ldr	r3, [pc, #36]	; (80138e4 <tcp_timer_needed+0x34>)
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d103      	bne.n	80138cc <tcp_timer_needed+0x1c>
 80138c4:	4b08      	ldr	r3, [pc, #32]	; (80138e8 <tcp_timer_needed+0x38>)
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d007      	beq.n	80138dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80138cc:	4b04      	ldr	r3, [pc, #16]	; (80138e0 <tcp_timer_needed+0x30>)
 80138ce:	2201      	movs	r2, #1
 80138d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80138d2:	2200      	movs	r2, #0
 80138d4:	4905      	ldr	r1, [pc, #20]	; (80138ec <tcp_timer_needed+0x3c>)
 80138d6:	20fa      	movs	r0, #250	; 0xfa
 80138d8:	f000 f8cc 	bl	8013a74 <sys_timeout>
  }
}
 80138dc:	bf00      	nop
 80138de:	bd80      	pop	{r7, pc}
 80138e0:	24004b20 	.word	0x24004b20
 80138e4:	24007f98 	.word	0x24007f98
 80138e8:	24007fa8 	.word	0x24007fa8
 80138ec:	08013869 	.word	0x08013869

080138f0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b086      	sub	sp, #24
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	60f8      	str	r0, [r7, #12]
 80138f8:	60b9      	str	r1, [r7, #8]
 80138fa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80138fc:	200a      	movs	r0, #10
 80138fe:	f7f8 fda1 	bl	800c444 <memp_malloc>
 8013902:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d109      	bne.n	801391e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d151      	bne.n	80139b4 <sys_timeout_abs+0xc4>
 8013910:	4b2a      	ldr	r3, [pc, #168]	; (80139bc <sys_timeout_abs+0xcc>)
 8013912:	22be      	movs	r2, #190	; 0xbe
 8013914:	492a      	ldr	r1, [pc, #168]	; (80139c0 <sys_timeout_abs+0xd0>)
 8013916:	482b      	ldr	r0, [pc, #172]	; (80139c4 <sys_timeout_abs+0xd4>)
 8013918:	f003 fa7c 	bl	8016e14 <iprintf>
    return;
 801391c:	e04a      	b.n	80139b4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801391e:	693b      	ldr	r3, [r7, #16]
 8013920:	2200      	movs	r2, #0
 8013922:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013924:	693b      	ldr	r3, [r7, #16]
 8013926:	68ba      	ldr	r2, [r7, #8]
 8013928:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801392a:	693b      	ldr	r3, [r7, #16]
 801392c:	687a      	ldr	r2, [r7, #4]
 801392e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013930:	693b      	ldr	r3, [r7, #16]
 8013932:	68fa      	ldr	r2, [r7, #12]
 8013934:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013936:	4b24      	ldr	r3, [pc, #144]	; (80139c8 <sys_timeout_abs+0xd8>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d103      	bne.n	8013946 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801393e:	4a22      	ldr	r2, [pc, #136]	; (80139c8 <sys_timeout_abs+0xd8>)
 8013940:	693b      	ldr	r3, [r7, #16]
 8013942:	6013      	str	r3, [r2, #0]
    return;
 8013944:	e037      	b.n	80139b6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013946:	693b      	ldr	r3, [r7, #16]
 8013948:	685a      	ldr	r2, [r3, #4]
 801394a:	4b1f      	ldr	r3, [pc, #124]	; (80139c8 <sys_timeout_abs+0xd8>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	685b      	ldr	r3, [r3, #4]
 8013950:	1ad3      	subs	r3, r2, r3
 8013952:	0fdb      	lsrs	r3, r3, #31
 8013954:	f003 0301 	and.w	r3, r3, #1
 8013958:	b2db      	uxtb	r3, r3
 801395a:	2b00      	cmp	r3, #0
 801395c:	d007      	beq.n	801396e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801395e:	4b1a      	ldr	r3, [pc, #104]	; (80139c8 <sys_timeout_abs+0xd8>)
 8013960:	681a      	ldr	r2, [r3, #0]
 8013962:	693b      	ldr	r3, [r7, #16]
 8013964:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013966:	4a18      	ldr	r2, [pc, #96]	; (80139c8 <sys_timeout_abs+0xd8>)
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	6013      	str	r3, [r2, #0]
 801396c:	e023      	b.n	80139b6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801396e:	4b16      	ldr	r3, [pc, #88]	; (80139c8 <sys_timeout_abs+0xd8>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	617b      	str	r3, [r7, #20]
 8013974:	e01a      	b.n	80139ac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d00b      	beq.n	8013996 <sys_timeout_abs+0xa6>
 801397e:	693b      	ldr	r3, [r7, #16]
 8013980:	685a      	ldr	r2, [r3, #4]
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	685b      	ldr	r3, [r3, #4]
 8013988:	1ad3      	subs	r3, r2, r3
 801398a:	0fdb      	lsrs	r3, r3, #31
 801398c:	f003 0301 	and.w	r3, r3, #1
 8013990:	b2db      	uxtb	r3, r3
 8013992:	2b00      	cmp	r3, #0
 8013994:	d007      	beq.n	80139a6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013996:	697b      	ldr	r3, [r7, #20]
 8013998:	681a      	ldr	r2, [r3, #0]
 801399a:	693b      	ldr	r3, [r7, #16]
 801399c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801399e:	697b      	ldr	r3, [r7, #20]
 80139a0:	693a      	ldr	r2, [r7, #16]
 80139a2:	601a      	str	r2, [r3, #0]
        break;
 80139a4:	e007      	b.n	80139b6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	617b      	str	r3, [r7, #20]
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d1e1      	bne.n	8013976 <sys_timeout_abs+0x86>
 80139b2:	e000      	b.n	80139b6 <sys_timeout_abs+0xc6>
    return;
 80139b4:	bf00      	nop
      }
    }
  }
}
 80139b6:	3718      	adds	r7, #24
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}
 80139bc:	0801a6dc 	.word	0x0801a6dc
 80139c0:	0801a710 	.word	0x0801a710
 80139c4:	0801a750 	.word	0x0801a750
 80139c8:	24004b18 	.word	0x24004b18

080139cc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b086      	sub	sp, #24
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80139d8:	697b      	ldr	r3, [r7, #20]
 80139da:	685b      	ldr	r3, [r3, #4]
 80139dc:	4798      	blx	r3

  now = sys_now();
 80139de:	f7f1 fced 	bl	80053bc <sys_now>
 80139e2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	681a      	ldr	r2, [r3, #0]
 80139e8:	4b0f      	ldr	r3, [pc, #60]	; (8013a28 <lwip_cyclic_timer+0x5c>)
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	4413      	add	r3, r2
 80139ee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80139f0:	68fa      	ldr	r2, [r7, #12]
 80139f2:	693b      	ldr	r3, [r7, #16]
 80139f4:	1ad3      	subs	r3, r2, r3
 80139f6:	0fdb      	lsrs	r3, r3, #31
 80139f8:	f003 0301 	and.w	r3, r3, #1
 80139fc:	b2db      	uxtb	r3, r3
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d009      	beq.n	8013a16 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013a02:	697b      	ldr	r3, [r7, #20]
 8013a04:	681a      	ldr	r2, [r3, #0]
 8013a06:	693b      	ldr	r3, [r7, #16]
 8013a08:	4413      	add	r3, r2
 8013a0a:	687a      	ldr	r2, [r7, #4]
 8013a0c:	4907      	ldr	r1, [pc, #28]	; (8013a2c <lwip_cyclic_timer+0x60>)
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7ff ff6e 	bl	80138f0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013a14:	e004      	b.n	8013a20 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013a16:	687a      	ldr	r2, [r7, #4]
 8013a18:	4904      	ldr	r1, [pc, #16]	; (8013a2c <lwip_cyclic_timer+0x60>)
 8013a1a:	68f8      	ldr	r0, [r7, #12]
 8013a1c:	f7ff ff68 	bl	80138f0 <sys_timeout_abs>
}
 8013a20:	bf00      	nop
 8013a22:	3718      	adds	r7, #24
 8013a24:	46bd      	mov	sp, r7
 8013a26:	bd80      	pop	{r7, pc}
 8013a28:	24004b1c 	.word	0x24004b1c
 8013a2c:	080139cd 	.word	0x080139cd

08013a30 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b082      	sub	sp, #8
 8013a34:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013a36:	2301      	movs	r3, #1
 8013a38:	607b      	str	r3, [r7, #4]
 8013a3a:	e00e      	b.n	8013a5a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013a3c:	4a0b      	ldr	r2, [pc, #44]	; (8013a6c <sys_timeouts_init+0x3c>)
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	00db      	lsls	r3, r3, #3
 8013a48:	4a08      	ldr	r2, [pc, #32]	; (8013a6c <sys_timeouts_init+0x3c>)
 8013a4a:	4413      	add	r3, r2
 8013a4c:	461a      	mov	r2, r3
 8013a4e:	4908      	ldr	r1, [pc, #32]	; (8013a70 <sys_timeouts_init+0x40>)
 8013a50:	f000 f810 	bl	8013a74 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	3301      	adds	r3, #1
 8013a58:	607b      	str	r3, [r7, #4]
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	2b02      	cmp	r3, #2
 8013a5e:	d9ed      	bls.n	8013a3c <sys_timeouts_init+0xc>
  }
}
 8013a60:	bf00      	nop
 8013a62:	bf00      	nop
 8013a64:	3708      	adds	r7, #8
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}
 8013a6a:	bf00      	nop
 8013a6c:	0801b328 	.word	0x0801b328
 8013a70:	080139cd 	.word	0x080139cd

08013a74 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b086      	sub	sp, #24
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	60f8      	str	r0, [r7, #12]
 8013a7c:	60b9      	str	r1, [r7, #8]
 8013a7e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013a86:	d306      	bcc.n	8013a96 <sys_timeout+0x22>
 8013a88:	4b0a      	ldr	r3, [pc, #40]	; (8013ab4 <sys_timeout+0x40>)
 8013a8a:	f240 1229 	movw	r2, #297	; 0x129
 8013a8e:	490a      	ldr	r1, [pc, #40]	; (8013ab8 <sys_timeout+0x44>)
 8013a90:	480a      	ldr	r0, [pc, #40]	; (8013abc <sys_timeout+0x48>)
 8013a92:	f003 f9bf 	bl	8016e14 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013a96:	f7f1 fc91 	bl	80053bc <sys_now>
 8013a9a:	4602      	mov	r2, r0
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	4413      	add	r3, r2
 8013aa0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013aa2:	687a      	ldr	r2, [r7, #4]
 8013aa4:	68b9      	ldr	r1, [r7, #8]
 8013aa6:	6978      	ldr	r0, [r7, #20]
 8013aa8:	f7ff ff22 	bl	80138f0 <sys_timeout_abs>
#endif
}
 8013aac:	bf00      	nop
 8013aae:	3718      	adds	r7, #24
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}
 8013ab4:	0801a6dc 	.word	0x0801a6dc
 8013ab8:	0801a778 	.word	0x0801a778
 8013abc:	0801a750 	.word	0x0801a750

08013ac0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b084      	sub	sp, #16
 8013ac4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013ac6:	f7f1 fc79 	bl	80053bc <sys_now>
 8013aca:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013acc:	4b17      	ldr	r3, [pc, #92]	; (8013b2c <sys_check_timeouts+0x6c>)
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013ad2:	68bb      	ldr	r3, [r7, #8]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d022      	beq.n	8013b1e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013ad8:	68bb      	ldr	r3, [r7, #8]
 8013ada:	685b      	ldr	r3, [r3, #4]
 8013adc:	68fa      	ldr	r2, [r7, #12]
 8013ade:	1ad3      	subs	r3, r2, r3
 8013ae0:	0fdb      	lsrs	r3, r3, #31
 8013ae2:	f003 0301 	and.w	r3, r3, #1
 8013ae6:	b2db      	uxtb	r3, r3
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d11a      	bne.n	8013b22 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	4a0e      	ldr	r2, [pc, #56]	; (8013b2c <sys_check_timeouts+0x6c>)
 8013af2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013af4:	68bb      	ldr	r3, [r7, #8]
 8013af6:	689b      	ldr	r3, [r3, #8]
 8013af8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	68db      	ldr	r3, [r3, #12]
 8013afe:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013b00:	68bb      	ldr	r3, [r7, #8]
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	4a0a      	ldr	r2, [pc, #40]	; (8013b30 <sys_check_timeouts+0x70>)
 8013b06:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013b08:	68b9      	ldr	r1, [r7, #8]
 8013b0a:	200a      	movs	r0, #10
 8013b0c:	f7f8 fd10 	bl	800c530 <memp_free>
    if (handler != NULL) {
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d0da      	beq.n	8013acc <sys_check_timeouts+0xc>
      handler(arg);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	6838      	ldr	r0, [r7, #0]
 8013b1a:	4798      	blx	r3
  do {
 8013b1c:	e7d6      	b.n	8013acc <sys_check_timeouts+0xc>
      return;
 8013b1e:	bf00      	nop
 8013b20:	e000      	b.n	8013b24 <sys_check_timeouts+0x64>
      return;
 8013b22:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013b24:	3710      	adds	r7, #16
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}
 8013b2a:	bf00      	nop
 8013b2c:	24004b18 	.word	0x24004b18
 8013b30:	24004b1c 	.word	0x24004b1c

08013b34 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b082      	sub	sp, #8
 8013b38:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013b3a:	4b16      	ldr	r3, [pc, #88]	; (8013b94 <sys_timeouts_sleeptime+0x60>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d102      	bne.n	8013b48 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013b42:	f04f 33ff 	mov.w	r3, #4294967295
 8013b46:	e020      	b.n	8013b8a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013b48:	f7f1 fc38 	bl	80053bc <sys_now>
 8013b4c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013b4e:	4b11      	ldr	r3, [pc, #68]	; (8013b94 <sys_timeouts_sleeptime+0x60>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	685a      	ldr	r2, [r3, #4]
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	1ad3      	subs	r3, r2, r3
 8013b58:	0fdb      	lsrs	r3, r3, #31
 8013b5a:	f003 0301 	and.w	r3, r3, #1
 8013b5e:	b2db      	uxtb	r3, r3
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d001      	beq.n	8013b68 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013b64:	2300      	movs	r3, #0
 8013b66:	e010      	b.n	8013b8a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013b68:	4b0a      	ldr	r3, [pc, #40]	; (8013b94 <sys_timeouts_sleeptime+0x60>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	685a      	ldr	r2, [r3, #4]
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	1ad3      	subs	r3, r2, r3
 8013b72:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013b74:	683b      	ldr	r3, [r7, #0]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	da06      	bge.n	8013b88 <sys_timeouts_sleeptime+0x54>
 8013b7a:	4b07      	ldr	r3, [pc, #28]	; (8013b98 <sys_timeouts_sleeptime+0x64>)
 8013b7c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013b80:	4906      	ldr	r1, [pc, #24]	; (8013b9c <sys_timeouts_sleeptime+0x68>)
 8013b82:	4807      	ldr	r0, [pc, #28]	; (8013ba0 <sys_timeouts_sleeptime+0x6c>)
 8013b84:	f003 f946 	bl	8016e14 <iprintf>
    return ret;
 8013b88:	683b      	ldr	r3, [r7, #0]
  }
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3708      	adds	r7, #8
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
 8013b92:	bf00      	nop
 8013b94:	24004b18 	.word	0x24004b18
 8013b98:	0801a6dc 	.word	0x0801a6dc
 8013b9c:	0801a7b0 	.word	0x0801a7b0
 8013ba0:	0801a750 	.word	0x0801a750

08013ba4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013ba8:	f003 f94c 	bl	8016e44 <rand>
 8013bac:	4603      	mov	r3, r0
 8013bae:	b29b      	uxth	r3, r3
 8013bb0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013bb4:	b29b      	uxth	r3, r3
 8013bb6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013bba:	b29a      	uxth	r2, r3
 8013bbc:	4b01      	ldr	r3, [pc, #4]	; (8013bc4 <udp_init+0x20>)
 8013bbe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013bc0:	bf00      	nop
 8013bc2:	bd80      	pop	{r7, pc}
 8013bc4:	24000030 	.word	0x24000030

08013bc8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013bc8:	b480      	push	{r7}
 8013bca:	b083      	sub	sp, #12
 8013bcc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013bce:	2300      	movs	r3, #0
 8013bd0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013bd2:	4b17      	ldr	r3, [pc, #92]	; (8013c30 <udp_new_port+0x68>)
 8013bd4:	881b      	ldrh	r3, [r3, #0]
 8013bd6:	1c5a      	adds	r2, r3, #1
 8013bd8:	b291      	uxth	r1, r2
 8013bda:	4a15      	ldr	r2, [pc, #84]	; (8013c30 <udp_new_port+0x68>)
 8013bdc:	8011      	strh	r1, [r2, #0]
 8013bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013be2:	4293      	cmp	r3, r2
 8013be4:	d103      	bne.n	8013bee <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013be6:	4b12      	ldr	r3, [pc, #72]	; (8013c30 <udp_new_port+0x68>)
 8013be8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013bec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013bee:	4b11      	ldr	r3, [pc, #68]	; (8013c34 <udp_new_port+0x6c>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	603b      	str	r3, [r7, #0]
 8013bf4:	e011      	b.n	8013c1a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013bf6:	683b      	ldr	r3, [r7, #0]
 8013bf8:	8a5a      	ldrh	r2, [r3, #18]
 8013bfa:	4b0d      	ldr	r3, [pc, #52]	; (8013c30 <udp_new_port+0x68>)
 8013bfc:	881b      	ldrh	r3, [r3, #0]
 8013bfe:	429a      	cmp	r2, r3
 8013c00:	d108      	bne.n	8013c14 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013c02:	88fb      	ldrh	r3, [r7, #6]
 8013c04:	3301      	adds	r3, #1
 8013c06:	80fb      	strh	r3, [r7, #6]
 8013c08:	88fb      	ldrh	r3, [r7, #6]
 8013c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013c0e:	d3e0      	bcc.n	8013bd2 <udp_new_port+0xa>
        return 0;
 8013c10:	2300      	movs	r3, #0
 8013c12:	e007      	b.n	8013c24 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	68db      	ldr	r3, [r3, #12]
 8013c18:	603b      	str	r3, [r7, #0]
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d1ea      	bne.n	8013bf6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013c20:	4b03      	ldr	r3, [pc, #12]	; (8013c30 <udp_new_port+0x68>)
 8013c22:	881b      	ldrh	r3, [r3, #0]
}
 8013c24:	4618      	mov	r0, r3
 8013c26:	370c      	adds	r7, #12
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2e:	4770      	bx	lr
 8013c30:	24000030 	.word	0x24000030
 8013c34:	24007fb0 	.word	0x24007fb0

08013c38 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b084      	sub	sp, #16
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	60f8      	str	r0, [r7, #12]
 8013c40:	60b9      	str	r1, [r7, #8]
 8013c42:	4613      	mov	r3, r2
 8013c44:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d105      	bne.n	8013c58 <udp_input_local_match+0x20>
 8013c4c:	4b27      	ldr	r3, [pc, #156]	; (8013cec <udp_input_local_match+0xb4>)
 8013c4e:	2287      	movs	r2, #135	; 0x87
 8013c50:	4927      	ldr	r1, [pc, #156]	; (8013cf0 <udp_input_local_match+0xb8>)
 8013c52:	4828      	ldr	r0, [pc, #160]	; (8013cf4 <udp_input_local_match+0xbc>)
 8013c54:	f003 f8de 	bl	8016e14 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d105      	bne.n	8013c6a <udp_input_local_match+0x32>
 8013c5e:	4b23      	ldr	r3, [pc, #140]	; (8013cec <udp_input_local_match+0xb4>)
 8013c60:	2288      	movs	r2, #136	; 0x88
 8013c62:	4925      	ldr	r1, [pc, #148]	; (8013cf8 <udp_input_local_match+0xc0>)
 8013c64:	4823      	ldr	r0, [pc, #140]	; (8013cf4 <udp_input_local_match+0xbc>)
 8013c66:	f003 f8d5 	bl	8016e14 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	7a1b      	ldrb	r3, [r3, #8]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d00b      	beq.n	8013c8a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	7a1a      	ldrb	r2, [r3, #8]
 8013c76:	4b21      	ldr	r3, [pc, #132]	; (8013cfc <udp_input_local_match+0xc4>)
 8013c78:	685b      	ldr	r3, [r3, #4]
 8013c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013c7e:	3301      	adds	r3, #1
 8013c80:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c82:	429a      	cmp	r2, r3
 8013c84:	d001      	beq.n	8013c8a <udp_input_local_match+0x52>
    return 0;
 8013c86:	2300      	movs	r3, #0
 8013c88:	e02b      	b.n	8013ce2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013c8a:	79fb      	ldrb	r3, [r7, #7]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d018      	beq.n	8013cc2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d013      	beq.n	8013cbe <udp_input_local_match+0x86>
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d00f      	beq.n	8013cbe <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013c9e:	4b17      	ldr	r3, [pc, #92]	; (8013cfc <udp_input_local_match+0xc4>)
 8013ca0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ca6:	d00a      	beq.n	8013cbe <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	681a      	ldr	r2, [r3, #0]
 8013cac:	4b13      	ldr	r3, [pc, #76]	; (8013cfc <udp_input_local_match+0xc4>)
 8013cae:	695b      	ldr	r3, [r3, #20]
 8013cb0:	405a      	eors	r2, r3
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	3308      	adds	r3, #8
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d110      	bne.n	8013ce0 <udp_input_local_match+0xa8>
          return 1;
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	e00f      	b.n	8013ce2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d009      	beq.n	8013cdc <udp_input_local_match+0xa4>
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d005      	beq.n	8013cdc <udp_input_local_match+0xa4>
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	681a      	ldr	r2, [r3, #0]
 8013cd4:	4b09      	ldr	r3, [pc, #36]	; (8013cfc <udp_input_local_match+0xc4>)
 8013cd6:	695b      	ldr	r3, [r3, #20]
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	d101      	bne.n	8013ce0 <udp_input_local_match+0xa8>
        return 1;
 8013cdc:	2301      	movs	r3, #1
 8013cde:	e000      	b.n	8013ce2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013ce0:	2300      	movs	r3, #0
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	3710      	adds	r7, #16
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}
 8013cea:	bf00      	nop
 8013cec:	0801a7c4 	.word	0x0801a7c4
 8013cf0:	0801a7f4 	.word	0x0801a7f4
 8013cf4:	0801a818 	.word	0x0801a818
 8013cf8:	0801a840 	.word	0x0801a840
 8013cfc:	24004ed8 	.word	0x24004ed8

08013d00 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013d00:	b590      	push	{r4, r7, lr}
 8013d02:	b08d      	sub	sp, #52	; 0x34
 8013d04:	af02      	add	r7, sp, #8
 8013d06:	6078      	str	r0, [r7, #4]
 8013d08:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d105      	bne.n	8013d20 <udp_input+0x20>
 8013d14:	4b7c      	ldr	r3, [pc, #496]	; (8013f08 <udp_input+0x208>)
 8013d16:	22cf      	movs	r2, #207	; 0xcf
 8013d18:	497c      	ldr	r1, [pc, #496]	; (8013f0c <udp_input+0x20c>)
 8013d1a:	487d      	ldr	r0, [pc, #500]	; (8013f10 <udp_input+0x210>)
 8013d1c:	f003 f87a 	bl	8016e14 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d105      	bne.n	8013d32 <udp_input+0x32>
 8013d26:	4b78      	ldr	r3, [pc, #480]	; (8013f08 <udp_input+0x208>)
 8013d28:	22d0      	movs	r2, #208	; 0xd0
 8013d2a:	497a      	ldr	r1, [pc, #488]	; (8013f14 <udp_input+0x214>)
 8013d2c:	4878      	ldr	r0, [pc, #480]	; (8013f10 <udp_input+0x210>)
 8013d2e:	f003 f871 	bl	8016e14 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	895b      	ldrh	r3, [r3, #10]
 8013d36:	2b07      	cmp	r3, #7
 8013d38:	d803      	bhi.n	8013d42 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013d3a:	6878      	ldr	r0, [r7, #4]
 8013d3c:	f7f9 fa9c 	bl	800d278 <pbuf_free>
    goto end;
 8013d40:	e0de      	b.n	8013f00 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	685b      	ldr	r3, [r3, #4]
 8013d46:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013d48:	4b73      	ldr	r3, [pc, #460]	; (8013f18 <udp_input+0x218>)
 8013d4a:	695b      	ldr	r3, [r3, #20]
 8013d4c:	4a72      	ldr	r2, [pc, #456]	; (8013f18 <udp_input+0x218>)
 8013d4e:	6812      	ldr	r2, [r2, #0]
 8013d50:	4611      	mov	r1, r2
 8013d52:	4618      	mov	r0, r3
 8013d54:	f001 fdbc 	bl	80158d0 <ip4_addr_isbroadcast_u32>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013d5c:	697b      	ldr	r3, [r7, #20]
 8013d5e:	881b      	ldrh	r3, [r3, #0]
 8013d60:	b29b      	uxth	r3, r3
 8013d62:	4618      	mov	r0, r3
 8013d64:	f7f7 fdde 	bl	800b924 <lwip_htons>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	885b      	ldrh	r3, [r3, #2]
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7f7 fdd6 	bl	800b924 <lwip_htons>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013d80:	2300      	movs	r3, #0
 8013d82:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013d84:	2300      	movs	r3, #0
 8013d86:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d88:	4b64      	ldr	r3, [pc, #400]	; (8013f1c <udp_input+0x21c>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8013d8e:	e054      	b.n	8013e3a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d92:	8a5b      	ldrh	r3, [r3, #18]
 8013d94:	89fa      	ldrh	r2, [r7, #14]
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d14a      	bne.n	8013e30 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013d9a:	7cfb      	ldrb	r3, [r7, #19]
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	6839      	ldr	r1, [r7, #0]
 8013da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013da2:	f7ff ff49 	bl	8013c38 <udp_input_local_match>
 8013da6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d041      	beq.n	8013e30 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dae:	7c1b      	ldrb	r3, [r3, #16]
 8013db0:	f003 0304 	and.w	r3, r3, #4
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d11d      	bne.n	8013df4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013db8:	69fb      	ldr	r3, [r7, #28]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d102      	bne.n	8013dc4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc0:	61fb      	str	r3, [r7, #28]
 8013dc2:	e017      	b.n	8013df4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013dc4:	7cfb      	ldrb	r3, [r7, #19]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d014      	beq.n	8013df4 <udp_input+0xf4>
 8013dca:	4b53      	ldr	r3, [pc, #332]	; (8013f18 <udp_input+0x218>)
 8013dcc:	695b      	ldr	r3, [r3, #20]
 8013dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dd2:	d10f      	bne.n	8013df4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013dd4:	69fb      	ldr	r3, [r7, #28]
 8013dd6:	681a      	ldr	r2, [r3, #0]
 8013dd8:	683b      	ldr	r3, [r7, #0]
 8013dda:	3304      	adds	r3, #4
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	429a      	cmp	r2, r3
 8013de0:	d008      	beq.n	8013df4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de4:	681a      	ldr	r2, [r3, #0]
 8013de6:	683b      	ldr	r3, [r7, #0]
 8013de8:	3304      	adds	r3, #4
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d101      	bne.n	8013df4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df6:	8a9b      	ldrh	r3, [r3, #20]
 8013df8:	8a3a      	ldrh	r2, [r7, #16]
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d118      	bne.n	8013e30 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e00:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d005      	beq.n	8013e12 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e08:	685a      	ldr	r2, [r3, #4]
 8013e0a:	4b43      	ldr	r3, [pc, #268]	; (8013f18 <udp_input+0x218>)
 8013e0c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	d10e      	bne.n	8013e30 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013e12:	6a3b      	ldr	r3, [r7, #32]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d014      	beq.n	8013e42 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e1a:	68da      	ldr	r2, [r3, #12]
 8013e1c:	6a3b      	ldr	r3, [r7, #32]
 8013e1e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013e20:	4b3e      	ldr	r3, [pc, #248]	; (8013f1c <udp_input+0x21c>)
 8013e22:	681a      	ldr	r2, [r3, #0]
 8013e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e26:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013e28:	4a3c      	ldr	r2, [pc, #240]	; (8013f1c <udp_input+0x21c>)
 8013e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013e2e:	e008      	b.n	8013e42 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e32:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e36:	68db      	ldr	r3, [r3, #12]
 8013e38:	627b      	str	r3, [r7, #36]	; 0x24
 8013e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d1a7      	bne.n	8013d90 <udp_input+0x90>
 8013e40:	e000      	b.n	8013e44 <udp_input+0x144>
        break;
 8013e42:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d101      	bne.n	8013e4e <udp_input+0x14e>
    pcb = uncon_pcb;
 8013e4a:	69fb      	ldr	r3, [r7, #28]
 8013e4c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d002      	beq.n	8013e5a <udp_input+0x15a>
    for_us = 1;
 8013e54:	2301      	movs	r3, #1
 8013e56:	76fb      	strb	r3, [r7, #27]
 8013e58:	e00a      	b.n	8013e70 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	3304      	adds	r3, #4
 8013e5e:	681a      	ldr	r2, [r3, #0]
 8013e60:	4b2d      	ldr	r3, [pc, #180]	; (8013f18 <udp_input+0x218>)
 8013e62:	695b      	ldr	r3, [r3, #20]
 8013e64:	429a      	cmp	r2, r3
 8013e66:	bf0c      	ite	eq
 8013e68:	2301      	moveq	r3, #1
 8013e6a:	2300      	movne	r3, #0
 8013e6c:	b2db      	uxtb	r3, r3
 8013e6e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013e70:	7efb      	ldrb	r3, [r7, #27]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d041      	beq.n	8013efa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013e76:	2108      	movs	r1, #8
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f7f9 f977 	bl	800d16c <pbuf_remove_header>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d00a      	beq.n	8013e9a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013e84:	4b20      	ldr	r3, [pc, #128]	; (8013f08 <udp_input+0x208>)
 8013e86:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013e8a:	4925      	ldr	r1, [pc, #148]	; (8013f20 <udp_input+0x220>)
 8013e8c:	4820      	ldr	r0, [pc, #128]	; (8013f10 <udp_input+0x210>)
 8013e8e:	f002 ffc1 	bl	8016e14 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f7f9 f9f0 	bl	800d278 <pbuf_free>
      goto end;
 8013e98:	e032      	b.n	8013f00 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d012      	beq.n	8013ec6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea2:	699b      	ldr	r3, [r3, #24]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d00a      	beq.n	8013ebe <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eaa:	699c      	ldr	r4, [r3, #24]
 8013eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eae:	69d8      	ldr	r0, [r3, #28]
 8013eb0:	8a3b      	ldrh	r3, [r7, #16]
 8013eb2:	9300      	str	r3, [sp, #0]
 8013eb4:	4b1b      	ldr	r3, [pc, #108]	; (8013f24 <udp_input+0x224>)
 8013eb6:	687a      	ldr	r2, [r7, #4]
 8013eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013eba:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013ebc:	e021      	b.n	8013f02 <udp_input+0x202>
        pbuf_free(p);
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f7f9 f9da 	bl	800d278 <pbuf_free>
        goto end;
 8013ec4:	e01c      	b.n	8013f00 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013ec6:	7cfb      	ldrb	r3, [r7, #19]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d112      	bne.n	8013ef2 <udp_input+0x1f2>
 8013ecc:	4b12      	ldr	r3, [pc, #72]	; (8013f18 <udp_input+0x218>)
 8013ece:	695b      	ldr	r3, [r3, #20]
 8013ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013ed4:	2be0      	cmp	r3, #224	; 0xe0
 8013ed6:	d00c      	beq.n	8013ef2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013ed8:	4b0f      	ldr	r3, [pc, #60]	; (8013f18 <udp_input+0x218>)
 8013eda:	899b      	ldrh	r3, [r3, #12]
 8013edc:	3308      	adds	r3, #8
 8013ede:	b29b      	uxth	r3, r3
 8013ee0:	b21b      	sxth	r3, r3
 8013ee2:	4619      	mov	r1, r3
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f7f9 f9b4 	bl	800d252 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013eea:	2103      	movs	r1, #3
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f001 f9c5 	bl	801527c <icmp_dest_unreach>
      pbuf_free(p);
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	f7f9 f9c0 	bl	800d278 <pbuf_free>
  return;
 8013ef8:	e003      	b.n	8013f02 <udp_input+0x202>
    pbuf_free(p);
 8013efa:	6878      	ldr	r0, [r7, #4]
 8013efc:	f7f9 f9bc 	bl	800d278 <pbuf_free>
  return;
 8013f00:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013f02:	372c      	adds	r7, #44	; 0x2c
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd90      	pop	{r4, r7, pc}
 8013f08:	0801a7c4 	.word	0x0801a7c4
 8013f0c:	0801a868 	.word	0x0801a868
 8013f10:	0801a818 	.word	0x0801a818
 8013f14:	0801a880 	.word	0x0801a880
 8013f18:	24004ed8 	.word	0x24004ed8
 8013f1c:	24007fb0 	.word	0x24007fb0
 8013f20:	0801a89c 	.word	0x0801a89c
 8013f24:	24004ee8 	.word	0x24004ee8

08013f28 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b086      	sub	sp, #24
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	60f8      	str	r0, [r7, #12]
 8013f30:	60b9      	str	r1, [r7, #8]
 8013f32:	4613      	mov	r3, r2
 8013f34:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d101      	bne.n	8013f40 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013f3c:	4b39      	ldr	r3, [pc, #228]	; (8014024 <udp_bind+0xfc>)
 8013f3e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d109      	bne.n	8013f5a <udp_bind+0x32>
 8013f46:	4b38      	ldr	r3, [pc, #224]	; (8014028 <udp_bind+0x100>)
 8013f48:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013f4c:	4937      	ldr	r1, [pc, #220]	; (801402c <udp_bind+0x104>)
 8013f4e:	4838      	ldr	r0, [pc, #224]	; (8014030 <udp_bind+0x108>)
 8013f50:	f002 ff60 	bl	8016e14 <iprintf>
 8013f54:	f06f 030f 	mvn.w	r3, #15
 8013f58:	e060      	b.n	801401c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f5e:	4b35      	ldr	r3, [pc, #212]	; (8014034 <udp_bind+0x10c>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	617b      	str	r3, [r7, #20]
 8013f64:	e009      	b.n	8013f7a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013f66:	68fa      	ldr	r2, [r7, #12]
 8013f68:	697b      	ldr	r3, [r7, #20]
 8013f6a:	429a      	cmp	r2, r3
 8013f6c:	d102      	bne.n	8013f74 <udp_bind+0x4c>
      rebind = 1;
 8013f6e:	2301      	movs	r3, #1
 8013f70:	74fb      	strb	r3, [r7, #19]
      break;
 8013f72:	e005      	b.n	8013f80 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f74:	697b      	ldr	r3, [r7, #20]
 8013f76:	68db      	ldr	r3, [r3, #12]
 8013f78:	617b      	str	r3, [r7, #20]
 8013f7a:	697b      	ldr	r3, [r7, #20]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d1f2      	bne.n	8013f66 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013f80:	88fb      	ldrh	r3, [r7, #6]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d109      	bne.n	8013f9a <udp_bind+0x72>
    port = udp_new_port();
 8013f86:	f7ff fe1f 	bl	8013bc8 <udp_new_port>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013f8e:	88fb      	ldrh	r3, [r7, #6]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d12c      	bne.n	8013fee <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013f94:	f06f 0307 	mvn.w	r3, #7
 8013f98:	e040      	b.n	801401c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f9a:	4b26      	ldr	r3, [pc, #152]	; (8014034 <udp_bind+0x10c>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	617b      	str	r3, [r7, #20]
 8013fa0:	e022      	b.n	8013fe8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013fa2:	68fa      	ldr	r2, [r7, #12]
 8013fa4:	697b      	ldr	r3, [r7, #20]
 8013fa6:	429a      	cmp	r2, r3
 8013fa8:	d01b      	beq.n	8013fe2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013faa:	697b      	ldr	r3, [r7, #20]
 8013fac:	8a5b      	ldrh	r3, [r3, #18]
 8013fae:	88fa      	ldrh	r2, [r7, #6]
 8013fb0:	429a      	cmp	r2, r3
 8013fb2:	d116      	bne.n	8013fe2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	681a      	ldr	r2, [r3, #0]
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013fbc:	429a      	cmp	r2, r3
 8013fbe:	d00d      	beq.n	8013fdc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d00a      	beq.n	8013fdc <udp_bind+0xb4>
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d006      	beq.n	8013fdc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013fce:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d003      	beq.n	8013fdc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d102      	bne.n	8013fe2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013fdc:	f06f 0307 	mvn.w	r3, #7
 8013fe0:	e01c      	b.n	801401c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013fe2:	697b      	ldr	r3, [r7, #20]
 8013fe4:	68db      	ldr	r3, [r3, #12]
 8013fe6:	617b      	str	r3, [r7, #20]
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d1d9      	bne.n	8013fa2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d002      	beq.n	8013ffa <udp_bind+0xd2>
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	e000      	b.n	8013ffc <udp_bind+0xd4>
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	68fa      	ldr	r2, [r7, #12]
 8013ffe:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	88fa      	ldrh	r2, [r7, #6]
 8014004:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014006:	7cfb      	ldrb	r3, [r7, #19]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d106      	bne.n	801401a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801400c:	4b09      	ldr	r3, [pc, #36]	; (8014034 <udp_bind+0x10c>)
 801400e:	681a      	ldr	r2, [r3, #0]
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014014:	4a07      	ldr	r2, [pc, #28]	; (8014034 <udp_bind+0x10c>)
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801401a:	2300      	movs	r3, #0
}
 801401c:	4618      	mov	r0, r3
 801401e:	3718      	adds	r7, #24
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}
 8014024:	0801b340 	.word	0x0801b340
 8014028:	0801a7c4 	.word	0x0801a7c4
 801402c:	0801aa8c 	.word	0x0801aa8c
 8014030:	0801a818 	.word	0x0801a818
 8014034:	24007fb0 	.word	0x24007fb0

08014038 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b084      	sub	sp, #16
 801403c:	af00      	add	r7, sp, #0
 801403e:	60f8      	str	r0, [r7, #12]
 8014040:	60b9      	str	r1, [r7, #8]
 8014042:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d107      	bne.n	801405a <udp_recv+0x22>
 801404a:	4b08      	ldr	r3, [pc, #32]	; (801406c <udp_recv+0x34>)
 801404c:	f240 428a 	movw	r2, #1162	; 0x48a
 8014050:	4907      	ldr	r1, [pc, #28]	; (8014070 <udp_recv+0x38>)
 8014052:	4808      	ldr	r0, [pc, #32]	; (8014074 <udp_recv+0x3c>)
 8014054:	f002 fede 	bl	8016e14 <iprintf>
 8014058:	e005      	b.n	8014066 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	68ba      	ldr	r2, [r7, #8]
 801405e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	687a      	ldr	r2, [r7, #4]
 8014064:	61da      	str	r2, [r3, #28]
}
 8014066:	3710      	adds	r7, #16
 8014068:	46bd      	mov	sp, r7
 801406a:	bd80      	pop	{r7, pc}
 801406c:	0801a7c4 	.word	0x0801a7c4
 8014070:	0801aaf8 	.word	0x0801aaf8
 8014074:	0801a818 	.word	0x0801a818

08014078 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b084      	sub	sp, #16
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d107      	bne.n	8014096 <udp_remove+0x1e>
 8014086:	4b19      	ldr	r3, [pc, #100]	; (80140ec <udp_remove+0x74>)
 8014088:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801408c:	4918      	ldr	r1, [pc, #96]	; (80140f0 <udp_remove+0x78>)
 801408e:	4819      	ldr	r0, [pc, #100]	; (80140f4 <udp_remove+0x7c>)
 8014090:	f002 fec0 	bl	8016e14 <iprintf>
 8014094:	e026      	b.n	80140e4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014096:	4b18      	ldr	r3, [pc, #96]	; (80140f8 <udp_remove+0x80>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	687a      	ldr	r2, [r7, #4]
 801409c:	429a      	cmp	r2, r3
 801409e:	d105      	bne.n	80140ac <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80140a0:	4b15      	ldr	r3, [pc, #84]	; (80140f8 <udp_remove+0x80>)
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	68db      	ldr	r3, [r3, #12]
 80140a6:	4a14      	ldr	r2, [pc, #80]	; (80140f8 <udp_remove+0x80>)
 80140a8:	6013      	str	r3, [r2, #0]
 80140aa:	e017      	b.n	80140dc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80140ac:	4b12      	ldr	r3, [pc, #72]	; (80140f8 <udp_remove+0x80>)
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	60fb      	str	r3, [r7, #12]
 80140b2:	e010      	b.n	80140d6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	68db      	ldr	r3, [r3, #12]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d009      	beq.n	80140d0 <udp_remove+0x58>
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	68db      	ldr	r3, [r3, #12]
 80140c0:	687a      	ldr	r2, [r7, #4]
 80140c2:	429a      	cmp	r2, r3
 80140c4:	d104      	bne.n	80140d0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	68da      	ldr	r2, [r3, #12]
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	60da      	str	r2, [r3, #12]
        break;
 80140ce:	e005      	b.n	80140dc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	68db      	ldr	r3, [r3, #12]
 80140d4:	60fb      	str	r3, [r7, #12]
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d1eb      	bne.n	80140b4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80140dc:	6879      	ldr	r1, [r7, #4]
 80140de:	2000      	movs	r0, #0
 80140e0:	f7f8 fa26 	bl	800c530 <memp_free>
}
 80140e4:	3710      	adds	r7, #16
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd80      	pop	{r7, pc}
 80140ea:	bf00      	nop
 80140ec:	0801a7c4 	.word	0x0801a7c4
 80140f0:	0801ab10 	.word	0x0801ab10
 80140f4:	0801a818 	.word	0x0801a818
 80140f8:	24007fb0 	.word	0x24007fb0

080140fc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b082      	sub	sp, #8
 8014100:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014102:	2000      	movs	r0, #0
 8014104:	f7f8 f99e 	bl	800c444 <memp_malloc>
 8014108:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d007      	beq.n	8014120 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014110:	2220      	movs	r2, #32
 8014112:	2100      	movs	r1, #0
 8014114:	6878      	ldr	r0, [r7, #4]
 8014116:	f002 fe1a 	bl	8016d4e <memset>
    pcb->ttl = UDP_TTL;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	22ff      	movs	r2, #255	; 0xff
 801411e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014120:	687b      	ldr	r3, [r7, #4]
}
 8014122:	4618      	mov	r0, r3
 8014124:	3708      	adds	r7, #8
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}

0801412a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801412a:	b580      	push	{r7, lr}
 801412c:	b084      	sub	sp, #16
 801412e:	af00      	add	r7, sp, #0
 8014130:	4603      	mov	r3, r0
 8014132:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014134:	f7ff ffe2 	bl	80140fc <udp_new>
 8014138:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801413a:	68fb      	ldr	r3, [r7, #12]
}
 801413c:	4618      	mov	r0, r3
 801413e:	3710      	adds	r7, #16
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}

08014144 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014144:	b480      	push	{r7}
 8014146:	b085      	sub	sp, #20
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
 801414c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d01e      	beq.n	8014192 <udp_netif_ip_addr_changed+0x4e>
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d01a      	beq.n	8014192 <udp_netif_ip_addr_changed+0x4e>
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d017      	beq.n	8014192 <udp_netif_ip_addr_changed+0x4e>
 8014162:	683b      	ldr	r3, [r7, #0]
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d013      	beq.n	8014192 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801416a:	4b0d      	ldr	r3, [pc, #52]	; (80141a0 <udp_netif_ip_addr_changed+0x5c>)
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	60fb      	str	r3, [r7, #12]
 8014170:	e00c      	b.n	801418c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	681a      	ldr	r2, [r3, #0]
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	429a      	cmp	r2, r3
 801417c:	d103      	bne.n	8014186 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	681a      	ldr	r2, [r3, #0]
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	68db      	ldr	r3, [r3, #12]
 801418a:	60fb      	str	r3, [r7, #12]
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d1ef      	bne.n	8014172 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014192:	bf00      	nop
 8014194:	3714      	adds	r7, #20
 8014196:	46bd      	mov	sp, r7
 8014198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419c:	4770      	bx	lr
 801419e:	bf00      	nop
 80141a0:	24007fb0 	.word	0x24007fb0

080141a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b082      	sub	sp, #8
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80141ac:	4915      	ldr	r1, [pc, #84]	; (8014204 <etharp_free_entry+0x60>)
 80141ae:	687a      	ldr	r2, [r7, #4]
 80141b0:	4613      	mov	r3, r2
 80141b2:	005b      	lsls	r3, r3, #1
 80141b4:	4413      	add	r3, r2
 80141b6:	00db      	lsls	r3, r3, #3
 80141b8:	440b      	add	r3, r1
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d013      	beq.n	80141e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80141c0:	4910      	ldr	r1, [pc, #64]	; (8014204 <etharp_free_entry+0x60>)
 80141c2:	687a      	ldr	r2, [r7, #4]
 80141c4:	4613      	mov	r3, r2
 80141c6:	005b      	lsls	r3, r3, #1
 80141c8:	4413      	add	r3, r2
 80141ca:	00db      	lsls	r3, r3, #3
 80141cc:	440b      	add	r3, r1
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	4618      	mov	r0, r3
 80141d2:	f7f9 f851 	bl	800d278 <pbuf_free>
    arp_table[i].q = NULL;
 80141d6:	490b      	ldr	r1, [pc, #44]	; (8014204 <etharp_free_entry+0x60>)
 80141d8:	687a      	ldr	r2, [r7, #4]
 80141da:	4613      	mov	r3, r2
 80141dc:	005b      	lsls	r3, r3, #1
 80141de:	4413      	add	r3, r2
 80141e0:	00db      	lsls	r3, r3, #3
 80141e2:	440b      	add	r3, r1
 80141e4:	2200      	movs	r2, #0
 80141e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80141e8:	4906      	ldr	r1, [pc, #24]	; (8014204 <etharp_free_entry+0x60>)
 80141ea:	687a      	ldr	r2, [r7, #4]
 80141ec:	4613      	mov	r3, r2
 80141ee:	005b      	lsls	r3, r3, #1
 80141f0:	4413      	add	r3, r2
 80141f2:	00db      	lsls	r3, r3, #3
 80141f4:	440b      	add	r3, r1
 80141f6:	3314      	adds	r3, #20
 80141f8:	2200      	movs	r2, #0
 80141fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80141fc:	bf00      	nop
 80141fe:	3708      	adds	r7, #8
 8014200:	46bd      	mov	sp, r7
 8014202:	bd80      	pop	{r7, pc}
 8014204:	24004b24 	.word	0x24004b24

08014208 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b082      	sub	sp, #8
 801420c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801420e:	2300      	movs	r3, #0
 8014210:	607b      	str	r3, [r7, #4]
 8014212:	e096      	b.n	8014342 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014214:	494f      	ldr	r1, [pc, #316]	; (8014354 <etharp_tmr+0x14c>)
 8014216:	687a      	ldr	r2, [r7, #4]
 8014218:	4613      	mov	r3, r2
 801421a:	005b      	lsls	r3, r3, #1
 801421c:	4413      	add	r3, r2
 801421e:	00db      	lsls	r3, r3, #3
 8014220:	440b      	add	r3, r1
 8014222:	3314      	adds	r3, #20
 8014224:	781b      	ldrb	r3, [r3, #0]
 8014226:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014228:	78fb      	ldrb	r3, [r7, #3]
 801422a:	2b00      	cmp	r3, #0
 801422c:	f000 8086 	beq.w	801433c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014230:	4948      	ldr	r1, [pc, #288]	; (8014354 <etharp_tmr+0x14c>)
 8014232:	687a      	ldr	r2, [r7, #4]
 8014234:	4613      	mov	r3, r2
 8014236:	005b      	lsls	r3, r3, #1
 8014238:	4413      	add	r3, r2
 801423a:	00db      	lsls	r3, r3, #3
 801423c:	440b      	add	r3, r1
 801423e:	3312      	adds	r3, #18
 8014240:	881b      	ldrh	r3, [r3, #0]
 8014242:	3301      	adds	r3, #1
 8014244:	b298      	uxth	r0, r3
 8014246:	4943      	ldr	r1, [pc, #268]	; (8014354 <etharp_tmr+0x14c>)
 8014248:	687a      	ldr	r2, [r7, #4]
 801424a:	4613      	mov	r3, r2
 801424c:	005b      	lsls	r3, r3, #1
 801424e:	4413      	add	r3, r2
 8014250:	00db      	lsls	r3, r3, #3
 8014252:	440b      	add	r3, r1
 8014254:	3312      	adds	r3, #18
 8014256:	4602      	mov	r2, r0
 8014258:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801425a:	493e      	ldr	r1, [pc, #248]	; (8014354 <etharp_tmr+0x14c>)
 801425c:	687a      	ldr	r2, [r7, #4]
 801425e:	4613      	mov	r3, r2
 8014260:	005b      	lsls	r3, r3, #1
 8014262:	4413      	add	r3, r2
 8014264:	00db      	lsls	r3, r3, #3
 8014266:	440b      	add	r3, r1
 8014268:	3312      	adds	r3, #18
 801426a:	881b      	ldrh	r3, [r3, #0]
 801426c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014270:	d215      	bcs.n	801429e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014272:	4938      	ldr	r1, [pc, #224]	; (8014354 <etharp_tmr+0x14c>)
 8014274:	687a      	ldr	r2, [r7, #4]
 8014276:	4613      	mov	r3, r2
 8014278:	005b      	lsls	r3, r3, #1
 801427a:	4413      	add	r3, r2
 801427c:	00db      	lsls	r3, r3, #3
 801427e:	440b      	add	r3, r1
 8014280:	3314      	adds	r3, #20
 8014282:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014284:	2b01      	cmp	r3, #1
 8014286:	d10e      	bne.n	80142a6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014288:	4932      	ldr	r1, [pc, #200]	; (8014354 <etharp_tmr+0x14c>)
 801428a:	687a      	ldr	r2, [r7, #4]
 801428c:	4613      	mov	r3, r2
 801428e:	005b      	lsls	r3, r3, #1
 8014290:	4413      	add	r3, r2
 8014292:	00db      	lsls	r3, r3, #3
 8014294:	440b      	add	r3, r1
 8014296:	3312      	adds	r3, #18
 8014298:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801429a:	2b04      	cmp	r3, #4
 801429c:	d903      	bls.n	80142a6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801429e:	6878      	ldr	r0, [r7, #4]
 80142a0:	f7ff ff80 	bl	80141a4 <etharp_free_entry>
 80142a4:	e04a      	b.n	801433c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80142a6:	492b      	ldr	r1, [pc, #172]	; (8014354 <etharp_tmr+0x14c>)
 80142a8:	687a      	ldr	r2, [r7, #4]
 80142aa:	4613      	mov	r3, r2
 80142ac:	005b      	lsls	r3, r3, #1
 80142ae:	4413      	add	r3, r2
 80142b0:	00db      	lsls	r3, r3, #3
 80142b2:	440b      	add	r3, r1
 80142b4:	3314      	adds	r3, #20
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	2b03      	cmp	r3, #3
 80142ba:	d10a      	bne.n	80142d2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80142bc:	4925      	ldr	r1, [pc, #148]	; (8014354 <etharp_tmr+0x14c>)
 80142be:	687a      	ldr	r2, [r7, #4]
 80142c0:	4613      	mov	r3, r2
 80142c2:	005b      	lsls	r3, r3, #1
 80142c4:	4413      	add	r3, r2
 80142c6:	00db      	lsls	r3, r3, #3
 80142c8:	440b      	add	r3, r1
 80142ca:	3314      	adds	r3, #20
 80142cc:	2204      	movs	r2, #4
 80142ce:	701a      	strb	r2, [r3, #0]
 80142d0:	e034      	b.n	801433c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80142d2:	4920      	ldr	r1, [pc, #128]	; (8014354 <etharp_tmr+0x14c>)
 80142d4:	687a      	ldr	r2, [r7, #4]
 80142d6:	4613      	mov	r3, r2
 80142d8:	005b      	lsls	r3, r3, #1
 80142da:	4413      	add	r3, r2
 80142dc:	00db      	lsls	r3, r3, #3
 80142de:	440b      	add	r3, r1
 80142e0:	3314      	adds	r3, #20
 80142e2:	781b      	ldrb	r3, [r3, #0]
 80142e4:	2b04      	cmp	r3, #4
 80142e6:	d10a      	bne.n	80142fe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80142e8:	491a      	ldr	r1, [pc, #104]	; (8014354 <etharp_tmr+0x14c>)
 80142ea:	687a      	ldr	r2, [r7, #4]
 80142ec:	4613      	mov	r3, r2
 80142ee:	005b      	lsls	r3, r3, #1
 80142f0:	4413      	add	r3, r2
 80142f2:	00db      	lsls	r3, r3, #3
 80142f4:	440b      	add	r3, r1
 80142f6:	3314      	adds	r3, #20
 80142f8:	2202      	movs	r2, #2
 80142fa:	701a      	strb	r2, [r3, #0]
 80142fc:	e01e      	b.n	801433c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80142fe:	4915      	ldr	r1, [pc, #84]	; (8014354 <etharp_tmr+0x14c>)
 8014300:	687a      	ldr	r2, [r7, #4]
 8014302:	4613      	mov	r3, r2
 8014304:	005b      	lsls	r3, r3, #1
 8014306:	4413      	add	r3, r2
 8014308:	00db      	lsls	r3, r3, #3
 801430a:	440b      	add	r3, r1
 801430c:	3314      	adds	r3, #20
 801430e:	781b      	ldrb	r3, [r3, #0]
 8014310:	2b01      	cmp	r3, #1
 8014312:	d113      	bne.n	801433c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014314:	490f      	ldr	r1, [pc, #60]	; (8014354 <etharp_tmr+0x14c>)
 8014316:	687a      	ldr	r2, [r7, #4]
 8014318:	4613      	mov	r3, r2
 801431a:	005b      	lsls	r3, r3, #1
 801431c:	4413      	add	r3, r2
 801431e:	00db      	lsls	r3, r3, #3
 8014320:	440b      	add	r3, r1
 8014322:	3308      	adds	r3, #8
 8014324:	6818      	ldr	r0, [r3, #0]
 8014326:	687a      	ldr	r2, [r7, #4]
 8014328:	4613      	mov	r3, r2
 801432a:	005b      	lsls	r3, r3, #1
 801432c:	4413      	add	r3, r2
 801432e:	00db      	lsls	r3, r3, #3
 8014330:	4a08      	ldr	r2, [pc, #32]	; (8014354 <etharp_tmr+0x14c>)
 8014332:	4413      	add	r3, r2
 8014334:	3304      	adds	r3, #4
 8014336:	4619      	mov	r1, r3
 8014338:	f000 fe6e 	bl	8015018 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	3301      	adds	r3, #1
 8014340:	607b      	str	r3, [r7, #4]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	2b09      	cmp	r3, #9
 8014346:	f77f af65 	ble.w	8014214 <etharp_tmr+0xc>
      }
    }
  }
}
 801434a:	bf00      	nop
 801434c:	bf00      	nop
 801434e:	3708      	adds	r7, #8
 8014350:	46bd      	mov	sp, r7
 8014352:	bd80      	pop	{r7, pc}
 8014354:	24004b24 	.word	0x24004b24

08014358 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b08a      	sub	sp, #40	; 0x28
 801435c:	af00      	add	r7, sp, #0
 801435e:	60f8      	str	r0, [r7, #12]
 8014360:	460b      	mov	r3, r1
 8014362:	607a      	str	r2, [r7, #4]
 8014364:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014366:	230a      	movs	r3, #10
 8014368:	84fb      	strh	r3, [r7, #38]	; 0x26
 801436a:	230a      	movs	r3, #10
 801436c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801436e:	230a      	movs	r3, #10
 8014370:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014372:	2300      	movs	r3, #0
 8014374:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014376:	230a      	movs	r3, #10
 8014378:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801437a:	2300      	movs	r3, #0
 801437c:	83bb      	strh	r3, [r7, #28]
 801437e:	2300      	movs	r3, #0
 8014380:	837b      	strh	r3, [r7, #26]
 8014382:	2300      	movs	r3, #0
 8014384:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014386:	2300      	movs	r3, #0
 8014388:	843b      	strh	r3, [r7, #32]
 801438a:	e0ae      	b.n	80144ea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801438c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014390:	49a6      	ldr	r1, [pc, #664]	; (801462c <etharp_find_entry+0x2d4>)
 8014392:	4613      	mov	r3, r2
 8014394:	005b      	lsls	r3, r3, #1
 8014396:	4413      	add	r3, r2
 8014398:	00db      	lsls	r3, r3, #3
 801439a:	440b      	add	r3, r1
 801439c:	3314      	adds	r3, #20
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80143a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80143a6:	2b0a      	cmp	r3, #10
 80143a8:	d105      	bne.n	80143b6 <etharp_find_entry+0x5e>
 80143aa:	7dfb      	ldrb	r3, [r7, #23]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d102      	bne.n	80143b6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80143b0:	8c3b      	ldrh	r3, [r7, #32]
 80143b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80143b4:	e095      	b.n	80144e2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80143b6:	7dfb      	ldrb	r3, [r7, #23]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	f000 8092 	beq.w	80144e2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80143be:	7dfb      	ldrb	r3, [r7, #23]
 80143c0:	2b01      	cmp	r3, #1
 80143c2:	d009      	beq.n	80143d8 <etharp_find_entry+0x80>
 80143c4:	7dfb      	ldrb	r3, [r7, #23]
 80143c6:	2b01      	cmp	r3, #1
 80143c8:	d806      	bhi.n	80143d8 <etharp_find_entry+0x80>
 80143ca:	4b99      	ldr	r3, [pc, #612]	; (8014630 <etharp_find_entry+0x2d8>)
 80143cc:	f240 1223 	movw	r2, #291	; 0x123
 80143d0:	4998      	ldr	r1, [pc, #608]	; (8014634 <etharp_find_entry+0x2dc>)
 80143d2:	4899      	ldr	r0, [pc, #612]	; (8014638 <etharp_find_entry+0x2e0>)
 80143d4:	f002 fd1e 	bl	8016e14 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d020      	beq.n	8014420 <etharp_find_entry+0xc8>
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	6819      	ldr	r1, [r3, #0]
 80143e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143e6:	4891      	ldr	r0, [pc, #580]	; (801462c <etharp_find_entry+0x2d4>)
 80143e8:	4613      	mov	r3, r2
 80143ea:	005b      	lsls	r3, r3, #1
 80143ec:	4413      	add	r3, r2
 80143ee:	00db      	lsls	r3, r3, #3
 80143f0:	4403      	add	r3, r0
 80143f2:	3304      	adds	r3, #4
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	4299      	cmp	r1, r3
 80143f8:	d112      	bne.n	8014420 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d00c      	beq.n	801441a <etharp_find_entry+0xc2>
 8014400:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014404:	4989      	ldr	r1, [pc, #548]	; (801462c <etharp_find_entry+0x2d4>)
 8014406:	4613      	mov	r3, r2
 8014408:	005b      	lsls	r3, r3, #1
 801440a:	4413      	add	r3, r2
 801440c:	00db      	lsls	r3, r3, #3
 801440e:	440b      	add	r3, r1
 8014410:	3308      	adds	r3, #8
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	687a      	ldr	r2, [r7, #4]
 8014416:	429a      	cmp	r2, r3
 8014418:	d102      	bne.n	8014420 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801441a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801441e:	e100      	b.n	8014622 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014420:	7dfb      	ldrb	r3, [r7, #23]
 8014422:	2b01      	cmp	r3, #1
 8014424:	d140      	bne.n	80144a8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014426:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801442a:	4980      	ldr	r1, [pc, #512]	; (801462c <etharp_find_entry+0x2d4>)
 801442c:	4613      	mov	r3, r2
 801442e:	005b      	lsls	r3, r3, #1
 8014430:	4413      	add	r3, r2
 8014432:	00db      	lsls	r3, r3, #3
 8014434:	440b      	add	r3, r1
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d01a      	beq.n	8014472 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801443c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014440:	497a      	ldr	r1, [pc, #488]	; (801462c <etharp_find_entry+0x2d4>)
 8014442:	4613      	mov	r3, r2
 8014444:	005b      	lsls	r3, r3, #1
 8014446:	4413      	add	r3, r2
 8014448:	00db      	lsls	r3, r3, #3
 801444a:	440b      	add	r3, r1
 801444c:	3312      	adds	r3, #18
 801444e:	881b      	ldrh	r3, [r3, #0]
 8014450:	8bba      	ldrh	r2, [r7, #28]
 8014452:	429a      	cmp	r2, r3
 8014454:	d845      	bhi.n	80144e2 <etharp_find_entry+0x18a>
            old_queue = i;
 8014456:	8c3b      	ldrh	r3, [r7, #32]
 8014458:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801445a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801445e:	4973      	ldr	r1, [pc, #460]	; (801462c <etharp_find_entry+0x2d4>)
 8014460:	4613      	mov	r3, r2
 8014462:	005b      	lsls	r3, r3, #1
 8014464:	4413      	add	r3, r2
 8014466:	00db      	lsls	r3, r3, #3
 8014468:	440b      	add	r3, r1
 801446a:	3312      	adds	r3, #18
 801446c:	881b      	ldrh	r3, [r3, #0]
 801446e:	83bb      	strh	r3, [r7, #28]
 8014470:	e037      	b.n	80144e2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014472:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014476:	496d      	ldr	r1, [pc, #436]	; (801462c <etharp_find_entry+0x2d4>)
 8014478:	4613      	mov	r3, r2
 801447a:	005b      	lsls	r3, r3, #1
 801447c:	4413      	add	r3, r2
 801447e:	00db      	lsls	r3, r3, #3
 8014480:	440b      	add	r3, r1
 8014482:	3312      	adds	r3, #18
 8014484:	881b      	ldrh	r3, [r3, #0]
 8014486:	8b7a      	ldrh	r2, [r7, #26]
 8014488:	429a      	cmp	r2, r3
 801448a:	d82a      	bhi.n	80144e2 <etharp_find_entry+0x18a>
            old_pending = i;
 801448c:	8c3b      	ldrh	r3, [r7, #32]
 801448e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014490:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014494:	4965      	ldr	r1, [pc, #404]	; (801462c <etharp_find_entry+0x2d4>)
 8014496:	4613      	mov	r3, r2
 8014498:	005b      	lsls	r3, r3, #1
 801449a:	4413      	add	r3, r2
 801449c:	00db      	lsls	r3, r3, #3
 801449e:	440b      	add	r3, r1
 80144a0:	3312      	adds	r3, #18
 80144a2:	881b      	ldrh	r3, [r3, #0]
 80144a4:	837b      	strh	r3, [r7, #26]
 80144a6:	e01c      	b.n	80144e2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80144a8:	7dfb      	ldrb	r3, [r7, #23]
 80144aa:	2b01      	cmp	r3, #1
 80144ac:	d919      	bls.n	80144e2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80144ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144b2:	495e      	ldr	r1, [pc, #376]	; (801462c <etharp_find_entry+0x2d4>)
 80144b4:	4613      	mov	r3, r2
 80144b6:	005b      	lsls	r3, r3, #1
 80144b8:	4413      	add	r3, r2
 80144ba:	00db      	lsls	r3, r3, #3
 80144bc:	440b      	add	r3, r1
 80144be:	3312      	adds	r3, #18
 80144c0:	881b      	ldrh	r3, [r3, #0]
 80144c2:	8b3a      	ldrh	r2, [r7, #24]
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d80c      	bhi.n	80144e2 <etharp_find_entry+0x18a>
            old_stable = i;
 80144c8:	8c3b      	ldrh	r3, [r7, #32]
 80144ca:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80144cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144d0:	4956      	ldr	r1, [pc, #344]	; (801462c <etharp_find_entry+0x2d4>)
 80144d2:	4613      	mov	r3, r2
 80144d4:	005b      	lsls	r3, r3, #1
 80144d6:	4413      	add	r3, r2
 80144d8:	00db      	lsls	r3, r3, #3
 80144da:	440b      	add	r3, r1
 80144dc:	3312      	adds	r3, #18
 80144de:	881b      	ldrh	r3, [r3, #0]
 80144e0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80144e2:	8c3b      	ldrh	r3, [r7, #32]
 80144e4:	3301      	adds	r3, #1
 80144e6:	b29b      	uxth	r3, r3
 80144e8:	843b      	strh	r3, [r7, #32]
 80144ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80144ee:	2b09      	cmp	r3, #9
 80144f0:	f77f af4c 	ble.w	801438c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80144f4:	7afb      	ldrb	r3, [r7, #11]
 80144f6:	f003 0302 	and.w	r3, r3, #2
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d108      	bne.n	8014510 <etharp_find_entry+0x1b8>
 80144fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014502:	2b0a      	cmp	r3, #10
 8014504:	d107      	bne.n	8014516 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014506:	7afb      	ldrb	r3, [r7, #11]
 8014508:	f003 0301 	and.w	r3, r3, #1
 801450c:	2b00      	cmp	r3, #0
 801450e:	d102      	bne.n	8014516 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014510:	f04f 33ff 	mov.w	r3, #4294967295
 8014514:	e085      	b.n	8014622 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014516:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801451a:	2b09      	cmp	r3, #9
 801451c:	dc02      	bgt.n	8014524 <etharp_find_entry+0x1cc>
    i = empty;
 801451e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014520:	843b      	strh	r3, [r7, #32]
 8014522:	e039      	b.n	8014598 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014524:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014528:	2b09      	cmp	r3, #9
 801452a:	dc14      	bgt.n	8014556 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801452c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801452e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014530:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014534:	493d      	ldr	r1, [pc, #244]	; (801462c <etharp_find_entry+0x2d4>)
 8014536:	4613      	mov	r3, r2
 8014538:	005b      	lsls	r3, r3, #1
 801453a:	4413      	add	r3, r2
 801453c:	00db      	lsls	r3, r3, #3
 801453e:	440b      	add	r3, r1
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d018      	beq.n	8014578 <etharp_find_entry+0x220>
 8014546:	4b3a      	ldr	r3, [pc, #232]	; (8014630 <etharp_find_entry+0x2d8>)
 8014548:	f240 126d 	movw	r2, #365	; 0x16d
 801454c:	493b      	ldr	r1, [pc, #236]	; (801463c <etharp_find_entry+0x2e4>)
 801454e:	483a      	ldr	r0, [pc, #232]	; (8014638 <etharp_find_entry+0x2e0>)
 8014550:	f002 fc60 	bl	8016e14 <iprintf>
 8014554:	e010      	b.n	8014578 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014556:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801455a:	2b09      	cmp	r3, #9
 801455c:	dc02      	bgt.n	8014564 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801455e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014560:	843b      	strh	r3, [r7, #32]
 8014562:	e009      	b.n	8014578 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014564:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014568:	2b09      	cmp	r3, #9
 801456a:	dc02      	bgt.n	8014572 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801456c:	8bfb      	ldrh	r3, [r7, #30]
 801456e:	843b      	strh	r3, [r7, #32]
 8014570:	e002      	b.n	8014578 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014572:	f04f 33ff 	mov.w	r3, #4294967295
 8014576:	e054      	b.n	8014622 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014578:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801457c:	2b09      	cmp	r3, #9
 801457e:	dd06      	ble.n	801458e <etharp_find_entry+0x236>
 8014580:	4b2b      	ldr	r3, [pc, #172]	; (8014630 <etharp_find_entry+0x2d8>)
 8014582:	f240 127f 	movw	r2, #383	; 0x17f
 8014586:	492e      	ldr	r1, [pc, #184]	; (8014640 <etharp_find_entry+0x2e8>)
 8014588:	482b      	ldr	r0, [pc, #172]	; (8014638 <etharp_find_entry+0x2e0>)
 801458a:	f002 fc43 	bl	8016e14 <iprintf>
    etharp_free_entry(i);
 801458e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014592:	4618      	mov	r0, r3
 8014594:	f7ff fe06 	bl	80141a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014598:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801459c:	2b09      	cmp	r3, #9
 801459e:	dd06      	ble.n	80145ae <etharp_find_entry+0x256>
 80145a0:	4b23      	ldr	r3, [pc, #140]	; (8014630 <etharp_find_entry+0x2d8>)
 80145a2:	f240 1283 	movw	r2, #387	; 0x183
 80145a6:	4926      	ldr	r1, [pc, #152]	; (8014640 <etharp_find_entry+0x2e8>)
 80145a8:	4823      	ldr	r0, [pc, #140]	; (8014638 <etharp_find_entry+0x2e0>)
 80145aa:	f002 fc33 	bl	8016e14 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80145ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145b2:	491e      	ldr	r1, [pc, #120]	; (801462c <etharp_find_entry+0x2d4>)
 80145b4:	4613      	mov	r3, r2
 80145b6:	005b      	lsls	r3, r3, #1
 80145b8:	4413      	add	r3, r2
 80145ba:	00db      	lsls	r3, r3, #3
 80145bc:	440b      	add	r3, r1
 80145be:	3314      	adds	r3, #20
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d006      	beq.n	80145d4 <etharp_find_entry+0x27c>
 80145c6:	4b1a      	ldr	r3, [pc, #104]	; (8014630 <etharp_find_entry+0x2d8>)
 80145c8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80145cc:	491d      	ldr	r1, [pc, #116]	; (8014644 <etharp_find_entry+0x2ec>)
 80145ce:	481a      	ldr	r0, [pc, #104]	; (8014638 <etharp_find_entry+0x2e0>)
 80145d0:	f002 fc20 	bl	8016e14 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d00b      	beq.n	80145f2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80145da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	6819      	ldr	r1, [r3, #0]
 80145e2:	4812      	ldr	r0, [pc, #72]	; (801462c <etharp_find_entry+0x2d4>)
 80145e4:	4613      	mov	r3, r2
 80145e6:	005b      	lsls	r3, r3, #1
 80145e8:	4413      	add	r3, r2
 80145ea:	00db      	lsls	r3, r3, #3
 80145ec:	4403      	add	r3, r0
 80145ee:	3304      	adds	r3, #4
 80145f0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80145f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145f6:	490d      	ldr	r1, [pc, #52]	; (801462c <etharp_find_entry+0x2d4>)
 80145f8:	4613      	mov	r3, r2
 80145fa:	005b      	lsls	r3, r3, #1
 80145fc:	4413      	add	r3, r2
 80145fe:	00db      	lsls	r3, r3, #3
 8014600:	440b      	add	r3, r1
 8014602:	3312      	adds	r3, #18
 8014604:	2200      	movs	r2, #0
 8014606:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014608:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801460c:	4907      	ldr	r1, [pc, #28]	; (801462c <etharp_find_entry+0x2d4>)
 801460e:	4613      	mov	r3, r2
 8014610:	005b      	lsls	r3, r3, #1
 8014612:	4413      	add	r3, r2
 8014614:	00db      	lsls	r3, r3, #3
 8014616:	440b      	add	r3, r1
 8014618:	3308      	adds	r3, #8
 801461a:	687a      	ldr	r2, [r7, #4]
 801461c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801461e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014622:	4618      	mov	r0, r3
 8014624:	3728      	adds	r7, #40	; 0x28
 8014626:	46bd      	mov	sp, r7
 8014628:	bd80      	pop	{r7, pc}
 801462a:	bf00      	nop
 801462c:	24004b24 	.word	0x24004b24
 8014630:	0801ab28 	.word	0x0801ab28
 8014634:	0801ab60 	.word	0x0801ab60
 8014638:	0801aba0 	.word	0x0801aba0
 801463c:	0801abc8 	.word	0x0801abc8
 8014640:	0801abe0 	.word	0x0801abe0
 8014644:	0801abf4 	.word	0x0801abf4

08014648 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b088      	sub	sp, #32
 801464c:	af02      	add	r7, sp, #8
 801464e:	60f8      	str	r0, [r7, #12]
 8014650:	60b9      	str	r1, [r7, #8]
 8014652:	607a      	str	r2, [r7, #4]
 8014654:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801465c:	2b06      	cmp	r3, #6
 801465e:	d006      	beq.n	801466e <etharp_update_arp_entry+0x26>
 8014660:	4b48      	ldr	r3, [pc, #288]	; (8014784 <etharp_update_arp_entry+0x13c>)
 8014662:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014666:	4948      	ldr	r1, [pc, #288]	; (8014788 <etharp_update_arp_entry+0x140>)
 8014668:	4848      	ldr	r0, [pc, #288]	; (801478c <etharp_update_arp_entry+0x144>)
 801466a:	f002 fbd3 	bl	8016e14 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d012      	beq.n	801469a <etharp_update_arp_entry+0x52>
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d00e      	beq.n	801469a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	68f9      	ldr	r1, [r7, #12]
 8014682:	4618      	mov	r0, r3
 8014684:	f001 f924 	bl	80158d0 <ip4_addr_isbroadcast_u32>
 8014688:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801468a:	2b00      	cmp	r3, #0
 801468c:	d105      	bne.n	801469a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014696:	2be0      	cmp	r3, #224	; 0xe0
 8014698:	d102      	bne.n	80146a0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801469a:	f06f 030f 	mvn.w	r3, #15
 801469e:	e06c      	b.n	801477a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80146a0:	78fb      	ldrb	r3, [r7, #3]
 80146a2:	68fa      	ldr	r2, [r7, #12]
 80146a4:	4619      	mov	r1, r3
 80146a6:	68b8      	ldr	r0, [r7, #8]
 80146a8:	f7ff fe56 	bl	8014358 <etharp_find_entry>
 80146ac:	4603      	mov	r3, r0
 80146ae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80146b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	da02      	bge.n	80146be <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80146b8:	8afb      	ldrh	r3, [r7, #22]
 80146ba:	b25b      	sxtb	r3, r3
 80146bc:	e05d      	b.n	801477a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80146be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80146c2:	4933      	ldr	r1, [pc, #204]	; (8014790 <etharp_update_arp_entry+0x148>)
 80146c4:	4613      	mov	r3, r2
 80146c6:	005b      	lsls	r3, r3, #1
 80146c8:	4413      	add	r3, r2
 80146ca:	00db      	lsls	r3, r3, #3
 80146cc:	440b      	add	r3, r1
 80146ce:	3314      	adds	r3, #20
 80146d0:	2202      	movs	r2, #2
 80146d2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80146d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80146d8:	492d      	ldr	r1, [pc, #180]	; (8014790 <etharp_update_arp_entry+0x148>)
 80146da:	4613      	mov	r3, r2
 80146dc:	005b      	lsls	r3, r3, #1
 80146de:	4413      	add	r3, r2
 80146e0:	00db      	lsls	r3, r3, #3
 80146e2:	440b      	add	r3, r1
 80146e4:	3308      	adds	r3, #8
 80146e6:	68fa      	ldr	r2, [r7, #12]
 80146e8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80146ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80146ee:	4613      	mov	r3, r2
 80146f0:	005b      	lsls	r3, r3, #1
 80146f2:	4413      	add	r3, r2
 80146f4:	00db      	lsls	r3, r3, #3
 80146f6:	3308      	adds	r3, #8
 80146f8:	4a25      	ldr	r2, [pc, #148]	; (8014790 <etharp_update_arp_entry+0x148>)
 80146fa:	4413      	add	r3, r2
 80146fc:	3304      	adds	r3, #4
 80146fe:	2206      	movs	r2, #6
 8014700:	6879      	ldr	r1, [r7, #4]
 8014702:	4618      	mov	r0, r3
 8014704:	f002 fb15 	bl	8016d32 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014708:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801470c:	4920      	ldr	r1, [pc, #128]	; (8014790 <etharp_update_arp_entry+0x148>)
 801470e:	4613      	mov	r3, r2
 8014710:	005b      	lsls	r3, r3, #1
 8014712:	4413      	add	r3, r2
 8014714:	00db      	lsls	r3, r3, #3
 8014716:	440b      	add	r3, r1
 8014718:	3312      	adds	r3, #18
 801471a:	2200      	movs	r2, #0
 801471c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801471e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014722:	491b      	ldr	r1, [pc, #108]	; (8014790 <etharp_update_arp_entry+0x148>)
 8014724:	4613      	mov	r3, r2
 8014726:	005b      	lsls	r3, r3, #1
 8014728:	4413      	add	r3, r2
 801472a:	00db      	lsls	r3, r3, #3
 801472c:	440b      	add	r3, r1
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d021      	beq.n	8014778 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014734:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014738:	4915      	ldr	r1, [pc, #84]	; (8014790 <etharp_update_arp_entry+0x148>)
 801473a:	4613      	mov	r3, r2
 801473c:	005b      	lsls	r3, r3, #1
 801473e:	4413      	add	r3, r2
 8014740:	00db      	lsls	r3, r3, #3
 8014742:	440b      	add	r3, r1
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014748:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801474c:	4910      	ldr	r1, [pc, #64]	; (8014790 <etharp_update_arp_entry+0x148>)
 801474e:	4613      	mov	r3, r2
 8014750:	005b      	lsls	r3, r3, #1
 8014752:	4413      	add	r3, r2
 8014754:	00db      	lsls	r3, r3, #3
 8014756:	440b      	add	r3, r1
 8014758:	2200      	movs	r2, #0
 801475a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014762:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014766:	9300      	str	r3, [sp, #0]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	6939      	ldr	r1, [r7, #16]
 801476c:	68f8      	ldr	r0, [r7, #12]
 801476e:	f001 ffb7 	bl	80166e0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014772:	6938      	ldr	r0, [r7, #16]
 8014774:	f7f8 fd80 	bl	800d278 <pbuf_free>
  }
  return ERR_OK;
 8014778:	2300      	movs	r3, #0
}
 801477a:	4618      	mov	r0, r3
 801477c:	3718      	adds	r7, #24
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}
 8014782:	bf00      	nop
 8014784:	0801ab28 	.word	0x0801ab28
 8014788:	0801ac20 	.word	0x0801ac20
 801478c:	0801aba0 	.word	0x0801aba0
 8014790:	24004b24 	.word	0x24004b24

08014794 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b084      	sub	sp, #16
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801479c:	2300      	movs	r3, #0
 801479e:	60fb      	str	r3, [r7, #12]
 80147a0:	e01e      	b.n	80147e0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80147a2:	4913      	ldr	r1, [pc, #76]	; (80147f0 <etharp_cleanup_netif+0x5c>)
 80147a4:	68fa      	ldr	r2, [r7, #12]
 80147a6:	4613      	mov	r3, r2
 80147a8:	005b      	lsls	r3, r3, #1
 80147aa:	4413      	add	r3, r2
 80147ac:	00db      	lsls	r3, r3, #3
 80147ae:	440b      	add	r3, r1
 80147b0:	3314      	adds	r3, #20
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80147b6:	7afb      	ldrb	r3, [r7, #11]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d00e      	beq.n	80147da <etharp_cleanup_netif+0x46>
 80147bc:	490c      	ldr	r1, [pc, #48]	; (80147f0 <etharp_cleanup_netif+0x5c>)
 80147be:	68fa      	ldr	r2, [r7, #12]
 80147c0:	4613      	mov	r3, r2
 80147c2:	005b      	lsls	r3, r3, #1
 80147c4:	4413      	add	r3, r2
 80147c6:	00db      	lsls	r3, r3, #3
 80147c8:	440b      	add	r3, r1
 80147ca:	3308      	adds	r3, #8
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	687a      	ldr	r2, [r7, #4]
 80147d0:	429a      	cmp	r2, r3
 80147d2:	d102      	bne.n	80147da <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80147d4:	68f8      	ldr	r0, [r7, #12]
 80147d6:	f7ff fce5 	bl	80141a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	3301      	adds	r3, #1
 80147de:	60fb      	str	r3, [r7, #12]
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	2b09      	cmp	r3, #9
 80147e4:	dddd      	ble.n	80147a2 <etharp_cleanup_netif+0xe>
    }
  }
}
 80147e6:	bf00      	nop
 80147e8:	bf00      	nop
 80147ea:	3710      	adds	r7, #16
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}
 80147f0:	24004b24 	.word	0x24004b24

080147f4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80147f4:	b5b0      	push	{r4, r5, r7, lr}
 80147f6:	b08a      	sub	sp, #40	; 0x28
 80147f8:	af04      	add	r7, sp, #16
 80147fa:	6078      	str	r0, [r7, #4]
 80147fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d107      	bne.n	8014814 <etharp_input+0x20>
 8014804:	4b3d      	ldr	r3, [pc, #244]	; (80148fc <etharp_input+0x108>)
 8014806:	f240 228a 	movw	r2, #650	; 0x28a
 801480a:	493d      	ldr	r1, [pc, #244]	; (8014900 <etharp_input+0x10c>)
 801480c:	483d      	ldr	r0, [pc, #244]	; (8014904 <etharp_input+0x110>)
 801480e:	f002 fb01 	bl	8016e14 <iprintf>
 8014812:	e06f      	b.n	80148f4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	685b      	ldr	r3, [r3, #4]
 8014818:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801481a:	693b      	ldr	r3, [r7, #16]
 801481c:	881b      	ldrh	r3, [r3, #0]
 801481e:	b29b      	uxth	r3, r3
 8014820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014824:	d10c      	bne.n	8014840 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014826:	693b      	ldr	r3, [r7, #16]
 8014828:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801482a:	2b06      	cmp	r3, #6
 801482c:	d108      	bne.n	8014840 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014832:	2b04      	cmp	r3, #4
 8014834:	d104      	bne.n	8014840 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014836:	693b      	ldr	r3, [r7, #16]
 8014838:	885b      	ldrh	r3, [r3, #2]
 801483a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801483c:	2b08      	cmp	r3, #8
 801483e:	d003      	beq.n	8014848 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014840:	6878      	ldr	r0, [r7, #4]
 8014842:	f7f8 fd19 	bl	800d278 <pbuf_free>
    return;
 8014846:	e055      	b.n	80148f4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	330e      	adds	r3, #14
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014850:	693b      	ldr	r3, [r7, #16]
 8014852:	3318      	adds	r3, #24
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	3304      	adds	r3, #4
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d102      	bne.n	8014868 <etharp_input+0x74>
    for_us = 0;
 8014862:	2300      	movs	r3, #0
 8014864:	75fb      	strb	r3, [r7, #23]
 8014866:	e009      	b.n	801487c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014868:	68ba      	ldr	r2, [r7, #8]
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	3304      	adds	r3, #4
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	429a      	cmp	r2, r3
 8014872:	bf0c      	ite	eq
 8014874:	2301      	moveq	r3, #1
 8014876:	2300      	movne	r3, #0
 8014878:	b2db      	uxtb	r3, r3
 801487a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	f103 0208 	add.w	r2, r3, #8
 8014882:	7dfb      	ldrb	r3, [r7, #23]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d001      	beq.n	801488c <etharp_input+0x98>
 8014888:	2301      	movs	r3, #1
 801488a:	e000      	b.n	801488e <etharp_input+0x9a>
 801488c:	2302      	movs	r3, #2
 801488e:	f107 010c 	add.w	r1, r7, #12
 8014892:	6838      	ldr	r0, [r7, #0]
 8014894:	f7ff fed8 	bl	8014648 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	88db      	ldrh	r3, [r3, #6]
 801489c:	b29b      	uxth	r3, r3
 801489e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80148a2:	d003      	beq.n	80148ac <etharp_input+0xb8>
 80148a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80148a8:	d01e      	beq.n	80148e8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80148aa:	e020      	b.n	80148ee <etharp_input+0xfa>
      if (for_us) {
 80148ac:	7dfb      	ldrb	r3, [r7, #23]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d01c      	beq.n	80148ec <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80148b2:	683b      	ldr	r3, [r7, #0]
 80148b4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80148b8:	693b      	ldr	r3, [r7, #16]
 80148ba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80148c8:	693a      	ldr	r2, [r7, #16]
 80148ca:	3208      	adds	r2, #8
        etharp_raw(netif,
 80148cc:	2102      	movs	r1, #2
 80148ce:	9103      	str	r1, [sp, #12]
 80148d0:	f107 010c 	add.w	r1, r7, #12
 80148d4:	9102      	str	r1, [sp, #8]
 80148d6:	9201      	str	r2, [sp, #4]
 80148d8:	9300      	str	r3, [sp, #0]
 80148da:	462b      	mov	r3, r5
 80148dc:	4622      	mov	r2, r4
 80148de:	4601      	mov	r1, r0
 80148e0:	6838      	ldr	r0, [r7, #0]
 80148e2:	f000 faeb 	bl	8014ebc <etharp_raw>
      break;
 80148e6:	e001      	b.n	80148ec <etharp_input+0xf8>
      break;
 80148e8:	bf00      	nop
 80148ea:	e000      	b.n	80148ee <etharp_input+0xfa>
      break;
 80148ec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80148ee:	6878      	ldr	r0, [r7, #4]
 80148f0:	f7f8 fcc2 	bl	800d278 <pbuf_free>
}
 80148f4:	3718      	adds	r7, #24
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bdb0      	pop	{r4, r5, r7, pc}
 80148fa:	bf00      	nop
 80148fc:	0801ab28 	.word	0x0801ab28
 8014900:	0801ac78 	.word	0x0801ac78
 8014904:	0801aba0 	.word	0x0801aba0

08014908 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b086      	sub	sp, #24
 801490c:	af02      	add	r7, sp, #8
 801490e:	60f8      	str	r0, [r7, #12]
 8014910:	60b9      	str	r1, [r7, #8]
 8014912:	4613      	mov	r3, r2
 8014914:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014916:	79fa      	ldrb	r2, [r7, #7]
 8014918:	4944      	ldr	r1, [pc, #272]	; (8014a2c <etharp_output_to_arp_index+0x124>)
 801491a:	4613      	mov	r3, r2
 801491c:	005b      	lsls	r3, r3, #1
 801491e:	4413      	add	r3, r2
 8014920:	00db      	lsls	r3, r3, #3
 8014922:	440b      	add	r3, r1
 8014924:	3314      	adds	r3, #20
 8014926:	781b      	ldrb	r3, [r3, #0]
 8014928:	2b01      	cmp	r3, #1
 801492a:	d806      	bhi.n	801493a <etharp_output_to_arp_index+0x32>
 801492c:	4b40      	ldr	r3, [pc, #256]	; (8014a30 <etharp_output_to_arp_index+0x128>)
 801492e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014932:	4940      	ldr	r1, [pc, #256]	; (8014a34 <etharp_output_to_arp_index+0x12c>)
 8014934:	4840      	ldr	r0, [pc, #256]	; (8014a38 <etharp_output_to_arp_index+0x130>)
 8014936:	f002 fa6d 	bl	8016e14 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801493a:	79fa      	ldrb	r2, [r7, #7]
 801493c:	493b      	ldr	r1, [pc, #236]	; (8014a2c <etharp_output_to_arp_index+0x124>)
 801493e:	4613      	mov	r3, r2
 8014940:	005b      	lsls	r3, r3, #1
 8014942:	4413      	add	r3, r2
 8014944:	00db      	lsls	r3, r3, #3
 8014946:	440b      	add	r3, r1
 8014948:	3314      	adds	r3, #20
 801494a:	781b      	ldrb	r3, [r3, #0]
 801494c:	2b02      	cmp	r3, #2
 801494e:	d153      	bne.n	80149f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014950:	79fa      	ldrb	r2, [r7, #7]
 8014952:	4936      	ldr	r1, [pc, #216]	; (8014a2c <etharp_output_to_arp_index+0x124>)
 8014954:	4613      	mov	r3, r2
 8014956:	005b      	lsls	r3, r3, #1
 8014958:	4413      	add	r3, r2
 801495a:	00db      	lsls	r3, r3, #3
 801495c:	440b      	add	r3, r1
 801495e:	3312      	adds	r3, #18
 8014960:	881b      	ldrh	r3, [r3, #0]
 8014962:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014966:	d919      	bls.n	801499c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014968:	79fa      	ldrb	r2, [r7, #7]
 801496a:	4613      	mov	r3, r2
 801496c:	005b      	lsls	r3, r3, #1
 801496e:	4413      	add	r3, r2
 8014970:	00db      	lsls	r3, r3, #3
 8014972:	4a2e      	ldr	r2, [pc, #184]	; (8014a2c <etharp_output_to_arp_index+0x124>)
 8014974:	4413      	add	r3, r2
 8014976:	3304      	adds	r3, #4
 8014978:	4619      	mov	r1, r3
 801497a:	68f8      	ldr	r0, [r7, #12]
 801497c:	f000 fb4c 	bl	8015018 <etharp_request>
 8014980:	4603      	mov	r3, r0
 8014982:	2b00      	cmp	r3, #0
 8014984:	d138      	bne.n	80149f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014986:	79fa      	ldrb	r2, [r7, #7]
 8014988:	4928      	ldr	r1, [pc, #160]	; (8014a2c <etharp_output_to_arp_index+0x124>)
 801498a:	4613      	mov	r3, r2
 801498c:	005b      	lsls	r3, r3, #1
 801498e:	4413      	add	r3, r2
 8014990:	00db      	lsls	r3, r3, #3
 8014992:	440b      	add	r3, r1
 8014994:	3314      	adds	r3, #20
 8014996:	2203      	movs	r2, #3
 8014998:	701a      	strb	r2, [r3, #0]
 801499a:	e02d      	b.n	80149f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801499c:	79fa      	ldrb	r2, [r7, #7]
 801499e:	4923      	ldr	r1, [pc, #140]	; (8014a2c <etharp_output_to_arp_index+0x124>)
 80149a0:	4613      	mov	r3, r2
 80149a2:	005b      	lsls	r3, r3, #1
 80149a4:	4413      	add	r3, r2
 80149a6:	00db      	lsls	r3, r3, #3
 80149a8:	440b      	add	r3, r1
 80149aa:	3312      	adds	r3, #18
 80149ac:	881b      	ldrh	r3, [r3, #0]
 80149ae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80149b2:	d321      	bcc.n	80149f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80149b4:	79fa      	ldrb	r2, [r7, #7]
 80149b6:	4613      	mov	r3, r2
 80149b8:	005b      	lsls	r3, r3, #1
 80149ba:	4413      	add	r3, r2
 80149bc:	00db      	lsls	r3, r3, #3
 80149be:	4a1b      	ldr	r2, [pc, #108]	; (8014a2c <etharp_output_to_arp_index+0x124>)
 80149c0:	4413      	add	r3, r2
 80149c2:	1d19      	adds	r1, r3, #4
 80149c4:	79fa      	ldrb	r2, [r7, #7]
 80149c6:	4613      	mov	r3, r2
 80149c8:	005b      	lsls	r3, r3, #1
 80149ca:	4413      	add	r3, r2
 80149cc:	00db      	lsls	r3, r3, #3
 80149ce:	3308      	adds	r3, #8
 80149d0:	4a16      	ldr	r2, [pc, #88]	; (8014a2c <etharp_output_to_arp_index+0x124>)
 80149d2:	4413      	add	r3, r2
 80149d4:	3304      	adds	r3, #4
 80149d6:	461a      	mov	r2, r3
 80149d8:	68f8      	ldr	r0, [r7, #12]
 80149da:	f000 fafb 	bl	8014fd4 <etharp_request_dst>
 80149de:	4603      	mov	r3, r0
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d109      	bne.n	80149f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80149e4:	79fa      	ldrb	r2, [r7, #7]
 80149e6:	4911      	ldr	r1, [pc, #68]	; (8014a2c <etharp_output_to_arp_index+0x124>)
 80149e8:	4613      	mov	r3, r2
 80149ea:	005b      	lsls	r3, r3, #1
 80149ec:	4413      	add	r3, r2
 80149ee:	00db      	lsls	r3, r3, #3
 80149f0:	440b      	add	r3, r1
 80149f2:	3314      	adds	r3, #20
 80149f4:	2203      	movs	r2, #3
 80149f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80149fe:	79fa      	ldrb	r2, [r7, #7]
 8014a00:	4613      	mov	r3, r2
 8014a02:	005b      	lsls	r3, r3, #1
 8014a04:	4413      	add	r3, r2
 8014a06:	00db      	lsls	r3, r3, #3
 8014a08:	3308      	adds	r3, #8
 8014a0a:	4a08      	ldr	r2, [pc, #32]	; (8014a2c <etharp_output_to_arp_index+0x124>)
 8014a0c:	4413      	add	r3, r2
 8014a0e:	3304      	adds	r3, #4
 8014a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014a14:	9200      	str	r2, [sp, #0]
 8014a16:	460a      	mov	r2, r1
 8014a18:	68b9      	ldr	r1, [r7, #8]
 8014a1a:	68f8      	ldr	r0, [r7, #12]
 8014a1c:	f001 fe60 	bl	80166e0 <ethernet_output>
 8014a20:	4603      	mov	r3, r0
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	3710      	adds	r7, #16
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}
 8014a2a:	bf00      	nop
 8014a2c:	24004b24 	.word	0x24004b24
 8014a30:	0801ab28 	.word	0x0801ab28
 8014a34:	0801ac98 	.word	0x0801ac98
 8014a38:	0801aba0 	.word	0x0801aba0

08014a3c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b08a      	sub	sp, #40	; 0x28
 8014a40:	af02      	add	r7, sp, #8
 8014a42:	60f8      	str	r0, [r7, #12]
 8014a44:	60b9      	str	r1, [r7, #8]
 8014a46:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d106      	bne.n	8014a60 <etharp_output+0x24>
 8014a52:	4b73      	ldr	r3, [pc, #460]	; (8014c20 <etharp_output+0x1e4>)
 8014a54:	f240 321e 	movw	r2, #798	; 0x31e
 8014a58:	4972      	ldr	r1, [pc, #456]	; (8014c24 <etharp_output+0x1e8>)
 8014a5a:	4873      	ldr	r0, [pc, #460]	; (8014c28 <etharp_output+0x1ec>)
 8014a5c:	f002 f9da 	bl	8016e14 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d106      	bne.n	8014a74 <etharp_output+0x38>
 8014a66:	4b6e      	ldr	r3, [pc, #440]	; (8014c20 <etharp_output+0x1e4>)
 8014a68:	f240 321f 	movw	r2, #799	; 0x31f
 8014a6c:	496f      	ldr	r1, [pc, #444]	; (8014c2c <etharp_output+0x1f0>)
 8014a6e:	486e      	ldr	r0, [pc, #440]	; (8014c28 <etharp_output+0x1ec>)
 8014a70:	f002 f9d0 	bl	8016e14 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d106      	bne.n	8014a88 <etharp_output+0x4c>
 8014a7a:	4b69      	ldr	r3, [pc, #420]	; (8014c20 <etharp_output+0x1e4>)
 8014a7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014a80:	496b      	ldr	r1, [pc, #428]	; (8014c30 <etharp_output+0x1f4>)
 8014a82:	4869      	ldr	r0, [pc, #420]	; (8014c28 <etharp_output+0x1ec>)
 8014a84:	f002 f9c6 	bl	8016e14 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	68f9      	ldr	r1, [r7, #12]
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f000 ff1e 	bl	80158d0 <ip4_addr_isbroadcast_u32>
 8014a94:	4603      	mov	r3, r0
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d002      	beq.n	8014aa0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014a9a:	4b66      	ldr	r3, [pc, #408]	; (8014c34 <etharp_output+0x1f8>)
 8014a9c:	61fb      	str	r3, [r7, #28]
 8014a9e:	e0af      	b.n	8014c00 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014aa8:	2be0      	cmp	r3, #224	; 0xe0
 8014aaa:	d118      	bne.n	8014ade <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014aac:	2301      	movs	r3, #1
 8014aae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014ab4:	235e      	movs	r3, #94	; 0x5e
 8014ab6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	3301      	adds	r3, #1
 8014abc:	781b      	ldrb	r3, [r3, #0]
 8014abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014ac2:	b2db      	uxtb	r3, r3
 8014ac4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	3302      	adds	r3, #2
 8014aca:	781b      	ldrb	r3, [r3, #0]
 8014acc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	3303      	adds	r3, #3
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014ad6:	f107 0310 	add.w	r3, r7, #16
 8014ada:	61fb      	str	r3, [r7, #28]
 8014adc:	e090      	b.n	8014c00 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	681a      	ldr	r2, [r3, #0]
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	3304      	adds	r3, #4
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	405a      	eors	r2, r3
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	3308      	adds	r3, #8
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	4013      	ands	r3, r2
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d012      	beq.n	8014b1c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014afc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014b00:	4293      	cmp	r3, r2
 8014b02:	d00b      	beq.n	8014b1c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	330c      	adds	r3, #12
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d003      	beq.n	8014b16 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	330c      	adds	r3, #12
 8014b12:	61bb      	str	r3, [r7, #24]
 8014b14:	e002      	b.n	8014b1c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014b16:	f06f 0303 	mvn.w	r3, #3
 8014b1a:	e07d      	b.n	8014c18 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014b1c:	4b46      	ldr	r3, [pc, #280]	; (8014c38 <etharp_output+0x1fc>)
 8014b1e:	781b      	ldrb	r3, [r3, #0]
 8014b20:	4619      	mov	r1, r3
 8014b22:	4a46      	ldr	r2, [pc, #280]	; (8014c3c <etharp_output+0x200>)
 8014b24:	460b      	mov	r3, r1
 8014b26:	005b      	lsls	r3, r3, #1
 8014b28:	440b      	add	r3, r1
 8014b2a:	00db      	lsls	r3, r3, #3
 8014b2c:	4413      	add	r3, r2
 8014b2e:	3314      	adds	r3, #20
 8014b30:	781b      	ldrb	r3, [r3, #0]
 8014b32:	2b01      	cmp	r3, #1
 8014b34:	d925      	bls.n	8014b82 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014b36:	4b40      	ldr	r3, [pc, #256]	; (8014c38 <etharp_output+0x1fc>)
 8014b38:	781b      	ldrb	r3, [r3, #0]
 8014b3a:	4619      	mov	r1, r3
 8014b3c:	4a3f      	ldr	r2, [pc, #252]	; (8014c3c <etharp_output+0x200>)
 8014b3e:	460b      	mov	r3, r1
 8014b40:	005b      	lsls	r3, r3, #1
 8014b42:	440b      	add	r3, r1
 8014b44:	00db      	lsls	r3, r3, #3
 8014b46:	4413      	add	r3, r2
 8014b48:	3308      	adds	r3, #8
 8014b4a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014b4c:	68fa      	ldr	r2, [r7, #12]
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	d117      	bne.n	8014b82 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014b52:	69bb      	ldr	r3, [r7, #24]
 8014b54:	681a      	ldr	r2, [r3, #0]
 8014b56:	4b38      	ldr	r3, [pc, #224]	; (8014c38 <etharp_output+0x1fc>)
 8014b58:	781b      	ldrb	r3, [r3, #0]
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	4937      	ldr	r1, [pc, #220]	; (8014c3c <etharp_output+0x200>)
 8014b5e:	4603      	mov	r3, r0
 8014b60:	005b      	lsls	r3, r3, #1
 8014b62:	4403      	add	r3, r0
 8014b64:	00db      	lsls	r3, r3, #3
 8014b66:	440b      	add	r3, r1
 8014b68:	3304      	adds	r3, #4
 8014b6a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	d108      	bne.n	8014b82 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014b70:	4b31      	ldr	r3, [pc, #196]	; (8014c38 <etharp_output+0x1fc>)
 8014b72:	781b      	ldrb	r3, [r3, #0]
 8014b74:	461a      	mov	r2, r3
 8014b76:	68b9      	ldr	r1, [r7, #8]
 8014b78:	68f8      	ldr	r0, [r7, #12]
 8014b7a:	f7ff fec5 	bl	8014908 <etharp_output_to_arp_index>
 8014b7e:	4603      	mov	r3, r0
 8014b80:	e04a      	b.n	8014c18 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014b82:	2300      	movs	r3, #0
 8014b84:	75fb      	strb	r3, [r7, #23]
 8014b86:	e031      	b.n	8014bec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014b88:	7dfa      	ldrb	r2, [r7, #23]
 8014b8a:	492c      	ldr	r1, [pc, #176]	; (8014c3c <etharp_output+0x200>)
 8014b8c:	4613      	mov	r3, r2
 8014b8e:	005b      	lsls	r3, r3, #1
 8014b90:	4413      	add	r3, r2
 8014b92:	00db      	lsls	r3, r3, #3
 8014b94:	440b      	add	r3, r1
 8014b96:	3314      	adds	r3, #20
 8014b98:	781b      	ldrb	r3, [r3, #0]
 8014b9a:	2b01      	cmp	r3, #1
 8014b9c:	d923      	bls.n	8014be6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014b9e:	7dfa      	ldrb	r2, [r7, #23]
 8014ba0:	4926      	ldr	r1, [pc, #152]	; (8014c3c <etharp_output+0x200>)
 8014ba2:	4613      	mov	r3, r2
 8014ba4:	005b      	lsls	r3, r3, #1
 8014ba6:	4413      	add	r3, r2
 8014ba8:	00db      	lsls	r3, r3, #3
 8014baa:	440b      	add	r3, r1
 8014bac:	3308      	adds	r3, #8
 8014bae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014bb0:	68fa      	ldr	r2, [r7, #12]
 8014bb2:	429a      	cmp	r2, r3
 8014bb4:	d117      	bne.n	8014be6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014bb6:	69bb      	ldr	r3, [r7, #24]
 8014bb8:	6819      	ldr	r1, [r3, #0]
 8014bba:	7dfa      	ldrb	r2, [r7, #23]
 8014bbc:	481f      	ldr	r0, [pc, #124]	; (8014c3c <etharp_output+0x200>)
 8014bbe:	4613      	mov	r3, r2
 8014bc0:	005b      	lsls	r3, r3, #1
 8014bc2:	4413      	add	r3, r2
 8014bc4:	00db      	lsls	r3, r3, #3
 8014bc6:	4403      	add	r3, r0
 8014bc8:	3304      	adds	r3, #4
 8014bca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014bcc:	4299      	cmp	r1, r3
 8014bce:	d10a      	bne.n	8014be6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014bd0:	4a19      	ldr	r2, [pc, #100]	; (8014c38 <etharp_output+0x1fc>)
 8014bd2:	7dfb      	ldrb	r3, [r7, #23]
 8014bd4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014bd6:	7dfb      	ldrb	r3, [r7, #23]
 8014bd8:	461a      	mov	r2, r3
 8014bda:	68b9      	ldr	r1, [r7, #8]
 8014bdc:	68f8      	ldr	r0, [r7, #12]
 8014bde:	f7ff fe93 	bl	8014908 <etharp_output_to_arp_index>
 8014be2:	4603      	mov	r3, r0
 8014be4:	e018      	b.n	8014c18 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014be6:	7dfb      	ldrb	r3, [r7, #23]
 8014be8:	3301      	adds	r3, #1
 8014bea:	75fb      	strb	r3, [r7, #23]
 8014bec:	7dfb      	ldrb	r3, [r7, #23]
 8014bee:	2b09      	cmp	r3, #9
 8014bf0:	d9ca      	bls.n	8014b88 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014bf2:	68ba      	ldr	r2, [r7, #8]
 8014bf4:	69b9      	ldr	r1, [r7, #24]
 8014bf6:	68f8      	ldr	r0, [r7, #12]
 8014bf8:	f000 f822 	bl	8014c40 <etharp_query>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	e00b      	b.n	8014c18 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014c06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c0a:	9300      	str	r3, [sp, #0]
 8014c0c:	69fb      	ldr	r3, [r7, #28]
 8014c0e:	68b9      	ldr	r1, [r7, #8]
 8014c10:	68f8      	ldr	r0, [r7, #12]
 8014c12:	f001 fd65 	bl	80166e0 <ethernet_output>
 8014c16:	4603      	mov	r3, r0
}
 8014c18:	4618      	mov	r0, r3
 8014c1a:	3720      	adds	r7, #32
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	bd80      	pop	{r7, pc}
 8014c20:	0801ab28 	.word	0x0801ab28
 8014c24:	0801ac78 	.word	0x0801ac78
 8014c28:	0801aba0 	.word	0x0801aba0
 8014c2c:	0801acc8 	.word	0x0801acc8
 8014c30:	0801ac68 	.word	0x0801ac68
 8014c34:	0801b344 	.word	0x0801b344
 8014c38:	24004c14 	.word	0x24004c14
 8014c3c:	24004b24 	.word	0x24004b24

08014c40 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b08c      	sub	sp, #48	; 0x30
 8014c44:	af02      	add	r7, sp, #8
 8014c46:	60f8      	str	r0, [r7, #12]
 8014c48:	60b9      	str	r1, [r7, #8]
 8014c4a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	3326      	adds	r3, #38	; 0x26
 8014c50:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014c52:	23ff      	movs	r3, #255	; 0xff
 8014c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014c58:	2300      	movs	r3, #0
 8014c5a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	68f9      	ldr	r1, [r7, #12]
 8014c62:	4618      	mov	r0, r3
 8014c64:	f000 fe34 	bl	80158d0 <ip4_addr_isbroadcast_u32>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d10c      	bne.n	8014c88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014c76:	2be0      	cmp	r3, #224	; 0xe0
 8014c78:	d006      	beq.n	8014c88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d003      	beq.n	8014c88 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014c80:	68bb      	ldr	r3, [r7, #8]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d102      	bne.n	8014c8e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014c88:	f06f 030f 	mvn.w	r3, #15
 8014c8c:	e101      	b.n	8014e92 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014c8e:	68fa      	ldr	r2, [r7, #12]
 8014c90:	2101      	movs	r1, #1
 8014c92:	68b8      	ldr	r0, [r7, #8]
 8014c94:	f7ff fb60 	bl	8014358 <etharp_find_entry>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014c9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	da02      	bge.n	8014caa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014ca4:	8a7b      	ldrh	r3, [r7, #18]
 8014ca6:	b25b      	sxtb	r3, r3
 8014ca8:	e0f3      	b.n	8014e92 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014caa:	8a7b      	ldrh	r3, [r7, #18]
 8014cac:	2b7e      	cmp	r3, #126	; 0x7e
 8014cae:	d906      	bls.n	8014cbe <etharp_query+0x7e>
 8014cb0:	4b7a      	ldr	r3, [pc, #488]	; (8014e9c <etharp_query+0x25c>)
 8014cb2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014cb6:	497a      	ldr	r1, [pc, #488]	; (8014ea0 <etharp_query+0x260>)
 8014cb8:	487a      	ldr	r0, [pc, #488]	; (8014ea4 <etharp_query+0x264>)
 8014cba:	f002 f8ab 	bl	8016e14 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014cbe:	8a7b      	ldrh	r3, [r7, #18]
 8014cc0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014cc2:	7c7a      	ldrb	r2, [r7, #17]
 8014cc4:	4978      	ldr	r1, [pc, #480]	; (8014ea8 <etharp_query+0x268>)
 8014cc6:	4613      	mov	r3, r2
 8014cc8:	005b      	lsls	r3, r3, #1
 8014cca:	4413      	add	r3, r2
 8014ccc:	00db      	lsls	r3, r3, #3
 8014cce:	440b      	add	r3, r1
 8014cd0:	3314      	adds	r3, #20
 8014cd2:	781b      	ldrb	r3, [r3, #0]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d115      	bne.n	8014d04 <etharp_query+0xc4>
    is_new_entry = 1;
 8014cd8:	2301      	movs	r3, #1
 8014cda:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014cdc:	7c7a      	ldrb	r2, [r7, #17]
 8014cde:	4972      	ldr	r1, [pc, #456]	; (8014ea8 <etharp_query+0x268>)
 8014ce0:	4613      	mov	r3, r2
 8014ce2:	005b      	lsls	r3, r3, #1
 8014ce4:	4413      	add	r3, r2
 8014ce6:	00db      	lsls	r3, r3, #3
 8014ce8:	440b      	add	r3, r1
 8014cea:	3314      	adds	r3, #20
 8014cec:	2201      	movs	r2, #1
 8014cee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014cf0:	7c7a      	ldrb	r2, [r7, #17]
 8014cf2:	496d      	ldr	r1, [pc, #436]	; (8014ea8 <etharp_query+0x268>)
 8014cf4:	4613      	mov	r3, r2
 8014cf6:	005b      	lsls	r3, r3, #1
 8014cf8:	4413      	add	r3, r2
 8014cfa:	00db      	lsls	r3, r3, #3
 8014cfc:	440b      	add	r3, r1
 8014cfe:	3308      	adds	r3, #8
 8014d00:	68fa      	ldr	r2, [r7, #12]
 8014d02:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014d04:	7c7a      	ldrb	r2, [r7, #17]
 8014d06:	4968      	ldr	r1, [pc, #416]	; (8014ea8 <etharp_query+0x268>)
 8014d08:	4613      	mov	r3, r2
 8014d0a:	005b      	lsls	r3, r3, #1
 8014d0c:	4413      	add	r3, r2
 8014d0e:	00db      	lsls	r3, r3, #3
 8014d10:	440b      	add	r3, r1
 8014d12:	3314      	adds	r3, #20
 8014d14:	781b      	ldrb	r3, [r3, #0]
 8014d16:	2b01      	cmp	r3, #1
 8014d18:	d011      	beq.n	8014d3e <etharp_query+0xfe>
 8014d1a:	7c7a      	ldrb	r2, [r7, #17]
 8014d1c:	4962      	ldr	r1, [pc, #392]	; (8014ea8 <etharp_query+0x268>)
 8014d1e:	4613      	mov	r3, r2
 8014d20:	005b      	lsls	r3, r3, #1
 8014d22:	4413      	add	r3, r2
 8014d24:	00db      	lsls	r3, r3, #3
 8014d26:	440b      	add	r3, r1
 8014d28:	3314      	adds	r3, #20
 8014d2a:	781b      	ldrb	r3, [r3, #0]
 8014d2c:	2b01      	cmp	r3, #1
 8014d2e:	d806      	bhi.n	8014d3e <etharp_query+0xfe>
 8014d30:	4b5a      	ldr	r3, [pc, #360]	; (8014e9c <etharp_query+0x25c>)
 8014d32:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014d36:	495d      	ldr	r1, [pc, #372]	; (8014eac <etharp_query+0x26c>)
 8014d38:	485a      	ldr	r0, [pc, #360]	; (8014ea4 <etharp_query+0x264>)
 8014d3a:	f002 f86b 	bl	8016e14 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014d3e:	6a3b      	ldr	r3, [r7, #32]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d102      	bne.n	8014d4a <etharp_query+0x10a>
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d10c      	bne.n	8014d64 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014d4a:	68b9      	ldr	r1, [r7, #8]
 8014d4c:	68f8      	ldr	r0, [r7, #12]
 8014d4e:	f000 f963 	bl	8015018 <etharp_request>
 8014d52:	4603      	mov	r3, r0
 8014d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d102      	bne.n	8014d64 <etharp_query+0x124>
      return result;
 8014d5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014d62:	e096      	b.n	8014e92 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d106      	bne.n	8014d78 <etharp_query+0x138>
 8014d6a:	4b4c      	ldr	r3, [pc, #304]	; (8014e9c <etharp_query+0x25c>)
 8014d6c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014d70:	494f      	ldr	r1, [pc, #316]	; (8014eb0 <etharp_query+0x270>)
 8014d72:	484c      	ldr	r0, [pc, #304]	; (8014ea4 <etharp_query+0x264>)
 8014d74:	f002 f84e 	bl	8016e14 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014d78:	7c7a      	ldrb	r2, [r7, #17]
 8014d7a:	494b      	ldr	r1, [pc, #300]	; (8014ea8 <etharp_query+0x268>)
 8014d7c:	4613      	mov	r3, r2
 8014d7e:	005b      	lsls	r3, r3, #1
 8014d80:	4413      	add	r3, r2
 8014d82:	00db      	lsls	r3, r3, #3
 8014d84:	440b      	add	r3, r1
 8014d86:	3314      	adds	r3, #20
 8014d88:	781b      	ldrb	r3, [r3, #0]
 8014d8a:	2b01      	cmp	r3, #1
 8014d8c:	d917      	bls.n	8014dbe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014d8e:	4a49      	ldr	r2, [pc, #292]	; (8014eb4 <etharp_query+0x274>)
 8014d90:	7c7b      	ldrb	r3, [r7, #17]
 8014d92:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014d94:	7c7a      	ldrb	r2, [r7, #17]
 8014d96:	4613      	mov	r3, r2
 8014d98:	005b      	lsls	r3, r3, #1
 8014d9a:	4413      	add	r3, r2
 8014d9c:	00db      	lsls	r3, r3, #3
 8014d9e:	3308      	adds	r3, #8
 8014da0:	4a41      	ldr	r2, [pc, #260]	; (8014ea8 <etharp_query+0x268>)
 8014da2:	4413      	add	r3, r2
 8014da4:	3304      	adds	r3, #4
 8014da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014daa:	9200      	str	r2, [sp, #0]
 8014dac:	697a      	ldr	r2, [r7, #20]
 8014dae:	6879      	ldr	r1, [r7, #4]
 8014db0:	68f8      	ldr	r0, [r7, #12]
 8014db2:	f001 fc95 	bl	80166e0 <ethernet_output>
 8014db6:	4603      	mov	r3, r0
 8014db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014dbc:	e067      	b.n	8014e8e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014dbe:	7c7a      	ldrb	r2, [r7, #17]
 8014dc0:	4939      	ldr	r1, [pc, #228]	; (8014ea8 <etharp_query+0x268>)
 8014dc2:	4613      	mov	r3, r2
 8014dc4:	005b      	lsls	r3, r3, #1
 8014dc6:	4413      	add	r3, r2
 8014dc8:	00db      	lsls	r3, r3, #3
 8014dca:	440b      	add	r3, r1
 8014dcc:	3314      	adds	r3, #20
 8014dce:	781b      	ldrb	r3, [r3, #0]
 8014dd0:	2b01      	cmp	r3, #1
 8014dd2:	d15c      	bne.n	8014e8e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014ddc:	e01c      	b.n	8014e18 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014dde:	69fb      	ldr	r3, [r7, #28]
 8014de0:	895a      	ldrh	r2, [r3, #10]
 8014de2:	69fb      	ldr	r3, [r7, #28]
 8014de4:	891b      	ldrh	r3, [r3, #8]
 8014de6:	429a      	cmp	r2, r3
 8014de8:	d10a      	bne.n	8014e00 <etharp_query+0x1c0>
 8014dea:	69fb      	ldr	r3, [r7, #28]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d006      	beq.n	8014e00 <etharp_query+0x1c0>
 8014df2:	4b2a      	ldr	r3, [pc, #168]	; (8014e9c <etharp_query+0x25c>)
 8014df4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014df8:	492f      	ldr	r1, [pc, #188]	; (8014eb8 <etharp_query+0x278>)
 8014dfa:	482a      	ldr	r0, [pc, #168]	; (8014ea4 <etharp_query+0x264>)
 8014dfc:	f002 f80a 	bl	8016e14 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014e00:	69fb      	ldr	r3, [r7, #28]
 8014e02:	7b1b      	ldrb	r3, [r3, #12]
 8014e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d002      	beq.n	8014e12 <etharp_query+0x1d2>
        copy_needed = 1;
 8014e0c:	2301      	movs	r3, #1
 8014e0e:	61bb      	str	r3, [r7, #24]
        break;
 8014e10:	e005      	b.n	8014e1e <etharp_query+0x1de>
      }
      p = p->next;
 8014e12:	69fb      	ldr	r3, [r7, #28]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014e18:	69fb      	ldr	r3, [r7, #28]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d1df      	bne.n	8014dde <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014e1e:	69bb      	ldr	r3, [r7, #24]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d007      	beq.n	8014e34 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014e24:	687a      	ldr	r2, [r7, #4]
 8014e26:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014e2a:	200e      	movs	r0, #14
 8014e2c:	f7f8 fc8c 	bl	800d748 <pbuf_clone>
 8014e30:	61f8      	str	r0, [r7, #28]
 8014e32:	e004      	b.n	8014e3e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014e38:	69f8      	ldr	r0, [r7, #28]
 8014e3a:	f7f8 fac3 	bl	800d3c4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014e3e:	69fb      	ldr	r3, [r7, #28]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d021      	beq.n	8014e88 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014e44:	7c7a      	ldrb	r2, [r7, #17]
 8014e46:	4918      	ldr	r1, [pc, #96]	; (8014ea8 <etharp_query+0x268>)
 8014e48:	4613      	mov	r3, r2
 8014e4a:	005b      	lsls	r3, r3, #1
 8014e4c:	4413      	add	r3, r2
 8014e4e:	00db      	lsls	r3, r3, #3
 8014e50:	440b      	add	r3, r1
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d00a      	beq.n	8014e6e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014e58:	7c7a      	ldrb	r2, [r7, #17]
 8014e5a:	4913      	ldr	r1, [pc, #76]	; (8014ea8 <etharp_query+0x268>)
 8014e5c:	4613      	mov	r3, r2
 8014e5e:	005b      	lsls	r3, r3, #1
 8014e60:	4413      	add	r3, r2
 8014e62:	00db      	lsls	r3, r3, #3
 8014e64:	440b      	add	r3, r1
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f7f8 fa05 	bl	800d278 <pbuf_free>
      }
      arp_table[i].q = p;
 8014e6e:	7c7a      	ldrb	r2, [r7, #17]
 8014e70:	490d      	ldr	r1, [pc, #52]	; (8014ea8 <etharp_query+0x268>)
 8014e72:	4613      	mov	r3, r2
 8014e74:	005b      	lsls	r3, r3, #1
 8014e76:	4413      	add	r3, r2
 8014e78:	00db      	lsls	r3, r3, #3
 8014e7a:	440b      	add	r3, r1
 8014e7c:	69fa      	ldr	r2, [r7, #28]
 8014e7e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014e80:	2300      	movs	r3, #0
 8014e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e86:	e002      	b.n	8014e8e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014e88:	23ff      	movs	r3, #255	; 0xff
 8014e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014e8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014e92:	4618      	mov	r0, r3
 8014e94:	3728      	adds	r7, #40	; 0x28
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}
 8014e9a:	bf00      	nop
 8014e9c:	0801ab28 	.word	0x0801ab28
 8014ea0:	0801acd4 	.word	0x0801acd4
 8014ea4:	0801aba0 	.word	0x0801aba0
 8014ea8:	24004b24 	.word	0x24004b24
 8014eac:	0801ace4 	.word	0x0801ace4
 8014eb0:	0801acc8 	.word	0x0801acc8
 8014eb4:	24004c14 	.word	0x24004c14
 8014eb8:	0801ad0c 	.word	0x0801ad0c

08014ebc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b08a      	sub	sp, #40	; 0x28
 8014ec0:	af02      	add	r7, sp, #8
 8014ec2:	60f8      	str	r0, [r7, #12]
 8014ec4:	60b9      	str	r1, [r7, #8]
 8014ec6:	607a      	str	r2, [r7, #4]
 8014ec8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d106      	bne.n	8014ee2 <etharp_raw+0x26>
 8014ed4:	4b3a      	ldr	r3, [pc, #232]	; (8014fc0 <etharp_raw+0x104>)
 8014ed6:	f240 4257 	movw	r2, #1111	; 0x457
 8014eda:	493a      	ldr	r1, [pc, #232]	; (8014fc4 <etharp_raw+0x108>)
 8014edc:	483a      	ldr	r0, [pc, #232]	; (8014fc8 <etharp_raw+0x10c>)
 8014ede:	f001 ff99 	bl	8016e14 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014ee2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ee6:	211c      	movs	r1, #28
 8014ee8:	200e      	movs	r0, #14
 8014eea:	f7f7 fee1 	bl	800ccb0 <pbuf_alloc>
 8014eee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014ef0:	69bb      	ldr	r3, [r7, #24]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d102      	bne.n	8014efc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8014efa:	e05d      	b.n	8014fb8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014efc:	69bb      	ldr	r3, [r7, #24]
 8014efe:	895b      	ldrh	r3, [r3, #10]
 8014f00:	2b1b      	cmp	r3, #27
 8014f02:	d806      	bhi.n	8014f12 <etharp_raw+0x56>
 8014f04:	4b2e      	ldr	r3, [pc, #184]	; (8014fc0 <etharp_raw+0x104>)
 8014f06:	f240 4262 	movw	r2, #1122	; 0x462
 8014f0a:	4930      	ldr	r1, [pc, #192]	; (8014fcc <etharp_raw+0x110>)
 8014f0c:	482e      	ldr	r0, [pc, #184]	; (8014fc8 <etharp_raw+0x10c>)
 8014f0e:	f001 ff81 	bl	8016e14 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014f12:	69bb      	ldr	r3, [r7, #24]
 8014f14:	685b      	ldr	r3, [r3, #4]
 8014f16:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014f18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7f6 fd02 	bl	800b924 <lwip_htons>
 8014f20:	4603      	mov	r3, r0
 8014f22:	461a      	mov	r2, r3
 8014f24:	697b      	ldr	r3, [r7, #20]
 8014f26:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014f2e:	2b06      	cmp	r3, #6
 8014f30:	d006      	beq.n	8014f40 <etharp_raw+0x84>
 8014f32:	4b23      	ldr	r3, [pc, #140]	; (8014fc0 <etharp_raw+0x104>)
 8014f34:	f240 4269 	movw	r2, #1129	; 0x469
 8014f38:	4925      	ldr	r1, [pc, #148]	; (8014fd0 <etharp_raw+0x114>)
 8014f3a:	4823      	ldr	r0, [pc, #140]	; (8014fc8 <etharp_raw+0x10c>)
 8014f3c:	f001 ff6a 	bl	8016e14 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014f40:	697b      	ldr	r3, [r7, #20]
 8014f42:	3308      	adds	r3, #8
 8014f44:	2206      	movs	r2, #6
 8014f46:	6839      	ldr	r1, [r7, #0]
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f001 fef2 	bl	8016d32 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	3312      	adds	r3, #18
 8014f52:	2206      	movs	r2, #6
 8014f54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014f56:	4618      	mov	r0, r3
 8014f58:	f001 feeb 	bl	8016d32 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	330e      	adds	r3, #14
 8014f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014f62:	6812      	ldr	r2, [r2, #0]
 8014f64:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014f66:	697b      	ldr	r3, [r7, #20]
 8014f68:	3318      	adds	r3, #24
 8014f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f6c:	6812      	ldr	r2, [r2, #0]
 8014f6e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014f70:	697b      	ldr	r3, [r7, #20]
 8014f72:	2200      	movs	r2, #0
 8014f74:	701a      	strb	r2, [r3, #0]
 8014f76:	2200      	movs	r2, #0
 8014f78:	f042 0201 	orr.w	r2, r2, #1
 8014f7c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014f7e:	697b      	ldr	r3, [r7, #20]
 8014f80:	2200      	movs	r2, #0
 8014f82:	f042 0208 	orr.w	r2, r2, #8
 8014f86:	709a      	strb	r2, [r3, #2]
 8014f88:	2200      	movs	r2, #0
 8014f8a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014f8c:	697b      	ldr	r3, [r7, #20]
 8014f8e:	2206      	movs	r2, #6
 8014f90:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014f92:	697b      	ldr	r3, [r7, #20]
 8014f94:	2204      	movs	r2, #4
 8014f96:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014f98:	f640 0306 	movw	r3, #2054	; 0x806
 8014f9c:	9300      	str	r3, [sp, #0]
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	68ba      	ldr	r2, [r7, #8]
 8014fa2:	69b9      	ldr	r1, [r7, #24]
 8014fa4:	68f8      	ldr	r0, [r7, #12]
 8014fa6:	f001 fb9b 	bl	80166e0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014faa:	69b8      	ldr	r0, [r7, #24]
 8014fac:	f7f8 f964 	bl	800d278 <pbuf_free>
  p = NULL;
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014fb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3720      	adds	r7, #32
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}
 8014fc0:	0801ab28 	.word	0x0801ab28
 8014fc4:	0801ac78 	.word	0x0801ac78
 8014fc8:	0801aba0 	.word	0x0801aba0
 8014fcc:	0801ad28 	.word	0x0801ad28
 8014fd0:	0801ad5c 	.word	0x0801ad5c

08014fd4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b088      	sub	sp, #32
 8014fd8:	af04      	add	r7, sp, #16
 8014fda:	60f8      	str	r0, [r7, #12]
 8014fdc:	60b9      	str	r1, [r7, #8]
 8014fde:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014ff0:	2201      	movs	r2, #1
 8014ff2:	9203      	str	r2, [sp, #12]
 8014ff4:	68ba      	ldr	r2, [r7, #8]
 8014ff6:	9202      	str	r2, [sp, #8]
 8014ff8:	4a06      	ldr	r2, [pc, #24]	; (8015014 <etharp_request_dst+0x40>)
 8014ffa:	9201      	str	r2, [sp, #4]
 8014ffc:	9300      	str	r3, [sp, #0]
 8014ffe:	4603      	mov	r3, r0
 8015000:	687a      	ldr	r2, [r7, #4]
 8015002:	68f8      	ldr	r0, [r7, #12]
 8015004:	f7ff ff5a 	bl	8014ebc <etharp_raw>
 8015008:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801500a:	4618      	mov	r0, r3
 801500c:	3710      	adds	r7, #16
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}
 8015012:	bf00      	nop
 8015014:	0801b34c 	.word	0x0801b34c

08015018 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b082      	sub	sp, #8
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
 8015020:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015022:	4a05      	ldr	r2, [pc, #20]	; (8015038 <etharp_request+0x20>)
 8015024:	6839      	ldr	r1, [r7, #0]
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f7ff ffd4 	bl	8014fd4 <etharp_request_dst>
 801502c:	4603      	mov	r3, r0
}
 801502e:	4618      	mov	r0, r3
 8015030:	3708      	adds	r7, #8
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	0801b344 	.word	0x0801b344

0801503c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b08e      	sub	sp, #56	; 0x38
 8015040:	af04      	add	r7, sp, #16
 8015042:	6078      	str	r0, [r7, #4]
 8015044:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015046:	4b87      	ldr	r3, [pc, #540]	; (8015264 <icmp_input+0x228>)
 8015048:	689b      	ldr	r3, [r3, #8]
 801504a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801504e:	781b      	ldrb	r3, [r3, #0]
 8015050:	f003 030f 	and.w	r3, r3, #15
 8015054:	b2db      	uxtb	r3, r3
 8015056:	009b      	lsls	r3, r3, #2
 8015058:	b2db      	uxtb	r3, r3
 801505a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801505c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801505e:	2b13      	cmp	r3, #19
 8015060:	f240 80e8 	bls.w	8015234 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	895b      	ldrh	r3, [r3, #10]
 8015068:	2b03      	cmp	r3, #3
 801506a:	f240 80e5 	bls.w	8015238 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	685b      	ldr	r3, [r3, #4]
 8015072:	781b      	ldrb	r3, [r3, #0]
 8015074:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015078:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801507c:	2b00      	cmp	r3, #0
 801507e:	f000 80d2 	beq.w	8015226 <icmp_input+0x1ea>
 8015082:	2b08      	cmp	r3, #8
 8015084:	f040 80d2 	bne.w	801522c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015088:	4b77      	ldr	r3, [pc, #476]	; (8015268 <icmp_input+0x22c>)
 801508a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801508c:	4b75      	ldr	r3, [pc, #468]	; (8015264 <icmp_input+0x228>)
 801508e:	695b      	ldr	r3, [r3, #20]
 8015090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015094:	2be0      	cmp	r3, #224	; 0xe0
 8015096:	f000 80d6 	beq.w	8015246 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801509a:	4b72      	ldr	r3, [pc, #456]	; (8015264 <icmp_input+0x228>)
 801509c:	695b      	ldr	r3, [r3, #20]
 801509e:	4a71      	ldr	r2, [pc, #452]	; (8015264 <icmp_input+0x228>)
 80150a0:	6812      	ldr	r2, [r2, #0]
 80150a2:	4611      	mov	r1, r2
 80150a4:	4618      	mov	r0, r3
 80150a6:	f000 fc13 	bl	80158d0 <ip4_addr_isbroadcast_u32>
 80150aa:	4603      	mov	r3, r0
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	f040 80cc 	bne.w	801524a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	891b      	ldrh	r3, [r3, #8]
 80150b6:	2b07      	cmp	r3, #7
 80150b8:	f240 80c0 	bls.w	801523c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80150bc:	6878      	ldr	r0, [r7, #4]
 80150be:	f7f6 fcce 	bl	800ba5e <inet_chksum_pbuf>
 80150c2:	4603      	mov	r3, r0
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d003      	beq.n	80150d0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f7f8 f8d5 	bl	800d278 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80150ce:	e0c5      	b.n	801525c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80150d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80150d2:	330e      	adds	r3, #14
 80150d4:	4619      	mov	r1, r3
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f7f8 f838 	bl	800d14c <pbuf_add_header>
 80150dc:	4603      	mov	r3, r0
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d04b      	beq.n	801517a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	891a      	ldrh	r2, [r3, #8]
 80150e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80150e8:	4413      	add	r3, r2
 80150ea:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	891b      	ldrh	r3, [r3, #8]
 80150f0:	8b7a      	ldrh	r2, [r7, #26]
 80150f2:	429a      	cmp	r2, r3
 80150f4:	f0c0 80ab 	bcc.w	801524e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80150f8:	8b7b      	ldrh	r3, [r7, #26]
 80150fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80150fe:	4619      	mov	r1, r3
 8015100:	200e      	movs	r0, #14
 8015102:	f7f7 fdd5 	bl	800ccb0 <pbuf_alloc>
 8015106:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015108:	697b      	ldr	r3, [r7, #20]
 801510a:	2b00      	cmp	r3, #0
 801510c:	f000 80a1 	beq.w	8015252 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015110:	697b      	ldr	r3, [r7, #20]
 8015112:	895b      	ldrh	r3, [r3, #10]
 8015114:	461a      	mov	r2, r3
 8015116:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015118:	3308      	adds	r3, #8
 801511a:	429a      	cmp	r2, r3
 801511c:	d203      	bcs.n	8015126 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801511e:	6978      	ldr	r0, [r7, #20]
 8015120:	f7f8 f8aa 	bl	800d278 <pbuf_free>
          goto icmperr;
 8015124:	e096      	b.n	8015254 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015126:	697b      	ldr	r3, [r7, #20]
 8015128:	685b      	ldr	r3, [r3, #4]
 801512a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801512c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801512e:	4618      	mov	r0, r3
 8015130:	f001 fdff 	bl	8016d32 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015134:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015136:	4619      	mov	r1, r3
 8015138:	6978      	ldr	r0, [r7, #20]
 801513a:	f7f8 f817 	bl	800d16c <pbuf_remove_header>
 801513e:	4603      	mov	r3, r0
 8015140:	2b00      	cmp	r3, #0
 8015142:	d009      	beq.n	8015158 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015144:	4b49      	ldr	r3, [pc, #292]	; (801526c <icmp_input+0x230>)
 8015146:	22b6      	movs	r2, #182	; 0xb6
 8015148:	4949      	ldr	r1, [pc, #292]	; (8015270 <icmp_input+0x234>)
 801514a:	484a      	ldr	r0, [pc, #296]	; (8015274 <icmp_input+0x238>)
 801514c:	f001 fe62 	bl	8016e14 <iprintf>
          pbuf_free(r);
 8015150:	6978      	ldr	r0, [r7, #20]
 8015152:	f7f8 f891 	bl	800d278 <pbuf_free>
          goto icmperr;
 8015156:	e07d      	b.n	8015254 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015158:	6879      	ldr	r1, [r7, #4]
 801515a:	6978      	ldr	r0, [r7, #20]
 801515c:	f7f8 f9b0 	bl	800d4c0 <pbuf_copy>
 8015160:	4603      	mov	r3, r0
 8015162:	2b00      	cmp	r3, #0
 8015164:	d003      	beq.n	801516e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015166:	6978      	ldr	r0, [r7, #20]
 8015168:	f7f8 f886 	bl	800d278 <pbuf_free>
          goto icmperr;
 801516c:	e072      	b.n	8015254 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801516e:	6878      	ldr	r0, [r7, #4]
 8015170:	f7f8 f882 	bl	800d278 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	607b      	str	r3, [r7, #4]
 8015178:	e00f      	b.n	801519a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801517a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801517c:	330e      	adds	r3, #14
 801517e:	4619      	mov	r1, r3
 8015180:	6878      	ldr	r0, [r7, #4]
 8015182:	f7f7 fff3 	bl	800d16c <pbuf_remove_header>
 8015186:	4603      	mov	r3, r0
 8015188:	2b00      	cmp	r3, #0
 801518a:	d006      	beq.n	801519a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801518c:	4b37      	ldr	r3, [pc, #220]	; (801526c <icmp_input+0x230>)
 801518e:	22c7      	movs	r2, #199	; 0xc7
 8015190:	4939      	ldr	r1, [pc, #228]	; (8015278 <icmp_input+0x23c>)
 8015192:	4838      	ldr	r0, [pc, #224]	; (8015274 <icmp_input+0x238>)
 8015194:	f001 fe3e 	bl	8016e14 <iprintf>
          goto icmperr;
 8015198:	e05c      	b.n	8015254 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	685b      	ldr	r3, [r3, #4]
 801519e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80151a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151a2:	4619      	mov	r1, r3
 80151a4:	6878      	ldr	r0, [r7, #4]
 80151a6:	f7f7 ffd1 	bl	800d14c <pbuf_add_header>
 80151aa:	4603      	mov	r3, r0
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d13c      	bne.n	801522a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	685b      	ldr	r3, [r3, #4]
 80151b4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80151b6:	69fb      	ldr	r3, [r7, #28]
 80151b8:	681a      	ldr	r2, [r3, #0]
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80151be:	4b29      	ldr	r3, [pc, #164]	; (8015264 <icmp_input+0x228>)
 80151c0:	691a      	ldr	r2, [r3, #16]
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80151c6:	693b      	ldr	r3, [r7, #16]
 80151c8:	2200      	movs	r2, #0
 80151ca:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80151cc:	693b      	ldr	r3, [r7, #16]
 80151ce:	885b      	ldrh	r3, [r3, #2]
 80151d0:	b29b      	uxth	r3, r3
 80151d2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80151d6:	4293      	cmp	r3, r2
 80151d8:	d907      	bls.n	80151ea <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80151da:	693b      	ldr	r3, [r7, #16]
 80151dc:	885b      	ldrh	r3, [r3, #2]
 80151de:	b29b      	uxth	r3, r3
 80151e0:	3309      	adds	r3, #9
 80151e2:	b29a      	uxth	r2, r3
 80151e4:	693b      	ldr	r3, [r7, #16]
 80151e6:	805a      	strh	r2, [r3, #2]
 80151e8:	e006      	b.n	80151f8 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80151ea:	693b      	ldr	r3, [r7, #16]
 80151ec:	885b      	ldrh	r3, [r3, #2]
 80151ee:	b29b      	uxth	r3, r3
 80151f0:	3308      	adds	r3, #8
 80151f2:	b29a      	uxth	r2, r3
 80151f4:	693b      	ldr	r3, [r7, #16]
 80151f6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	22ff      	movs	r2, #255	; 0xff
 80151fc:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	2200      	movs	r2, #0
 8015202:	729a      	strb	r2, [r3, #10]
 8015204:	2200      	movs	r2, #0
 8015206:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	9302      	str	r3, [sp, #8]
 801520c:	2301      	movs	r3, #1
 801520e:	9301      	str	r3, [sp, #4]
 8015210:	2300      	movs	r3, #0
 8015212:	9300      	str	r3, [sp, #0]
 8015214:	23ff      	movs	r3, #255	; 0xff
 8015216:	2200      	movs	r2, #0
 8015218:	69f9      	ldr	r1, [r7, #28]
 801521a:	6878      	ldr	r0, [r7, #4]
 801521c:	f000 fa80 	bl	8015720 <ip4_output_if>
 8015220:	4603      	mov	r3, r0
 8015222:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015224:	e001      	b.n	801522a <icmp_input+0x1ee>
      break;
 8015226:	bf00      	nop
 8015228:	e000      	b.n	801522c <icmp_input+0x1f0>
      break;
 801522a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801522c:	6878      	ldr	r0, [r7, #4]
 801522e:	f7f8 f823 	bl	800d278 <pbuf_free>
  return;
 8015232:	e013      	b.n	801525c <icmp_input+0x220>
    goto lenerr;
 8015234:	bf00      	nop
 8015236:	e002      	b.n	801523e <icmp_input+0x202>
    goto lenerr;
 8015238:	bf00      	nop
 801523a:	e000      	b.n	801523e <icmp_input+0x202>
        goto lenerr;
 801523c:	bf00      	nop
lenerr:
  pbuf_free(p);
 801523e:	6878      	ldr	r0, [r7, #4]
 8015240:	f7f8 f81a 	bl	800d278 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015244:	e00a      	b.n	801525c <icmp_input+0x220>
        goto icmperr;
 8015246:	bf00      	nop
 8015248:	e004      	b.n	8015254 <icmp_input+0x218>
        goto icmperr;
 801524a:	bf00      	nop
 801524c:	e002      	b.n	8015254 <icmp_input+0x218>
          goto icmperr;
 801524e:	bf00      	nop
 8015250:	e000      	b.n	8015254 <icmp_input+0x218>
          goto icmperr;
 8015252:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	f7f8 f80f 	bl	800d278 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801525a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801525c:	3728      	adds	r7, #40	; 0x28
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}
 8015262:	bf00      	nop
 8015264:	24004ed8 	.word	0x24004ed8
 8015268:	24004eec 	.word	0x24004eec
 801526c:	0801ada0 	.word	0x0801ada0
 8015270:	0801add8 	.word	0x0801add8
 8015274:	0801ae10 	.word	0x0801ae10
 8015278:	0801ae38 	.word	0x0801ae38

0801527c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b082      	sub	sp, #8
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
 8015284:	460b      	mov	r3, r1
 8015286:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015288:	78fb      	ldrb	r3, [r7, #3]
 801528a:	461a      	mov	r2, r3
 801528c:	2103      	movs	r1, #3
 801528e:	6878      	ldr	r0, [r7, #4]
 8015290:	f000 f814 	bl	80152bc <icmp_send_response>
}
 8015294:	bf00      	nop
 8015296:	3708      	adds	r7, #8
 8015298:	46bd      	mov	sp, r7
 801529a:	bd80      	pop	{r7, pc}

0801529c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b082      	sub	sp, #8
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
 80152a4:	460b      	mov	r3, r1
 80152a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80152a8:	78fb      	ldrb	r3, [r7, #3]
 80152aa:	461a      	mov	r2, r3
 80152ac:	210b      	movs	r1, #11
 80152ae:	6878      	ldr	r0, [r7, #4]
 80152b0:	f000 f804 	bl	80152bc <icmp_send_response>
}
 80152b4:	bf00      	nop
 80152b6:	3708      	adds	r7, #8
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}

080152bc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b08c      	sub	sp, #48	; 0x30
 80152c0:	af04      	add	r7, sp, #16
 80152c2:	6078      	str	r0, [r7, #4]
 80152c4:	460b      	mov	r3, r1
 80152c6:	70fb      	strb	r3, [r7, #3]
 80152c8:	4613      	mov	r3, r2
 80152ca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80152cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80152d0:	2124      	movs	r1, #36	; 0x24
 80152d2:	2022      	movs	r0, #34	; 0x22
 80152d4:	f7f7 fcec 	bl	800ccb0 <pbuf_alloc>
 80152d8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80152da:	69fb      	ldr	r3, [r7, #28]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d056      	beq.n	801538e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80152e0:	69fb      	ldr	r3, [r7, #28]
 80152e2:	895b      	ldrh	r3, [r3, #10]
 80152e4:	2b23      	cmp	r3, #35	; 0x23
 80152e6:	d806      	bhi.n	80152f6 <icmp_send_response+0x3a>
 80152e8:	4b2b      	ldr	r3, [pc, #172]	; (8015398 <icmp_send_response+0xdc>)
 80152ea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80152ee:	492b      	ldr	r1, [pc, #172]	; (801539c <icmp_send_response+0xe0>)
 80152f0:	482b      	ldr	r0, [pc, #172]	; (80153a0 <icmp_send_response+0xe4>)
 80152f2:	f001 fd8f 	bl	8016e14 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	685b      	ldr	r3, [r3, #4]
 80152fa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80152fc:	69fb      	ldr	r3, [r7, #28]
 80152fe:	685b      	ldr	r3, [r3, #4]
 8015300:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	78fa      	ldrb	r2, [r7, #3]
 8015306:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015308:	697b      	ldr	r3, [r7, #20]
 801530a:	78ba      	ldrb	r2, [r7, #2]
 801530c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801530e:	697b      	ldr	r3, [r7, #20]
 8015310:	2200      	movs	r2, #0
 8015312:	711a      	strb	r2, [r3, #4]
 8015314:	2200      	movs	r2, #0
 8015316:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015318:	697b      	ldr	r3, [r7, #20]
 801531a:	2200      	movs	r2, #0
 801531c:	719a      	strb	r2, [r3, #6]
 801531e:	2200      	movs	r2, #0
 8015320:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015322:	69fb      	ldr	r3, [r7, #28]
 8015324:	685b      	ldr	r3, [r3, #4]
 8015326:	f103 0008 	add.w	r0, r3, #8
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	685b      	ldr	r3, [r3, #4]
 801532e:	221c      	movs	r2, #28
 8015330:	4619      	mov	r1, r3
 8015332:	f001 fcfe 	bl	8016d32 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015336:	69bb      	ldr	r3, [r7, #24]
 8015338:	68db      	ldr	r3, [r3, #12]
 801533a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801533c:	f107 030c 	add.w	r3, r7, #12
 8015340:	4618      	mov	r0, r3
 8015342:	f000 f82f 	bl	80153a4 <ip4_route>
 8015346:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015348:	693b      	ldr	r3, [r7, #16]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d01b      	beq.n	8015386 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801534e:	697b      	ldr	r3, [r7, #20]
 8015350:	2200      	movs	r2, #0
 8015352:	709a      	strb	r2, [r3, #2]
 8015354:	2200      	movs	r2, #0
 8015356:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8015358:	69fb      	ldr	r3, [r7, #28]
 801535a:	895b      	ldrh	r3, [r3, #10]
 801535c:	4619      	mov	r1, r3
 801535e:	6978      	ldr	r0, [r7, #20]
 8015360:	f7f6 fb6b 	bl	800ba3a <inet_chksum>
 8015364:	4603      	mov	r3, r0
 8015366:	461a      	mov	r2, r3
 8015368:	697b      	ldr	r3, [r7, #20]
 801536a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801536c:	f107 020c 	add.w	r2, r7, #12
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	9302      	str	r3, [sp, #8]
 8015374:	2301      	movs	r3, #1
 8015376:	9301      	str	r3, [sp, #4]
 8015378:	2300      	movs	r3, #0
 801537a:	9300      	str	r3, [sp, #0]
 801537c:	23ff      	movs	r3, #255	; 0xff
 801537e:	2100      	movs	r1, #0
 8015380:	69f8      	ldr	r0, [r7, #28]
 8015382:	f000 f9cd 	bl	8015720 <ip4_output_if>
  }
  pbuf_free(q);
 8015386:	69f8      	ldr	r0, [r7, #28]
 8015388:	f7f7 ff76 	bl	800d278 <pbuf_free>
 801538c:	e000      	b.n	8015390 <icmp_send_response+0xd4>
    return;
 801538e:	bf00      	nop
}
 8015390:	3720      	adds	r7, #32
 8015392:	46bd      	mov	sp, r7
 8015394:	bd80      	pop	{r7, pc}
 8015396:	bf00      	nop
 8015398:	0801ada0 	.word	0x0801ada0
 801539c:	0801ae6c 	.word	0x0801ae6c
 80153a0:	0801ae10 	.word	0x0801ae10

080153a4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80153a4:	b480      	push	{r7}
 80153a6:	b085      	sub	sp, #20
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80153ac:	4b33      	ldr	r3, [pc, #204]	; (801547c <ip4_route+0xd8>)
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	60fb      	str	r3, [r7, #12]
 80153b2:	e036      	b.n	8015422 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153ba:	f003 0301 	and.w	r3, r3, #1
 80153be:	b2db      	uxtb	r3, r3
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d02b      	beq.n	801541c <ip4_route+0x78>
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153ca:	089b      	lsrs	r3, r3, #2
 80153cc:	f003 0301 	and.w	r3, r3, #1
 80153d0:	b2db      	uxtb	r3, r3
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d022      	beq.n	801541c <ip4_route+0x78>
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	3304      	adds	r3, #4
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d01d      	beq.n	801541c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	681a      	ldr	r2, [r3, #0]
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	3304      	adds	r3, #4
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	405a      	eors	r2, r3
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	3308      	adds	r3, #8
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	4013      	ands	r3, r2
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d101      	bne.n	80153fc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	e038      	b.n	801546e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015402:	f003 0302 	and.w	r3, r3, #2
 8015406:	2b00      	cmp	r3, #0
 8015408:	d108      	bne.n	801541c <ip4_route+0x78>
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	681a      	ldr	r2, [r3, #0]
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	330c      	adds	r3, #12
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	429a      	cmp	r2, r3
 8015416:	d101      	bne.n	801541c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	e028      	b.n	801546e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	60fb      	str	r3, [r7, #12]
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d1c5      	bne.n	80153b4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015428:	4b15      	ldr	r3, [pc, #84]	; (8015480 <ip4_route+0xdc>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d01a      	beq.n	8015466 <ip4_route+0xc2>
 8015430:	4b13      	ldr	r3, [pc, #76]	; (8015480 <ip4_route+0xdc>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015438:	f003 0301 	and.w	r3, r3, #1
 801543c:	2b00      	cmp	r3, #0
 801543e:	d012      	beq.n	8015466 <ip4_route+0xc2>
 8015440:	4b0f      	ldr	r3, [pc, #60]	; (8015480 <ip4_route+0xdc>)
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015448:	f003 0304 	and.w	r3, r3, #4
 801544c:	2b00      	cmp	r3, #0
 801544e:	d00a      	beq.n	8015466 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015450:	4b0b      	ldr	r3, [pc, #44]	; (8015480 <ip4_route+0xdc>)
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	3304      	adds	r3, #4
 8015456:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015458:	2b00      	cmp	r3, #0
 801545a:	d004      	beq.n	8015466 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	b2db      	uxtb	r3, r3
 8015462:	2b7f      	cmp	r3, #127	; 0x7f
 8015464:	d101      	bne.n	801546a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015466:	2300      	movs	r3, #0
 8015468:	e001      	b.n	801546e <ip4_route+0xca>
  }

  return netif_default;
 801546a:	4b05      	ldr	r3, [pc, #20]	; (8015480 <ip4_route+0xdc>)
 801546c:	681b      	ldr	r3, [r3, #0]
}
 801546e:	4618      	mov	r0, r3
 8015470:	3714      	adds	r7, #20
 8015472:	46bd      	mov	sp, r7
 8015474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015478:	4770      	bx	lr
 801547a:	bf00      	nop
 801547c:	24007f88 	.word	0x24007f88
 8015480:	24007f8c 	.word	0x24007f8c

08015484 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b082      	sub	sp, #8
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015492:	f003 0301 	and.w	r3, r3, #1
 8015496:	b2db      	uxtb	r3, r3
 8015498:	2b00      	cmp	r3, #0
 801549a:	d016      	beq.n	80154ca <ip4_input_accept+0x46>
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	3304      	adds	r3, #4
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d011      	beq.n	80154ca <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80154a6:	4b0b      	ldr	r3, [pc, #44]	; (80154d4 <ip4_input_accept+0x50>)
 80154a8:	695a      	ldr	r2, [r3, #20]
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	3304      	adds	r3, #4
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	429a      	cmp	r2, r3
 80154b2:	d008      	beq.n	80154c6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80154b4:	4b07      	ldr	r3, [pc, #28]	; (80154d4 <ip4_input_accept+0x50>)
 80154b6:	695b      	ldr	r3, [r3, #20]
 80154b8:	6879      	ldr	r1, [r7, #4]
 80154ba:	4618      	mov	r0, r3
 80154bc:	f000 fa08 	bl	80158d0 <ip4_addr_isbroadcast_u32>
 80154c0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d001      	beq.n	80154ca <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80154c6:	2301      	movs	r3, #1
 80154c8:	e000      	b.n	80154cc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80154ca:	2300      	movs	r3, #0
}
 80154cc:	4618      	mov	r0, r3
 80154ce:	3708      	adds	r7, #8
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd80      	pop	{r7, pc}
 80154d4:	24004ed8 	.word	0x24004ed8

080154d8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b086      	sub	sp, #24
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
 80154e0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	685b      	ldr	r3, [r3, #4]
 80154e6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80154e8:	697b      	ldr	r3, [r7, #20]
 80154ea:	781b      	ldrb	r3, [r3, #0]
 80154ec:	091b      	lsrs	r3, r3, #4
 80154ee:	b2db      	uxtb	r3, r3
 80154f0:	2b04      	cmp	r3, #4
 80154f2:	d004      	beq.n	80154fe <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80154f4:	6878      	ldr	r0, [r7, #4]
 80154f6:	f7f7 febf 	bl	800d278 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80154fa:	2300      	movs	r3, #0
 80154fc:	e107      	b.n	801570e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80154fe:	697b      	ldr	r3, [r7, #20]
 8015500:	781b      	ldrb	r3, [r3, #0]
 8015502:	f003 030f 	and.w	r3, r3, #15
 8015506:	b2db      	uxtb	r3, r3
 8015508:	009b      	lsls	r3, r3, #2
 801550a:	b2db      	uxtb	r3, r3
 801550c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801550e:	697b      	ldr	r3, [r7, #20]
 8015510:	885b      	ldrh	r3, [r3, #2]
 8015512:	b29b      	uxth	r3, r3
 8015514:	4618      	mov	r0, r3
 8015516:	f7f6 fa05 	bl	800b924 <lwip_htons>
 801551a:	4603      	mov	r3, r0
 801551c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	891b      	ldrh	r3, [r3, #8]
 8015522:	89ba      	ldrh	r2, [r7, #12]
 8015524:	429a      	cmp	r2, r3
 8015526:	d204      	bcs.n	8015532 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015528:	89bb      	ldrh	r3, [r7, #12]
 801552a:	4619      	mov	r1, r3
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	f7f7 fd1d 	bl	800cf6c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	895b      	ldrh	r3, [r3, #10]
 8015536:	89fa      	ldrh	r2, [r7, #14]
 8015538:	429a      	cmp	r2, r3
 801553a:	d807      	bhi.n	801554c <ip4_input+0x74>
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	891b      	ldrh	r3, [r3, #8]
 8015540:	89ba      	ldrh	r2, [r7, #12]
 8015542:	429a      	cmp	r2, r3
 8015544:	d802      	bhi.n	801554c <ip4_input+0x74>
 8015546:	89fb      	ldrh	r3, [r7, #14]
 8015548:	2b13      	cmp	r3, #19
 801554a:	d804      	bhi.n	8015556 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801554c:	6878      	ldr	r0, [r7, #4]
 801554e:	f7f7 fe93 	bl	800d278 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015552:	2300      	movs	r3, #0
 8015554:	e0db      	b.n	801570e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015556:	697b      	ldr	r3, [r7, #20]
 8015558:	691b      	ldr	r3, [r3, #16]
 801555a:	4a6f      	ldr	r2, [pc, #444]	; (8015718 <ip4_input+0x240>)
 801555c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801555e:	697b      	ldr	r3, [r7, #20]
 8015560:	68db      	ldr	r3, [r3, #12]
 8015562:	4a6d      	ldr	r2, [pc, #436]	; (8015718 <ip4_input+0x240>)
 8015564:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015566:	4b6c      	ldr	r3, [pc, #432]	; (8015718 <ip4_input+0x240>)
 8015568:	695b      	ldr	r3, [r3, #20]
 801556a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801556e:	2be0      	cmp	r3, #224	; 0xe0
 8015570:	d112      	bne.n	8015598 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015578:	f003 0301 	and.w	r3, r3, #1
 801557c:	b2db      	uxtb	r3, r3
 801557e:	2b00      	cmp	r3, #0
 8015580:	d007      	beq.n	8015592 <ip4_input+0xba>
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	3304      	adds	r3, #4
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d002      	beq.n	8015592 <ip4_input+0xba>
      netif = inp;
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	613b      	str	r3, [r7, #16]
 8015590:	e02a      	b.n	80155e8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015592:	2300      	movs	r3, #0
 8015594:	613b      	str	r3, [r7, #16]
 8015596:	e027      	b.n	80155e8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015598:	6838      	ldr	r0, [r7, #0]
 801559a:	f7ff ff73 	bl	8015484 <ip4_input_accept>
 801559e:	4603      	mov	r3, r0
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d002      	beq.n	80155aa <ip4_input+0xd2>
      netif = inp;
 80155a4:	683b      	ldr	r3, [r7, #0]
 80155a6:	613b      	str	r3, [r7, #16]
 80155a8:	e01e      	b.n	80155e8 <ip4_input+0x110>
    } else {
      netif = NULL;
 80155aa:	2300      	movs	r3, #0
 80155ac:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80155ae:	4b5a      	ldr	r3, [pc, #360]	; (8015718 <ip4_input+0x240>)
 80155b0:	695b      	ldr	r3, [r3, #20]
 80155b2:	b2db      	uxtb	r3, r3
 80155b4:	2b7f      	cmp	r3, #127	; 0x7f
 80155b6:	d017      	beq.n	80155e8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80155b8:	4b58      	ldr	r3, [pc, #352]	; (801571c <ip4_input+0x244>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	613b      	str	r3, [r7, #16]
 80155be:	e00e      	b.n	80155de <ip4_input+0x106>
          if (netif == inp) {
 80155c0:	693a      	ldr	r2, [r7, #16]
 80155c2:	683b      	ldr	r3, [r7, #0]
 80155c4:	429a      	cmp	r2, r3
 80155c6:	d006      	beq.n	80155d6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80155c8:	6938      	ldr	r0, [r7, #16]
 80155ca:	f7ff ff5b 	bl	8015484 <ip4_input_accept>
 80155ce:	4603      	mov	r3, r0
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d108      	bne.n	80155e6 <ip4_input+0x10e>
 80155d4:	e000      	b.n	80155d8 <ip4_input+0x100>
            continue;
 80155d6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80155d8:	693b      	ldr	r3, [r7, #16]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	613b      	str	r3, [r7, #16]
 80155de:	693b      	ldr	r3, [r7, #16]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d1ed      	bne.n	80155c0 <ip4_input+0xe8>
 80155e4:	e000      	b.n	80155e8 <ip4_input+0x110>
            break;
 80155e6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80155e8:	4b4b      	ldr	r3, [pc, #300]	; (8015718 <ip4_input+0x240>)
 80155ea:	691b      	ldr	r3, [r3, #16]
 80155ec:	6839      	ldr	r1, [r7, #0]
 80155ee:	4618      	mov	r0, r3
 80155f0:	f000 f96e 	bl	80158d0 <ip4_addr_isbroadcast_u32>
 80155f4:	4603      	mov	r3, r0
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d105      	bne.n	8015606 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80155fa:	4b47      	ldr	r3, [pc, #284]	; (8015718 <ip4_input+0x240>)
 80155fc:	691b      	ldr	r3, [r3, #16]
 80155fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015602:	2be0      	cmp	r3, #224	; 0xe0
 8015604:	d104      	bne.n	8015610 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015606:	6878      	ldr	r0, [r7, #4]
 8015608:	f7f7 fe36 	bl	800d278 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801560c:	2300      	movs	r3, #0
 801560e:	e07e      	b.n	801570e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015610:	693b      	ldr	r3, [r7, #16]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d104      	bne.n	8015620 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015616:	6878      	ldr	r0, [r7, #4]
 8015618:	f7f7 fe2e 	bl	800d278 <pbuf_free>
    return ERR_OK;
 801561c:	2300      	movs	r3, #0
 801561e:	e076      	b.n	801570e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015620:	697b      	ldr	r3, [r7, #20]
 8015622:	88db      	ldrh	r3, [r3, #6]
 8015624:	b29b      	uxth	r3, r3
 8015626:	461a      	mov	r2, r3
 8015628:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801562c:	4013      	ands	r3, r2
 801562e:	2b00      	cmp	r3, #0
 8015630:	d00b      	beq.n	801564a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015632:	6878      	ldr	r0, [r7, #4]
 8015634:	f000 fc92 	bl	8015f5c <ip4_reass>
 8015638:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	2b00      	cmp	r3, #0
 801563e:	d101      	bne.n	8015644 <ip4_input+0x16c>
      return ERR_OK;
 8015640:	2300      	movs	r3, #0
 8015642:	e064      	b.n	801570e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	685b      	ldr	r3, [r3, #4]
 8015648:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801564a:	4a33      	ldr	r2, [pc, #204]	; (8015718 <ip4_input+0x240>)
 801564c:	693b      	ldr	r3, [r7, #16]
 801564e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015650:	4a31      	ldr	r2, [pc, #196]	; (8015718 <ip4_input+0x240>)
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015656:	4a30      	ldr	r2, [pc, #192]	; (8015718 <ip4_input+0x240>)
 8015658:	697b      	ldr	r3, [r7, #20]
 801565a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801565c:	697b      	ldr	r3, [r7, #20]
 801565e:	781b      	ldrb	r3, [r3, #0]
 8015660:	f003 030f 	and.w	r3, r3, #15
 8015664:	b2db      	uxtb	r3, r3
 8015666:	009b      	lsls	r3, r3, #2
 8015668:	b2db      	uxtb	r3, r3
 801566a:	b29a      	uxth	r2, r3
 801566c:	4b2a      	ldr	r3, [pc, #168]	; (8015718 <ip4_input+0x240>)
 801566e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015670:	89fb      	ldrh	r3, [r7, #14]
 8015672:	4619      	mov	r1, r3
 8015674:	6878      	ldr	r0, [r7, #4]
 8015676:	f7f7 fd79 	bl	800d16c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801567a:	697b      	ldr	r3, [r7, #20]
 801567c:	7a5b      	ldrb	r3, [r3, #9]
 801567e:	2b11      	cmp	r3, #17
 8015680:	d006      	beq.n	8015690 <ip4_input+0x1b8>
 8015682:	2b11      	cmp	r3, #17
 8015684:	dc13      	bgt.n	80156ae <ip4_input+0x1d6>
 8015686:	2b01      	cmp	r3, #1
 8015688:	d00c      	beq.n	80156a4 <ip4_input+0x1cc>
 801568a:	2b06      	cmp	r3, #6
 801568c:	d005      	beq.n	801569a <ip4_input+0x1c2>
 801568e:	e00e      	b.n	80156ae <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015690:	6839      	ldr	r1, [r7, #0]
 8015692:	6878      	ldr	r0, [r7, #4]
 8015694:	f7fe fb34 	bl	8013d00 <udp_input>
        break;
 8015698:	e026      	b.n	80156e8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801569a:	6839      	ldr	r1, [r7, #0]
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	f7f9 fef1 	bl	800f484 <tcp_input>
        break;
 80156a2:	e021      	b.n	80156e8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80156a4:	6839      	ldr	r1, [r7, #0]
 80156a6:	6878      	ldr	r0, [r7, #4]
 80156a8:	f7ff fcc8 	bl	801503c <icmp_input>
        break;
 80156ac:	e01c      	b.n	80156e8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80156ae:	4b1a      	ldr	r3, [pc, #104]	; (8015718 <ip4_input+0x240>)
 80156b0:	695b      	ldr	r3, [r3, #20]
 80156b2:	6939      	ldr	r1, [r7, #16]
 80156b4:	4618      	mov	r0, r3
 80156b6:	f000 f90b 	bl	80158d0 <ip4_addr_isbroadcast_u32>
 80156ba:	4603      	mov	r3, r0
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d10f      	bne.n	80156e0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80156c0:	4b15      	ldr	r3, [pc, #84]	; (8015718 <ip4_input+0x240>)
 80156c2:	695b      	ldr	r3, [r3, #20]
 80156c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80156c8:	2be0      	cmp	r3, #224	; 0xe0
 80156ca:	d009      	beq.n	80156e0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80156cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80156d0:	4619      	mov	r1, r3
 80156d2:	6878      	ldr	r0, [r7, #4]
 80156d4:	f7f7 fdbd 	bl	800d252 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80156d8:	2102      	movs	r1, #2
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f7ff fdce 	bl	801527c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80156e0:	6878      	ldr	r0, [r7, #4]
 80156e2:	f7f7 fdc9 	bl	800d278 <pbuf_free>
        break;
 80156e6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80156e8:	4b0b      	ldr	r3, [pc, #44]	; (8015718 <ip4_input+0x240>)
 80156ea:	2200      	movs	r2, #0
 80156ec:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80156ee:	4b0a      	ldr	r3, [pc, #40]	; (8015718 <ip4_input+0x240>)
 80156f0:	2200      	movs	r2, #0
 80156f2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80156f4:	4b08      	ldr	r3, [pc, #32]	; (8015718 <ip4_input+0x240>)
 80156f6:	2200      	movs	r2, #0
 80156f8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80156fa:	4b07      	ldr	r3, [pc, #28]	; (8015718 <ip4_input+0x240>)
 80156fc:	2200      	movs	r2, #0
 80156fe:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015700:	4b05      	ldr	r3, [pc, #20]	; (8015718 <ip4_input+0x240>)
 8015702:	2200      	movs	r2, #0
 8015704:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015706:	4b04      	ldr	r3, [pc, #16]	; (8015718 <ip4_input+0x240>)
 8015708:	2200      	movs	r2, #0
 801570a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801570c:	2300      	movs	r3, #0
}
 801570e:	4618      	mov	r0, r3
 8015710:	3718      	adds	r7, #24
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}
 8015716:	bf00      	nop
 8015718:	24004ed8 	.word	0x24004ed8
 801571c:	24007f88 	.word	0x24007f88

08015720 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b08a      	sub	sp, #40	; 0x28
 8015724:	af04      	add	r7, sp, #16
 8015726:	60f8      	str	r0, [r7, #12]
 8015728:	60b9      	str	r1, [r7, #8]
 801572a:	607a      	str	r2, [r7, #4]
 801572c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801572e:	68bb      	ldr	r3, [r7, #8]
 8015730:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d009      	beq.n	801574c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015738:	68bb      	ldr	r3, [r7, #8]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d003      	beq.n	8015746 <ip4_output_if+0x26>
 801573e:	68bb      	ldr	r3, [r7, #8]
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d102      	bne.n	801574c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015748:	3304      	adds	r3, #4
 801574a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801574c:	78fa      	ldrb	r2, [r7, #3]
 801574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015750:	9302      	str	r3, [sp, #8]
 8015752:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015756:	9301      	str	r3, [sp, #4]
 8015758:	f897 3020 	ldrb.w	r3, [r7, #32]
 801575c:	9300      	str	r3, [sp, #0]
 801575e:	4613      	mov	r3, r2
 8015760:	687a      	ldr	r2, [r7, #4]
 8015762:	6979      	ldr	r1, [r7, #20]
 8015764:	68f8      	ldr	r0, [r7, #12]
 8015766:	f000 f805 	bl	8015774 <ip4_output_if_src>
 801576a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801576c:	4618      	mov	r0, r3
 801576e:	3718      	adds	r7, #24
 8015770:	46bd      	mov	sp, r7
 8015772:	bd80      	pop	{r7, pc}

08015774 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b088      	sub	sp, #32
 8015778:	af00      	add	r7, sp, #0
 801577a:	60f8      	str	r0, [r7, #12]
 801577c:	60b9      	str	r1, [r7, #8]
 801577e:	607a      	str	r2, [r7, #4]
 8015780:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	7b9b      	ldrb	r3, [r3, #14]
 8015786:	2b01      	cmp	r3, #1
 8015788:	d006      	beq.n	8015798 <ip4_output_if_src+0x24>
 801578a:	4b4b      	ldr	r3, [pc, #300]	; (80158b8 <ip4_output_if_src+0x144>)
 801578c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015790:	494a      	ldr	r1, [pc, #296]	; (80158bc <ip4_output_if_src+0x148>)
 8015792:	484b      	ldr	r0, [pc, #300]	; (80158c0 <ip4_output_if_src+0x14c>)
 8015794:	f001 fb3e 	bl	8016e14 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d060      	beq.n	8015860 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801579e:	2314      	movs	r3, #20
 80157a0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80157a2:	2114      	movs	r1, #20
 80157a4:	68f8      	ldr	r0, [r7, #12]
 80157a6:	f7f7 fcd1 	bl	800d14c <pbuf_add_header>
 80157aa:	4603      	mov	r3, r0
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d002      	beq.n	80157b6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80157b0:	f06f 0301 	mvn.w	r3, #1
 80157b4:	e07c      	b.n	80158b0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	685b      	ldr	r3, [r3, #4]
 80157ba:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	895b      	ldrh	r3, [r3, #10]
 80157c0:	2b13      	cmp	r3, #19
 80157c2:	d806      	bhi.n	80157d2 <ip4_output_if_src+0x5e>
 80157c4:	4b3c      	ldr	r3, [pc, #240]	; (80158b8 <ip4_output_if_src+0x144>)
 80157c6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80157ca:	493e      	ldr	r1, [pc, #248]	; (80158c4 <ip4_output_if_src+0x150>)
 80157cc:	483c      	ldr	r0, [pc, #240]	; (80158c0 <ip4_output_if_src+0x14c>)
 80157ce:	f001 fb21 	bl	8016e14 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80157d2:	69fb      	ldr	r3, [r7, #28]
 80157d4:	78fa      	ldrb	r2, [r7, #3]
 80157d6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80157d8:	69fb      	ldr	r3, [r7, #28]
 80157da:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80157de:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	681a      	ldr	r2, [r3, #0]
 80157e4:	69fb      	ldr	r3, [r7, #28]
 80157e6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80157e8:	8b7b      	ldrh	r3, [r7, #26]
 80157ea:	089b      	lsrs	r3, r3, #2
 80157ec:	b29b      	uxth	r3, r3
 80157ee:	b2db      	uxtb	r3, r3
 80157f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157f4:	b2da      	uxtb	r2, r3
 80157f6:	69fb      	ldr	r3, [r7, #28]
 80157f8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80157fa:	69fb      	ldr	r3, [r7, #28]
 80157fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015800:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	891b      	ldrh	r3, [r3, #8]
 8015806:	4618      	mov	r0, r3
 8015808:	f7f6 f88c 	bl	800b924 <lwip_htons>
 801580c:	4603      	mov	r3, r0
 801580e:	461a      	mov	r2, r3
 8015810:	69fb      	ldr	r3, [r7, #28]
 8015812:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015814:	69fb      	ldr	r3, [r7, #28]
 8015816:	2200      	movs	r2, #0
 8015818:	719a      	strb	r2, [r3, #6]
 801581a:	2200      	movs	r2, #0
 801581c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801581e:	4b2a      	ldr	r3, [pc, #168]	; (80158c8 <ip4_output_if_src+0x154>)
 8015820:	881b      	ldrh	r3, [r3, #0]
 8015822:	4618      	mov	r0, r3
 8015824:	f7f6 f87e 	bl	800b924 <lwip_htons>
 8015828:	4603      	mov	r3, r0
 801582a:	461a      	mov	r2, r3
 801582c:	69fb      	ldr	r3, [r7, #28]
 801582e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015830:	4b25      	ldr	r3, [pc, #148]	; (80158c8 <ip4_output_if_src+0x154>)
 8015832:	881b      	ldrh	r3, [r3, #0]
 8015834:	3301      	adds	r3, #1
 8015836:	b29a      	uxth	r2, r3
 8015838:	4b23      	ldr	r3, [pc, #140]	; (80158c8 <ip4_output_if_src+0x154>)
 801583a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801583c:	68bb      	ldr	r3, [r7, #8]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d104      	bne.n	801584c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015842:	4b22      	ldr	r3, [pc, #136]	; (80158cc <ip4_output_if_src+0x158>)
 8015844:	681a      	ldr	r2, [r3, #0]
 8015846:	69fb      	ldr	r3, [r7, #28]
 8015848:	60da      	str	r2, [r3, #12]
 801584a:	e003      	b.n	8015854 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801584c:	68bb      	ldr	r3, [r7, #8]
 801584e:	681a      	ldr	r2, [r3, #0]
 8015850:	69fb      	ldr	r3, [r7, #28]
 8015852:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015854:	69fb      	ldr	r3, [r7, #28]
 8015856:	2200      	movs	r2, #0
 8015858:	729a      	strb	r2, [r3, #10]
 801585a:	2200      	movs	r2, #0
 801585c:	72da      	strb	r2, [r3, #11]
 801585e:	e00f      	b.n	8015880 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	895b      	ldrh	r3, [r3, #10]
 8015864:	2b13      	cmp	r3, #19
 8015866:	d802      	bhi.n	801586e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015868:	f06f 0301 	mvn.w	r3, #1
 801586c:	e020      	b.n	80158b0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	685b      	ldr	r3, [r3, #4]
 8015872:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015874:	69fb      	ldr	r3, [r7, #28]
 8015876:	691b      	ldr	r3, [r3, #16]
 8015878:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801587a:	f107 0314 	add.w	r3, r7, #20
 801587e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015882:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015884:	2b00      	cmp	r3, #0
 8015886:	d00c      	beq.n	80158a2 <ip4_output_if_src+0x12e>
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	891a      	ldrh	r2, [r3, #8]
 801588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801588e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015890:	429a      	cmp	r2, r3
 8015892:	d906      	bls.n	80158a2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015894:	687a      	ldr	r2, [r7, #4]
 8015896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015898:	68f8      	ldr	r0, [r7, #12]
 801589a:	f000 fd4d 	bl	8016338 <ip4_frag>
 801589e:	4603      	mov	r3, r0
 80158a0:	e006      	b.n	80158b0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80158a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a4:	695b      	ldr	r3, [r3, #20]
 80158a6:	687a      	ldr	r2, [r7, #4]
 80158a8:	68f9      	ldr	r1, [r7, #12]
 80158aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80158ac:	4798      	blx	r3
 80158ae:	4603      	mov	r3, r0
}
 80158b0:	4618      	mov	r0, r3
 80158b2:	3720      	adds	r7, #32
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}
 80158b8:	0801ae98 	.word	0x0801ae98
 80158bc:	0801aecc 	.word	0x0801aecc
 80158c0:	0801aed8 	.word	0x0801aed8
 80158c4:	0801af00 	.word	0x0801af00
 80158c8:	24004c16 	.word	0x24004c16
 80158cc:	0801b340 	.word	0x0801b340

080158d0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80158d0:	b480      	push	{r7}
 80158d2:	b085      	sub	sp, #20
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
 80158d8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158e4:	d002      	beq.n	80158ec <ip4_addr_isbroadcast_u32+0x1c>
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d101      	bne.n	80158f0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80158ec:	2301      	movs	r3, #1
 80158ee:	e02a      	b.n	8015946 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80158f0:	683b      	ldr	r3, [r7, #0]
 80158f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80158f6:	f003 0302 	and.w	r3, r3, #2
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d101      	bne.n	8015902 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80158fe:	2300      	movs	r3, #0
 8015900:	e021      	b.n	8015946 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015902:	683b      	ldr	r3, [r7, #0]
 8015904:	3304      	adds	r3, #4
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	687a      	ldr	r2, [r7, #4]
 801590a:	429a      	cmp	r2, r3
 801590c:	d101      	bne.n	8015912 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801590e:	2300      	movs	r3, #0
 8015910:	e019      	b.n	8015946 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015912:	68fa      	ldr	r2, [r7, #12]
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	3304      	adds	r3, #4
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	405a      	eors	r2, r3
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	3308      	adds	r3, #8
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	4013      	ands	r3, r2
 8015924:	2b00      	cmp	r3, #0
 8015926:	d10d      	bne.n	8015944 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015928:	683b      	ldr	r3, [r7, #0]
 801592a:	3308      	adds	r3, #8
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	43da      	mvns	r2, r3
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015934:	683b      	ldr	r3, [r7, #0]
 8015936:	3308      	adds	r3, #8
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801593c:	429a      	cmp	r2, r3
 801593e:	d101      	bne.n	8015944 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015940:	2301      	movs	r3, #1
 8015942:	e000      	b.n	8015946 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015944:	2300      	movs	r3, #0
  }
}
 8015946:	4618      	mov	r0, r3
 8015948:	3714      	adds	r7, #20
 801594a:	46bd      	mov	sp, r7
 801594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015950:	4770      	bx	lr
	...

08015954 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015954:	b580      	push	{r7, lr}
 8015956:	b084      	sub	sp, #16
 8015958:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801595a:	2300      	movs	r3, #0
 801595c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801595e:	4b12      	ldr	r3, [pc, #72]	; (80159a8 <ip_reass_tmr+0x54>)
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015964:	e018      	b.n	8015998 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	7fdb      	ldrb	r3, [r3, #31]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d00b      	beq.n	8015986 <ip_reass_tmr+0x32>
      r->timer--;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	7fdb      	ldrb	r3, [r3, #31]
 8015972:	3b01      	subs	r3, #1
 8015974:	b2da      	uxtb	r2, r3
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	60fb      	str	r3, [r7, #12]
 8015984:	e008      	b.n	8015998 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015990:	68b9      	ldr	r1, [r7, #8]
 8015992:	6878      	ldr	r0, [r7, #4]
 8015994:	f000 f80a 	bl	80159ac <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d1e3      	bne.n	8015966 <ip_reass_tmr+0x12>
    }
  }
}
 801599e:	bf00      	nop
 80159a0:	bf00      	nop
 80159a2:	3710      	adds	r7, #16
 80159a4:	46bd      	mov	sp, r7
 80159a6:	bd80      	pop	{r7, pc}
 80159a8:	24004c18 	.word	0x24004c18

080159ac <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b088      	sub	sp, #32
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
 80159b4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80159b6:	2300      	movs	r3, #0
 80159b8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80159ba:	683a      	ldr	r2, [r7, #0]
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	429a      	cmp	r2, r3
 80159c0:	d105      	bne.n	80159ce <ip_reass_free_complete_datagram+0x22>
 80159c2:	4b45      	ldr	r3, [pc, #276]	; (8015ad8 <ip_reass_free_complete_datagram+0x12c>)
 80159c4:	22ab      	movs	r2, #171	; 0xab
 80159c6:	4945      	ldr	r1, [pc, #276]	; (8015adc <ip_reass_free_complete_datagram+0x130>)
 80159c8:	4845      	ldr	r0, [pc, #276]	; (8015ae0 <ip_reass_free_complete_datagram+0x134>)
 80159ca:	f001 fa23 	bl	8016e14 <iprintf>
  if (prev != NULL) {
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d00a      	beq.n	80159ea <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80159d4:	683b      	ldr	r3, [r7, #0]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	687a      	ldr	r2, [r7, #4]
 80159da:	429a      	cmp	r2, r3
 80159dc:	d005      	beq.n	80159ea <ip_reass_free_complete_datagram+0x3e>
 80159de:	4b3e      	ldr	r3, [pc, #248]	; (8015ad8 <ip_reass_free_complete_datagram+0x12c>)
 80159e0:	22ad      	movs	r2, #173	; 0xad
 80159e2:	4940      	ldr	r1, [pc, #256]	; (8015ae4 <ip_reass_free_complete_datagram+0x138>)
 80159e4:	483e      	ldr	r0, [pc, #248]	; (8015ae0 <ip_reass_free_complete_datagram+0x134>)
 80159e6:	f001 fa15 	bl	8016e14 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	685b      	ldr	r3, [r3, #4]
 80159ee:	685b      	ldr	r3, [r3, #4]
 80159f0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80159f2:	697b      	ldr	r3, [r7, #20]
 80159f4:	889b      	ldrh	r3, [r3, #4]
 80159f6:	b29b      	uxth	r3, r3
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d12a      	bne.n	8015a52 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	685b      	ldr	r3, [r3, #4]
 8015a00:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015a02:	697b      	ldr	r3, [r7, #20]
 8015a04:	681a      	ldr	r2, [r3, #0]
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015a0a:	69bb      	ldr	r3, [r7, #24]
 8015a0c:	6858      	ldr	r0, [r3, #4]
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	3308      	adds	r3, #8
 8015a12:	2214      	movs	r2, #20
 8015a14:	4619      	mov	r1, r3
 8015a16:	f001 f98c 	bl	8016d32 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015a1a:	2101      	movs	r1, #1
 8015a1c:	69b8      	ldr	r0, [r7, #24]
 8015a1e:	f7ff fc3d 	bl	801529c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015a22:	69b8      	ldr	r0, [r7, #24]
 8015a24:	f7f7 fcb6 	bl	800d394 <pbuf_clen>
 8015a28:	4603      	mov	r3, r0
 8015a2a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015a2c:	8bfa      	ldrh	r2, [r7, #30]
 8015a2e:	8a7b      	ldrh	r3, [r7, #18]
 8015a30:	4413      	add	r3, r2
 8015a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a36:	db05      	blt.n	8015a44 <ip_reass_free_complete_datagram+0x98>
 8015a38:	4b27      	ldr	r3, [pc, #156]	; (8015ad8 <ip_reass_free_complete_datagram+0x12c>)
 8015a3a:	22bc      	movs	r2, #188	; 0xbc
 8015a3c:	492a      	ldr	r1, [pc, #168]	; (8015ae8 <ip_reass_free_complete_datagram+0x13c>)
 8015a3e:	4828      	ldr	r0, [pc, #160]	; (8015ae0 <ip_reass_free_complete_datagram+0x134>)
 8015a40:	f001 f9e8 	bl	8016e14 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015a44:	8bfa      	ldrh	r2, [r7, #30]
 8015a46:	8a7b      	ldrh	r3, [r7, #18]
 8015a48:	4413      	add	r3, r2
 8015a4a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015a4c:	69b8      	ldr	r0, [r7, #24]
 8015a4e:	f7f7 fc13 	bl	800d278 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	685b      	ldr	r3, [r3, #4]
 8015a56:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015a58:	e01f      	b.n	8015a9a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015a5a:	69bb      	ldr	r3, [r7, #24]
 8015a5c:	685b      	ldr	r3, [r3, #4]
 8015a5e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015a60:	69bb      	ldr	r3, [r7, #24]
 8015a62:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015a64:	697b      	ldr	r3, [r7, #20]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015a6a:	68f8      	ldr	r0, [r7, #12]
 8015a6c:	f7f7 fc92 	bl	800d394 <pbuf_clen>
 8015a70:	4603      	mov	r3, r0
 8015a72:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015a74:	8bfa      	ldrh	r2, [r7, #30]
 8015a76:	8a7b      	ldrh	r3, [r7, #18]
 8015a78:	4413      	add	r3, r2
 8015a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a7e:	db05      	blt.n	8015a8c <ip_reass_free_complete_datagram+0xe0>
 8015a80:	4b15      	ldr	r3, [pc, #84]	; (8015ad8 <ip_reass_free_complete_datagram+0x12c>)
 8015a82:	22cc      	movs	r2, #204	; 0xcc
 8015a84:	4918      	ldr	r1, [pc, #96]	; (8015ae8 <ip_reass_free_complete_datagram+0x13c>)
 8015a86:	4816      	ldr	r0, [pc, #88]	; (8015ae0 <ip_reass_free_complete_datagram+0x134>)
 8015a88:	f001 f9c4 	bl	8016e14 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015a8c:	8bfa      	ldrh	r2, [r7, #30]
 8015a8e:	8a7b      	ldrh	r3, [r7, #18]
 8015a90:	4413      	add	r3, r2
 8015a92:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015a94:	68f8      	ldr	r0, [r7, #12]
 8015a96:	f7f7 fbef 	bl	800d278 <pbuf_free>
  while (p != NULL) {
 8015a9a:	69bb      	ldr	r3, [r7, #24]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d1dc      	bne.n	8015a5a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015aa0:	6839      	ldr	r1, [r7, #0]
 8015aa2:	6878      	ldr	r0, [r7, #4]
 8015aa4:	f000 f8c2 	bl	8015c2c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015aa8:	4b10      	ldr	r3, [pc, #64]	; (8015aec <ip_reass_free_complete_datagram+0x140>)
 8015aaa:	881b      	ldrh	r3, [r3, #0]
 8015aac:	8bfa      	ldrh	r2, [r7, #30]
 8015aae:	429a      	cmp	r2, r3
 8015ab0:	d905      	bls.n	8015abe <ip_reass_free_complete_datagram+0x112>
 8015ab2:	4b09      	ldr	r3, [pc, #36]	; (8015ad8 <ip_reass_free_complete_datagram+0x12c>)
 8015ab4:	22d2      	movs	r2, #210	; 0xd2
 8015ab6:	490e      	ldr	r1, [pc, #56]	; (8015af0 <ip_reass_free_complete_datagram+0x144>)
 8015ab8:	4809      	ldr	r0, [pc, #36]	; (8015ae0 <ip_reass_free_complete_datagram+0x134>)
 8015aba:	f001 f9ab 	bl	8016e14 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015abe:	4b0b      	ldr	r3, [pc, #44]	; (8015aec <ip_reass_free_complete_datagram+0x140>)
 8015ac0:	881a      	ldrh	r2, [r3, #0]
 8015ac2:	8bfb      	ldrh	r3, [r7, #30]
 8015ac4:	1ad3      	subs	r3, r2, r3
 8015ac6:	b29a      	uxth	r2, r3
 8015ac8:	4b08      	ldr	r3, [pc, #32]	; (8015aec <ip_reass_free_complete_datagram+0x140>)
 8015aca:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015acc:	8bfb      	ldrh	r3, [r7, #30]
}
 8015ace:	4618      	mov	r0, r3
 8015ad0:	3720      	adds	r7, #32
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}
 8015ad6:	bf00      	nop
 8015ad8:	0801af30 	.word	0x0801af30
 8015adc:	0801af6c 	.word	0x0801af6c
 8015ae0:	0801af78 	.word	0x0801af78
 8015ae4:	0801afa0 	.word	0x0801afa0
 8015ae8:	0801afb4 	.word	0x0801afb4
 8015aec:	24004c1c 	.word	0x24004c1c
 8015af0:	0801afd4 	.word	0x0801afd4

08015af4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b08a      	sub	sp, #40	; 0x28
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
 8015afc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015afe:	2300      	movs	r3, #0
 8015b00:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015b02:	2300      	movs	r3, #0
 8015b04:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015b06:	2300      	movs	r3, #0
 8015b08:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015b0e:	2300      	movs	r3, #0
 8015b10:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015b12:	4b28      	ldr	r3, [pc, #160]	; (8015bb4 <ip_reass_remove_oldest_datagram+0xc0>)
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015b18:	e030      	b.n	8015b7c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b1c:	695a      	ldr	r2, [r3, #20]
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	68db      	ldr	r3, [r3, #12]
 8015b22:	429a      	cmp	r2, r3
 8015b24:	d10c      	bne.n	8015b40 <ip_reass_remove_oldest_datagram+0x4c>
 8015b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b28:	699a      	ldr	r2, [r3, #24]
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	691b      	ldr	r3, [r3, #16]
 8015b2e:	429a      	cmp	r2, r3
 8015b30:	d106      	bne.n	8015b40 <ip_reass_remove_oldest_datagram+0x4c>
 8015b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b34:	899a      	ldrh	r2, [r3, #12]
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	889b      	ldrh	r3, [r3, #4]
 8015b3a:	b29b      	uxth	r3, r3
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	d014      	beq.n	8015b6a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015b40:	693b      	ldr	r3, [r7, #16]
 8015b42:	3301      	adds	r3, #1
 8015b44:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015b46:	6a3b      	ldr	r3, [r7, #32]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d104      	bne.n	8015b56 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b4e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015b50:	69fb      	ldr	r3, [r7, #28]
 8015b52:	61bb      	str	r3, [r7, #24]
 8015b54:	e009      	b.n	8015b6a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b58:	7fda      	ldrb	r2, [r3, #31]
 8015b5a:	6a3b      	ldr	r3, [r7, #32]
 8015b5c:	7fdb      	ldrb	r3, [r3, #31]
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	d803      	bhi.n	8015b6a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b64:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015b66:	69fb      	ldr	r3, [r7, #28]
 8015b68:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d001      	beq.n	8015b76 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b74:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d1cb      	bne.n	8015b1a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015b82:	6a3b      	ldr	r3, [r7, #32]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d008      	beq.n	8015b9a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015b88:	69b9      	ldr	r1, [r7, #24]
 8015b8a:	6a38      	ldr	r0, [r7, #32]
 8015b8c:	f7ff ff0e 	bl	80159ac <ip_reass_free_complete_datagram>
 8015b90:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015b92:	697a      	ldr	r2, [r7, #20]
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	4413      	add	r3, r2
 8015b98:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015b9a:	697a      	ldr	r2, [r7, #20]
 8015b9c:	683b      	ldr	r3, [r7, #0]
 8015b9e:	429a      	cmp	r2, r3
 8015ba0:	da02      	bge.n	8015ba8 <ip_reass_remove_oldest_datagram+0xb4>
 8015ba2:	693b      	ldr	r3, [r7, #16]
 8015ba4:	2b01      	cmp	r3, #1
 8015ba6:	dcac      	bgt.n	8015b02 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015ba8:	697b      	ldr	r3, [r7, #20]
}
 8015baa:	4618      	mov	r0, r3
 8015bac:	3728      	adds	r7, #40	; 0x28
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	bd80      	pop	{r7, pc}
 8015bb2:	bf00      	nop
 8015bb4:	24004c18 	.word	0x24004c18

08015bb8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b084      	sub	sp, #16
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
 8015bc0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015bc2:	2004      	movs	r0, #4
 8015bc4:	f7f6 fc3e 	bl	800c444 <memp_malloc>
 8015bc8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d110      	bne.n	8015bf2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015bd0:	6839      	ldr	r1, [r7, #0]
 8015bd2:	6878      	ldr	r0, [r7, #4]
 8015bd4:	f7ff ff8e 	bl	8015af4 <ip_reass_remove_oldest_datagram>
 8015bd8:	4602      	mov	r2, r0
 8015bda:	683b      	ldr	r3, [r7, #0]
 8015bdc:	4293      	cmp	r3, r2
 8015bde:	dc03      	bgt.n	8015be8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015be0:	2004      	movs	r0, #4
 8015be2:	f7f6 fc2f 	bl	800c444 <memp_malloc>
 8015be6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d101      	bne.n	8015bf2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015bee:	2300      	movs	r3, #0
 8015bf0:	e016      	b.n	8015c20 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015bf2:	2220      	movs	r2, #32
 8015bf4:	2100      	movs	r1, #0
 8015bf6:	68f8      	ldr	r0, [r7, #12]
 8015bf8:	f001 f8a9 	bl	8016d4e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	220f      	movs	r2, #15
 8015c00:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015c02:	4b09      	ldr	r3, [pc, #36]	; (8015c28 <ip_reass_enqueue_new_datagram+0x70>)
 8015c04:	681a      	ldr	r2, [r3, #0]
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015c0a:	4a07      	ldr	r2, [pc, #28]	; (8015c28 <ip_reass_enqueue_new_datagram+0x70>)
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	3308      	adds	r3, #8
 8015c14:	2214      	movs	r2, #20
 8015c16:	6879      	ldr	r1, [r7, #4]
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f001 f88a 	bl	8016d32 <memcpy>
  return ipr;
 8015c1e:	68fb      	ldr	r3, [r7, #12]
}
 8015c20:	4618      	mov	r0, r3
 8015c22:	3710      	adds	r7, #16
 8015c24:	46bd      	mov	sp, r7
 8015c26:	bd80      	pop	{r7, pc}
 8015c28:	24004c18 	.word	0x24004c18

08015c2c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b082      	sub	sp, #8
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
 8015c34:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015c36:	4b10      	ldr	r3, [pc, #64]	; (8015c78 <ip_reass_dequeue_datagram+0x4c>)
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	687a      	ldr	r2, [r7, #4]
 8015c3c:	429a      	cmp	r2, r3
 8015c3e:	d104      	bne.n	8015c4a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	4a0c      	ldr	r2, [pc, #48]	; (8015c78 <ip_reass_dequeue_datagram+0x4c>)
 8015c46:	6013      	str	r3, [r2, #0]
 8015c48:	e00d      	b.n	8015c66 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d106      	bne.n	8015c5e <ip_reass_dequeue_datagram+0x32>
 8015c50:	4b0a      	ldr	r3, [pc, #40]	; (8015c7c <ip_reass_dequeue_datagram+0x50>)
 8015c52:	f240 1245 	movw	r2, #325	; 0x145
 8015c56:	490a      	ldr	r1, [pc, #40]	; (8015c80 <ip_reass_dequeue_datagram+0x54>)
 8015c58:	480a      	ldr	r0, [pc, #40]	; (8015c84 <ip_reass_dequeue_datagram+0x58>)
 8015c5a:	f001 f8db 	bl	8016e14 <iprintf>
    prev->next = ipr->next;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	681a      	ldr	r2, [r3, #0]
 8015c62:	683b      	ldr	r3, [r7, #0]
 8015c64:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015c66:	6879      	ldr	r1, [r7, #4]
 8015c68:	2004      	movs	r0, #4
 8015c6a:	f7f6 fc61 	bl	800c530 <memp_free>
}
 8015c6e:	bf00      	nop
 8015c70:	3708      	adds	r7, #8
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}
 8015c76:	bf00      	nop
 8015c78:	24004c18 	.word	0x24004c18
 8015c7c:	0801af30 	.word	0x0801af30
 8015c80:	0801aff8 	.word	0x0801aff8
 8015c84:	0801af78 	.word	0x0801af78

08015c88 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b08c      	sub	sp, #48	; 0x30
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	60f8      	str	r0, [r7, #12]
 8015c90:	60b9      	str	r1, [r7, #8]
 8015c92:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015c94:	2300      	movs	r3, #0
 8015c96:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015c98:	2301      	movs	r3, #1
 8015c9a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015c9c:	68bb      	ldr	r3, [r7, #8]
 8015c9e:	685b      	ldr	r3, [r3, #4]
 8015ca0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015ca2:	69fb      	ldr	r3, [r7, #28]
 8015ca4:	885b      	ldrh	r3, [r3, #2]
 8015ca6:	b29b      	uxth	r3, r3
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f7f5 fe3b 	bl	800b924 <lwip_htons>
 8015cae:	4603      	mov	r3, r0
 8015cb0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015cb2:	69fb      	ldr	r3, [r7, #28]
 8015cb4:	781b      	ldrb	r3, [r3, #0]
 8015cb6:	f003 030f 	and.w	r3, r3, #15
 8015cba:	b2db      	uxtb	r3, r3
 8015cbc:	009b      	lsls	r3, r3, #2
 8015cbe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015cc0:	7e7b      	ldrb	r3, [r7, #25]
 8015cc2:	b29b      	uxth	r3, r3
 8015cc4:	8b7a      	ldrh	r2, [r7, #26]
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d202      	bcs.n	8015cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cca:	f04f 33ff 	mov.w	r3, #4294967295
 8015cce:	e135      	b.n	8015f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015cd0:	7e7b      	ldrb	r3, [r7, #25]
 8015cd2:	b29b      	uxth	r3, r3
 8015cd4:	8b7a      	ldrh	r2, [r7, #26]
 8015cd6:	1ad3      	subs	r3, r2, r3
 8015cd8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015cda:	69fb      	ldr	r3, [r7, #28]
 8015cdc:	88db      	ldrh	r3, [r3, #6]
 8015cde:	b29b      	uxth	r3, r3
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	f7f5 fe1f 	bl	800b924 <lwip_htons>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015cec:	b29b      	uxth	r3, r3
 8015cee:	00db      	lsls	r3, r3, #3
 8015cf0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015cf2:	68bb      	ldr	r3, [r7, #8]
 8015cf4:	685b      	ldr	r3, [r3, #4]
 8015cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	701a      	strb	r2, [r3, #0]
 8015cfe:	2200      	movs	r2, #0
 8015d00:	705a      	strb	r2, [r3, #1]
 8015d02:	2200      	movs	r2, #0
 8015d04:	709a      	strb	r2, [r3, #2]
 8015d06:	2200      	movs	r2, #0
 8015d08:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d0c:	8afa      	ldrh	r2, [r7, #22]
 8015d0e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015d10:	8afa      	ldrh	r2, [r7, #22]
 8015d12:	8b7b      	ldrh	r3, [r7, #26]
 8015d14:	4413      	add	r3, r2
 8015d16:	b29a      	uxth	r2, r3
 8015d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d1a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d1e:	88db      	ldrh	r3, [r3, #6]
 8015d20:	b29b      	uxth	r3, r3
 8015d22:	8afa      	ldrh	r2, [r7, #22]
 8015d24:	429a      	cmp	r2, r3
 8015d26:	d902      	bls.n	8015d2e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d28:	f04f 33ff 	mov.w	r3, #4294967295
 8015d2c:	e106      	b.n	8015f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	685b      	ldr	r3, [r3, #4]
 8015d32:	627b      	str	r3, [r7, #36]	; 0x24
 8015d34:	e068      	b.n	8015e08 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d38:	685b      	ldr	r3, [r3, #4]
 8015d3a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d3e:	889b      	ldrh	r3, [r3, #4]
 8015d40:	b29a      	uxth	r2, r3
 8015d42:	693b      	ldr	r3, [r7, #16]
 8015d44:	889b      	ldrh	r3, [r3, #4]
 8015d46:	b29b      	uxth	r3, r3
 8015d48:	429a      	cmp	r2, r3
 8015d4a:	d235      	bcs.n	8015db8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d50:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d020      	beq.n	8015d9a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d5a:	889b      	ldrh	r3, [r3, #4]
 8015d5c:	b29a      	uxth	r2, r3
 8015d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d60:	88db      	ldrh	r3, [r3, #6]
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	429a      	cmp	r2, r3
 8015d66:	d307      	bcc.n	8015d78 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d6a:	88db      	ldrh	r3, [r3, #6]
 8015d6c:	b29a      	uxth	r2, r3
 8015d6e:	693b      	ldr	r3, [r7, #16]
 8015d70:	889b      	ldrh	r3, [r3, #4]
 8015d72:	b29b      	uxth	r3, r3
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d902      	bls.n	8015d7e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d78:	f04f 33ff 	mov.w	r3, #4294967295
 8015d7c:	e0de      	b.n	8015f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d80:	68ba      	ldr	r2, [r7, #8]
 8015d82:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d86:	88db      	ldrh	r3, [r3, #6]
 8015d88:	b29a      	uxth	r2, r3
 8015d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d8c:	889b      	ldrh	r3, [r3, #4]
 8015d8e:	b29b      	uxth	r3, r3
 8015d90:	429a      	cmp	r2, r3
 8015d92:	d03d      	beq.n	8015e10 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015d94:	2300      	movs	r3, #0
 8015d96:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015d98:	e03a      	b.n	8015e10 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d9c:	88db      	ldrh	r3, [r3, #6]
 8015d9e:	b29a      	uxth	r2, r3
 8015da0:	693b      	ldr	r3, [r7, #16]
 8015da2:	889b      	ldrh	r3, [r3, #4]
 8015da4:	b29b      	uxth	r3, r3
 8015da6:	429a      	cmp	r2, r3
 8015da8:	d902      	bls.n	8015db0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015daa:	f04f 33ff 	mov.w	r3, #4294967295
 8015dae:	e0c5      	b.n	8015f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	68ba      	ldr	r2, [r7, #8]
 8015db4:	605a      	str	r2, [r3, #4]
      break;
 8015db6:	e02b      	b.n	8015e10 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dba:	889b      	ldrh	r3, [r3, #4]
 8015dbc:	b29a      	uxth	r2, r3
 8015dbe:	693b      	ldr	r3, [r7, #16]
 8015dc0:	889b      	ldrh	r3, [r3, #4]
 8015dc2:	b29b      	uxth	r3, r3
 8015dc4:	429a      	cmp	r2, r3
 8015dc6:	d102      	bne.n	8015dce <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8015dcc:	e0b6      	b.n	8015f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dd0:	889b      	ldrh	r3, [r3, #4]
 8015dd2:	b29a      	uxth	r2, r3
 8015dd4:	693b      	ldr	r3, [r7, #16]
 8015dd6:	88db      	ldrh	r3, [r3, #6]
 8015dd8:	b29b      	uxth	r3, r3
 8015dda:	429a      	cmp	r2, r3
 8015ddc:	d202      	bcs.n	8015de4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015dde:	f04f 33ff 	mov.w	r3, #4294967295
 8015de2:	e0ab      	b.n	8015f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d009      	beq.n	8015dfe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dec:	88db      	ldrh	r3, [r3, #6]
 8015dee:	b29a      	uxth	r2, r3
 8015df0:	693b      	ldr	r3, [r7, #16]
 8015df2:	889b      	ldrh	r3, [r3, #4]
 8015df4:	b29b      	uxth	r3, r3
 8015df6:	429a      	cmp	r2, r3
 8015df8:	d001      	beq.n	8015dfe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015dfe:	693b      	ldr	r3, [r7, #16]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015e04:	693b      	ldr	r3, [r7, #16]
 8015e06:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d193      	bne.n	8015d36 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015e0e:	e000      	b.n	8015e12 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015e10:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d12d      	bne.n	8015e74 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d01c      	beq.n	8015e58 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e20:	88db      	ldrh	r3, [r3, #6]
 8015e22:	b29a      	uxth	r2, r3
 8015e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e26:	889b      	ldrh	r3, [r3, #4]
 8015e28:	b29b      	uxth	r3, r3
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d906      	bls.n	8015e3c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015e2e:	4b45      	ldr	r3, [pc, #276]	; (8015f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e30:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015e34:	4944      	ldr	r1, [pc, #272]	; (8015f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015e36:	4845      	ldr	r0, [pc, #276]	; (8015f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e38:	f000 ffec 	bl	8016e14 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e3e:	68ba      	ldr	r2, [r7, #8]
 8015e40:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e44:	88db      	ldrh	r3, [r3, #6]
 8015e46:	b29a      	uxth	r2, r3
 8015e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e4a:	889b      	ldrh	r3, [r3, #4]
 8015e4c:	b29b      	uxth	r3, r3
 8015e4e:	429a      	cmp	r2, r3
 8015e50:	d010      	beq.n	8015e74 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015e52:	2300      	movs	r3, #0
 8015e54:	623b      	str	r3, [r7, #32]
 8015e56:	e00d      	b.n	8015e74 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	685b      	ldr	r3, [r3, #4]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d006      	beq.n	8015e6e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015e60:	4b38      	ldr	r3, [pc, #224]	; (8015f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e62:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015e66:	493a      	ldr	r1, [pc, #232]	; (8015f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015e68:	4838      	ldr	r0, [pc, #224]	; (8015f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e6a:	f000 ffd3 	bl	8016e14 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	68ba      	ldr	r2, [r7, #8]
 8015e72:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d105      	bne.n	8015e86 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	7f9b      	ldrb	r3, [r3, #30]
 8015e7e:	f003 0301 	and.w	r3, r3, #1
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d059      	beq.n	8015f3a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015e86:	6a3b      	ldr	r3, [r7, #32]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d04f      	beq.n	8015f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	685b      	ldr	r3, [r3, #4]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d006      	beq.n	8015ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	685b      	ldr	r3, [r3, #4]
 8015e98:	685b      	ldr	r3, [r3, #4]
 8015e9a:	889b      	ldrh	r3, [r3, #4]
 8015e9c:	b29b      	uxth	r3, r3
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d002      	beq.n	8015ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	623b      	str	r3, [r7, #32]
 8015ea6:	e041      	b.n	8015f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eaa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015eb2:	e012      	b.n	8015eda <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb6:	685b      	ldr	r3, [r3, #4]
 8015eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ebc:	88db      	ldrh	r3, [r3, #6]
 8015ebe:	b29a      	uxth	r2, r3
 8015ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ec2:	889b      	ldrh	r3, [r3, #4]
 8015ec4:	b29b      	uxth	r3, r3
 8015ec6:	429a      	cmp	r2, r3
 8015ec8:	d002      	beq.n	8015ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	623b      	str	r3, [r7, #32]
            break;
 8015ece:	e007      	b.n	8015ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d1e9      	bne.n	8015eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015ee0:	6a3b      	ldr	r3, [r7, #32]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d022      	beq.n	8015f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	685b      	ldr	r3, [r3, #4]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d106      	bne.n	8015efc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015eee:	4b15      	ldr	r3, [pc, #84]	; (8015f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ef0:	f240 12df 	movw	r2, #479	; 0x1df
 8015ef4:	4917      	ldr	r1, [pc, #92]	; (8015f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015ef6:	4815      	ldr	r0, [pc, #84]	; (8015f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ef8:	f000 ff8c 	bl	8016e14 <iprintf>
          LWIP_ASSERT("sanity check",
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	685b      	ldr	r3, [r3, #4]
 8015f00:	685b      	ldr	r3, [r3, #4]
 8015f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015f04:	429a      	cmp	r2, r3
 8015f06:	d106      	bne.n	8015f16 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015f08:	4b0e      	ldr	r3, [pc, #56]	; (8015f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f0a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015f0e:	4911      	ldr	r1, [pc, #68]	; (8015f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015f10:	480e      	ldr	r0, [pc, #56]	; (8015f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f12:	f000 ff7f 	bl	8016e14 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d006      	beq.n	8015f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015f1e:	4b09      	ldr	r3, [pc, #36]	; (8015f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f20:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015f24:	490c      	ldr	r1, [pc, #48]	; (8015f58 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015f26:	4809      	ldr	r0, [pc, #36]	; (8015f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f28:	f000 ff74 	bl	8016e14 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015f2c:	6a3b      	ldr	r3, [r7, #32]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	bf14      	ite	ne
 8015f32:	2301      	movne	r3, #1
 8015f34:	2300      	moveq	r3, #0
 8015f36:	b2db      	uxtb	r3, r3
 8015f38:	e000      	b.n	8015f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015f3a:	2300      	movs	r3, #0
}
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	3730      	adds	r7, #48	; 0x30
 8015f40:	46bd      	mov	sp, r7
 8015f42:	bd80      	pop	{r7, pc}
 8015f44:	0801af30 	.word	0x0801af30
 8015f48:	0801b014 	.word	0x0801b014
 8015f4c:	0801af78 	.word	0x0801af78
 8015f50:	0801b034 	.word	0x0801b034
 8015f54:	0801b06c 	.word	0x0801b06c
 8015f58:	0801b07c 	.word	0x0801b07c

08015f5c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b08e      	sub	sp, #56	; 0x38
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	685b      	ldr	r3, [r3, #4]
 8015f68:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f6c:	781b      	ldrb	r3, [r3, #0]
 8015f6e:	f003 030f 	and.w	r3, r3, #15
 8015f72:	b2db      	uxtb	r3, r3
 8015f74:	009b      	lsls	r3, r3, #2
 8015f76:	b2db      	uxtb	r3, r3
 8015f78:	2b14      	cmp	r3, #20
 8015f7a:	f040 8167 	bne.w	801624c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f80:	88db      	ldrh	r3, [r3, #6]
 8015f82:	b29b      	uxth	r3, r3
 8015f84:	4618      	mov	r0, r3
 8015f86:	f7f5 fccd 	bl	800b924 <lwip_htons>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f90:	b29b      	uxth	r3, r3
 8015f92:	00db      	lsls	r3, r3, #3
 8015f94:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f98:	885b      	ldrh	r3, [r3, #2]
 8015f9a:	b29b      	uxth	r3, r3
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f7f5 fcc1 	bl	800b924 <lwip_htons>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fa8:	781b      	ldrb	r3, [r3, #0]
 8015faa:	f003 030f 	and.w	r3, r3, #15
 8015fae:	b2db      	uxtb	r3, r3
 8015fb0:	009b      	lsls	r3, r3, #2
 8015fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015fb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015fba:	b29b      	uxth	r3, r3
 8015fbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015fbe:	429a      	cmp	r2, r3
 8015fc0:	f0c0 8146 	bcc.w	8016250 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015fc8:	b29b      	uxth	r3, r3
 8015fca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015fcc:	1ad3      	subs	r3, r2, r3
 8015fce:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015fd0:	6878      	ldr	r0, [r7, #4]
 8015fd2:	f7f7 f9df 	bl	800d394 <pbuf_clen>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015fda:	4b9f      	ldr	r3, [pc, #636]	; (8016258 <ip4_reass+0x2fc>)
 8015fdc:	881b      	ldrh	r3, [r3, #0]
 8015fde:	461a      	mov	r2, r3
 8015fe0:	8c3b      	ldrh	r3, [r7, #32]
 8015fe2:	4413      	add	r3, r2
 8015fe4:	2b0a      	cmp	r3, #10
 8015fe6:	dd10      	ble.n	801600a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015fe8:	8c3b      	ldrh	r3, [r7, #32]
 8015fea:	4619      	mov	r1, r3
 8015fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fee:	f7ff fd81 	bl	8015af4 <ip_reass_remove_oldest_datagram>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	f000 812d 	beq.w	8016254 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015ffa:	4b97      	ldr	r3, [pc, #604]	; (8016258 <ip4_reass+0x2fc>)
 8015ffc:	881b      	ldrh	r3, [r3, #0]
 8015ffe:	461a      	mov	r2, r3
 8016000:	8c3b      	ldrh	r3, [r7, #32]
 8016002:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016004:	2b0a      	cmp	r3, #10
 8016006:	f300 8125 	bgt.w	8016254 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801600a:	4b94      	ldr	r3, [pc, #592]	; (801625c <ip4_reass+0x300>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	633b      	str	r3, [r7, #48]	; 0x30
 8016010:	e015      	b.n	801603e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016014:	695a      	ldr	r2, [r3, #20]
 8016016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016018:	68db      	ldr	r3, [r3, #12]
 801601a:	429a      	cmp	r2, r3
 801601c:	d10c      	bne.n	8016038 <ip4_reass+0xdc>
 801601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016020:	699a      	ldr	r2, [r3, #24]
 8016022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016024:	691b      	ldr	r3, [r3, #16]
 8016026:	429a      	cmp	r2, r3
 8016028:	d106      	bne.n	8016038 <ip4_reass+0xdc>
 801602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801602c:	899a      	ldrh	r2, [r3, #12]
 801602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016030:	889b      	ldrh	r3, [r3, #4]
 8016032:	b29b      	uxth	r3, r3
 8016034:	429a      	cmp	r2, r3
 8016036:	d006      	beq.n	8016046 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	633b      	str	r3, [r7, #48]	; 0x30
 801603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016040:	2b00      	cmp	r3, #0
 8016042:	d1e6      	bne.n	8016012 <ip4_reass+0xb6>
 8016044:	e000      	b.n	8016048 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016046:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801604a:	2b00      	cmp	r3, #0
 801604c:	d109      	bne.n	8016062 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801604e:	8c3b      	ldrh	r3, [r7, #32]
 8016050:	4619      	mov	r1, r3
 8016052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016054:	f7ff fdb0 	bl	8015bb8 <ip_reass_enqueue_new_datagram>
 8016058:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801605c:	2b00      	cmp	r3, #0
 801605e:	d11c      	bne.n	801609a <ip4_reass+0x13e>
      goto nullreturn;
 8016060:	e109      	b.n	8016276 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016064:	88db      	ldrh	r3, [r3, #6]
 8016066:	b29b      	uxth	r3, r3
 8016068:	4618      	mov	r0, r3
 801606a:	f7f5 fc5b 	bl	800b924 <lwip_htons>
 801606e:	4603      	mov	r3, r0
 8016070:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016074:	2b00      	cmp	r3, #0
 8016076:	d110      	bne.n	801609a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801607a:	89db      	ldrh	r3, [r3, #14]
 801607c:	4618      	mov	r0, r3
 801607e:	f7f5 fc51 	bl	800b924 <lwip_htons>
 8016082:	4603      	mov	r3, r0
 8016084:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016088:	2b00      	cmp	r3, #0
 801608a:	d006      	beq.n	801609a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801608e:	3308      	adds	r3, #8
 8016090:	2214      	movs	r2, #20
 8016092:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016094:	4618      	mov	r0, r3
 8016096:	f000 fe4c 	bl	8016d32 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801609c:	88db      	ldrh	r3, [r3, #6]
 801609e:	b29b      	uxth	r3, r3
 80160a0:	f003 0320 	and.w	r3, r3, #32
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	bf0c      	ite	eq
 80160a8:	2301      	moveq	r3, #1
 80160aa:	2300      	movne	r3, #0
 80160ac:	b2db      	uxtb	r3, r3
 80160ae:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80160b0:	69fb      	ldr	r3, [r7, #28]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d00e      	beq.n	80160d4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80160b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80160b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160ba:	4413      	add	r3, r2
 80160bc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80160be:	8b7a      	ldrh	r2, [r7, #26]
 80160c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80160c2:	429a      	cmp	r2, r3
 80160c4:	f0c0 80a0 	bcc.w	8016208 <ip4_reass+0x2ac>
 80160c8:	8b7b      	ldrh	r3, [r7, #26]
 80160ca:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80160ce:	4293      	cmp	r3, r2
 80160d0:	f200 809a 	bhi.w	8016208 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80160d4:	69fa      	ldr	r2, [r7, #28]
 80160d6:	6879      	ldr	r1, [r7, #4]
 80160d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160da:	f7ff fdd5 	bl	8015c88 <ip_reass_chain_frag_into_datagram_and_validate>
 80160de:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80160e0:	697b      	ldr	r3, [r7, #20]
 80160e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160e6:	f000 8091 	beq.w	801620c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80160ea:	4b5b      	ldr	r3, [pc, #364]	; (8016258 <ip4_reass+0x2fc>)
 80160ec:	881a      	ldrh	r2, [r3, #0]
 80160ee:	8c3b      	ldrh	r3, [r7, #32]
 80160f0:	4413      	add	r3, r2
 80160f2:	b29a      	uxth	r2, r3
 80160f4:	4b58      	ldr	r3, [pc, #352]	; (8016258 <ip4_reass+0x2fc>)
 80160f6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80160f8:	69fb      	ldr	r3, [r7, #28]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d00d      	beq.n	801611a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80160fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016102:	4413      	add	r3, r2
 8016104:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016108:	8a7a      	ldrh	r2, [r7, #18]
 801610a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801610e:	7f9b      	ldrb	r3, [r3, #30]
 8016110:	f043 0301 	orr.w	r3, r3, #1
 8016114:	b2da      	uxtb	r2, r3
 8016116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016118:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801611a:	697b      	ldr	r3, [r7, #20]
 801611c:	2b01      	cmp	r3, #1
 801611e:	d171      	bne.n	8016204 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016122:	8b9b      	ldrh	r3, [r3, #28]
 8016124:	3314      	adds	r3, #20
 8016126:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801612a:	685b      	ldr	r3, [r3, #4]
 801612c:	685b      	ldr	r3, [r3, #4]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016134:	685b      	ldr	r3, [r3, #4]
 8016136:	685b      	ldr	r3, [r3, #4]
 8016138:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801613c:	3308      	adds	r3, #8
 801613e:	2214      	movs	r2, #20
 8016140:	4619      	mov	r1, r3
 8016142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016144:	f000 fdf5 	bl	8016d32 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016148:	8a3b      	ldrh	r3, [r7, #16]
 801614a:	4618      	mov	r0, r3
 801614c:	f7f5 fbea 	bl	800b924 <lwip_htons>
 8016150:	4603      	mov	r3, r0
 8016152:	461a      	mov	r2, r3
 8016154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016156:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801615a:	2200      	movs	r2, #0
 801615c:	719a      	strb	r2, [r3, #6]
 801615e:	2200      	movs	r2, #0
 8016160:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016164:	2200      	movs	r2, #0
 8016166:	729a      	strb	r2, [r3, #10]
 8016168:	2200      	movs	r2, #0
 801616a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801616e:	685b      	ldr	r3, [r3, #4]
 8016170:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016172:	e00d      	b.n	8016190 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016176:	685b      	ldr	r3, [r3, #4]
 8016178:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801617a:	2114      	movs	r1, #20
 801617c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801617e:	f7f6 fff5 	bl	800d16c <pbuf_remove_header>
      pbuf_cat(p, r);
 8016182:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016184:	6878      	ldr	r0, [r7, #4]
 8016186:	f7f7 f945 	bl	800d414 <pbuf_cat>
      r = iprh->next_pbuf;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016192:	2b00      	cmp	r3, #0
 8016194:	d1ee      	bne.n	8016174 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016196:	4b31      	ldr	r3, [pc, #196]	; (801625c <ip4_reass+0x300>)
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801619c:	429a      	cmp	r2, r3
 801619e:	d102      	bne.n	80161a6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80161a0:	2300      	movs	r3, #0
 80161a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80161a4:	e010      	b.n	80161c8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80161a6:	4b2d      	ldr	r3, [pc, #180]	; (801625c <ip4_reass+0x300>)
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80161ac:	e007      	b.n	80161be <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80161ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161b4:	429a      	cmp	r2, r3
 80161b6:	d006      	beq.n	80161c6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80161b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80161be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d1f4      	bne.n	80161ae <ip4_reass+0x252>
 80161c4:	e000      	b.n	80161c8 <ip4_reass+0x26c>
          break;
 80161c6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80161c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80161ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161cc:	f7ff fd2e 	bl	8015c2c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f7f7 f8df 	bl	800d394 <pbuf_clen>
 80161d6:	4603      	mov	r3, r0
 80161d8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80161da:	4b1f      	ldr	r3, [pc, #124]	; (8016258 <ip4_reass+0x2fc>)
 80161dc:	881b      	ldrh	r3, [r3, #0]
 80161de:	8c3a      	ldrh	r2, [r7, #32]
 80161e0:	429a      	cmp	r2, r3
 80161e2:	d906      	bls.n	80161f2 <ip4_reass+0x296>
 80161e4:	4b1e      	ldr	r3, [pc, #120]	; (8016260 <ip4_reass+0x304>)
 80161e6:	f240 229b 	movw	r2, #667	; 0x29b
 80161ea:	491e      	ldr	r1, [pc, #120]	; (8016264 <ip4_reass+0x308>)
 80161ec:	481e      	ldr	r0, [pc, #120]	; (8016268 <ip4_reass+0x30c>)
 80161ee:	f000 fe11 	bl	8016e14 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80161f2:	4b19      	ldr	r3, [pc, #100]	; (8016258 <ip4_reass+0x2fc>)
 80161f4:	881a      	ldrh	r2, [r3, #0]
 80161f6:	8c3b      	ldrh	r3, [r7, #32]
 80161f8:	1ad3      	subs	r3, r2, r3
 80161fa:	b29a      	uxth	r2, r3
 80161fc:	4b16      	ldr	r3, [pc, #88]	; (8016258 <ip4_reass+0x2fc>)
 80161fe:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	e03c      	b.n	801627e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016204:	2300      	movs	r3, #0
 8016206:	e03a      	b.n	801627e <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016208:	bf00      	nop
 801620a:	e000      	b.n	801620e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801620c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016210:	2b00      	cmp	r3, #0
 8016212:	d106      	bne.n	8016222 <ip4_reass+0x2c6>
 8016214:	4b12      	ldr	r3, [pc, #72]	; (8016260 <ip4_reass+0x304>)
 8016216:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801621a:	4914      	ldr	r1, [pc, #80]	; (801626c <ip4_reass+0x310>)
 801621c:	4812      	ldr	r0, [pc, #72]	; (8016268 <ip4_reass+0x30c>)
 801621e:	f000 fdf9 	bl	8016e14 <iprintf>
  if (ipr->p == NULL) {
 8016222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016224:	685b      	ldr	r3, [r3, #4]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d124      	bne.n	8016274 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801622a:	4b0c      	ldr	r3, [pc, #48]	; (801625c <ip4_reass+0x300>)
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016230:	429a      	cmp	r2, r3
 8016232:	d006      	beq.n	8016242 <ip4_reass+0x2e6>
 8016234:	4b0a      	ldr	r3, [pc, #40]	; (8016260 <ip4_reass+0x304>)
 8016236:	f240 22ab 	movw	r2, #683	; 0x2ab
 801623a:	490d      	ldr	r1, [pc, #52]	; (8016270 <ip4_reass+0x314>)
 801623c:	480a      	ldr	r0, [pc, #40]	; (8016268 <ip4_reass+0x30c>)
 801623e:	f000 fde9 	bl	8016e14 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016242:	2100      	movs	r1, #0
 8016244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016246:	f7ff fcf1 	bl	8015c2c <ip_reass_dequeue_datagram>
 801624a:	e014      	b.n	8016276 <ip4_reass+0x31a>
    goto nullreturn;
 801624c:	bf00      	nop
 801624e:	e012      	b.n	8016276 <ip4_reass+0x31a>
    goto nullreturn;
 8016250:	bf00      	nop
 8016252:	e010      	b.n	8016276 <ip4_reass+0x31a>
      goto nullreturn;
 8016254:	bf00      	nop
 8016256:	e00e      	b.n	8016276 <ip4_reass+0x31a>
 8016258:	24004c1c 	.word	0x24004c1c
 801625c:	24004c18 	.word	0x24004c18
 8016260:	0801af30 	.word	0x0801af30
 8016264:	0801b0a0 	.word	0x0801b0a0
 8016268:	0801af78 	.word	0x0801af78
 801626c:	0801b0bc 	.word	0x0801b0bc
 8016270:	0801b0c8 	.word	0x0801b0c8
  }

nullreturn:
 8016274:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016276:	6878      	ldr	r0, [r7, #4]
 8016278:	f7f6 fffe 	bl	800d278 <pbuf_free>
  return NULL;
 801627c:	2300      	movs	r3, #0
}
 801627e:	4618      	mov	r0, r3
 8016280:	3738      	adds	r7, #56	; 0x38
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
 8016286:	bf00      	nop

08016288 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801628c:	2005      	movs	r0, #5
 801628e:	f7f6 f8d9 	bl	800c444 <memp_malloc>
 8016292:	4603      	mov	r3, r0
}
 8016294:	4618      	mov	r0, r3
 8016296:	bd80      	pop	{r7, pc}

08016298 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b082      	sub	sp, #8
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d106      	bne.n	80162b4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80162a6:	4b07      	ldr	r3, [pc, #28]	; (80162c4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80162a8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80162ac:	4906      	ldr	r1, [pc, #24]	; (80162c8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80162ae:	4807      	ldr	r0, [pc, #28]	; (80162cc <ip_frag_free_pbuf_custom_ref+0x34>)
 80162b0:	f000 fdb0 	bl	8016e14 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80162b4:	6879      	ldr	r1, [r7, #4]
 80162b6:	2005      	movs	r0, #5
 80162b8:	f7f6 f93a 	bl	800c530 <memp_free>
}
 80162bc:	bf00      	nop
 80162be:	3708      	adds	r7, #8
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd80      	pop	{r7, pc}
 80162c4:	0801af30 	.word	0x0801af30
 80162c8:	0801b0e8 	.word	0x0801b0e8
 80162cc:	0801af78 	.word	0x0801af78

080162d0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b084      	sub	sp, #16
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d106      	bne.n	80162f0 <ipfrag_free_pbuf_custom+0x20>
 80162e2:	4b11      	ldr	r3, [pc, #68]	; (8016328 <ipfrag_free_pbuf_custom+0x58>)
 80162e4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80162e8:	4910      	ldr	r1, [pc, #64]	; (801632c <ipfrag_free_pbuf_custom+0x5c>)
 80162ea:	4811      	ldr	r0, [pc, #68]	; (8016330 <ipfrag_free_pbuf_custom+0x60>)
 80162ec:	f000 fd92 	bl	8016e14 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80162f0:	68fa      	ldr	r2, [r7, #12]
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	429a      	cmp	r2, r3
 80162f6:	d006      	beq.n	8016306 <ipfrag_free_pbuf_custom+0x36>
 80162f8:	4b0b      	ldr	r3, [pc, #44]	; (8016328 <ipfrag_free_pbuf_custom+0x58>)
 80162fa:	f240 22cf 	movw	r2, #719	; 0x2cf
 80162fe:	490d      	ldr	r1, [pc, #52]	; (8016334 <ipfrag_free_pbuf_custom+0x64>)
 8016300:	480b      	ldr	r0, [pc, #44]	; (8016330 <ipfrag_free_pbuf_custom+0x60>)
 8016302:	f000 fd87 	bl	8016e14 <iprintf>
  if (pcr->original != NULL) {
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	695b      	ldr	r3, [r3, #20]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d004      	beq.n	8016318 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	695b      	ldr	r3, [r3, #20]
 8016312:	4618      	mov	r0, r3
 8016314:	f7f6 ffb0 	bl	800d278 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016318:	68f8      	ldr	r0, [r7, #12]
 801631a:	f7ff ffbd 	bl	8016298 <ip_frag_free_pbuf_custom_ref>
}
 801631e:	bf00      	nop
 8016320:	3710      	adds	r7, #16
 8016322:	46bd      	mov	sp, r7
 8016324:	bd80      	pop	{r7, pc}
 8016326:	bf00      	nop
 8016328:	0801af30 	.word	0x0801af30
 801632c:	0801b0f4 	.word	0x0801b0f4
 8016330:	0801af78 	.word	0x0801af78
 8016334:	0801b100 	.word	0x0801b100

08016338 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b094      	sub	sp, #80	; 0x50
 801633c:	af02      	add	r7, sp, #8
 801633e:	60f8      	str	r0, [r7, #12]
 8016340:	60b9      	str	r1, [r7, #8]
 8016342:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016344:	2300      	movs	r3, #0
 8016346:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801634a:	68bb      	ldr	r3, [r7, #8]
 801634c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801634e:	3b14      	subs	r3, #20
 8016350:	2b00      	cmp	r3, #0
 8016352:	da00      	bge.n	8016356 <ip4_frag+0x1e>
 8016354:	3307      	adds	r3, #7
 8016356:	10db      	asrs	r3, r3, #3
 8016358:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801635a:	2314      	movs	r3, #20
 801635c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	685b      	ldr	r3, [r3, #4]
 8016362:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016366:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801636a:	781b      	ldrb	r3, [r3, #0]
 801636c:	f003 030f 	and.w	r3, r3, #15
 8016370:	b2db      	uxtb	r3, r3
 8016372:	009b      	lsls	r3, r3, #2
 8016374:	b2db      	uxtb	r3, r3
 8016376:	2b14      	cmp	r3, #20
 8016378:	d002      	beq.n	8016380 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801637a:	f06f 0305 	mvn.w	r3, #5
 801637e:	e110      	b.n	80165a2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	895b      	ldrh	r3, [r3, #10]
 8016384:	2b13      	cmp	r3, #19
 8016386:	d809      	bhi.n	801639c <ip4_frag+0x64>
 8016388:	4b88      	ldr	r3, [pc, #544]	; (80165ac <ip4_frag+0x274>)
 801638a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801638e:	4988      	ldr	r1, [pc, #544]	; (80165b0 <ip4_frag+0x278>)
 8016390:	4888      	ldr	r0, [pc, #544]	; (80165b4 <ip4_frag+0x27c>)
 8016392:	f000 fd3f 	bl	8016e14 <iprintf>
 8016396:	f06f 0305 	mvn.w	r3, #5
 801639a:	e102      	b.n	80165a2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801639e:	88db      	ldrh	r3, [r3, #6]
 80163a0:	b29b      	uxth	r3, r3
 80163a2:	4618      	mov	r0, r3
 80163a4:	f7f5 fabe 	bl	800b924 <lwip_htons>
 80163a8:	4603      	mov	r3, r0
 80163aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80163ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80163b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80163bc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	891b      	ldrh	r3, [r3, #8]
 80163c2:	3b14      	subs	r3, #20
 80163c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80163c8:	e0e1      	b.n	801658e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80163ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80163cc:	00db      	lsls	r3, r3, #3
 80163ce:	b29b      	uxth	r3, r3
 80163d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80163d4:	4293      	cmp	r3, r2
 80163d6:	bf28      	it	cs
 80163d8:	4613      	movcs	r3, r2
 80163da:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80163dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80163e0:	2114      	movs	r1, #20
 80163e2:	200e      	movs	r0, #14
 80163e4:	f7f6 fc64 	bl	800ccb0 <pbuf_alloc>
 80163e8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80163ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	f000 80d5 	beq.w	801659c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80163f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163f4:	895b      	ldrh	r3, [r3, #10]
 80163f6:	2b13      	cmp	r3, #19
 80163f8:	d806      	bhi.n	8016408 <ip4_frag+0xd0>
 80163fa:	4b6c      	ldr	r3, [pc, #432]	; (80165ac <ip4_frag+0x274>)
 80163fc:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016400:	496d      	ldr	r1, [pc, #436]	; (80165b8 <ip4_frag+0x280>)
 8016402:	486c      	ldr	r0, [pc, #432]	; (80165b4 <ip4_frag+0x27c>)
 8016404:	f000 fd06 	bl	8016e14 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801640a:	685b      	ldr	r3, [r3, #4]
 801640c:	2214      	movs	r2, #20
 801640e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016410:	4618      	mov	r0, r3
 8016412:	f000 fc8e 	bl	8016d32 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016418:	685b      	ldr	r3, [r3, #4]
 801641a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801641c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801641e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016422:	e064      	b.n	80164ee <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	895a      	ldrh	r2, [r3, #10]
 8016428:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801642a:	1ad3      	subs	r3, r2, r3
 801642c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	895b      	ldrh	r3, [r3, #10]
 8016432:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016434:	429a      	cmp	r2, r3
 8016436:	d906      	bls.n	8016446 <ip4_frag+0x10e>
 8016438:	4b5c      	ldr	r3, [pc, #368]	; (80165ac <ip4_frag+0x274>)
 801643a:	f240 322d 	movw	r2, #813	; 0x32d
 801643e:	495f      	ldr	r1, [pc, #380]	; (80165bc <ip4_frag+0x284>)
 8016440:	485c      	ldr	r0, [pc, #368]	; (80165b4 <ip4_frag+0x27c>)
 8016442:	f000 fce7 	bl	8016e14 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016446:	8bfa      	ldrh	r2, [r7, #30]
 8016448:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801644c:	4293      	cmp	r3, r2
 801644e:	bf28      	it	cs
 8016450:	4613      	movcs	r3, r2
 8016452:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016456:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801645a:	2b00      	cmp	r3, #0
 801645c:	d105      	bne.n	801646a <ip4_frag+0x132>
        poff = 0;
 801645e:	2300      	movs	r3, #0
 8016460:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	60fb      	str	r3, [r7, #12]
        continue;
 8016468:	e041      	b.n	80164ee <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801646a:	f7ff ff0d 	bl	8016288 <ip_frag_alloc_pbuf_custom_ref>
 801646e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016470:	69bb      	ldr	r3, [r7, #24]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d103      	bne.n	801647e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016478:	f7f6 fefe 	bl	800d278 <pbuf_free>
        goto memerr;
 801647c:	e08f      	b.n	801659e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801647e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016484:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016486:	4413      	add	r3, r2
 8016488:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801648c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016490:	9201      	str	r2, [sp, #4]
 8016492:	9300      	str	r3, [sp, #0]
 8016494:	4603      	mov	r3, r0
 8016496:	2241      	movs	r2, #65	; 0x41
 8016498:	2000      	movs	r0, #0
 801649a:	f7f6 fd33 	bl	800cf04 <pbuf_alloced_custom>
 801649e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80164a0:	697b      	ldr	r3, [r7, #20]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d106      	bne.n	80164b4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80164a6:	69b8      	ldr	r0, [r7, #24]
 80164a8:	f7ff fef6 	bl	8016298 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80164ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164ae:	f7f6 fee3 	bl	800d278 <pbuf_free>
        goto memerr;
 80164b2:	e074      	b.n	801659e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80164b4:	68f8      	ldr	r0, [r7, #12]
 80164b6:	f7f6 ff85 	bl	800d3c4 <pbuf_ref>
      pcr->original = p;
 80164ba:	69bb      	ldr	r3, [r7, #24]
 80164bc:	68fa      	ldr	r2, [r7, #12]
 80164be:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80164c0:	69bb      	ldr	r3, [r7, #24]
 80164c2:	4a3f      	ldr	r2, [pc, #252]	; (80165c0 <ip4_frag+0x288>)
 80164c4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80164c6:	6979      	ldr	r1, [r7, #20]
 80164c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164ca:	f7f6 ffa3 	bl	800d414 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80164ce:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80164d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80164d6:	1ad3      	subs	r3, r2, r3
 80164d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80164dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d004      	beq.n	80164ee <ip4_frag+0x1b6>
        poff = 0;
 80164e4:	2300      	movs	r3, #0
 80164e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80164ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d196      	bne.n	8016424 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80164f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80164f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80164fc:	4413      	add	r3, r2
 80164fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016500:	68bb      	ldr	r3, [r7, #8]
 8016502:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016504:	f1a3 0213 	sub.w	r2, r3, #19
 8016508:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801650c:	429a      	cmp	r2, r3
 801650e:	bfcc      	ite	gt
 8016510:	2301      	movgt	r3, #1
 8016512:	2300      	movle	r3, #0
 8016514:	b2db      	uxtb	r3, r3
 8016516:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016518:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801651c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016520:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016522:	6a3b      	ldr	r3, [r7, #32]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d002      	beq.n	801652e <ip4_frag+0x1f6>
 8016528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801652a:	2b00      	cmp	r3, #0
 801652c:	d003      	beq.n	8016536 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801652e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016530:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016534:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016536:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016538:	4618      	mov	r0, r3
 801653a:	f7f5 f9f3 	bl	800b924 <lwip_htons>
 801653e:	4603      	mov	r3, r0
 8016540:	461a      	mov	r2, r3
 8016542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016544:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016546:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016548:	3314      	adds	r3, #20
 801654a:	b29b      	uxth	r3, r3
 801654c:	4618      	mov	r0, r3
 801654e:	f7f5 f9e9 	bl	800b924 <lwip_htons>
 8016552:	4603      	mov	r3, r0
 8016554:	461a      	mov	r2, r3
 8016556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016558:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801655c:	2200      	movs	r2, #0
 801655e:	729a      	strb	r2, [r3, #10]
 8016560:	2200      	movs	r2, #0
 8016562:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016564:	68bb      	ldr	r3, [r7, #8]
 8016566:	695b      	ldr	r3, [r3, #20]
 8016568:	687a      	ldr	r2, [r7, #4]
 801656a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801656c:	68b8      	ldr	r0, [r7, #8]
 801656e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016570:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016572:	f7f6 fe81 	bl	800d278 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016576:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801657a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801657c:	1ad3      	subs	r3, r2, r3
 801657e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016582:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016586:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016588:	4413      	add	r3, r2
 801658a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801658e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016592:	2b00      	cmp	r3, #0
 8016594:	f47f af19 	bne.w	80163ca <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016598:	2300      	movs	r3, #0
 801659a:	e002      	b.n	80165a2 <ip4_frag+0x26a>
      goto memerr;
 801659c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801659e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	3748      	adds	r7, #72	; 0x48
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}
 80165aa:	bf00      	nop
 80165ac:	0801af30 	.word	0x0801af30
 80165b0:	0801b10c 	.word	0x0801b10c
 80165b4:	0801af78 	.word	0x0801af78
 80165b8:	0801b128 	.word	0x0801b128
 80165bc:	0801b148 	.word	0x0801b148
 80165c0:	080162d1 	.word	0x080162d1

080165c4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80165c4:	b580      	push	{r7, lr}
 80165c6:	b086      	sub	sp, #24
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	6078      	str	r0, [r7, #4]
 80165cc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80165ce:	230e      	movs	r3, #14
 80165d0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	895b      	ldrh	r3, [r3, #10]
 80165d6:	2b0e      	cmp	r3, #14
 80165d8:	d96e      	bls.n	80166b8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	7bdb      	ldrb	r3, [r3, #15]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d106      	bne.n	80165f0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80165e2:	683b      	ldr	r3, [r7, #0]
 80165e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80165e8:	3301      	adds	r3, #1
 80165ea:	b2da      	uxtb	r2, r3
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	685b      	ldr	r3, [r3, #4]
 80165f4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80165f6:	693b      	ldr	r3, [r7, #16]
 80165f8:	7b1a      	ldrb	r2, [r3, #12]
 80165fa:	7b5b      	ldrb	r3, [r3, #13]
 80165fc:	021b      	lsls	r3, r3, #8
 80165fe:	4313      	orrs	r3, r2
 8016600:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016602:	693b      	ldr	r3, [r7, #16]
 8016604:	781b      	ldrb	r3, [r3, #0]
 8016606:	f003 0301 	and.w	r3, r3, #1
 801660a:	2b00      	cmp	r3, #0
 801660c:	d023      	beq.n	8016656 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801660e:	693b      	ldr	r3, [r7, #16]
 8016610:	781b      	ldrb	r3, [r3, #0]
 8016612:	2b01      	cmp	r3, #1
 8016614:	d10f      	bne.n	8016636 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016616:	693b      	ldr	r3, [r7, #16]
 8016618:	785b      	ldrb	r3, [r3, #1]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d11b      	bne.n	8016656 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801661e:	693b      	ldr	r3, [r7, #16]
 8016620:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016622:	2b5e      	cmp	r3, #94	; 0x5e
 8016624:	d117      	bne.n	8016656 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	7b5b      	ldrb	r3, [r3, #13]
 801662a:	f043 0310 	orr.w	r3, r3, #16
 801662e:	b2da      	uxtb	r2, r3
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	735a      	strb	r2, [r3, #13]
 8016634:	e00f      	b.n	8016656 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016636:	693b      	ldr	r3, [r7, #16]
 8016638:	2206      	movs	r2, #6
 801663a:	4928      	ldr	r1, [pc, #160]	; (80166dc <ethernet_input+0x118>)
 801663c:	4618      	mov	r0, r3
 801663e:	f000 fb6a 	bl	8016d16 <memcmp>
 8016642:	4603      	mov	r3, r0
 8016644:	2b00      	cmp	r3, #0
 8016646:	d106      	bne.n	8016656 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	7b5b      	ldrb	r3, [r3, #13]
 801664c:	f043 0308 	orr.w	r3, r3, #8
 8016650:	b2da      	uxtb	r2, r3
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016656:	89fb      	ldrh	r3, [r7, #14]
 8016658:	2b08      	cmp	r3, #8
 801665a:	d003      	beq.n	8016664 <ethernet_input+0xa0>
 801665c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016660:	d014      	beq.n	801668c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016662:	e032      	b.n	80166ca <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016664:	683b      	ldr	r3, [r7, #0]
 8016666:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801666a:	f003 0308 	and.w	r3, r3, #8
 801666e:	2b00      	cmp	r3, #0
 8016670:	d024      	beq.n	80166bc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016672:	8afb      	ldrh	r3, [r7, #22]
 8016674:	4619      	mov	r1, r3
 8016676:	6878      	ldr	r0, [r7, #4]
 8016678:	f7f6 fd78 	bl	800d16c <pbuf_remove_header>
 801667c:	4603      	mov	r3, r0
 801667e:	2b00      	cmp	r3, #0
 8016680:	d11e      	bne.n	80166c0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016682:	6839      	ldr	r1, [r7, #0]
 8016684:	6878      	ldr	r0, [r7, #4]
 8016686:	f7fe ff27 	bl	80154d8 <ip4_input>
      break;
 801668a:	e013      	b.n	80166b4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016692:	f003 0308 	and.w	r3, r3, #8
 8016696:	2b00      	cmp	r3, #0
 8016698:	d014      	beq.n	80166c4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801669a:	8afb      	ldrh	r3, [r7, #22]
 801669c:	4619      	mov	r1, r3
 801669e:	6878      	ldr	r0, [r7, #4]
 80166a0:	f7f6 fd64 	bl	800d16c <pbuf_remove_header>
 80166a4:	4603      	mov	r3, r0
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d10e      	bne.n	80166c8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80166aa:	6839      	ldr	r1, [r7, #0]
 80166ac:	6878      	ldr	r0, [r7, #4]
 80166ae:	f7fe f8a1 	bl	80147f4 <etharp_input>
      break;
 80166b2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80166b4:	2300      	movs	r3, #0
 80166b6:	e00c      	b.n	80166d2 <ethernet_input+0x10e>
    goto free_and_return;
 80166b8:	bf00      	nop
 80166ba:	e006      	b.n	80166ca <ethernet_input+0x106>
        goto free_and_return;
 80166bc:	bf00      	nop
 80166be:	e004      	b.n	80166ca <ethernet_input+0x106>
        goto free_and_return;
 80166c0:	bf00      	nop
 80166c2:	e002      	b.n	80166ca <ethernet_input+0x106>
        goto free_and_return;
 80166c4:	bf00      	nop
 80166c6:	e000      	b.n	80166ca <ethernet_input+0x106>
        goto free_and_return;
 80166c8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80166ca:	6878      	ldr	r0, [r7, #4]
 80166cc:	f7f6 fdd4 	bl	800d278 <pbuf_free>
  return ERR_OK;
 80166d0:	2300      	movs	r3, #0
}
 80166d2:	4618      	mov	r0, r3
 80166d4:	3718      	adds	r7, #24
 80166d6:	46bd      	mov	sp, r7
 80166d8:	bd80      	pop	{r7, pc}
 80166da:	bf00      	nop
 80166dc:	0801b344 	.word	0x0801b344

080166e0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b086      	sub	sp, #24
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	60f8      	str	r0, [r7, #12]
 80166e8:	60b9      	str	r1, [r7, #8]
 80166ea:	607a      	str	r2, [r7, #4]
 80166ec:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80166ee:	8c3b      	ldrh	r3, [r7, #32]
 80166f0:	4618      	mov	r0, r3
 80166f2:	f7f5 f917 	bl	800b924 <lwip_htons>
 80166f6:	4603      	mov	r3, r0
 80166f8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80166fa:	210e      	movs	r1, #14
 80166fc:	68b8      	ldr	r0, [r7, #8]
 80166fe:	f7f6 fd25 	bl	800d14c <pbuf_add_header>
 8016702:	4603      	mov	r3, r0
 8016704:	2b00      	cmp	r3, #0
 8016706:	d125      	bne.n	8016754 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016708:	68bb      	ldr	r3, [r7, #8]
 801670a:	685b      	ldr	r3, [r3, #4]
 801670c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801670e:	693b      	ldr	r3, [r7, #16]
 8016710:	8afa      	ldrh	r2, [r7, #22]
 8016712:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016714:	693b      	ldr	r3, [r7, #16]
 8016716:	2206      	movs	r2, #6
 8016718:	6839      	ldr	r1, [r7, #0]
 801671a:	4618      	mov	r0, r3
 801671c:	f000 fb09 	bl	8016d32 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016720:	693b      	ldr	r3, [r7, #16]
 8016722:	3306      	adds	r3, #6
 8016724:	2206      	movs	r2, #6
 8016726:	6879      	ldr	r1, [r7, #4]
 8016728:	4618      	mov	r0, r3
 801672a:	f000 fb02 	bl	8016d32 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016734:	2b06      	cmp	r3, #6
 8016736:	d006      	beq.n	8016746 <ethernet_output+0x66>
 8016738:	4b0a      	ldr	r3, [pc, #40]	; (8016764 <ethernet_output+0x84>)
 801673a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801673e:	490a      	ldr	r1, [pc, #40]	; (8016768 <ethernet_output+0x88>)
 8016740:	480a      	ldr	r0, [pc, #40]	; (801676c <ethernet_output+0x8c>)
 8016742:	f000 fb67 	bl	8016e14 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	699b      	ldr	r3, [r3, #24]
 801674a:	68b9      	ldr	r1, [r7, #8]
 801674c:	68f8      	ldr	r0, [r7, #12]
 801674e:	4798      	blx	r3
 8016750:	4603      	mov	r3, r0
 8016752:	e002      	b.n	801675a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016754:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016756:	f06f 0301 	mvn.w	r3, #1
}
 801675a:	4618      	mov	r0, r3
 801675c:	3718      	adds	r7, #24
 801675e:	46bd      	mov	sp, r7
 8016760:	bd80      	pop	{r7, pc}
 8016762:	bf00      	nop
 8016764:	0801b158 	.word	0x0801b158
 8016768:	0801b190 	.word	0x0801b190
 801676c:	0801b1c4 	.word	0x0801b1c4

08016770 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b082      	sub	sp, #8
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
 8016778:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801677a:	683b      	ldr	r3, [r7, #0]
 801677c:	2200      	movs	r2, #0
 801677e:	2104      	movs	r1, #4
 8016780:	4618      	mov	r0, r3
 8016782:	f7ef fa99 	bl	8005cb8 <osMessageQueueNew>
 8016786:	4602      	mov	r2, r0
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d102      	bne.n	801679a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016794:	f04f 33ff 	mov.w	r3, #4294967295
 8016798:	e000      	b.n	801679c <sys_mbox_new+0x2c>

  return ERR_OK;
 801679a:	2300      	movs	r3, #0
}
 801679c:	4618      	mov	r0, r3
 801679e:	3708      	adds	r7, #8
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bd80      	pop	{r7, pc}

080167a4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b082      	sub	sp, #8
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	4618      	mov	r0, r3
 80167b2:	f7ef fbb3 	bl	8005f1c <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	4618      	mov	r0, r3
 80167bc:	f7ef fbce 	bl	8005f5c <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80167c0:	bf00      	nop
 80167c2:	3708      	adds	r7, #8
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bd80      	pop	{r7, pc}

080167c8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b084      	sub	sp, #16
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
 80167d0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	6818      	ldr	r0, [r3, #0]
 80167d6:	4639      	mov	r1, r7
 80167d8:	2300      	movs	r3, #0
 80167da:	2200      	movs	r2, #0
 80167dc:	f7ef fae0 	bl	8005da0 <osMessageQueuePut>
 80167e0:	4603      	mov	r3, r0
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d102      	bne.n	80167ec <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80167e6:	2300      	movs	r3, #0
 80167e8:	73fb      	strb	r3, [r7, #15]
 80167ea:	e001      	b.n	80167f0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80167ec:	23ff      	movs	r3, #255	; 0xff
 80167ee:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80167f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80167f4:	4618      	mov	r0, r3
 80167f6:	3710      	adds	r7, #16
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}

080167fc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b086      	sub	sp, #24
 8016800:	af00      	add	r7, sp, #0
 8016802:	60f8      	str	r0, [r7, #12]
 8016804:	60b9      	str	r1, [r7, #8]
 8016806:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016808:	f7ee ff42 	bl	8005690 <osKernelGetTickCount>
 801680c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d013      	beq.n	801683c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	6818      	ldr	r0, [r3, #0]
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	2200      	movs	r2, #0
 801681c:	68b9      	ldr	r1, [r7, #8]
 801681e:	f7ef fb1f 	bl	8005e60 <osMessageQueueGet>
 8016822:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8016824:	693b      	ldr	r3, [r7, #16]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d105      	bne.n	8016836 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801682a:	f7ee ff31 	bl	8005690 <osKernelGetTickCount>
 801682e:	4602      	mov	r2, r0
 8016830:	697b      	ldr	r3, [r7, #20]
 8016832:	1ad3      	subs	r3, r2, r3
 8016834:	e00f      	b.n	8016856 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016836:	f04f 33ff 	mov.w	r3, #4294967295
 801683a:	e00c      	b.n	8016856 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	6818      	ldr	r0, [r3, #0]
 8016840:	f04f 33ff 	mov.w	r3, #4294967295
 8016844:	2200      	movs	r2, #0
 8016846:	68b9      	ldr	r1, [r7, #8]
 8016848:	f7ef fb0a 	bl	8005e60 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801684c:	f7ee ff20 	bl	8005690 <osKernelGetTickCount>
 8016850:	4602      	mov	r2, r0
 8016852:	697b      	ldr	r3, [r7, #20]
 8016854:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016856:	4618      	mov	r0, r3
 8016858:	3718      	adds	r7, #24
 801685a:	46bd      	mov	sp, r7
 801685c:	bd80      	pop	{r7, pc}

0801685e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801685e:	b580      	push	{r7, lr}
 8016860:	b082      	sub	sp, #8
 8016862:	af00      	add	r7, sp, #0
 8016864:	6078      	str	r0, [r7, #4]
 8016866:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	6818      	ldr	r0, [r3, #0]
 801686c:	2300      	movs	r3, #0
 801686e:	2200      	movs	r2, #0
 8016870:	6839      	ldr	r1, [r7, #0]
 8016872:	f7ef faf5 	bl	8005e60 <osMessageQueueGet>
 8016876:	4603      	mov	r3, r0
 8016878:	2b00      	cmp	r3, #0
 801687a:	d101      	bne.n	8016880 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801687c:	2300      	movs	r3, #0
 801687e:	e001      	b.n	8016884 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016880:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8016884:	4618      	mov	r0, r3
 8016886:	3708      	adds	r7, #8
 8016888:	46bd      	mov	sp, r7
 801688a:	bd80      	pop	{r7, pc}

0801688c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801688c:	b480      	push	{r7}
 801688e:	b083      	sub	sp, #12
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d101      	bne.n	80168a0 <sys_mbox_valid+0x14>
    return 0;
 801689c:	2300      	movs	r3, #0
 801689e:	e000      	b.n	80168a2 <sys_mbox_valid+0x16>
  else
    return 1;
 80168a0:	2301      	movs	r3, #1
}
 80168a2:	4618      	mov	r0, r3
 80168a4:	370c      	adds	r7, #12
 80168a6:	46bd      	mov	sp, r7
 80168a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ac:	4770      	bx	lr

080168ae <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80168ae:	b480      	push	{r7}
 80168b0:	b083      	sub	sp, #12
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	2200      	movs	r2, #0
 80168ba:	601a      	str	r2, [r3, #0]
}
 80168bc:	bf00      	nop
 80168be:	370c      	adds	r7, #12
 80168c0:	46bd      	mov	sp, r7
 80168c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c6:	4770      	bx	lr

080168c8 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b082      	sub	sp, #8
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
 80168d0:	460b      	mov	r3, r1
 80168d2:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80168d4:	78fb      	ldrb	r3, [r7, #3]
 80168d6:	2200      	movs	r2, #0
 80168d8:	4619      	mov	r1, r3
 80168da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80168de:	f7ef f8a7 	bl	8005a30 <osSemaphoreNew>
 80168e2:	4602      	mov	r2, r0
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d102      	bne.n	80168f6 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80168f0:	f04f 33ff 	mov.w	r3, #4294967295
 80168f4:	e009      	b.n	801690a <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80168f6:	78fb      	ldrb	r3, [r7, #3]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d105      	bne.n	8016908 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	2100      	movs	r1, #0
 8016902:	4618      	mov	r0, r3
 8016904:	f7ef f91e 	bl	8005b44 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016908:	2300      	movs	r3, #0
}
 801690a:	4618      	mov	r0, r3
 801690c:	3708      	adds	r7, #8
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}

08016912 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016912:	b580      	push	{r7, lr}
 8016914:	b084      	sub	sp, #16
 8016916:	af00      	add	r7, sp, #0
 8016918:	6078      	str	r0, [r7, #4]
 801691a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801691c:	f7ee feb8 	bl	8005690 <osKernelGetTickCount>
 8016920:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8016922:	683b      	ldr	r3, [r7, #0]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d011      	beq.n	801694c <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	6839      	ldr	r1, [r7, #0]
 801692e:	4618      	mov	r0, r3
 8016930:	f7ef f908 	bl	8005b44 <osSemaphoreAcquire>
 8016934:	4603      	mov	r3, r0
 8016936:	2b00      	cmp	r3, #0
 8016938:	d105      	bne.n	8016946 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801693a:	f7ee fea9 	bl	8005690 <osKernelGetTickCount>
 801693e:	4602      	mov	r2, r0
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	1ad3      	subs	r3, r2, r3
 8016944:	e012      	b.n	801696c <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016946:	f04f 33ff 	mov.w	r3, #4294967295
 801694a:	e00f      	b.n	801696c <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801694c:	bf00      	nop
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	f04f 31ff 	mov.w	r1, #4294967295
 8016956:	4618      	mov	r0, r3
 8016958:	f7ef f8f4 	bl	8005b44 <osSemaphoreAcquire>
 801695c:	4603      	mov	r3, r0
 801695e:	2b00      	cmp	r3, #0
 8016960:	d1f5      	bne.n	801694e <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8016962:	f7ee fe95 	bl	8005690 <osKernelGetTickCount>
 8016966:	4602      	mov	r2, r0
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801696c:	4618      	mov	r0, r3
 801696e:	3710      	adds	r7, #16
 8016970:	46bd      	mov	sp, r7
 8016972:	bd80      	pop	{r7, pc}

08016974 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016974:	b580      	push	{r7, lr}
 8016976:	b082      	sub	sp, #8
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	4618      	mov	r0, r3
 8016982:	f7ef f931 	bl	8005be8 <osSemaphoreRelease>
}
 8016986:	bf00      	nop
 8016988:	3708      	adds	r7, #8
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}

0801698e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801698e:	b580      	push	{r7, lr}
 8016990:	b082      	sub	sp, #8
 8016992:	af00      	add	r7, sp, #0
 8016994:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	4618      	mov	r0, r3
 801699c:	f7ef f968 	bl	8005c70 <osSemaphoreDelete>
}
 80169a0:	bf00      	nop
 80169a2:	3708      	adds	r7, #8
 80169a4:	46bd      	mov	sp, r7
 80169a6:	bd80      	pop	{r7, pc}

080169a8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80169a8:	b480      	push	{r7}
 80169aa:	b083      	sub	sp, #12
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d101      	bne.n	80169bc <sys_sem_valid+0x14>
    return 0;
 80169b8:	2300      	movs	r3, #0
 80169ba:	e000      	b.n	80169be <sys_sem_valid+0x16>
  else
    return 1;
 80169bc:	2301      	movs	r3, #1
}
 80169be:	4618      	mov	r0, r3
 80169c0:	370c      	adds	r7, #12
 80169c2:	46bd      	mov	sp, r7
 80169c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c8:	4770      	bx	lr

080169ca <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80169ca:	b480      	push	{r7}
 80169cc:	b083      	sub	sp, #12
 80169ce:	af00      	add	r7, sp, #0
 80169d0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2200      	movs	r2, #0
 80169d6:	601a      	str	r2, [r3, #0]
}
 80169d8:	bf00      	nop
 80169da:	370c      	adds	r7, #12
 80169dc:	46bd      	mov	sp, r7
 80169de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e2:	4770      	bx	lr

080169e4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80169e8:	2000      	movs	r0, #0
 80169ea:	f7ee ff13 	bl	8005814 <osMutexNew>
 80169ee:	4603      	mov	r3, r0
 80169f0:	4a01      	ldr	r2, [pc, #4]	; (80169f8 <sys_init+0x14>)
 80169f2:	6013      	str	r3, [r2, #0]
#endif
}
 80169f4:	bf00      	nop
 80169f6:	bd80      	pop	{r7, pc}
 80169f8:	24007fb8 	.word	0x24007fb8

080169fc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b082      	sub	sp, #8
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016a04:	2000      	movs	r0, #0
 8016a06:	f7ee ff05 	bl	8005814 <osMutexNew>
 8016a0a:	4602      	mov	r2, r0
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d102      	bne.n	8016a1e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016a18:	f04f 33ff 	mov.w	r3, #4294967295
 8016a1c:	e000      	b.n	8016a20 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016a1e:	2300      	movs	r3, #0
}
 8016a20:	4618      	mov	r0, r3
 8016a22:	3708      	adds	r7, #8
 8016a24:	46bd      	mov	sp, r7
 8016a26:	bd80      	pop	{r7, pc}

08016a28 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b082      	sub	sp, #8
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	f04f 31ff 	mov.w	r1, #4294967295
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f7ee ff71 	bl	8005920 <osMutexAcquire>
#endif
}
 8016a3e:	bf00      	nop
 8016a40:	3708      	adds	r7, #8
 8016a42:	46bd      	mov	sp, r7
 8016a44:	bd80      	pop	{r7, pc}

08016a46 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016a46:	b580      	push	{r7, lr}
 8016a48:	b082      	sub	sp, #8
 8016a4a:	af00      	add	r7, sp, #0
 8016a4c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	4618      	mov	r0, r3
 8016a54:	f7ee ffaf 	bl	80059b6 <osMutexRelease>
}
 8016a58:	bf00      	nop
 8016a5a:	3708      	adds	r7, #8
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	bd80      	pop	{r7, pc}

08016a60 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b08e      	sub	sp, #56	; 0x38
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	60f8      	str	r0, [r7, #12]
 8016a68:	60b9      	str	r1, [r7, #8]
 8016a6a:	607a      	str	r2, [r7, #4]
 8016a6c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8016a6e:	f107 0314 	add.w	r3, r7, #20
 8016a72:	2224      	movs	r2, #36	; 0x24
 8016a74:	2100      	movs	r1, #0
 8016a76:	4618      	mov	r0, r3
 8016a78:	f000 f969 	bl	8016d4e <memset>
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	617b      	str	r3, [r7, #20]
 8016a80:	683b      	ldr	r3, [r7, #0]
 8016a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8016a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a86:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8016a88:	f107 0314 	add.w	r3, r7, #20
 8016a8c:	461a      	mov	r2, r3
 8016a8e:	6879      	ldr	r1, [r7, #4]
 8016a90:	68b8      	ldr	r0, [r7, #8]
 8016a92:	f7ee fe12 	bl	80056ba <osThreadNew>
 8016a96:	4603      	mov	r3, r0
#endif
}
 8016a98:	4618      	mov	r0, r3
 8016a9a:	3738      	adds	r7, #56	; 0x38
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bd80      	pop	{r7, pc}

08016aa0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016aa4:	4b04      	ldr	r3, [pc, #16]	; (8016ab8 <sys_arch_protect+0x18>)
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8016aac:	4618      	mov	r0, r3
 8016aae:	f7ee ff37 	bl	8005920 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8016ab2:	2301      	movs	r3, #1
}
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	bd80      	pop	{r7, pc}
 8016ab8:	24007fb8 	.word	0x24007fb8

08016abc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b082      	sub	sp, #8
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016ac4:	4b04      	ldr	r3, [pc, #16]	; (8016ad8 <sys_arch_unprotect+0x1c>)
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f7ee ff74 	bl	80059b6 <osMutexRelease>
}
 8016ace:	bf00      	nop
 8016ad0:	3708      	adds	r7, #8
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	bd80      	pop	{r7, pc}
 8016ad6:	bf00      	nop
 8016ad8:	24007fb8 	.word	0x24007fb8

08016adc <std>:
 8016adc:	2300      	movs	r3, #0
 8016ade:	b510      	push	{r4, lr}
 8016ae0:	4604      	mov	r4, r0
 8016ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8016ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016aea:	6083      	str	r3, [r0, #8]
 8016aec:	8181      	strh	r1, [r0, #12]
 8016aee:	6643      	str	r3, [r0, #100]	; 0x64
 8016af0:	81c2      	strh	r2, [r0, #14]
 8016af2:	6183      	str	r3, [r0, #24]
 8016af4:	4619      	mov	r1, r3
 8016af6:	2208      	movs	r2, #8
 8016af8:	305c      	adds	r0, #92	; 0x5c
 8016afa:	f000 f928 	bl	8016d4e <memset>
 8016afe:	4b05      	ldr	r3, [pc, #20]	; (8016b14 <std+0x38>)
 8016b00:	6263      	str	r3, [r4, #36]	; 0x24
 8016b02:	4b05      	ldr	r3, [pc, #20]	; (8016b18 <std+0x3c>)
 8016b04:	62a3      	str	r3, [r4, #40]	; 0x28
 8016b06:	4b05      	ldr	r3, [pc, #20]	; (8016b1c <std+0x40>)
 8016b08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016b0a:	4b05      	ldr	r3, [pc, #20]	; (8016b20 <std+0x44>)
 8016b0c:	6224      	str	r4, [r4, #32]
 8016b0e:	6323      	str	r3, [r4, #48]	; 0x30
 8016b10:	bd10      	pop	{r4, pc}
 8016b12:	bf00      	nop
 8016b14:	08016fb9 	.word	0x08016fb9
 8016b18:	08016fdb 	.word	0x08016fdb
 8016b1c:	08017013 	.word	0x08017013
 8016b20:	08017037 	.word	0x08017037

08016b24 <_cleanup_r>:
 8016b24:	4901      	ldr	r1, [pc, #4]	; (8016b2c <_cleanup_r+0x8>)
 8016b26:	f000 b8af 	b.w	8016c88 <_fwalk_reent>
 8016b2a:	bf00      	nop
 8016b2c:	080171cd 	.word	0x080171cd

08016b30 <__sfmoreglue>:
 8016b30:	b570      	push	{r4, r5, r6, lr}
 8016b32:	1e4a      	subs	r2, r1, #1
 8016b34:	2568      	movs	r5, #104	; 0x68
 8016b36:	4355      	muls	r5, r2
 8016b38:	460e      	mov	r6, r1
 8016b3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016b3e:	f000 f90f 	bl	8016d60 <_malloc_r>
 8016b42:	4604      	mov	r4, r0
 8016b44:	b140      	cbz	r0, 8016b58 <__sfmoreglue+0x28>
 8016b46:	2100      	movs	r1, #0
 8016b48:	e9c0 1600 	strd	r1, r6, [r0]
 8016b4c:	300c      	adds	r0, #12
 8016b4e:	60a0      	str	r0, [r4, #8]
 8016b50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016b54:	f000 f8fb 	bl	8016d4e <memset>
 8016b58:	4620      	mov	r0, r4
 8016b5a:	bd70      	pop	{r4, r5, r6, pc}

08016b5c <__sfp_lock_acquire>:
 8016b5c:	4801      	ldr	r0, [pc, #4]	; (8016b64 <__sfp_lock_acquire+0x8>)
 8016b5e:	f000 b8d8 	b.w	8016d12 <__retarget_lock_acquire_recursive>
 8016b62:	bf00      	nop
 8016b64:	24007fc4 	.word	0x24007fc4

08016b68 <__sfp_lock_release>:
 8016b68:	4801      	ldr	r0, [pc, #4]	; (8016b70 <__sfp_lock_release+0x8>)
 8016b6a:	f000 b8d3 	b.w	8016d14 <__retarget_lock_release_recursive>
 8016b6e:	bf00      	nop
 8016b70:	24007fc4 	.word	0x24007fc4

08016b74 <__sinit_lock_acquire>:
 8016b74:	4801      	ldr	r0, [pc, #4]	; (8016b7c <__sinit_lock_acquire+0x8>)
 8016b76:	f000 b8cc 	b.w	8016d12 <__retarget_lock_acquire_recursive>
 8016b7a:	bf00      	nop
 8016b7c:	24007fbf 	.word	0x24007fbf

08016b80 <__sinit_lock_release>:
 8016b80:	4801      	ldr	r0, [pc, #4]	; (8016b88 <__sinit_lock_release+0x8>)
 8016b82:	f000 b8c7 	b.w	8016d14 <__retarget_lock_release_recursive>
 8016b86:	bf00      	nop
 8016b88:	24007fbf 	.word	0x24007fbf

08016b8c <__sinit>:
 8016b8c:	b510      	push	{r4, lr}
 8016b8e:	4604      	mov	r4, r0
 8016b90:	f7ff fff0 	bl	8016b74 <__sinit_lock_acquire>
 8016b94:	69a3      	ldr	r3, [r4, #24]
 8016b96:	b11b      	cbz	r3, 8016ba0 <__sinit+0x14>
 8016b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b9c:	f7ff bff0 	b.w	8016b80 <__sinit_lock_release>
 8016ba0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016ba4:	6523      	str	r3, [r4, #80]	; 0x50
 8016ba6:	4b13      	ldr	r3, [pc, #76]	; (8016bf4 <__sinit+0x68>)
 8016ba8:	4a13      	ldr	r2, [pc, #76]	; (8016bf8 <__sinit+0x6c>)
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	62a2      	str	r2, [r4, #40]	; 0x28
 8016bae:	42a3      	cmp	r3, r4
 8016bb0:	bf04      	itt	eq
 8016bb2:	2301      	moveq	r3, #1
 8016bb4:	61a3      	streq	r3, [r4, #24]
 8016bb6:	4620      	mov	r0, r4
 8016bb8:	f000 f820 	bl	8016bfc <__sfp>
 8016bbc:	6060      	str	r0, [r4, #4]
 8016bbe:	4620      	mov	r0, r4
 8016bc0:	f000 f81c 	bl	8016bfc <__sfp>
 8016bc4:	60a0      	str	r0, [r4, #8]
 8016bc6:	4620      	mov	r0, r4
 8016bc8:	f000 f818 	bl	8016bfc <__sfp>
 8016bcc:	2200      	movs	r2, #0
 8016bce:	60e0      	str	r0, [r4, #12]
 8016bd0:	2104      	movs	r1, #4
 8016bd2:	6860      	ldr	r0, [r4, #4]
 8016bd4:	f7ff ff82 	bl	8016adc <std>
 8016bd8:	68a0      	ldr	r0, [r4, #8]
 8016bda:	2201      	movs	r2, #1
 8016bdc:	2109      	movs	r1, #9
 8016bde:	f7ff ff7d 	bl	8016adc <std>
 8016be2:	68e0      	ldr	r0, [r4, #12]
 8016be4:	2202      	movs	r2, #2
 8016be6:	2112      	movs	r1, #18
 8016be8:	f7ff ff78 	bl	8016adc <std>
 8016bec:	2301      	movs	r3, #1
 8016bee:	61a3      	str	r3, [r4, #24]
 8016bf0:	e7d2      	b.n	8016b98 <__sinit+0xc>
 8016bf2:	bf00      	nop
 8016bf4:	0801b3b4 	.word	0x0801b3b4
 8016bf8:	08016b25 	.word	0x08016b25

08016bfc <__sfp>:
 8016bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bfe:	4607      	mov	r7, r0
 8016c00:	f7ff ffac 	bl	8016b5c <__sfp_lock_acquire>
 8016c04:	4b1e      	ldr	r3, [pc, #120]	; (8016c80 <__sfp+0x84>)
 8016c06:	681e      	ldr	r6, [r3, #0]
 8016c08:	69b3      	ldr	r3, [r6, #24]
 8016c0a:	b913      	cbnz	r3, 8016c12 <__sfp+0x16>
 8016c0c:	4630      	mov	r0, r6
 8016c0e:	f7ff ffbd 	bl	8016b8c <__sinit>
 8016c12:	3648      	adds	r6, #72	; 0x48
 8016c14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016c18:	3b01      	subs	r3, #1
 8016c1a:	d503      	bpl.n	8016c24 <__sfp+0x28>
 8016c1c:	6833      	ldr	r3, [r6, #0]
 8016c1e:	b30b      	cbz	r3, 8016c64 <__sfp+0x68>
 8016c20:	6836      	ldr	r6, [r6, #0]
 8016c22:	e7f7      	b.n	8016c14 <__sfp+0x18>
 8016c24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016c28:	b9d5      	cbnz	r5, 8016c60 <__sfp+0x64>
 8016c2a:	4b16      	ldr	r3, [pc, #88]	; (8016c84 <__sfp+0x88>)
 8016c2c:	60e3      	str	r3, [r4, #12]
 8016c2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016c32:	6665      	str	r5, [r4, #100]	; 0x64
 8016c34:	f000 f86c 	bl	8016d10 <__retarget_lock_init_recursive>
 8016c38:	f7ff ff96 	bl	8016b68 <__sfp_lock_release>
 8016c3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016c40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016c44:	6025      	str	r5, [r4, #0]
 8016c46:	61a5      	str	r5, [r4, #24]
 8016c48:	2208      	movs	r2, #8
 8016c4a:	4629      	mov	r1, r5
 8016c4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016c50:	f000 f87d 	bl	8016d4e <memset>
 8016c54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016c58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016c5c:	4620      	mov	r0, r4
 8016c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c60:	3468      	adds	r4, #104	; 0x68
 8016c62:	e7d9      	b.n	8016c18 <__sfp+0x1c>
 8016c64:	2104      	movs	r1, #4
 8016c66:	4638      	mov	r0, r7
 8016c68:	f7ff ff62 	bl	8016b30 <__sfmoreglue>
 8016c6c:	4604      	mov	r4, r0
 8016c6e:	6030      	str	r0, [r6, #0]
 8016c70:	2800      	cmp	r0, #0
 8016c72:	d1d5      	bne.n	8016c20 <__sfp+0x24>
 8016c74:	f7ff ff78 	bl	8016b68 <__sfp_lock_release>
 8016c78:	230c      	movs	r3, #12
 8016c7a:	603b      	str	r3, [r7, #0]
 8016c7c:	e7ee      	b.n	8016c5c <__sfp+0x60>
 8016c7e:	bf00      	nop
 8016c80:	0801b3b4 	.word	0x0801b3b4
 8016c84:	ffff0001 	.word	0xffff0001

08016c88 <_fwalk_reent>:
 8016c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c8c:	4606      	mov	r6, r0
 8016c8e:	4688      	mov	r8, r1
 8016c90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016c94:	2700      	movs	r7, #0
 8016c96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016c9a:	f1b9 0901 	subs.w	r9, r9, #1
 8016c9e:	d505      	bpl.n	8016cac <_fwalk_reent+0x24>
 8016ca0:	6824      	ldr	r4, [r4, #0]
 8016ca2:	2c00      	cmp	r4, #0
 8016ca4:	d1f7      	bne.n	8016c96 <_fwalk_reent+0xe>
 8016ca6:	4638      	mov	r0, r7
 8016ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cac:	89ab      	ldrh	r3, [r5, #12]
 8016cae:	2b01      	cmp	r3, #1
 8016cb0:	d907      	bls.n	8016cc2 <_fwalk_reent+0x3a>
 8016cb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016cb6:	3301      	adds	r3, #1
 8016cb8:	d003      	beq.n	8016cc2 <_fwalk_reent+0x3a>
 8016cba:	4629      	mov	r1, r5
 8016cbc:	4630      	mov	r0, r6
 8016cbe:	47c0      	blx	r8
 8016cc0:	4307      	orrs	r7, r0
 8016cc2:	3568      	adds	r5, #104	; 0x68
 8016cc4:	e7e9      	b.n	8016c9a <_fwalk_reent+0x12>
	...

08016cc8 <__libc_init_array>:
 8016cc8:	b570      	push	{r4, r5, r6, lr}
 8016cca:	4d0d      	ldr	r5, [pc, #52]	; (8016d00 <__libc_init_array+0x38>)
 8016ccc:	4c0d      	ldr	r4, [pc, #52]	; (8016d04 <__libc_init_array+0x3c>)
 8016cce:	1b64      	subs	r4, r4, r5
 8016cd0:	10a4      	asrs	r4, r4, #2
 8016cd2:	2600      	movs	r6, #0
 8016cd4:	42a6      	cmp	r6, r4
 8016cd6:	d109      	bne.n	8016cec <__libc_init_array+0x24>
 8016cd8:	4d0b      	ldr	r5, [pc, #44]	; (8016d08 <__libc_init_array+0x40>)
 8016cda:	4c0c      	ldr	r4, [pc, #48]	; (8016d0c <__libc_init_array+0x44>)
 8016cdc:	f000 ffcc 	bl	8017c78 <_init>
 8016ce0:	1b64      	subs	r4, r4, r5
 8016ce2:	10a4      	asrs	r4, r4, #2
 8016ce4:	2600      	movs	r6, #0
 8016ce6:	42a6      	cmp	r6, r4
 8016ce8:	d105      	bne.n	8016cf6 <__libc_init_array+0x2e>
 8016cea:	bd70      	pop	{r4, r5, r6, pc}
 8016cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8016cf0:	4798      	blx	r3
 8016cf2:	3601      	adds	r6, #1
 8016cf4:	e7ee      	b.n	8016cd4 <__libc_init_array+0xc>
 8016cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8016cfa:	4798      	blx	r3
 8016cfc:	3601      	adds	r6, #1
 8016cfe:	e7f2      	b.n	8016ce6 <__libc_init_array+0x1e>
 8016d00:	0801b4a0 	.word	0x0801b4a0
 8016d04:	0801b4a0 	.word	0x0801b4a0
 8016d08:	0801b4a0 	.word	0x0801b4a0
 8016d0c:	0801b4a4 	.word	0x0801b4a4

08016d10 <__retarget_lock_init_recursive>:
 8016d10:	4770      	bx	lr

08016d12 <__retarget_lock_acquire_recursive>:
 8016d12:	4770      	bx	lr

08016d14 <__retarget_lock_release_recursive>:
 8016d14:	4770      	bx	lr

08016d16 <memcmp>:
 8016d16:	b530      	push	{r4, r5, lr}
 8016d18:	3901      	subs	r1, #1
 8016d1a:	2400      	movs	r4, #0
 8016d1c:	42a2      	cmp	r2, r4
 8016d1e:	d101      	bne.n	8016d24 <memcmp+0xe>
 8016d20:	2000      	movs	r0, #0
 8016d22:	e005      	b.n	8016d30 <memcmp+0x1a>
 8016d24:	5d03      	ldrb	r3, [r0, r4]
 8016d26:	3401      	adds	r4, #1
 8016d28:	5d0d      	ldrb	r5, [r1, r4]
 8016d2a:	42ab      	cmp	r3, r5
 8016d2c:	d0f6      	beq.n	8016d1c <memcmp+0x6>
 8016d2e:	1b58      	subs	r0, r3, r5
 8016d30:	bd30      	pop	{r4, r5, pc}

08016d32 <memcpy>:
 8016d32:	440a      	add	r2, r1
 8016d34:	4291      	cmp	r1, r2
 8016d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8016d3a:	d100      	bne.n	8016d3e <memcpy+0xc>
 8016d3c:	4770      	bx	lr
 8016d3e:	b510      	push	{r4, lr}
 8016d40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d48:	4291      	cmp	r1, r2
 8016d4a:	d1f9      	bne.n	8016d40 <memcpy+0xe>
 8016d4c:	bd10      	pop	{r4, pc}

08016d4e <memset>:
 8016d4e:	4402      	add	r2, r0
 8016d50:	4603      	mov	r3, r0
 8016d52:	4293      	cmp	r3, r2
 8016d54:	d100      	bne.n	8016d58 <memset+0xa>
 8016d56:	4770      	bx	lr
 8016d58:	f803 1b01 	strb.w	r1, [r3], #1
 8016d5c:	e7f9      	b.n	8016d52 <memset+0x4>
	...

08016d60 <_malloc_r>:
 8016d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d62:	1ccd      	adds	r5, r1, #3
 8016d64:	f025 0503 	bic.w	r5, r5, #3
 8016d68:	3508      	adds	r5, #8
 8016d6a:	2d0c      	cmp	r5, #12
 8016d6c:	bf38      	it	cc
 8016d6e:	250c      	movcc	r5, #12
 8016d70:	2d00      	cmp	r5, #0
 8016d72:	4606      	mov	r6, r0
 8016d74:	db01      	blt.n	8016d7a <_malloc_r+0x1a>
 8016d76:	42a9      	cmp	r1, r5
 8016d78:	d903      	bls.n	8016d82 <_malloc_r+0x22>
 8016d7a:	230c      	movs	r3, #12
 8016d7c:	6033      	str	r3, [r6, #0]
 8016d7e:	2000      	movs	r0, #0
 8016d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d82:	f000 fa8b 	bl	801729c <__malloc_lock>
 8016d86:	4921      	ldr	r1, [pc, #132]	; (8016e0c <_malloc_r+0xac>)
 8016d88:	680a      	ldr	r2, [r1, #0]
 8016d8a:	4614      	mov	r4, r2
 8016d8c:	b99c      	cbnz	r4, 8016db6 <_malloc_r+0x56>
 8016d8e:	4f20      	ldr	r7, [pc, #128]	; (8016e10 <_malloc_r+0xb0>)
 8016d90:	683b      	ldr	r3, [r7, #0]
 8016d92:	b923      	cbnz	r3, 8016d9e <_malloc_r+0x3e>
 8016d94:	4621      	mov	r1, r4
 8016d96:	4630      	mov	r0, r6
 8016d98:	f000 f8fe 	bl	8016f98 <_sbrk_r>
 8016d9c:	6038      	str	r0, [r7, #0]
 8016d9e:	4629      	mov	r1, r5
 8016da0:	4630      	mov	r0, r6
 8016da2:	f000 f8f9 	bl	8016f98 <_sbrk_r>
 8016da6:	1c43      	adds	r3, r0, #1
 8016da8:	d123      	bne.n	8016df2 <_malloc_r+0x92>
 8016daa:	230c      	movs	r3, #12
 8016dac:	6033      	str	r3, [r6, #0]
 8016dae:	4630      	mov	r0, r6
 8016db0:	f000 fa7a 	bl	80172a8 <__malloc_unlock>
 8016db4:	e7e3      	b.n	8016d7e <_malloc_r+0x1e>
 8016db6:	6823      	ldr	r3, [r4, #0]
 8016db8:	1b5b      	subs	r3, r3, r5
 8016dba:	d417      	bmi.n	8016dec <_malloc_r+0x8c>
 8016dbc:	2b0b      	cmp	r3, #11
 8016dbe:	d903      	bls.n	8016dc8 <_malloc_r+0x68>
 8016dc0:	6023      	str	r3, [r4, #0]
 8016dc2:	441c      	add	r4, r3
 8016dc4:	6025      	str	r5, [r4, #0]
 8016dc6:	e004      	b.n	8016dd2 <_malloc_r+0x72>
 8016dc8:	6863      	ldr	r3, [r4, #4]
 8016dca:	42a2      	cmp	r2, r4
 8016dcc:	bf0c      	ite	eq
 8016dce:	600b      	streq	r3, [r1, #0]
 8016dd0:	6053      	strne	r3, [r2, #4]
 8016dd2:	4630      	mov	r0, r6
 8016dd4:	f000 fa68 	bl	80172a8 <__malloc_unlock>
 8016dd8:	f104 000b 	add.w	r0, r4, #11
 8016ddc:	1d23      	adds	r3, r4, #4
 8016dde:	f020 0007 	bic.w	r0, r0, #7
 8016de2:	1ac2      	subs	r2, r0, r3
 8016de4:	d0cc      	beq.n	8016d80 <_malloc_r+0x20>
 8016de6:	1a1b      	subs	r3, r3, r0
 8016de8:	50a3      	str	r3, [r4, r2]
 8016dea:	e7c9      	b.n	8016d80 <_malloc_r+0x20>
 8016dec:	4622      	mov	r2, r4
 8016dee:	6864      	ldr	r4, [r4, #4]
 8016df0:	e7cc      	b.n	8016d8c <_malloc_r+0x2c>
 8016df2:	1cc4      	adds	r4, r0, #3
 8016df4:	f024 0403 	bic.w	r4, r4, #3
 8016df8:	42a0      	cmp	r0, r4
 8016dfa:	d0e3      	beq.n	8016dc4 <_malloc_r+0x64>
 8016dfc:	1a21      	subs	r1, r4, r0
 8016dfe:	4630      	mov	r0, r6
 8016e00:	f000 f8ca 	bl	8016f98 <_sbrk_r>
 8016e04:	3001      	adds	r0, #1
 8016e06:	d1dd      	bne.n	8016dc4 <_malloc_r+0x64>
 8016e08:	e7cf      	b.n	8016daa <_malloc_r+0x4a>
 8016e0a:	bf00      	nop
 8016e0c:	24004c20 	.word	0x24004c20
 8016e10:	24004c24 	.word	0x24004c24

08016e14 <iprintf>:
 8016e14:	b40f      	push	{r0, r1, r2, r3}
 8016e16:	4b0a      	ldr	r3, [pc, #40]	; (8016e40 <iprintf+0x2c>)
 8016e18:	b513      	push	{r0, r1, r4, lr}
 8016e1a:	681c      	ldr	r4, [r3, #0]
 8016e1c:	b124      	cbz	r4, 8016e28 <iprintf+0x14>
 8016e1e:	69a3      	ldr	r3, [r4, #24]
 8016e20:	b913      	cbnz	r3, 8016e28 <iprintf+0x14>
 8016e22:	4620      	mov	r0, r4
 8016e24:	f7ff feb2 	bl	8016b8c <__sinit>
 8016e28:	ab05      	add	r3, sp, #20
 8016e2a:	9a04      	ldr	r2, [sp, #16]
 8016e2c:	68a1      	ldr	r1, [r4, #8]
 8016e2e:	9301      	str	r3, [sp, #4]
 8016e30:	4620      	mov	r0, r4
 8016e32:	f000 fab9 	bl	80173a8 <_vfiprintf_r>
 8016e36:	b002      	add	sp, #8
 8016e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e3c:	b004      	add	sp, #16
 8016e3e:	4770      	bx	lr
 8016e40:	24000034 	.word	0x24000034

08016e44 <rand>:
 8016e44:	4b17      	ldr	r3, [pc, #92]	; (8016ea4 <rand+0x60>)
 8016e46:	b510      	push	{r4, lr}
 8016e48:	681c      	ldr	r4, [r3, #0]
 8016e4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016e4c:	b9b3      	cbnz	r3, 8016e7c <rand+0x38>
 8016e4e:	2018      	movs	r0, #24
 8016e50:	f000 fa1c 	bl	801728c <malloc>
 8016e54:	63a0      	str	r0, [r4, #56]	; 0x38
 8016e56:	b928      	cbnz	r0, 8016e64 <rand+0x20>
 8016e58:	4602      	mov	r2, r0
 8016e5a:	4b13      	ldr	r3, [pc, #76]	; (8016ea8 <rand+0x64>)
 8016e5c:	4813      	ldr	r0, [pc, #76]	; (8016eac <rand+0x68>)
 8016e5e:	214e      	movs	r1, #78	; 0x4e
 8016e60:	f000 f900 	bl	8017064 <__assert_func>
 8016e64:	4a12      	ldr	r2, [pc, #72]	; (8016eb0 <rand+0x6c>)
 8016e66:	4b13      	ldr	r3, [pc, #76]	; (8016eb4 <rand+0x70>)
 8016e68:	e9c0 2300 	strd	r2, r3, [r0]
 8016e6c:	4b12      	ldr	r3, [pc, #72]	; (8016eb8 <rand+0x74>)
 8016e6e:	6083      	str	r3, [r0, #8]
 8016e70:	230b      	movs	r3, #11
 8016e72:	8183      	strh	r3, [r0, #12]
 8016e74:	2201      	movs	r2, #1
 8016e76:	2300      	movs	r3, #0
 8016e78:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016e7c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016e7e:	480f      	ldr	r0, [pc, #60]	; (8016ebc <rand+0x78>)
 8016e80:	690a      	ldr	r2, [r1, #16]
 8016e82:	694b      	ldr	r3, [r1, #20]
 8016e84:	4c0e      	ldr	r4, [pc, #56]	; (8016ec0 <rand+0x7c>)
 8016e86:	4350      	muls	r0, r2
 8016e88:	fb04 0003 	mla	r0, r4, r3, r0
 8016e8c:	fba2 3404 	umull	r3, r4, r2, r4
 8016e90:	1c5a      	adds	r2, r3, #1
 8016e92:	4404      	add	r4, r0
 8016e94:	f144 0000 	adc.w	r0, r4, #0
 8016e98:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016e9c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016ea0:	bd10      	pop	{r4, pc}
 8016ea2:	bf00      	nop
 8016ea4:	24000034 	.word	0x24000034
 8016ea8:	0801b3b8 	.word	0x0801b3b8
 8016eac:	0801b3cf 	.word	0x0801b3cf
 8016eb0:	abcd330e 	.word	0xabcd330e
 8016eb4:	e66d1234 	.word	0xe66d1234
 8016eb8:	0005deec 	.word	0x0005deec
 8016ebc:	5851f42d 	.word	0x5851f42d
 8016ec0:	4c957f2d 	.word	0x4c957f2d

08016ec4 <cleanup_glue>:
 8016ec4:	b538      	push	{r3, r4, r5, lr}
 8016ec6:	460c      	mov	r4, r1
 8016ec8:	6809      	ldr	r1, [r1, #0]
 8016eca:	4605      	mov	r5, r0
 8016ecc:	b109      	cbz	r1, 8016ed2 <cleanup_glue+0xe>
 8016ece:	f7ff fff9 	bl	8016ec4 <cleanup_glue>
 8016ed2:	4621      	mov	r1, r4
 8016ed4:	4628      	mov	r0, r5
 8016ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016eda:	f000 b9eb 	b.w	80172b4 <_free_r>
	...

08016ee0 <_reclaim_reent>:
 8016ee0:	4b2c      	ldr	r3, [pc, #176]	; (8016f94 <_reclaim_reent+0xb4>)
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	4283      	cmp	r3, r0
 8016ee6:	b570      	push	{r4, r5, r6, lr}
 8016ee8:	4604      	mov	r4, r0
 8016eea:	d051      	beq.n	8016f90 <_reclaim_reent+0xb0>
 8016eec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016eee:	b143      	cbz	r3, 8016f02 <_reclaim_reent+0x22>
 8016ef0:	68db      	ldr	r3, [r3, #12]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d14a      	bne.n	8016f8c <_reclaim_reent+0xac>
 8016ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ef8:	6819      	ldr	r1, [r3, #0]
 8016efa:	b111      	cbz	r1, 8016f02 <_reclaim_reent+0x22>
 8016efc:	4620      	mov	r0, r4
 8016efe:	f000 f9d9 	bl	80172b4 <_free_r>
 8016f02:	6961      	ldr	r1, [r4, #20]
 8016f04:	b111      	cbz	r1, 8016f0c <_reclaim_reent+0x2c>
 8016f06:	4620      	mov	r0, r4
 8016f08:	f000 f9d4 	bl	80172b4 <_free_r>
 8016f0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016f0e:	b111      	cbz	r1, 8016f16 <_reclaim_reent+0x36>
 8016f10:	4620      	mov	r0, r4
 8016f12:	f000 f9cf 	bl	80172b4 <_free_r>
 8016f16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016f18:	b111      	cbz	r1, 8016f20 <_reclaim_reent+0x40>
 8016f1a:	4620      	mov	r0, r4
 8016f1c:	f000 f9ca 	bl	80172b4 <_free_r>
 8016f20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016f22:	b111      	cbz	r1, 8016f2a <_reclaim_reent+0x4a>
 8016f24:	4620      	mov	r0, r4
 8016f26:	f000 f9c5 	bl	80172b4 <_free_r>
 8016f2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016f2c:	b111      	cbz	r1, 8016f34 <_reclaim_reent+0x54>
 8016f2e:	4620      	mov	r0, r4
 8016f30:	f000 f9c0 	bl	80172b4 <_free_r>
 8016f34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016f36:	b111      	cbz	r1, 8016f3e <_reclaim_reent+0x5e>
 8016f38:	4620      	mov	r0, r4
 8016f3a:	f000 f9bb 	bl	80172b4 <_free_r>
 8016f3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016f40:	b111      	cbz	r1, 8016f48 <_reclaim_reent+0x68>
 8016f42:	4620      	mov	r0, r4
 8016f44:	f000 f9b6 	bl	80172b4 <_free_r>
 8016f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f4a:	b111      	cbz	r1, 8016f52 <_reclaim_reent+0x72>
 8016f4c:	4620      	mov	r0, r4
 8016f4e:	f000 f9b1 	bl	80172b4 <_free_r>
 8016f52:	69a3      	ldr	r3, [r4, #24]
 8016f54:	b1e3      	cbz	r3, 8016f90 <_reclaim_reent+0xb0>
 8016f56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016f58:	4620      	mov	r0, r4
 8016f5a:	4798      	blx	r3
 8016f5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016f5e:	b1b9      	cbz	r1, 8016f90 <_reclaim_reent+0xb0>
 8016f60:	4620      	mov	r0, r4
 8016f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f66:	f7ff bfad 	b.w	8016ec4 <cleanup_glue>
 8016f6a:	5949      	ldr	r1, [r1, r5]
 8016f6c:	b941      	cbnz	r1, 8016f80 <_reclaim_reent+0xa0>
 8016f6e:	3504      	adds	r5, #4
 8016f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f72:	2d80      	cmp	r5, #128	; 0x80
 8016f74:	68d9      	ldr	r1, [r3, #12]
 8016f76:	d1f8      	bne.n	8016f6a <_reclaim_reent+0x8a>
 8016f78:	4620      	mov	r0, r4
 8016f7a:	f000 f99b 	bl	80172b4 <_free_r>
 8016f7e:	e7ba      	b.n	8016ef6 <_reclaim_reent+0x16>
 8016f80:	680e      	ldr	r6, [r1, #0]
 8016f82:	4620      	mov	r0, r4
 8016f84:	f000 f996 	bl	80172b4 <_free_r>
 8016f88:	4631      	mov	r1, r6
 8016f8a:	e7ef      	b.n	8016f6c <_reclaim_reent+0x8c>
 8016f8c:	2500      	movs	r5, #0
 8016f8e:	e7ef      	b.n	8016f70 <_reclaim_reent+0x90>
 8016f90:	bd70      	pop	{r4, r5, r6, pc}
 8016f92:	bf00      	nop
 8016f94:	24000034 	.word	0x24000034

08016f98 <_sbrk_r>:
 8016f98:	b538      	push	{r3, r4, r5, lr}
 8016f9a:	4d06      	ldr	r5, [pc, #24]	; (8016fb4 <_sbrk_r+0x1c>)
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	4604      	mov	r4, r0
 8016fa0:	4608      	mov	r0, r1
 8016fa2:	602b      	str	r3, [r5, #0]
 8016fa4:	f7e9 fd88 	bl	8000ab8 <_sbrk>
 8016fa8:	1c43      	adds	r3, r0, #1
 8016faa:	d102      	bne.n	8016fb2 <_sbrk_r+0x1a>
 8016fac:	682b      	ldr	r3, [r5, #0]
 8016fae:	b103      	cbz	r3, 8016fb2 <_sbrk_r+0x1a>
 8016fb0:	6023      	str	r3, [r4, #0]
 8016fb2:	bd38      	pop	{r3, r4, r5, pc}
 8016fb4:	24007fb4 	.word	0x24007fb4

08016fb8 <__sread>:
 8016fb8:	b510      	push	{r4, lr}
 8016fba:	460c      	mov	r4, r1
 8016fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fc0:	f000 fcb6 	bl	8017930 <_read_r>
 8016fc4:	2800      	cmp	r0, #0
 8016fc6:	bfab      	itete	ge
 8016fc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016fca:	89a3      	ldrhlt	r3, [r4, #12]
 8016fcc:	181b      	addge	r3, r3, r0
 8016fce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016fd2:	bfac      	ite	ge
 8016fd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8016fd6:	81a3      	strhlt	r3, [r4, #12]
 8016fd8:	bd10      	pop	{r4, pc}

08016fda <__swrite>:
 8016fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fde:	461f      	mov	r7, r3
 8016fe0:	898b      	ldrh	r3, [r1, #12]
 8016fe2:	05db      	lsls	r3, r3, #23
 8016fe4:	4605      	mov	r5, r0
 8016fe6:	460c      	mov	r4, r1
 8016fe8:	4616      	mov	r6, r2
 8016fea:	d505      	bpl.n	8016ff8 <__swrite+0x1e>
 8016fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ff0:	2302      	movs	r3, #2
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	f000 f938 	bl	8017268 <_lseek_r>
 8016ff8:	89a3      	ldrh	r3, [r4, #12]
 8016ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017002:	81a3      	strh	r3, [r4, #12]
 8017004:	4632      	mov	r2, r6
 8017006:	463b      	mov	r3, r7
 8017008:	4628      	mov	r0, r5
 801700a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801700e:	f000 b817 	b.w	8017040 <_write_r>

08017012 <__sseek>:
 8017012:	b510      	push	{r4, lr}
 8017014:	460c      	mov	r4, r1
 8017016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801701a:	f000 f925 	bl	8017268 <_lseek_r>
 801701e:	1c43      	adds	r3, r0, #1
 8017020:	89a3      	ldrh	r3, [r4, #12]
 8017022:	bf15      	itete	ne
 8017024:	6560      	strne	r0, [r4, #84]	; 0x54
 8017026:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801702a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801702e:	81a3      	strheq	r3, [r4, #12]
 8017030:	bf18      	it	ne
 8017032:	81a3      	strhne	r3, [r4, #12]
 8017034:	bd10      	pop	{r4, pc}

08017036 <__sclose>:
 8017036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801703a:	f000 b831 	b.w	80170a0 <_close_r>
	...

08017040 <_write_r>:
 8017040:	b538      	push	{r3, r4, r5, lr}
 8017042:	4d07      	ldr	r5, [pc, #28]	; (8017060 <_write_r+0x20>)
 8017044:	4604      	mov	r4, r0
 8017046:	4608      	mov	r0, r1
 8017048:	4611      	mov	r1, r2
 801704a:	2200      	movs	r2, #0
 801704c:	602a      	str	r2, [r5, #0]
 801704e:	461a      	mov	r2, r3
 8017050:	f7e9 fce1 	bl	8000a16 <_write>
 8017054:	1c43      	adds	r3, r0, #1
 8017056:	d102      	bne.n	801705e <_write_r+0x1e>
 8017058:	682b      	ldr	r3, [r5, #0]
 801705a:	b103      	cbz	r3, 801705e <_write_r+0x1e>
 801705c:	6023      	str	r3, [r4, #0]
 801705e:	bd38      	pop	{r3, r4, r5, pc}
 8017060:	24007fb4 	.word	0x24007fb4

08017064 <__assert_func>:
 8017064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017066:	4614      	mov	r4, r2
 8017068:	461a      	mov	r2, r3
 801706a:	4b09      	ldr	r3, [pc, #36]	; (8017090 <__assert_func+0x2c>)
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	4605      	mov	r5, r0
 8017070:	68d8      	ldr	r0, [r3, #12]
 8017072:	b14c      	cbz	r4, 8017088 <__assert_func+0x24>
 8017074:	4b07      	ldr	r3, [pc, #28]	; (8017094 <__assert_func+0x30>)
 8017076:	9100      	str	r1, [sp, #0]
 8017078:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801707c:	4906      	ldr	r1, [pc, #24]	; (8017098 <__assert_func+0x34>)
 801707e:	462b      	mov	r3, r5
 8017080:	f000 f8e0 	bl	8017244 <fiprintf>
 8017084:	f000 fd26 	bl	8017ad4 <abort>
 8017088:	4b04      	ldr	r3, [pc, #16]	; (801709c <__assert_func+0x38>)
 801708a:	461c      	mov	r4, r3
 801708c:	e7f3      	b.n	8017076 <__assert_func+0x12>
 801708e:	bf00      	nop
 8017090:	24000034 	.word	0x24000034
 8017094:	0801b42e 	.word	0x0801b42e
 8017098:	0801b43b 	.word	0x0801b43b
 801709c:	0801b469 	.word	0x0801b469

080170a0 <_close_r>:
 80170a0:	b538      	push	{r3, r4, r5, lr}
 80170a2:	4d06      	ldr	r5, [pc, #24]	; (80170bc <_close_r+0x1c>)
 80170a4:	2300      	movs	r3, #0
 80170a6:	4604      	mov	r4, r0
 80170a8:	4608      	mov	r0, r1
 80170aa:	602b      	str	r3, [r5, #0]
 80170ac:	f7e9 fccf 	bl	8000a4e <_close>
 80170b0:	1c43      	adds	r3, r0, #1
 80170b2:	d102      	bne.n	80170ba <_close_r+0x1a>
 80170b4:	682b      	ldr	r3, [r5, #0]
 80170b6:	b103      	cbz	r3, 80170ba <_close_r+0x1a>
 80170b8:	6023      	str	r3, [r4, #0]
 80170ba:	bd38      	pop	{r3, r4, r5, pc}
 80170bc:	24007fb4 	.word	0x24007fb4

080170c0 <__sflush_r>:
 80170c0:	898a      	ldrh	r2, [r1, #12]
 80170c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170c6:	4605      	mov	r5, r0
 80170c8:	0710      	lsls	r0, r2, #28
 80170ca:	460c      	mov	r4, r1
 80170cc:	d458      	bmi.n	8017180 <__sflush_r+0xc0>
 80170ce:	684b      	ldr	r3, [r1, #4]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	dc05      	bgt.n	80170e0 <__sflush_r+0x20>
 80170d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	dc02      	bgt.n	80170e0 <__sflush_r+0x20>
 80170da:	2000      	movs	r0, #0
 80170dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80170e2:	2e00      	cmp	r6, #0
 80170e4:	d0f9      	beq.n	80170da <__sflush_r+0x1a>
 80170e6:	2300      	movs	r3, #0
 80170e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80170ec:	682f      	ldr	r7, [r5, #0]
 80170ee:	602b      	str	r3, [r5, #0]
 80170f0:	d032      	beq.n	8017158 <__sflush_r+0x98>
 80170f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80170f4:	89a3      	ldrh	r3, [r4, #12]
 80170f6:	075a      	lsls	r2, r3, #29
 80170f8:	d505      	bpl.n	8017106 <__sflush_r+0x46>
 80170fa:	6863      	ldr	r3, [r4, #4]
 80170fc:	1ac0      	subs	r0, r0, r3
 80170fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017100:	b10b      	cbz	r3, 8017106 <__sflush_r+0x46>
 8017102:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017104:	1ac0      	subs	r0, r0, r3
 8017106:	2300      	movs	r3, #0
 8017108:	4602      	mov	r2, r0
 801710a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801710c:	6a21      	ldr	r1, [r4, #32]
 801710e:	4628      	mov	r0, r5
 8017110:	47b0      	blx	r6
 8017112:	1c43      	adds	r3, r0, #1
 8017114:	89a3      	ldrh	r3, [r4, #12]
 8017116:	d106      	bne.n	8017126 <__sflush_r+0x66>
 8017118:	6829      	ldr	r1, [r5, #0]
 801711a:	291d      	cmp	r1, #29
 801711c:	d82c      	bhi.n	8017178 <__sflush_r+0xb8>
 801711e:	4a2a      	ldr	r2, [pc, #168]	; (80171c8 <__sflush_r+0x108>)
 8017120:	40ca      	lsrs	r2, r1
 8017122:	07d6      	lsls	r6, r2, #31
 8017124:	d528      	bpl.n	8017178 <__sflush_r+0xb8>
 8017126:	2200      	movs	r2, #0
 8017128:	6062      	str	r2, [r4, #4]
 801712a:	04d9      	lsls	r1, r3, #19
 801712c:	6922      	ldr	r2, [r4, #16]
 801712e:	6022      	str	r2, [r4, #0]
 8017130:	d504      	bpl.n	801713c <__sflush_r+0x7c>
 8017132:	1c42      	adds	r2, r0, #1
 8017134:	d101      	bne.n	801713a <__sflush_r+0x7a>
 8017136:	682b      	ldr	r3, [r5, #0]
 8017138:	b903      	cbnz	r3, 801713c <__sflush_r+0x7c>
 801713a:	6560      	str	r0, [r4, #84]	; 0x54
 801713c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801713e:	602f      	str	r7, [r5, #0]
 8017140:	2900      	cmp	r1, #0
 8017142:	d0ca      	beq.n	80170da <__sflush_r+0x1a>
 8017144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017148:	4299      	cmp	r1, r3
 801714a:	d002      	beq.n	8017152 <__sflush_r+0x92>
 801714c:	4628      	mov	r0, r5
 801714e:	f000 f8b1 	bl	80172b4 <_free_r>
 8017152:	2000      	movs	r0, #0
 8017154:	6360      	str	r0, [r4, #52]	; 0x34
 8017156:	e7c1      	b.n	80170dc <__sflush_r+0x1c>
 8017158:	6a21      	ldr	r1, [r4, #32]
 801715a:	2301      	movs	r3, #1
 801715c:	4628      	mov	r0, r5
 801715e:	47b0      	blx	r6
 8017160:	1c41      	adds	r1, r0, #1
 8017162:	d1c7      	bne.n	80170f4 <__sflush_r+0x34>
 8017164:	682b      	ldr	r3, [r5, #0]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d0c4      	beq.n	80170f4 <__sflush_r+0x34>
 801716a:	2b1d      	cmp	r3, #29
 801716c:	d001      	beq.n	8017172 <__sflush_r+0xb2>
 801716e:	2b16      	cmp	r3, #22
 8017170:	d101      	bne.n	8017176 <__sflush_r+0xb6>
 8017172:	602f      	str	r7, [r5, #0]
 8017174:	e7b1      	b.n	80170da <__sflush_r+0x1a>
 8017176:	89a3      	ldrh	r3, [r4, #12]
 8017178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801717c:	81a3      	strh	r3, [r4, #12]
 801717e:	e7ad      	b.n	80170dc <__sflush_r+0x1c>
 8017180:	690f      	ldr	r7, [r1, #16]
 8017182:	2f00      	cmp	r7, #0
 8017184:	d0a9      	beq.n	80170da <__sflush_r+0x1a>
 8017186:	0793      	lsls	r3, r2, #30
 8017188:	680e      	ldr	r6, [r1, #0]
 801718a:	bf08      	it	eq
 801718c:	694b      	ldreq	r3, [r1, #20]
 801718e:	600f      	str	r7, [r1, #0]
 8017190:	bf18      	it	ne
 8017192:	2300      	movne	r3, #0
 8017194:	eba6 0807 	sub.w	r8, r6, r7
 8017198:	608b      	str	r3, [r1, #8]
 801719a:	f1b8 0f00 	cmp.w	r8, #0
 801719e:	dd9c      	ble.n	80170da <__sflush_r+0x1a>
 80171a0:	6a21      	ldr	r1, [r4, #32]
 80171a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80171a4:	4643      	mov	r3, r8
 80171a6:	463a      	mov	r2, r7
 80171a8:	4628      	mov	r0, r5
 80171aa:	47b0      	blx	r6
 80171ac:	2800      	cmp	r0, #0
 80171ae:	dc06      	bgt.n	80171be <__sflush_r+0xfe>
 80171b0:	89a3      	ldrh	r3, [r4, #12]
 80171b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171b6:	81a3      	strh	r3, [r4, #12]
 80171b8:	f04f 30ff 	mov.w	r0, #4294967295
 80171bc:	e78e      	b.n	80170dc <__sflush_r+0x1c>
 80171be:	4407      	add	r7, r0
 80171c0:	eba8 0800 	sub.w	r8, r8, r0
 80171c4:	e7e9      	b.n	801719a <__sflush_r+0xda>
 80171c6:	bf00      	nop
 80171c8:	20400001 	.word	0x20400001

080171cc <_fflush_r>:
 80171cc:	b538      	push	{r3, r4, r5, lr}
 80171ce:	690b      	ldr	r3, [r1, #16]
 80171d0:	4605      	mov	r5, r0
 80171d2:	460c      	mov	r4, r1
 80171d4:	b913      	cbnz	r3, 80171dc <_fflush_r+0x10>
 80171d6:	2500      	movs	r5, #0
 80171d8:	4628      	mov	r0, r5
 80171da:	bd38      	pop	{r3, r4, r5, pc}
 80171dc:	b118      	cbz	r0, 80171e6 <_fflush_r+0x1a>
 80171de:	6983      	ldr	r3, [r0, #24]
 80171e0:	b90b      	cbnz	r3, 80171e6 <_fflush_r+0x1a>
 80171e2:	f7ff fcd3 	bl	8016b8c <__sinit>
 80171e6:	4b14      	ldr	r3, [pc, #80]	; (8017238 <_fflush_r+0x6c>)
 80171e8:	429c      	cmp	r4, r3
 80171ea:	d11b      	bne.n	8017224 <_fflush_r+0x58>
 80171ec:	686c      	ldr	r4, [r5, #4]
 80171ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d0ef      	beq.n	80171d6 <_fflush_r+0xa>
 80171f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80171f8:	07d0      	lsls	r0, r2, #31
 80171fa:	d404      	bmi.n	8017206 <_fflush_r+0x3a>
 80171fc:	0599      	lsls	r1, r3, #22
 80171fe:	d402      	bmi.n	8017206 <_fflush_r+0x3a>
 8017200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017202:	f7ff fd86 	bl	8016d12 <__retarget_lock_acquire_recursive>
 8017206:	4628      	mov	r0, r5
 8017208:	4621      	mov	r1, r4
 801720a:	f7ff ff59 	bl	80170c0 <__sflush_r>
 801720e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017210:	07da      	lsls	r2, r3, #31
 8017212:	4605      	mov	r5, r0
 8017214:	d4e0      	bmi.n	80171d8 <_fflush_r+0xc>
 8017216:	89a3      	ldrh	r3, [r4, #12]
 8017218:	059b      	lsls	r3, r3, #22
 801721a:	d4dd      	bmi.n	80171d8 <_fflush_r+0xc>
 801721c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801721e:	f7ff fd79 	bl	8016d14 <__retarget_lock_release_recursive>
 8017222:	e7d9      	b.n	80171d8 <_fflush_r+0xc>
 8017224:	4b05      	ldr	r3, [pc, #20]	; (801723c <_fflush_r+0x70>)
 8017226:	429c      	cmp	r4, r3
 8017228:	d101      	bne.n	801722e <_fflush_r+0x62>
 801722a:	68ac      	ldr	r4, [r5, #8]
 801722c:	e7df      	b.n	80171ee <_fflush_r+0x22>
 801722e:	4b04      	ldr	r3, [pc, #16]	; (8017240 <_fflush_r+0x74>)
 8017230:	429c      	cmp	r4, r3
 8017232:	bf08      	it	eq
 8017234:	68ec      	ldreq	r4, [r5, #12]
 8017236:	e7da      	b.n	80171ee <_fflush_r+0x22>
 8017238:	0801b374 	.word	0x0801b374
 801723c:	0801b394 	.word	0x0801b394
 8017240:	0801b354 	.word	0x0801b354

08017244 <fiprintf>:
 8017244:	b40e      	push	{r1, r2, r3}
 8017246:	b503      	push	{r0, r1, lr}
 8017248:	4601      	mov	r1, r0
 801724a:	ab03      	add	r3, sp, #12
 801724c:	4805      	ldr	r0, [pc, #20]	; (8017264 <fiprintf+0x20>)
 801724e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017252:	6800      	ldr	r0, [r0, #0]
 8017254:	9301      	str	r3, [sp, #4]
 8017256:	f000 f8a7 	bl	80173a8 <_vfiprintf_r>
 801725a:	b002      	add	sp, #8
 801725c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017260:	b003      	add	sp, #12
 8017262:	4770      	bx	lr
 8017264:	24000034 	.word	0x24000034

08017268 <_lseek_r>:
 8017268:	b538      	push	{r3, r4, r5, lr}
 801726a:	4d07      	ldr	r5, [pc, #28]	; (8017288 <_lseek_r+0x20>)
 801726c:	4604      	mov	r4, r0
 801726e:	4608      	mov	r0, r1
 8017270:	4611      	mov	r1, r2
 8017272:	2200      	movs	r2, #0
 8017274:	602a      	str	r2, [r5, #0]
 8017276:	461a      	mov	r2, r3
 8017278:	f7e9 fc10 	bl	8000a9c <_lseek>
 801727c:	1c43      	adds	r3, r0, #1
 801727e:	d102      	bne.n	8017286 <_lseek_r+0x1e>
 8017280:	682b      	ldr	r3, [r5, #0]
 8017282:	b103      	cbz	r3, 8017286 <_lseek_r+0x1e>
 8017284:	6023      	str	r3, [r4, #0]
 8017286:	bd38      	pop	{r3, r4, r5, pc}
 8017288:	24007fb4 	.word	0x24007fb4

0801728c <malloc>:
 801728c:	4b02      	ldr	r3, [pc, #8]	; (8017298 <malloc+0xc>)
 801728e:	4601      	mov	r1, r0
 8017290:	6818      	ldr	r0, [r3, #0]
 8017292:	f7ff bd65 	b.w	8016d60 <_malloc_r>
 8017296:	bf00      	nop
 8017298:	24000034 	.word	0x24000034

0801729c <__malloc_lock>:
 801729c:	4801      	ldr	r0, [pc, #4]	; (80172a4 <__malloc_lock+0x8>)
 801729e:	f7ff bd38 	b.w	8016d12 <__retarget_lock_acquire_recursive>
 80172a2:	bf00      	nop
 80172a4:	24007fc0 	.word	0x24007fc0

080172a8 <__malloc_unlock>:
 80172a8:	4801      	ldr	r0, [pc, #4]	; (80172b0 <__malloc_unlock+0x8>)
 80172aa:	f7ff bd33 	b.w	8016d14 <__retarget_lock_release_recursive>
 80172ae:	bf00      	nop
 80172b0:	24007fc0 	.word	0x24007fc0

080172b4 <_free_r>:
 80172b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80172b6:	2900      	cmp	r1, #0
 80172b8:	d048      	beq.n	801734c <_free_r+0x98>
 80172ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172be:	9001      	str	r0, [sp, #4]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	f1a1 0404 	sub.w	r4, r1, #4
 80172c6:	bfb8      	it	lt
 80172c8:	18e4      	addlt	r4, r4, r3
 80172ca:	f7ff ffe7 	bl	801729c <__malloc_lock>
 80172ce:	4a20      	ldr	r2, [pc, #128]	; (8017350 <_free_r+0x9c>)
 80172d0:	9801      	ldr	r0, [sp, #4]
 80172d2:	6813      	ldr	r3, [r2, #0]
 80172d4:	4615      	mov	r5, r2
 80172d6:	b933      	cbnz	r3, 80172e6 <_free_r+0x32>
 80172d8:	6063      	str	r3, [r4, #4]
 80172da:	6014      	str	r4, [r2, #0]
 80172dc:	b003      	add	sp, #12
 80172de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80172e2:	f7ff bfe1 	b.w	80172a8 <__malloc_unlock>
 80172e6:	42a3      	cmp	r3, r4
 80172e8:	d90b      	bls.n	8017302 <_free_r+0x4e>
 80172ea:	6821      	ldr	r1, [r4, #0]
 80172ec:	1862      	adds	r2, r4, r1
 80172ee:	4293      	cmp	r3, r2
 80172f0:	bf04      	itt	eq
 80172f2:	681a      	ldreq	r2, [r3, #0]
 80172f4:	685b      	ldreq	r3, [r3, #4]
 80172f6:	6063      	str	r3, [r4, #4]
 80172f8:	bf04      	itt	eq
 80172fa:	1852      	addeq	r2, r2, r1
 80172fc:	6022      	streq	r2, [r4, #0]
 80172fe:	602c      	str	r4, [r5, #0]
 8017300:	e7ec      	b.n	80172dc <_free_r+0x28>
 8017302:	461a      	mov	r2, r3
 8017304:	685b      	ldr	r3, [r3, #4]
 8017306:	b10b      	cbz	r3, 801730c <_free_r+0x58>
 8017308:	42a3      	cmp	r3, r4
 801730a:	d9fa      	bls.n	8017302 <_free_r+0x4e>
 801730c:	6811      	ldr	r1, [r2, #0]
 801730e:	1855      	adds	r5, r2, r1
 8017310:	42a5      	cmp	r5, r4
 8017312:	d10b      	bne.n	801732c <_free_r+0x78>
 8017314:	6824      	ldr	r4, [r4, #0]
 8017316:	4421      	add	r1, r4
 8017318:	1854      	adds	r4, r2, r1
 801731a:	42a3      	cmp	r3, r4
 801731c:	6011      	str	r1, [r2, #0]
 801731e:	d1dd      	bne.n	80172dc <_free_r+0x28>
 8017320:	681c      	ldr	r4, [r3, #0]
 8017322:	685b      	ldr	r3, [r3, #4]
 8017324:	6053      	str	r3, [r2, #4]
 8017326:	4421      	add	r1, r4
 8017328:	6011      	str	r1, [r2, #0]
 801732a:	e7d7      	b.n	80172dc <_free_r+0x28>
 801732c:	d902      	bls.n	8017334 <_free_r+0x80>
 801732e:	230c      	movs	r3, #12
 8017330:	6003      	str	r3, [r0, #0]
 8017332:	e7d3      	b.n	80172dc <_free_r+0x28>
 8017334:	6825      	ldr	r5, [r4, #0]
 8017336:	1961      	adds	r1, r4, r5
 8017338:	428b      	cmp	r3, r1
 801733a:	bf04      	itt	eq
 801733c:	6819      	ldreq	r1, [r3, #0]
 801733e:	685b      	ldreq	r3, [r3, #4]
 8017340:	6063      	str	r3, [r4, #4]
 8017342:	bf04      	itt	eq
 8017344:	1949      	addeq	r1, r1, r5
 8017346:	6021      	streq	r1, [r4, #0]
 8017348:	6054      	str	r4, [r2, #4]
 801734a:	e7c7      	b.n	80172dc <_free_r+0x28>
 801734c:	b003      	add	sp, #12
 801734e:	bd30      	pop	{r4, r5, pc}
 8017350:	24004c20 	.word	0x24004c20

08017354 <__sfputc_r>:
 8017354:	6893      	ldr	r3, [r2, #8]
 8017356:	3b01      	subs	r3, #1
 8017358:	2b00      	cmp	r3, #0
 801735a:	b410      	push	{r4}
 801735c:	6093      	str	r3, [r2, #8]
 801735e:	da08      	bge.n	8017372 <__sfputc_r+0x1e>
 8017360:	6994      	ldr	r4, [r2, #24]
 8017362:	42a3      	cmp	r3, r4
 8017364:	db01      	blt.n	801736a <__sfputc_r+0x16>
 8017366:	290a      	cmp	r1, #10
 8017368:	d103      	bne.n	8017372 <__sfputc_r+0x1e>
 801736a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801736e:	f000 baf1 	b.w	8017954 <__swbuf_r>
 8017372:	6813      	ldr	r3, [r2, #0]
 8017374:	1c58      	adds	r0, r3, #1
 8017376:	6010      	str	r0, [r2, #0]
 8017378:	7019      	strb	r1, [r3, #0]
 801737a:	4608      	mov	r0, r1
 801737c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017380:	4770      	bx	lr

08017382 <__sfputs_r>:
 8017382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017384:	4606      	mov	r6, r0
 8017386:	460f      	mov	r7, r1
 8017388:	4614      	mov	r4, r2
 801738a:	18d5      	adds	r5, r2, r3
 801738c:	42ac      	cmp	r4, r5
 801738e:	d101      	bne.n	8017394 <__sfputs_r+0x12>
 8017390:	2000      	movs	r0, #0
 8017392:	e007      	b.n	80173a4 <__sfputs_r+0x22>
 8017394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017398:	463a      	mov	r2, r7
 801739a:	4630      	mov	r0, r6
 801739c:	f7ff ffda 	bl	8017354 <__sfputc_r>
 80173a0:	1c43      	adds	r3, r0, #1
 80173a2:	d1f3      	bne.n	801738c <__sfputs_r+0xa>
 80173a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080173a8 <_vfiprintf_r>:
 80173a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173ac:	460d      	mov	r5, r1
 80173ae:	b09d      	sub	sp, #116	; 0x74
 80173b0:	4614      	mov	r4, r2
 80173b2:	4698      	mov	r8, r3
 80173b4:	4606      	mov	r6, r0
 80173b6:	b118      	cbz	r0, 80173c0 <_vfiprintf_r+0x18>
 80173b8:	6983      	ldr	r3, [r0, #24]
 80173ba:	b90b      	cbnz	r3, 80173c0 <_vfiprintf_r+0x18>
 80173bc:	f7ff fbe6 	bl	8016b8c <__sinit>
 80173c0:	4b89      	ldr	r3, [pc, #548]	; (80175e8 <_vfiprintf_r+0x240>)
 80173c2:	429d      	cmp	r5, r3
 80173c4:	d11b      	bne.n	80173fe <_vfiprintf_r+0x56>
 80173c6:	6875      	ldr	r5, [r6, #4]
 80173c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80173ca:	07d9      	lsls	r1, r3, #31
 80173cc:	d405      	bmi.n	80173da <_vfiprintf_r+0x32>
 80173ce:	89ab      	ldrh	r3, [r5, #12]
 80173d0:	059a      	lsls	r2, r3, #22
 80173d2:	d402      	bmi.n	80173da <_vfiprintf_r+0x32>
 80173d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80173d6:	f7ff fc9c 	bl	8016d12 <__retarget_lock_acquire_recursive>
 80173da:	89ab      	ldrh	r3, [r5, #12]
 80173dc:	071b      	lsls	r3, r3, #28
 80173de:	d501      	bpl.n	80173e4 <_vfiprintf_r+0x3c>
 80173e0:	692b      	ldr	r3, [r5, #16]
 80173e2:	b9eb      	cbnz	r3, 8017420 <_vfiprintf_r+0x78>
 80173e4:	4629      	mov	r1, r5
 80173e6:	4630      	mov	r0, r6
 80173e8:	f000 fb06 	bl	80179f8 <__swsetup_r>
 80173ec:	b1c0      	cbz	r0, 8017420 <_vfiprintf_r+0x78>
 80173ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80173f0:	07dc      	lsls	r4, r3, #31
 80173f2:	d50e      	bpl.n	8017412 <_vfiprintf_r+0x6a>
 80173f4:	f04f 30ff 	mov.w	r0, #4294967295
 80173f8:	b01d      	add	sp, #116	; 0x74
 80173fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173fe:	4b7b      	ldr	r3, [pc, #492]	; (80175ec <_vfiprintf_r+0x244>)
 8017400:	429d      	cmp	r5, r3
 8017402:	d101      	bne.n	8017408 <_vfiprintf_r+0x60>
 8017404:	68b5      	ldr	r5, [r6, #8]
 8017406:	e7df      	b.n	80173c8 <_vfiprintf_r+0x20>
 8017408:	4b79      	ldr	r3, [pc, #484]	; (80175f0 <_vfiprintf_r+0x248>)
 801740a:	429d      	cmp	r5, r3
 801740c:	bf08      	it	eq
 801740e:	68f5      	ldreq	r5, [r6, #12]
 8017410:	e7da      	b.n	80173c8 <_vfiprintf_r+0x20>
 8017412:	89ab      	ldrh	r3, [r5, #12]
 8017414:	0598      	lsls	r0, r3, #22
 8017416:	d4ed      	bmi.n	80173f4 <_vfiprintf_r+0x4c>
 8017418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801741a:	f7ff fc7b 	bl	8016d14 <__retarget_lock_release_recursive>
 801741e:	e7e9      	b.n	80173f4 <_vfiprintf_r+0x4c>
 8017420:	2300      	movs	r3, #0
 8017422:	9309      	str	r3, [sp, #36]	; 0x24
 8017424:	2320      	movs	r3, #32
 8017426:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801742a:	f8cd 800c 	str.w	r8, [sp, #12]
 801742e:	2330      	movs	r3, #48	; 0x30
 8017430:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80175f4 <_vfiprintf_r+0x24c>
 8017434:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017438:	f04f 0901 	mov.w	r9, #1
 801743c:	4623      	mov	r3, r4
 801743e:	469a      	mov	sl, r3
 8017440:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017444:	b10a      	cbz	r2, 801744a <_vfiprintf_r+0xa2>
 8017446:	2a25      	cmp	r2, #37	; 0x25
 8017448:	d1f9      	bne.n	801743e <_vfiprintf_r+0x96>
 801744a:	ebba 0b04 	subs.w	fp, sl, r4
 801744e:	d00b      	beq.n	8017468 <_vfiprintf_r+0xc0>
 8017450:	465b      	mov	r3, fp
 8017452:	4622      	mov	r2, r4
 8017454:	4629      	mov	r1, r5
 8017456:	4630      	mov	r0, r6
 8017458:	f7ff ff93 	bl	8017382 <__sfputs_r>
 801745c:	3001      	adds	r0, #1
 801745e:	f000 80aa 	beq.w	80175b6 <_vfiprintf_r+0x20e>
 8017462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017464:	445a      	add	r2, fp
 8017466:	9209      	str	r2, [sp, #36]	; 0x24
 8017468:	f89a 3000 	ldrb.w	r3, [sl]
 801746c:	2b00      	cmp	r3, #0
 801746e:	f000 80a2 	beq.w	80175b6 <_vfiprintf_r+0x20e>
 8017472:	2300      	movs	r3, #0
 8017474:	f04f 32ff 	mov.w	r2, #4294967295
 8017478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801747c:	f10a 0a01 	add.w	sl, sl, #1
 8017480:	9304      	str	r3, [sp, #16]
 8017482:	9307      	str	r3, [sp, #28]
 8017484:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017488:	931a      	str	r3, [sp, #104]	; 0x68
 801748a:	4654      	mov	r4, sl
 801748c:	2205      	movs	r2, #5
 801748e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017492:	4858      	ldr	r0, [pc, #352]	; (80175f4 <_vfiprintf_r+0x24c>)
 8017494:	f7e8 ff24 	bl	80002e0 <memchr>
 8017498:	9a04      	ldr	r2, [sp, #16]
 801749a:	b9d8      	cbnz	r0, 80174d4 <_vfiprintf_r+0x12c>
 801749c:	06d1      	lsls	r1, r2, #27
 801749e:	bf44      	itt	mi
 80174a0:	2320      	movmi	r3, #32
 80174a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80174a6:	0713      	lsls	r3, r2, #28
 80174a8:	bf44      	itt	mi
 80174aa:	232b      	movmi	r3, #43	; 0x2b
 80174ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80174b0:	f89a 3000 	ldrb.w	r3, [sl]
 80174b4:	2b2a      	cmp	r3, #42	; 0x2a
 80174b6:	d015      	beq.n	80174e4 <_vfiprintf_r+0x13c>
 80174b8:	9a07      	ldr	r2, [sp, #28]
 80174ba:	4654      	mov	r4, sl
 80174bc:	2000      	movs	r0, #0
 80174be:	f04f 0c0a 	mov.w	ip, #10
 80174c2:	4621      	mov	r1, r4
 80174c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80174c8:	3b30      	subs	r3, #48	; 0x30
 80174ca:	2b09      	cmp	r3, #9
 80174cc:	d94e      	bls.n	801756c <_vfiprintf_r+0x1c4>
 80174ce:	b1b0      	cbz	r0, 80174fe <_vfiprintf_r+0x156>
 80174d0:	9207      	str	r2, [sp, #28]
 80174d2:	e014      	b.n	80174fe <_vfiprintf_r+0x156>
 80174d4:	eba0 0308 	sub.w	r3, r0, r8
 80174d8:	fa09 f303 	lsl.w	r3, r9, r3
 80174dc:	4313      	orrs	r3, r2
 80174de:	9304      	str	r3, [sp, #16]
 80174e0:	46a2      	mov	sl, r4
 80174e2:	e7d2      	b.n	801748a <_vfiprintf_r+0xe2>
 80174e4:	9b03      	ldr	r3, [sp, #12]
 80174e6:	1d19      	adds	r1, r3, #4
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	9103      	str	r1, [sp, #12]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	bfbb      	ittet	lt
 80174f0:	425b      	neglt	r3, r3
 80174f2:	f042 0202 	orrlt.w	r2, r2, #2
 80174f6:	9307      	strge	r3, [sp, #28]
 80174f8:	9307      	strlt	r3, [sp, #28]
 80174fa:	bfb8      	it	lt
 80174fc:	9204      	strlt	r2, [sp, #16]
 80174fe:	7823      	ldrb	r3, [r4, #0]
 8017500:	2b2e      	cmp	r3, #46	; 0x2e
 8017502:	d10c      	bne.n	801751e <_vfiprintf_r+0x176>
 8017504:	7863      	ldrb	r3, [r4, #1]
 8017506:	2b2a      	cmp	r3, #42	; 0x2a
 8017508:	d135      	bne.n	8017576 <_vfiprintf_r+0x1ce>
 801750a:	9b03      	ldr	r3, [sp, #12]
 801750c:	1d1a      	adds	r2, r3, #4
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	9203      	str	r2, [sp, #12]
 8017512:	2b00      	cmp	r3, #0
 8017514:	bfb8      	it	lt
 8017516:	f04f 33ff 	movlt.w	r3, #4294967295
 801751a:	3402      	adds	r4, #2
 801751c:	9305      	str	r3, [sp, #20]
 801751e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017604 <_vfiprintf_r+0x25c>
 8017522:	7821      	ldrb	r1, [r4, #0]
 8017524:	2203      	movs	r2, #3
 8017526:	4650      	mov	r0, sl
 8017528:	f7e8 feda 	bl	80002e0 <memchr>
 801752c:	b140      	cbz	r0, 8017540 <_vfiprintf_r+0x198>
 801752e:	2340      	movs	r3, #64	; 0x40
 8017530:	eba0 000a 	sub.w	r0, r0, sl
 8017534:	fa03 f000 	lsl.w	r0, r3, r0
 8017538:	9b04      	ldr	r3, [sp, #16]
 801753a:	4303      	orrs	r3, r0
 801753c:	3401      	adds	r4, #1
 801753e:	9304      	str	r3, [sp, #16]
 8017540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017544:	482c      	ldr	r0, [pc, #176]	; (80175f8 <_vfiprintf_r+0x250>)
 8017546:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801754a:	2206      	movs	r2, #6
 801754c:	f7e8 fec8 	bl	80002e0 <memchr>
 8017550:	2800      	cmp	r0, #0
 8017552:	d03f      	beq.n	80175d4 <_vfiprintf_r+0x22c>
 8017554:	4b29      	ldr	r3, [pc, #164]	; (80175fc <_vfiprintf_r+0x254>)
 8017556:	bb1b      	cbnz	r3, 80175a0 <_vfiprintf_r+0x1f8>
 8017558:	9b03      	ldr	r3, [sp, #12]
 801755a:	3307      	adds	r3, #7
 801755c:	f023 0307 	bic.w	r3, r3, #7
 8017560:	3308      	adds	r3, #8
 8017562:	9303      	str	r3, [sp, #12]
 8017564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017566:	443b      	add	r3, r7
 8017568:	9309      	str	r3, [sp, #36]	; 0x24
 801756a:	e767      	b.n	801743c <_vfiprintf_r+0x94>
 801756c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017570:	460c      	mov	r4, r1
 8017572:	2001      	movs	r0, #1
 8017574:	e7a5      	b.n	80174c2 <_vfiprintf_r+0x11a>
 8017576:	2300      	movs	r3, #0
 8017578:	3401      	adds	r4, #1
 801757a:	9305      	str	r3, [sp, #20]
 801757c:	4619      	mov	r1, r3
 801757e:	f04f 0c0a 	mov.w	ip, #10
 8017582:	4620      	mov	r0, r4
 8017584:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017588:	3a30      	subs	r2, #48	; 0x30
 801758a:	2a09      	cmp	r2, #9
 801758c:	d903      	bls.n	8017596 <_vfiprintf_r+0x1ee>
 801758e:	2b00      	cmp	r3, #0
 8017590:	d0c5      	beq.n	801751e <_vfiprintf_r+0x176>
 8017592:	9105      	str	r1, [sp, #20]
 8017594:	e7c3      	b.n	801751e <_vfiprintf_r+0x176>
 8017596:	fb0c 2101 	mla	r1, ip, r1, r2
 801759a:	4604      	mov	r4, r0
 801759c:	2301      	movs	r3, #1
 801759e:	e7f0      	b.n	8017582 <_vfiprintf_r+0x1da>
 80175a0:	ab03      	add	r3, sp, #12
 80175a2:	9300      	str	r3, [sp, #0]
 80175a4:	462a      	mov	r2, r5
 80175a6:	4b16      	ldr	r3, [pc, #88]	; (8017600 <_vfiprintf_r+0x258>)
 80175a8:	a904      	add	r1, sp, #16
 80175aa:	4630      	mov	r0, r6
 80175ac:	f3af 8000 	nop.w
 80175b0:	4607      	mov	r7, r0
 80175b2:	1c78      	adds	r0, r7, #1
 80175b4:	d1d6      	bne.n	8017564 <_vfiprintf_r+0x1bc>
 80175b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80175b8:	07d9      	lsls	r1, r3, #31
 80175ba:	d405      	bmi.n	80175c8 <_vfiprintf_r+0x220>
 80175bc:	89ab      	ldrh	r3, [r5, #12]
 80175be:	059a      	lsls	r2, r3, #22
 80175c0:	d402      	bmi.n	80175c8 <_vfiprintf_r+0x220>
 80175c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80175c4:	f7ff fba6 	bl	8016d14 <__retarget_lock_release_recursive>
 80175c8:	89ab      	ldrh	r3, [r5, #12]
 80175ca:	065b      	lsls	r3, r3, #25
 80175cc:	f53f af12 	bmi.w	80173f4 <_vfiprintf_r+0x4c>
 80175d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80175d2:	e711      	b.n	80173f8 <_vfiprintf_r+0x50>
 80175d4:	ab03      	add	r3, sp, #12
 80175d6:	9300      	str	r3, [sp, #0]
 80175d8:	462a      	mov	r2, r5
 80175da:	4b09      	ldr	r3, [pc, #36]	; (8017600 <_vfiprintf_r+0x258>)
 80175dc:	a904      	add	r1, sp, #16
 80175de:	4630      	mov	r0, r6
 80175e0:	f000 f880 	bl	80176e4 <_printf_i>
 80175e4:	e7e4      	b.n	80175b0 <_vfiprintf_r+0x208>
 80175e6:	bf00      	nop
 80175e8:	0801b374 	.word	0x0801b374
 80175ec:	0801b394 	.word	0x0801b394
 80175f0:	0801b354 	.word	0x0801b354
 80175f4:	0801b46a 	.word	0x0801b46a
 80175f8:	0801b474 	.word	0x0801b474
 80175fc:	00000000 	.word	0x00000000
 8017600:	08017383 	.word	0x08017383
 8017604:	0801b470 	.word	0x0801b470

08017608 <_printf_common>:
 8017608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801760c:	4616      	mov	r6, r2
 801760e:	4699      	mov	r9, r3
 8017610:	688a      	ldr	r2, [r1, #8]
 8017612:	690b      	ldr	r3, [r1, #16]
 8017614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017618:	4293      	cmp	r3, r2
 801761a:	bfb8      	it	lt
 801761c:	4613      	movlt	r3, r2
 801761e:	6033      	str	r3, [r6, #0]
 8017620:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017624:	4607      	mov	r7, r0
 8017626:	460c      	mov	r4, r1
 8017628:	b10a      	cbz	r2, 801762e <_printf_common+0x26>
 801762a:	3301      	adds	r3, #1
 801762c:	6033      	str	r3, [r6, #0]
 801762e:	6823      	ldr	r3, [r4, #0]
 8017630:	0699      	lsls	r1, r3, #26
 8017632:	bf42      	ittt	mi
 8017634:	6833      	ldrmi	r3, [r6, #0]
 8017636:	3302      	addmi	r3, #2
 8017638:	6033      	strmi	r3, [r6, #0]
 801763a:	6825      	ldr	r5, [r4, #0]
 801763c:	f015 0506 	ands.w	r5, r5, #6
 8017640:	d106      	bne.n	8017650 <_printf_common+0x48>
 8017642:	f104 0a19 	add.w	sl, r4, #25
 8017646:	68e3      	ldr	r3, [r4, #12]
 8017648:	6832      	ldr	r2, [r6, #0]
 801764a:	1a9b      	subs	r3, r3, r2
 801764c:	42ab      	cmp	r3, r5
 801764e:	dc26      	bgt.n	801769e <_printf_common+0x96>
 8017650:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017654:	1e13      	subs	r3, r2, #0
 8017656:	6822      	ldr	r2, [r4, #0]
 8017658:	bf18      	it	ne
 801765a:	2301      	movne	r3, #1
 801765c:	0692      	lsls	r2, r2, #26
 801765e:	d42b      	bmi.n	80176b8 <_printf_common+0xb0>
 8017660:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017664:	4649      	mov	r1, r9
 8017666:	4638      	mov	r0, r7
 8017668:	47c0      	blx	r8
 801766a:	3001      	adds	r0, #1
 801766c:	d01e      	beq.n	80176ac <_printf_common+0xa4>
 801766e:	6823      	ldr	r3, [r4, #0]
 8017670:	68e5      	ldr	r5, [r4, #12]
 8017672:	6832      	ldr	r2, [r6, #0]
 8017674:	f003 0306 	and.w	r3, r3, #6
 8017678:	2b04      	cmp	r3, #4
 801767a:	bf08      	it	eq
 801767c:	1aad      	subeq	r5, r5, r2
 801767e:	68a3      	ldr	r3, [r4, #8]
 8017680:	6922      	ldr	r2, [r4, #16]
 8017682:	bf0c      	ite	eq
 8017684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017688:	2500      	movne	r5, #0
 801768a:	4293      	cmp	r3, r2
 801768c:	bfc4      	itt	gt
 801768e:	1a9b      	subgt	r3, r3, r2
 8017690:	18ed      	addgt	r5, r5, r3
 8017692:	2600      	movs	r6, #0
 8017694:	341a      	adds	r4, #26
 8017696:	42b5      	cmp	r5, r6
 8017698:	d11a      	bne.n	80176d0 <_printf_common+0xc8>
 801769a:	2000      	movs	r0, #0
 801769c:	e008      	b.n	80176b0 <_printf_common+0xa8>
 801769e:	2301      	movs	r3, #1
 80176a0:	4652      	mov	r2, sl
 80176a2:	4649      	mov	r1, r9
 80176a4:	4638      	mov	r0, r7
 80176a6:	47c0      	blx	r8
 80176a8:	3001      	adds	r0, #1
 80176aa:	d103      	bne.n	80176b4 <_printf_common+0xac>
 80176ac:	f04f 30ff 	mov.w	r0, #4294967295
 80176b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176b4:	3501      	adds	r5, #1
 80176b6:	e7c6      	b.n	8017646 <_printf_common+0x3e>
 80176b8:	18e1      	adds	r1, r4, r3
 80176ba:	1c5a      	adds	r2, r3, #1
 80176bc:	2030      	movs	r0, #48	; 0x30
 80176be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80176c2:	4422      	add	r2, r4
 80176c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80176c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80176cc:	3302      	adds	r3, #2
 80176ce:	e7c7      	b.n	8017660 <_printf_common+0x58>
 80176d0:	2301      	movs	r3, #1
 80176d2:	4622      	mov	r2, r4
 80176d4:	4649      	mov	r1, r9
 80176d6:	4638      	mov	r0, r7
 80176d8:	47c0      	blx	r8
 80176da:	3001      	adds	r0, #1
 80176dc:	d0e6      	beq.n	80176ac <_printf_common+0xa4>
 80176de:	3601      	adds	r6, #1
 80176e0:	e7d9      	b.n	8017696 <_printf_common+0x8e>
	...

080176e4 <_printf_i>:
 80176e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80176e8:	460c      	mov	r4, r1
 80176ea:	4691      	mov	r9, r2
 80176ec:	7e27      	ldrb	r7, [r4, #24]
 80176ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80176f0:	2f78      	cmp	r7, #120	; 0x78
 80176f2:	4680      	mov	r8, r0
 80176f4:	469a      	mov	sl, r3
 80176f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80176fa:	d807      	bhi.n	801770c <_printf_i+0x28>
 80176fc:	2f62      	cmp	r7, #98	; 0x62
 80176fe:	d80a      	bhi.n	8017716 <_printf_i+0x32>
 8017700:	2f00      	cmp	r7, #0
 8017702:	f000 80d8 	beq.w	80178b6 <_printf_i+0x1d2>
 8017706:	2f58      	cmp	r7, #88	; 0x58
 8017708:	f000 80a3 	beq.w	8017852 <_printf_i+0x16e>
 801770c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017710:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017714:	e03a      	b.n	801778c <_printf_i+0xa8>
 8017716:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801771a:	2b15      	cmp	r3, #21
 801771c:	d8f6      	bhi.n	801770c <_printf_i+0x28>
 801771e:	a001      	add	r0, pc, #4	; (adr r0, 8017724 <_printf_i+0x40>)
 8017720:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017724:	0801777d 	.word	0x0801777d
 8017728:	08017791 	.word	0x08017791
 801772c:	0801770d 	.word	0x0801770d
 8017730:	0801770d 	.word	0x0801770d
 8017734:	0801770d 	.word	0x0801770d
 8017738:	0801770d 	.word	0x0801770d
 801773c:	08017791 	.word	0x08017791
 8017740:	0801770d 	.word	0x0801770d
 8017744:	0801770d 	.word	0x0801770d
 8017748:	0801770d 	.word	0x0801770d
 801774c:	0801770d 	.word	0x0801770d
 8017750:	0801789d 	.word	0x0801789d
 8017754:	080177c1 	.word	0x080177c1
 8017758:	0801787f 	.word	0x0801787f
 801775c:	0801770d 	.word	0x0801770d
 8017760:	0801770d 	.word	0x0801770d
 8017764:	080178bf 	.word	0x080178bf
 8017768:	0801770d 	.word	0x0801770d
 801776c:	080177c1 	.word	0x080177c1
 8017770:	0801770d 	.word	0x0801770d
 8017774:	0801770d 	.word	0x0801770d
 8017778:	08017887 	.word	0x08017887
 801777c:	680b      	ldr	r3, [r1, #0]
 801777e:	1d1a      	adds	r2, r3, #4
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	600a      	str	r2, [r1, #0]
 8017784:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801778c:	2301      	movs	r3, #1
 801778e:	e0a3      	b.n	80178d8 <_printf_i+0x1f4>
 8017790:	6825      	ldr	r5, [r4, #0]
 8017792:	6808      	ldr	r0, [r1, #0]
 8017794:	062e      	lsls	r6, r5, #24
 8017796:	f100 0304 	add.w	r3, r0, #4
 801779a:	d50a      	bpl.n	80177b2 <_printf_i+0xce>
 801779c:	6805      	ldr	r5, [r0, #0]
 801779e:	600b      	str	r3, [r1, #0]
 80177a0:	2d00      	cmp	r5, #0
 80177a2:	da03      	bge.n	80177ac <_printf_i+0xc8>
 80177a4:	232d      	movs	r3, #45	; 0x2d
 80177a6:	426d      	negs	r5, r5
 80177a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80177ac:	485e      	ldr	r0, [pc, #376]	; (8017928 <_printf_i+0x244>)
 80177ae:	230a      	movs	r3, #10
 80177b0:	e019      	b.n	80177e6 <_printf_i+0x102>
 80177b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80177b6:	6805      	ldr	r5, [r0, #0]
 80177b8:	600b      	str	r3, [r1, #0]
 80177ba:	bf18      	it	ne
 80177bc:	b22d      	sxthne	r5, r5
 80177be:	e7ef      	b.n	80177a0 <_printf_i+0xbc>
 80177c0:	680b      	ldr	r3, [r1, #0]
 80177c2:	6825      	ldr	r5, [r4, #0]
 80177c4:	1d18      	adds	r0, r3, #4
 80177c6:	6008      	str	r0, [r1, #0]
 80177c8:	0628      	lsls	r0, r5, #24
 80177ca:	d501      	bpl.n	80177d0 <_printf_i+0xec>
 80177cc:	681d      	ldr	r5, [r3, #0]
 80177ce:	e002      	b.n	80177d6 <_printf_i+0xf2>
 80177d0:	0669      	lsls	r1, r5, #25
 80177d2:	d5fb      	bpl.n	80177cc <_printf_i+0xe8>
 80177d4:	881d      	ldrh	r5, [r3, #0]
 80177d6:	4854      	ldr	r0, [pc, #336]	; (8017928 <_printf_i+0x244>)
 80177d8:	2f6f      	cmp	r7, #111	; 0x6f
 80177da:	bf0c      	ite	eq
 80177dc:	2308      	moveq	r3, #8
 80177de:	230a      	movne	r3, #10
 80177e0:	2100      	movs	r1, #0
 80177e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80177e6:	6866      	ldr	r6, [r4, #4]
 80177e8:	60a6      	str	r6, [r4, #8]
 80177ea:	2e00      	cmp	r6, #0
 80177ec:	bfa2      	ittt	ge
 80177ee:	6821      	ldrge	r1, [r4, #0]
 80177f0:	f021 0104 	bicge.w	r1, r1, #4
 80177f4:	6021      	strge	r1, [r4, #0]
 80177f6:	b90d      	cbnz	r5, 80177fc <_printf_i+0x118>
 80177f8:	2e00      	cmp	r6, #0
 80177fa:	d04d      	beq.n	8017898 <_printf_i+0x1b4>
 80177fc:	4616      	mov	r6, r2
 80177fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8017802:	fb03 5711 	mls	r7, r3, r1, r5
 8017806:	5dc7      	ldrb	r7, [r0, r7]
 8017808:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801780c:	462f      	mov	r7, r5
 801780e:	42bb      	cmp	r3, r7
 8017810:	460d      	mov	r5, r1
 8017812:	d9f4      	bls.n	80177fe <_printf_i+0x11a>
 8017814:	2b08      	cmp	r3, #8
 8017816:	d10b      	bne.n	8017830 <_printf_i+0x14c>
 8017818:	6823      	ldr	r3, [r4, #0]
 801781a:	07df      	lsls	r7, r3, #31
 801781c:	d508      	bpl.n	8017830 <_printf_i+0x14c>
 801781e:	6923      	ldr	r3, [r4, #16]
 8017820:	6861      	ldr	r1, [r4, #4]
 8017822:	4299      	cmp	r1, r3
 8017824:	bfde      	ittt	le
 8017826:	2330      	movle	r3, #48	; 0x30
 8017828:	f806 3c01 	strble.w	r3, [r6, #-1]
 801782c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017830:	1b92      	subs	r2, r2, r6
 8017832:	6122      	str	r2, [r4, #16]
 8017834:	f8cd a000 	str.w	sl, [sp]
 8017838:	464b      	mov	r3, r9
 801783a:	aa03      	add	r2, sp, #12
 801783c:	4621      	mov	r1, r4
 801783e:	4640      	mov	r0, r8
 8017840:	f7ff fee2 	bl	8017608 <_printf_common>
 8017844:	3001      	adds	r0, #1
 8017846:	d14c      	bne.n	80178e2 <_printf_i+0x1fe>
 8017848:	f04f 30ff 	mov.w	r0, #4294967295
 801784c:	b004      	add	sp, #16
 801784e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017852:	4835      	ldr	r0, [pc, #212]	; (8017928 <_printf_i+0x244>)
 8017854:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017858:	6823      	ldr	r3, [r4, #0]
 801785a:	680e      	ldr	r6, [r1, #0]
 801785c:	061f      	lsls	r7, r3, #24
 801785e:	f856 5b04 	ldr.w	r5, [r6], #4
 8017862:	600e      	str	r6, [r1, #0]
 8017864:	d514      	bpl.n	8017890 <_printf_i+0x1ac>
 8017866:	07d9      	lsls	r1, r3, #31
 8017868:	bf44      	itt	mi
 801786a:	f043 0320 	orrmi.w	r3, r3, #32
 801786e:	6023      	strmi	r3, [r4, #0]
 8017870:	b91d      	cbnz	r5, 801787a <_printf_i+0x196>
 8017872:	6823      	ldr	r3, [r4, #0]
 8017874:	f023 0320 	bic.w	r3, r3, #32
 8017878:	6023      	str	r3, [r4, #0]
 801787a:	2310      	movs	r3, #16
 801787c:	e7b0      	b.n	80177e0 <_printf_i+0xfc>
 801787e:	6823      	ldr	r3, [r4, #0]
 8017880:	f043 0320 	orr.w	r3, r3, #32
 8017884:	6023      	str	r3, [r4, #0]
 8017886:	2378      	movs	r3, #120	; 0x78
 8017888:	4828      	ldr	r0, [pc, #160]	; (801792c <_printf_i+0x248>)
 801788a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801788e:	e7e3      	b.n	8017858 <_printf_i+0x174>
 8017890:	065e      	lsls	r6, r3, #25
 8017892:	bf48      	it	mi
 8017894:	b2ad      	uxthmi	r5, r5
 8017896:	e7e6      	b.n	8017866 <_printf_i+0x182>
 8017898:	4616      	mov	r6, r2
 801789a:	e7bb      	b.n	8017814 <_printf_i+0x130>
 801789c:	680b      	ldr	r3, [r1, #0]
 801789e:	6826      	ldr	r6, [r4, #0]
 80178a0:	6960      	ldr	r0, [r4, #20]
 80178a2:	1d1d      	adds	r5, r3, #4
 80178a4:	600d      	str	r5, [r1, #0]
 80178a6:	0635      	lsls	r5, r6, #24
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	d501      	bpl.n	80178b0 <_printf_i+0x1cc>
 80178ac:	6018      	str	r0, [r3, #0]
 80178ae:	e002      	b.n	80178b6 <_printf_i+0x1d2>
 80178b0:	0671      	lsls	r1, r6, #25
 80178b2:	d5fb      	bpl.n	80178ac <_printf_i+0x1c8>
 80178b4:	8018      	strh	r0, [r3, #0]
 80178b6:	2300      	movs	r3, #0
 80178b8:	6123      	str	r3, [r4, #16]
 80178ba:	4616      	mov	r6, r2
 80178bc:	e7ba      	b.n	8017834 <_printf_i+0x150>
 80178be:	680b      	ldr	r3, [r1, #0]
 80178c0:	1d1a      	adds	r2, r3, #4
 80178c2:	600a      	str	r2, [r1, #0]
 80178c4:	681e      	ldr	r6, [r3, #0]
 80178c6:	6862      	ldr	r2, [r4, #4]
 80178c8:	2100      	movs	r1, #0
 80178ca:	4630      	mov	r0, r6
 80178cc:	f7e8 fd08 	bl	80002e0 <memchr>
 80178d0:	b108      	cbz	r0, 80178d6 <_printf_i+0x1f2>
 80178d2:	1b80      	subs	r0, r0, r6
 80178d4:	6060      	str	r0, [r4, #4]
 80178d6:	6863      	ldr	r3, [r4, #4]
 80178d8:	6123      	str	r3, [r4, #16]
 80178da:	2300      	movs	r3, #0
 80178dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80178e0:	e7a8      	b.n	8017834 <_printf_i+0x150>
 80178e2:	6923      	ldr	r3, [r4, #16]
 80178e4:	4632      	mov	r2, r6
 80178e6:	4649      	mov	r1, r9
 80178e8:	4640      	mov	r0, r8
 80178ea:	47d0      	blx	sl
 80178ec:	3001      	adds	r0, #1
 80178ee:	d0ab      	beq.n	8017848 <_printf_i+0x164>
 80178f0:	6823      	ldr	r3, [r4, #0]
 80178f2:	079b      	lsls	r3, r3, #30
 80178f4:	d413      	bmi.n	801791e <_printf_i+0x23a>
 80178f6:	68e0      	ldr	r0, [r4, #12]
 80178f8:	9b03      	ldr	r3, [sp, #12]
 80178fa:	4298      	cmp	r0, r3
 80178fc:	bfb8      	it	lt
 80178fe:	4618      	movlt	r0, r3
 8017900:	e7a4      	b.n	801784c <_printf_i+0x168>
 8017902:	2301      	movs	r3, #1
 8017904:	4632      	mov	r2, r6
 8017906:	4649      	mov	r1, r9
 8017908:	4640      	mov	r0, r8
 801790a:	47d0      	blx	sl
 801790c:	3001      	adds	r0, #1
 801790e:	d09b      	beq.n	8017848 <_printf_i+0x164>
 8017910:	3501      	adds	r5, #1
 8017912:	68e3      	ldr	r3, [r4, #12]
 8017914:	9903      	ldr	r1, [sp, #12]
 8017916:	1a5b      	subs	r3, r3, r1
 8017918:	42ab      	cmp	r3, r5
 801791a:	dcf2      	bgt.n	8017902 <_printf_i+0x21e>
 801791c:	e7eb      	b.n	80178f6 <_printf_i+0x212>
 801791e:	2500      	movs	r5, #0
 8017920:	f104 0619 	add.w	r6, r4, #25
 8017924:	e7f5      	b.n	8017912 <_printf_i+0x22e>
 8017926:	bf00      	nop
 8017928:	0801b47b 	.word	0x0801b47b
 801792c:	0801b48c 	.word	0x0801b48c

08017930 <_read_r>:
 8017930:	b538      	push	{r3, r4, r5, lr}
 8017932:	4d07      	ldr	r5, [pc, #28]	; (8017950 <_read_r+0x20>)
 8017934:	4604      	mov	r4, r0
 8017936:	4608      	mov	r0, r1
 8017938:	4611      	mov	r1, r2
 801793a:	2200      	movs	r2, #0
 801793c:	602a      	str	r2, [r5, #0]
 801793e:	461a      	mov	r2, r3
 8017940:	f7e9 f84c 	bl	80009dc <_read>
 8017944:	1c43      	adds	r3, r0, #1
 8017946:	d102      	bne.n	801794e <_read_r+0x1e>
 8017948:	682b      	ldr	r3, [r5, #0]
 801794a:	b103      	cbz	r3, 801794e <_read_r+0x1e>
 801794c:	6023      	str	r3, [r4, #0]
 801794e:	bd38      	pop	{r3, r4, r5, pc}
 8017950:	24007fb4 	.word	0x24007fb4

08017954 <__swbuf_r>:
 8017954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017956:	460e      	mov	r6, r1
 8017958:	4614      	mov	r4, r2
 801795a:	4605      	mov	r5, r0
 801795c:	b118      	cbz	r0, 8017966 <__swbuf_r+0x12>
 801795e:	6983      	ldr	r3, [r0, #24]
 8017960:	b90b      	cbnz	r3, 8017966 <__swbuf_r+0x12>
 8017962:	f7ff f913 	bl	8016b8c <__sinit>
 8017966:	4b21      	ldr	r3, [pc, #132]	; (80179ec <__swbuf_r+0x98>)
 8017968:	429c      	cmp	r4, r3
 801796a:	d12b      	bne.n	80179c4 <__swbuf_r+0x70>
 801796c:	686c      	ldr	r4, [r5, #4]
 801796e:	69a3      	ldr	r3, [r4, #24]
 8017970:	60a3      	str	r3, [r4, #8]
 8017972:	89a3      	ldrh	r3, [r4, #12]
 8017974:	071a      	lsls	r2, r3, #28
 8017976:	d52f      	bpl.n	80179d8 <__swbuf_r+0x84>
 8017978:	6923      	ldr	r3, [r4, #16]
 801797a:	b36b      	cbz	r3, 80179d8 <__swbuf_r+0x84>
 801797c:	6923      	ldr	r3, [r4, #16]
 801797e:	6820      	ldr	r0, [r4, #0]
 8017980:	1ac0      	subs	r0, r0, r3
 8017982:	6963      	ldr	r3, [r4, #20]
 8017984:	b2f6      	uxtb	r6, r6
 8017986:	4283      	cmp	r3, r0
 8017988:	4637      	mov	r7, r6
 801798a:	dc04      	bgt.n	8017996 <__swbuf_r+0x42>
 801798c:	4621      	mov	r1, r4
 801798e:	4628      	mov	r0, r5
 8017990:	f7ff fc1c 	bl	80171cc <_fflush_r>
 8017994:	bb30      	cbnz	r0, 80179e4 <__swbuf_r+0x90>
 8017996:	68a3      	ldr	r3, [r4, #8]
 8017998:	3b01      	subs	r3, #1
 801799a:	60a3      	str	r3, [r4, #8]
 801799c:	6823      	ldr	r3, [r4, #0]
 801799e:	1c5a      	adds	r2, r3, #1
 80179a0:	6022      	str	r2, [r4, #0]
 80179a2:	701e      	strb	r6, [r3, #0]
 80179a4:	6963      	ldr	r3, [r4, #20]
 80179a6:	3001      	adds	r0, #1
 80179a8:	4283      	cmp	r3, r0
 80179aa:	d004      	beq.n	80179b6 <__swbuf_r+0x62>
 80179ac:	89a3      	ldrh	r3, [r4, #12]
 80179ae:	07db      	lsls	r3, r3, #31
 80179b0:	d506      	bpl.n	80179c0 <__swbuf_r+0x6c>
 80179b2:	2e0a      	cmp	r6, #10
 80179b4:	d104      	bne.n	80179c0 <__swbuf_r+0x6c>
 80179b6:	4621      	mov	r1, r4
 80179b8:	4628      	mov	r0, r5
 80179ba:	f7ff fc07 	bl	80171cc <_fflush_r>
 80179be:	b988      	cbnz	r0, 80179e4 <__swbuf_r+0x90>
 80179c0:	4638      	mov	r0, r7
 80179c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179c4:	4b0a      	ldr	r3, [pc, #40]	; (80179f0 <__swbuf_r+0x9c>)
 80179c6:	429c      	cmp	r4, r3
 80179c8:	d101      	bne.n	80179ce <__swbuf_r+0x7a>
 80179ca:	68ac      	ldr	r4, [r5, #8]
 80179cc:	e7cf      	b.n	801796e <__swbuf_r+0x1a>
 80179ce:	4b09      	ldr	r3, [pc, #36]	; (80179f4 <__swbuf_r+0xa0>)
 80179d0:	429c      	cmp	r4, r3
 80179d2:	bf08      	it	eq
 80179d4:	68ec      	ldreq	r4, [r5, #12]
 80179d6:	e7ca      	b.n	801796e <__swbuf_r+0x1a>
 80179d8:	4621      	mov	r1, r4
 80179da:	4628      	mov	r0, r5
 80179dc:	f000 f80c 	bl	80179f8 <__swsetup_r>
 80179e0:	2800      	cmp	r0, #0
 80179e2:	d0cb      	beq.n	801797c <__swbuf_r+0x28>
 80179e4:	f04f 37ff 	mov.w	r7, #4294967295
 80179e8:	e7ea      	b.n	80179c0 <__swbuf_r+0x6c>
 80179ea:	bf00      	nop
 80179ec:	0801b374 	.word	0x0801b374
 80179f0:	0801b394 	.word	0x0801b394
 80179f4:	0801b354 	.word	0x0801b354

080179f8 <__swsetup_r>:
 80179f8:	4b32      	ldr	r3, [pc, #200]	; (8017ac4 <__swsetup_r+0xcc>)
 80179fa:	b570      	push	{r4, r5, r6, lr}
 80179fc:	681d      	ldr	r5, [r3, #0]
 80179fe:	4606      	mov	r6, r0
 8017a00:	460c      	mov	r4, r1
 8017a02:	b125      	cbz	r5, 8017a0e <__swsetup_r+0x16>
 8017a04:	69ab      	ldr	r3, [r5, #24]
 8017a06:	b913      	cbnz	r3, 8017a0e <__swsetup_r+0x16>
 8017a08:	4628      	mov	r0, r5
 8017a0a:	f7ff f8bf 	bl	8016b8c <__sinit>
 8017a0e:	4b2e      	ldr	r3, [pc, #184]	; (8017ac8 <__swsetup_r+0xd0>)
 8017a10:	429c      	cmp	r4, r3
 8017a12:	d10f      	bne.n	8017a34 <__swsetup_r+0x3c>
 8017a14:	686c      	ldr	r4, [r5, #4]
 8017a16:	89a3      	ldrh	r3, [r4, #12]
 8017a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a1c:	0719      	lsls	r1, r3, #28
 8017a1e:	d42c      	bmi.n	8017a7a <__swsetup_r+0x82>
 8017a20:	06dd      	lsls	r5, r3, #27
 8017a22:	d411      	bmi.n	8017a48 <__swsetup_r+0x50>
 8017a24:	2309      	movs	r3, #9
 8017a26:	6033      	str	r3, [r6, #0]
 8017a28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017a2c:	81a3      	strh	r3, [r4, #12]
 8017a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8017a32:	e03e      	b.n	8017ab2 <__swsetup_r+0xba>
 8017a34:	4b25      	ldr	r3, [pc, #148]	; (8017acc <__swsetup_r+0xd4>)
 8017a36:	429c      	cmp	r4, r3
 8017a38:	d101      	bne.n	8017a3e <__swsetup_r+0x46>
 8017a3a:	68ac      	ldr	r4, [r5, #8]
 8017a3c:	e7eb      	b.n	8017a16 <__swsetup_r+0x1e>
 8017a3e:	4b24      	ldr	r3, [pc, #144]	; (8017ad0 <__swsetup_r+0xd8>)
 8017a40:	429c      	cmp	r4, r3
 8017a42:	bf08      	it	eq
 8017a44:	68ec      	ldreq	r4, [r5, #12]
 8017a46:	e7e6      	b.n	8017a16 <__swsetup_r+0x1e>
 8017a48:	0758      	lsls	r0, r3, #29
 8017a4a:	d512      	bpl.n	8017a72 <__swsetup_r+0x7a>
 8017a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a4e:	b141      	cbz	r1, 8017a62 <__swsetup_r+0x6a>
 8017a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a54:	4299      	cmp	r1, r3
 8017a56:	d002      	beq.n	8017a5e <__swsetup_r+0x66>
 8017a58:	4630      	mov	r0, r6
 8017a5a:	f7ff fc2b 	bl	80172b4 <_free_r>
 8017a5e:	2300      	movs	r3, #0
 8017a60:	6363      	str	r3, [r4, #52]	; 0x34
 8017a62:	89a3      	ldrh	r3, [r4, #12]
 8017a64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017a68:	81a3      	strh	r3, [r4, #12]
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	6063      	str	r3, [r4, #4]
 8017a6e:	6923      	ldr	r3, [r4, #16]
 8017a70:	6023      	str	r3, [r4, #0]
 8017a72:	89a3      	ldrh	r3, [r4, #12]
 8017a74:	f043 0308 	orr.w	r3, r3, #8
 8017a78:	81a3      	strh	r3, [r4, #12]
 8017a7a:	6923      	ldr	r3, [r4, #16]
 8017a7c:	b94b      	cbnz	r3, 8017a92 <__swsetup_r+0x9a>
 8017a7e:	89a3      	ldrh	r3, [r4, #12]
 8017a80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a88:	d003      	beq.n	8017a92 <__swsetup_r+0x9a>
 8017a8a:	4621      	mov	r1, r4
 8017a8c:	4630      	mov	r0, r6
 8017a8e:	f000 f84d 	bl	8017b2c <__smakebuf_r>
 8017a92:	89a0      	ldrh	r0, [r4, #12]
 8017a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a98:	f010 0301 	ands.w	r3, r0, #1
 8017a9c:	d00a      	beq.n	8017ab4 <__swsetup_r+0xbc>
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	60a3      	str	r3, [r4, #8]
 8017aa2:	6963      	ldr	r3, [r4, #20]
 8017aa4:	425b      	negs	r3, r3
 8017aa6:	61a3      	str	r3, [r4, #24]
 8017aa8:	6923      	ldr	r3, [r4, #16]
 8017aaa:	b943      	cbnz	r3, 8017abe <__swsetup_r+0xc6>
 8017aac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017ab0:	d1ba      	bne.n	8017a28 <__swsetup_r+0x30>
 8017ab2:	bd70      	pop	{r4, r5, r6, pc}
 8017ab4:	0781      	lsls	r1, r0, #30
 8017ab6:	bf58      	it	pl
 8017ab8:	6963      	ldrpl	r3, [r4, #20]
 8017aba:	60a3      	str	r3, [r4, #8]
 8017abc:	e7f4      	b.n	8017aa8 <__swsetup_r+0xb0>
 8017abe:	2000      	movs	r0, #0
 8017ac0:	e7f7      	b.n	8017ab2 <__swsetup_r+0xba>
 8017ac2:	bf00      	nop
 8017ac4:	24000034 	.word	0x24000034
 8017ac8:	0801b374 	.word	0x0801b374
 8017acc:	0801b394 	.word	0x0801b394
 8017ad0:	0801b354 	.word	0x0801b354

08017ad4 <abort>:
 8017ad4:	b508      	push	{r3, lr}
 8017ad6:	2006      	movs	r0, #6
 8017ad8:	f000 f890 	bl	8017bfc <raise>
 8017adc:	2001      	movs	r0, #1
 8017ade:	f7e8 ff73 	bl	80009c8 <_exit>

08017ae2 <__swhatbuf_r>:
 8017ae2:	b570      	push	{r4, r5, r6, lr}
 8017ae4:	460e      	mov	r6, r1
 8017ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017aea:	2900      	cmp	r1, #0
 8017aec:	b096      	sub	sp, #88	; 0x58
 8017aee:	4614      	mov	r4, r2
 8017af0:	461d      	mov	r5, r3
 8017af2:	da07      	bge.n	8017b04 <__swhatbuf_r+0x22>
 8017af4:	2300      	movs	r3, #0
 8017af6:	602b      	str	r3, [r5, #0]
 8017af8:	89b3      	ldrh	r3, [r6, #12]
 8017afa:	061a      	lsls	r2, r3, #24
 8017afc:	d410      	bmi.n	8017b20 <__swhatbuf_r+0x3e>
 8017afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017b02:	e00e      	b.n	8017b22 <__swhatbuf_r+0x40>
 8017b04:	466a      	mov	r2, sp
 8017b06:	f000 f895 	bl	8017c34 <_fstat_r>
 8017b0a:	2800      	cmp	r0, #0
 8017b0c:	dbf2      	blt.n	8017af4 <__swhatbuf_r+0x12>
 8017b0e:	9a01      	ldr	r2, [sp, #4]
 8017b10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017b14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017b18:	425a      	negs	r2, r3
 8017b1a:	415a      	adcs	r2, r3
 8017b1c:	602a      	str	r2, [r5, #0]
 8017b1e:	e7ee      	b.n	8017afe <__swhatbuf_r+0x1c>
 8017b20:	2340      	movs	r3, #64	; 0x40
 8017b22:	2000      	movs	r0, #0
 8017b24:	6023      	str	r3, [r4, #0]
 8017b26:	b016      	add	sp, #88	; 0x58
 8017b28:	bd70      	pop	{r4, r5, r6, pc}
	...

08017b2c <__smakebuf_r>:
 8017b2c:	898b      	ldrh	r3, [r1, #12]
 8017b2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017b30:	079d      	lsls	r5, r3, #30
 8017b32:	4606      	mov	r6, r0
 8017b34:	460c      	mov	r4, r1
 8017b36:	d507      	bpl.n	8017b48 <__smakebuf_r+0x1c>
 8017b38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017b3c:	6023      	str	r3, [r4, #0]
 8017b3e:	6123      	str	r3, [r4, #16]
 8017b40:	2301      	movs	r3, #1
 8017b42:	6163      	str	r3, [r4, #20]
 8017b44:	b002      	add	sp, #8
 8017b46:	bd70      	pop	{r4, r5, r6, pc}
 8017b48:	ab01      	add	r3, sp, #4
 8017b4a:	466a      	mov	r2, sp
 8017b4c:	f7ff ffc9 	bl	8017ae2 <__swhatbuf_r>
 8017b50:	9900      	ldr	r1, [sp, #0]
 8017b52:	4605      	mov	r5, r0
 8017b54:	4630      	mov	r0, r6
 8017b56:	f7ff f903 	bl	8016d60 <_malloc_r>
 8017b5a:	b948      	cbnz	r0, 8017b70 <__smakebuf_r+0x44>
 8017b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b60:	059a      	lsls	r2, r3, #22
 8017b62:	d4ef      	bmi.n	8017b44 <__smakebuf_r+0x18>
 8017b64:	f023 0303 	bic.w	r3, r3, #3
 8017b68:	f043 0302 	orr.w	r3, r3, #2
 8017b6c:	81a3      	strh	r3, [r4, #12]
 8017b6e:	e7e3      	b.n	8017b38 <__smakebuf_r+0xc>
 8017b70:	4b0d      	ldr	r3, [pc, #52]	; (8017ba8 <__smakebuf_r+0x7c>)
 8017b72:	62b3      	str	r3, [r6, #40]	; 0x28
 8017b74:	89a3      	ldrh	r3, [r4, #12]
 8017b76:	6020      	str	r0, [r4, #0]
 8017b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b7c:	81a3      	strh	r3, [r4, #12]
 8017b7e:	9b00      	ldr	r3, [sp, #0]
 8017b80:	6163      	str	r3, [r4, #20]
 8017b82:	9b01      	ldr	r3, [sp, #4]
 8017b84:	6120      	str	r0, [r4, #16]
 8017b86:	b15b      	cbz	r3, 8017ba0 <__smakebuf_r+0x74>
 8017b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b8c:	4630      	mov	r0, r6
 8017b8e:	f000 f863 	bl	8017c58 <_isatty_r>
 8017b92:	b128      	cbz	r0, 8017ba0 <__smakebuf_r+0x74>
 8017b94:	89a3      	ldrh	r3, [r4, #12]
 8017b96:	f023 0303 	bic.w	r3, r3, #3
 8017b9a:	f043 0301 	orr.w	r3, r3, #1
 8017b9e:	81a3      	strh	r3, [r4, #12]
 8017ba0:	89a0      	ldrh	r0, [r4, #12]
 8017ba2:	4305      	orrs	r5, r0
 8017ba4:	81a5      	strh	r5, [r4, #12]
 8017ba6:	e7cd      	b.n	8017b44 <__smakebuf_r+0x18>
 8017ba8:	08016b25 	.word	0x08016b25

08017bac <_raise_r>:
 8017bac:	291f      	cmp	r1, #31
 8017bae:	b538      	push	{r3, r4, r5, lr}
 8017bb0:	4604      	mov	r4, r0
 8017bb2:	460d      	mov	r5, r1
 8017bb4:	d904      	bls.n	8017bc0 <_raise_r+0x14>
 8017bb6:	2316      	movs	r3, #22
 8017bb8:	6003      	str	r3, [r0, #0]
 8017bba:	f04f 30ff 	mov.w	r0, #4294967295
 8017bbe:	bd38      	pop	{r3, r4, r5, pc}
 8017bc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017bc2:	b112      	cbz	r2, 8017bca <_raise_r+0x1e>
 8017bc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017bc8:	b94b      	cbnz	r3, 8017bde <_raise_r+0x32>
 8017bca:	4620      	mov	r0, r4
 8017bcc:	f000 f830 	bl	8017c30 <_getpid_r>
 8017bd0:	462a      	mov	r2, r5
 8017bd2:	4601      	mov	r1, r0
 8017bd4:	4620      	mov	r0, r4
 8017bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017bda:	f000 b817 	b.w	8017c0c <_kill_r>
 8017bde:	2b01      	cmp	r3, #1
 8017be0:	d00a      	beq.n	8017bf8 <_raise_r+0x4c>
 8017be2:	1c59      	adds	r1, r3, #1
 8017be4:	d103      	bne.n	8017bee <_raise_r+0x42>
 8017be6:	2316      	movs	r3, #22
 8017be8:	6003      	str	r3, [r0, #0]
 8017bea:	2001      	movs	r0, #1
 8017bec:	e7e7      	b.n	8017bbe <_raise_r+0x12>
 8017bee:	2400      	movs	r4, #0
 8017bf0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017bf4:	4628      	mov	r0, r5
 8017bf6:	4798      	blx	r3
 8017bf8:	2000      	movs	r0, #0
 8017bfa:	e7e0      	b.n	8017bbe <_raise_r+0x12>

08017bfc <raise>:
 8017bfc:	4b02      	ldr	r3, [pc, #8]	; (8017c08 <raise+0xc>)
 8017bfe:	4601      	mov	r1, r0
 8017c00:	6818      	ldr	r0, [r3, #0]
 8017c02:	f7ff bfd3 	b.w	8017bac <_raise_r>
 8017c06:	bf00      	nop
 8017c08:	24000034 	.word	0x24000034

08017c0c <_kill_r>:
 8017c0c:	b538      	push	{r3, r4, r5, lr}
 8017c0e:	4d07      	ldr	r5, [pc, #28]	; (8017c2c <_kill_r+0x20>)
 8017c10:	2300      	movs	r3, #0
 8017c12:	4604      	mov	r4, r0
 8017c14:	4608      	mov	r0, r1
 8017c16:	4611      	mov	r1, r2
 8017c18:	602b      	str	r3, [r5, #0]
 8017c1a:	f7e8 fec3 	bl	80009a4 <_kill>
 8017c1e:	1c43      	adds	r3, r0, #1
 8017c20:	d102      	bne.n	8017c28 <_kill_r+0x1c>
 8017c22:	682b      	ldr	r3, [r5, #0]
 8017c24:	b103      	cbz	r3, 8017c28 <_kill_r+0x1c>
 8017c26:	6023      	str	r3, [r4, #0]
 8017c28:	bd38      	pop	{r3, r4, r5, pc}
 8017c2a:	bf00      	nop
 8017c2c:	24007fb4 	.word	0x24007fb4

08017c30 <_getpid_r>:
 8017c30:	f7e8 beb0 	b.w	8000994 <_getpid>

08017c34 <_fstat_r>:
 8017c34:	b538      	push	{r3, r4, r5, lr}
 8017c36:	4d07      	ldr	r5, [pc, #28]	; (8017c54 <_fstat_r+0x20>)
 8017c38:	2300      	movs	r3, #0
 8017c3a:	4604      	mov	r4, r0
 8017c3c:	4608      	mov	r0, r1
 8017c3e:	4611      	mov	r1, r2
 8017c40:	602b      	str	r3, [r5, #0]
 8017c42:	f7e8 ff10 	bl	8000a66 <_fstat>
 8017c46:	1c43      	adds	r3, r0, #1
 8017c48:	d102      	bne.n	8017c50 <_fstat_r+0x1c>
 8017c4a:	682b      	ldr	r3, [r5, #0]
 8017c4c:	b103      	cbz	r3, 8017c50 <_fstat_r+0x1c>
 8017c4e:	6023      	str	r3, [r4, #0]
 8017c50:	bd38      	pop	{r3, r4, r5, pc}
 8017c52:	bf00      	nop
 8017c54:	24007fb4 	.word	0x24007fb4

08017c58 <_isatty_r>:
 8017c58:	b538      	push	{r3, r4, r5, lr}
 8017c5a:	4d06      	ldr	r5, [pc, #24]	; (8017c74 <_isatty_r+0x1c>)
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	4604      	mov	r4, r0
 8017c60:	4608      	mov	r0, r1
 8017c62:	602b      	str	r3, [r5, #0]
 8017c64:	f7e8 ff0f 	bl	8000a86 <_isatty>
 8017c68:	1c43      	adds	r3, r0, #1
 8017c6a:	d102      	bne.n	8017c72 <_isatty_r+0x1a>
 8017c6c:	682b      	ldr	r3, [r5, #0]
 8017c6e:	b103      	cbz	r3, 8017c72 <_isatty_r+0x1a>
 8017c70:	6023      	str	r3, [r4, #0]
 8017c72:	bd38      	pop	{r3, r4, r5, pc}
 8017c74:	24007fb4 	.word	0x24007fb4

08017c78 <_init>:
 8017c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c7a:	bf00      	nop
 8017c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c7e:	bc08      	pop	{r3}
 8017c80:	469e      	mov	lr, r3
 8017c82:	4770      	bx	lr

08017c84 <_fini>:
 8017c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c86:	bf00      	nop
 8017c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c8a:	bc08      	pop	{r3}
 8017c8c:	469e      	mov	lr, r3
 8017c8e:	4770      	bx	lr
